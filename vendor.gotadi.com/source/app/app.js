function cfgWinSizeVNPayQR(cfg) {
    var newWidth = $(window).width();
    var newHeight = $(window).height();
    if (newWidth < 900)
        cfg.width = newWidth;
    if (newHeight > 600)
        cfg.width = newHeight;

    return cfg;
}

function vnpay_snippet(settings) {
    var cfg = {
        width: 768,
        height: 490,
        url: "#"
    };
    $("#vnpay_modal").hide();
    cfg = $.extend({}, cfg, settings);
    cfg = cfgWinSizeVNPayQR(cfg);
    var iframe, modal, content, method, overlay;
    content = $('<div id="vnpay_content" class="vnpay_content" allowfullscreen></div>');
    iframe = $('<iframe id="vnpay_frame" />');
    var script = document.createElement('script');
    document.getElementsByTagName('body')[0].appendChild(script);
    script.onload = function() {
        iframe.attr("src", cfg.url);
    }
    script.onerror = function() {
        alert('Hi?n t?i dang c� l?i k?t n?i v?i VNPAY vui l�ng th? l?i sau ho?c g?i h? tr? d? du?c gi�p d?!');
    }
    script.setAttribute('src', cfg.url);


    //set style for iframe
    iframe.css("border", "none");
    iframe.css({
        height: cfg.height - 14 || 'auto',
        position: 'absolute'
    });
    content.empty().append(iframe);
    content.css({
        width: cfg.width - 14 || 'auto'
    });
    content.css("cssText", "height: " + cfg.height + "px !important;");
    overlay = $("#vnpay_modal");
    overlay.after(content);
}

function detectmob() {
    if (navigator.userAgent.match(/Android/i) ||
        navigator.userAgent.match(/webOS/i) ||
        navigator.userAgent.match(/iPhone/i) ||
        navigator.userAgent.match(/iPad/i) ||
        navigator.userAgent.match(/iPod/i) ||
        navigator.userAgent.match(/BlackBerry/i) ||
        navigator.userAgent.match(/Windows Phone/i)
    ) {
        return true;
    } else {
        return false;
    }
}
/*!
 * @fileOverview TouchSwipe - jQuery Plugin
 * @version 1.6.17
 *
 * @author Matt Bryson http://www.github.com/mattbryson
 * @see https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
 * @see http://labs.rampinteractive.co.uk/touchSwipe/
 * @see http://plugins.jquery.com/project/touchSwipe
 * @license
 * Copyright (c) 2010-2015 Matt Bryson
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 */
! function(factory) {
    "function" == typeof define && define.amd && define.amd.jQuery ? define(["jquery"], factory) : factory("undefined" != typeof module && module.exports ? require("jquery") : jQuery)
}(function($) {
    "use strict";

    function init(options) {
        return !options || void 0 !== options.allowPageScroll || void 0 === options.swipe && void 0 === options.swipeStatus || (options.allowPageScroll = NONE), void 0 !== options.click && void 0 === options.tap && (options.tap = options.click), options || (options = {}), options = $.extend({}, $.fn.swipe.defaults, options), this.each(function() {
            var $this = $(this),
                plugin = $this.data(PLUGIN_NS);
            plugin || (plugin = new TouchSwipe(this, options), $this.data(PLUGIN_NS, plugin))
        })
    }

    function TouchSwipe(element, options) {
        function touchStart(jqEvent) {
            if (!(getTouchInProgress() || $(jqEvent.target).closest(options.excludedElements, $element).length > 0)) {
                var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;
                if (!event.pointerType || "mouse" != event.pointerType || 0 != options.fallbackToMouseEvents) {
                    var ret, touches = event.touches,
                        evt = touches ? touches[0] : event;
                    return phase = PHASE_START, touches ? fingerCount = touches.length : options.preventDefaultEvents !== !1 && jqEvent.preventDefault(), distance = 0, direction = null, currentDirection = null, pinchDirection = null, duration = 0, startTouchesDistance = 0, endTouchesDistance = 0, pinchZoom = 1, pinchDistance = 0, maximumsMap = createMaximumsData(), cancelMultiFingerRelease(), createFingerData(0, evt), !touches || fingerCount === options.fingers || options.fingers === ALL_FINGERS || hasPinches() ? (startTime = getTimeStamp(), 2 == fingerCount && (createFingerData(1, touches[1]), startTouchesDistance = endTouchesDistance = calculateTouchesDistance(fingerData[0].start, fingerData[1].start)), (options.swipeStatus || options.pinchStatus) && (ret = triggerHandler(event, phase))) : ret = !1, ret === !1 ? (phase = PHASE_CANCEL, triggerHandler(event, phase), ret) : (options.hold && (holdTimeout = setTimeout($.proxy(function() {
                        $element.trigger("hold", [event.target]), options.hold && (ret = options.hold.call($element, event, event.target))
                    }, this), options.longTapThreshold)), setTouchInProgress(!0), null)
                }
            }
        }

        function touchMove(jqEvent) {
            var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;
            if (phase !== PHASE_END && phase !== PHASE_CANCEL && !inMultiFingerRelease()) {
                var ret, touches = event.touches,
                    evt = touches ? touches[0] : event,
                    currentFinger = updateFingerData(evt);
                if (endTime = getTimeStamp(), touches && (fingerCount = touches.length), options.hold && clearTimeout(holdTimeout), phase = PHASE_MOVE, 2 == fingerCount && (0 == startTouchesDistance ? (createFingerData(1, touches[1]), startTouchesDistance = endTouchesDistance = calculateTouchesDistance(fingerData[0].start, fingerData[1].start)) : (updateFingerData(touches[1]), endTouchesDistance = calculateTouchesDistance(fingerData[0].end, fingerData[1].end), pinchDirection = calculatePinchDirection(fingerData[0].end, fingerData[1].end)), pinchZoom = calculatePinchZoom(startTouchesDistance, endTouchesDistance), pinchDistance = Math.abs(startTouchesDistance - endTouchesDistance)), fingerCount === options.fingers || options.fingers === ALL_FINGERS || !touches || hasPinches()) {
                    if (direction = calculateDirection(currentFinger.start, currentFinger.end), currentDirection = calculateDirection(currentFinger.last, currentFinger.end), validateDefaultEvent(jqEvent, currentDirection), distance = calculateDistance(currentFinger.start, currentFinger.end), duration = calculateDuration(), setMaxDistance(direction, distance), ret = triggerHandler(event, phase), !options.triggerOnTouchEnd || options.triggerOnTouchLeave) {
                        var inBounds = !0;
                        if (options.triggerOnTouchLeave) {
                            var bounds = getbounds(this);
                            inBounds = isInBounds(currentFinger.end, bounds)
                        }!options.triggerOnTouchEnd && inBounds ? phase = getNextPhase(PHASE_MOVE) : options.triggerOnTouchLeave && !inBounds && (phase = getNextPhase(PHASE_END)), phase != PHASE_CANCEL && phase != PHASE_END || triggerHandler(event, phase)
                    }
                } else phase = PHASE_CANCEL, triggerHandler(event, phase);
                ret === !1 && (phase = PHASE_CANCEL, triggerHandler(event, phase))
            }
        }

        function touchEnd(jqEvent) {
            var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent,
                touches = event.touches;
            if (touches) {
                if (touches.length && !inMultiFingerRelease()) return startMultiFingerRelease(event), !0;
                if (touches.length && inMultiFingerRelease()) return !0
            }
            return inMultiFingerRelease() && (fingerCount = fingerCountAtRelease), endTime = getTimeStamp(), duration = calculateDuration(), didSwipeBackToCancel() || !validateSwipeDistance() ? (phase = PHASE_CANCEL, triggerHandler(event, phase)) : options.triggerOnTouchEnd || options.triggerOnTouchEnd === !1 && phase === PHASE_MOVE ? (options.preventDefaultEvents !== !1 && jqEvent.preventDefault(), phase = PHASE_END, triggerHandler(event, phase)) : !options.triggerOnTouchEnd && hasTap() ? (phase = PHASE_END, triggerHandlerForGesture(event, phase, TAP)) : phase === PHASE_MOVE && (phase = PHASE_CANCEL, triggerHandler(event, phase)), setTouchInProgress(!1), null
        }

        function touchCancel() {
            fingerCount = 0, endTime = 0, startTime = 0, startTouchesDistance = 0, endTouchesDistance = 0, pinchZoom = 1, cancelMultiFingerRelease(), setTouchInProgress(!1)
        }

        function touchLeave(jqEvent) {
            var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;
            options.triggerOnTouchLeave && (phase = getNextPhase(PHASE_END), triggerHandler(event, phase))
        }

        function removeListeners() {
            $element.unbind(START_EV, touchStart), $element.unbind(CANCEL_EV, touchCancel), $element.unbind(MOVE_EV, touchMove), $element.unbind(END_EV, touchEnd), LEAVE_EV && $element.unbind(LEAVE_EV, touchLeave), setTouchInProgress(!1)
        }

        function getNextPhase(currentPhase) {
            var nextPhase = currentPhase,
                validTime = validateSwipeTime(),
                validDistance = validateSwipeDistance(),
                didCancel = didSwipeBackToCancel();
            return !validTime || didCancel ? nextPhase = PHASE_CANCEL : !validDistance || currentPhase != PHASE_MOVE || options.triggerOnTouchEnd && !options.triggerOnTouchLeave ? !validDistance && currentPhase == PHASE_END && options.triggerOnTouchLeave && (nextPhase = PHASE_CANCEL) : nextPhase = PHASE_END, nextPhase
        }

        function triggerHandler(event, phase) {
            var ret, touches = event.touches;
            return (didSwipe() || hasSwipes()) && (ret = triggerHandlerForGesture(event, phase, SWIPE)), (didPinch() || hasPinches()) && ret !== !1 && (ret = triggerHandlerForGesture(event, phase, PINCH)), didDoubleTap() && ret !== !1 ? ret = triggerHandlerForGesture(event, phase, DOUBLE_TAP) : didLongTap() && ret !== !1 ? ret = triggerHandlerForGesture(event, phase, LONG_TAP) : didTap() && ret !== !1 && (ret = triggerHandlerForGesture(event, phase, TAP)), phase === PHASE_CANCEL && touchCancel(event), phase === PHASE_END && (touches ? touches.length || touchCancel(event) : touchCancel(event)), ret
        }

        function triggerHandlerForGesture(event, phase, gesture) {
            var ret;
            if (gesture == SWIPE) {
                if ($element.trigger("swipeStatus", [phase, direction || null, distance || 0, duration || 0, fingerCount, fingerData, currentDirection]), options.swipeStatus && (ret = options.swipeStatus.call($element, event, phase, direction || null, distance || 0, duration || 0, fingerCount, fingerData, currentDirection), ret === !1)) return !1;
                if (phase == PHASE_END && validateSwipe()) {
                    if (clearTimeout(singleTapTimeout), clearTimeout(holdTimeout), $element.trigger("swipe", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipe && (ret = options.swipe.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection), ret === !1)) return !1;
                    switch (direction) {
                        case LEFT:
                            $element.trigger("swipeLeft", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeLeft && (ret = options.swipeLeft.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection));
                            break;
                        case RIGHT:
                            $element.trigger("swipeRight", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeRight && (ret = options.swipeRight.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection));
                            break;
                        case UP:
                            $element.trigger("swipeUp", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeUp && (ret = options.swipeUp.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection));
                            break;
                        case DOWN:
                            $element.trigger("swipeDown", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeDown && (ret = options.swipeDown.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection))
                    }
                }
            }
            if (gesture == PINCH) {
                if ($element.trigger("pinchStatus", [phase, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData]), options.pinchStatus && (ret = options.pinchStatus.call($element, event, phase, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData), ret === !1)) return !1;
                if (phase == PHASE_END && validatePinch()) switch (pinchDirection) {
                    case IN:
                        $element.trigger("pinchIn", [pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData]), options.pinchIn && (ret = options.pinchIn.call($element, event, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData));
                        break;
                    case OUT:
                        $element.trigger("pinchOut", [pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData]), options.pinchOut && (ret = options.pinchOut.call($element, event, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData))
                }
            }
            return gesture == TAP ? phase !== PHASE_CANCEL && phase !== PHASE_END || (clearTimeout(singleTapTimeout), clearTimeout(holdTimeout), hasDoubleTap() && !inDoubleTap() ? (doubleTapStartTime = getTimeStamp(), singleTapTimeout = setTimeout($.proxy(function() {
                doubleTapStartTime = null, $element.trigger("tap", [event.target]), options.tap && (ret = options.tap.call($element, event, event.target))
            }, this), options.doubleTapThreshold)) : (doubleTapStartTime = null, $element.trigger("tap", [event.target]), options.tap && (ret = options.tap.call($element, event, event.target)))) : gesture == DOUBLE_TAP ? phase !== PHASE_CANCEL && phase !== PHASE_END || (clearTimeout(singleTapTimeout), clearTimeout(holdTimeout), doubleTapStartTime = null, $element.trigger("doubletap", [event.target]), options.doubleTap && (ret = options.doubleTap.call($element, event, event.target))) : gesture == LONG_TAP && (phase !== PHASE_CANCEL && phase !== PHASE_END || (clearTimeout(singleTapTimeout), doubleTapStartTime = null, $element.trigger("longtap", [event.target]), options.longTap && (ret = options.longTap.call($element, event, event.target)))), ret
        }

        function validateSwipeDistance() {
            var valid = !0;
            return null !== options.threshold && (valid = distance >= options.threshold), valid
        }

        function didSwipeBackToCancel() {
            var cancelled = !1;
            return null !== options.cancelThreshold && null !== direction && (cancelled = getMaxDistance(direction) - distance >= options.cancelThreshold), cancelled
        }

        function validatePinchDistance() {
            return null !== options.pinchThreshold ? pinchDistance >= options.pinchThreshold : !0
        }

        function validateSwipeTime() {
            var result;
            return result = options.maxTimeThreshold ? !(duration >= options.maxTimeThreshold) : !0
        }

        function validateDefaultEvent(jqEvent, direction) {
            if (options.preventDefaultEvents !== !1)
                if (options.allowPageScroll === NONE) jqEvent.preventDefault();
                else {
                    var auto = options.allowPageScroll === AUTO;
                    switch (direction) {
                        case LEFT:
                            (options.swipeLeft && auto || !auto && options.allowPageScroll != HORIZONTAL) && jqEvent.preventDefault();
                            break;
                        case RIGHT:
                            (options.swipeRight && auto || !auto && options.allowPageScroll != HORIZONTAL) && jqEvent.preventDefault();
                            break;
                        case UP:
                            (options.swipeUp && auto || !auto && options.allowPageScroll != VERTICAL) && jqEvent.preventDefault();
                            break;
                        case DOWN:
                            (options.swipeDown && auto || !auto && options.allowPageScroll != VERTICAL) && jqEvent.preventDefault();
                            break;
                        case NONE:
                    }
                }
        }

        function validatePinch() {
            var hasCorrectFingerCount = validateFingers(),
                hasEndPoint = validateEndPoint(),
                hasCorrectDistance = validatePinchDistance();
            return hasCorrectFingerCount && hasEndPoint && hasCorrectDistance
        }

        function hasPinches() {
            return !!(options.pinchStatus || options.pinchIn || options.pinchOut)
        }

        function didPinch() {
            return !(!validatePinch() || !hasPinches())
        }

        function validateSwipe() {
            var hasValidTime = validateSwipeTime(),
                hasValidDistance = validateSwipeDistance(),
                hasCorrectFingerCount = validateFingers(),
                hasEndPoint = validateEndPoint(),
                didCancel = didSwipeBackToCancel(),
                valid = !didCancel && hasEndPoint && hasCorrectFingerCount && hasValidDistance && hasValidTime;
            return valid
        }

        function hasSwipes() {
            return !!(options.swipe || options.swipeStatus || options.swipeLeft || options.swipeRight || options.swipeUp || options.swipeDown)
        }

        function didSwipe() {
            return !(!validateSwipe() || !hasSwipes())
        }

        function validateFingers() {
            return fingerCount === options.fingers || options.fingers === ALL_FINGERS || !SUPPORTS_TOUCH
        }

        function validateEndPoint() {
            return 0 !== fingerData[0].end.x
        }

        function hasTap() {
            return !!options.tap
        }

        function hasDoubleTap() {
            return !!options.doubleTap
        }

        function hasLongTap() {
            return !!options.longTap
        }

        function validateDoubleTap() {
            if (null == doubleTapStartTime) return !1;
            var now = getTimeStamp();
            return hasDoubleTap() && now - doubleTapStartTime <= options.doubleTapThreshold
        }

        function inDoubleTap() {
            return validateDoubleTap()
        }

        function validateTap() {
            return (1 === fingerCount || !SUPPORTS_TOUCH) && (isNaN(distance) || distance < options.threshold)
        }

        function validateLongTap() {
            return duration > options.longTapThreshold && DOUBLE_TAP_THRESHOLD > distance
        }

        function didTap() {
            return !(!validateTap() || !hasTap())
        }

        function didDoubleTap() {
            return !(!validateDoubleTap() || !hasDoubleTap())
        }

        function didLongTap() {
            return !(!validateLongTap() || !hasLongTap())
        }

        function startMultiFingerRelease(event) {
            previousTouchEndTime = getTimeStamp(), fingerCountAtRelease = event.touches.length + 1
        }

        function cancelMultiFingerRelease() {
            previousTouchEndTime = 0, fingerCountAtRelease = 0
        }

        function inMultiFingerRelease() {
            var withinThreshold = !1;
            if (previousTouchEndTime) {
                var diff = getTimeStamp() - previousTouchEndTime;
                diff <= options.fingerReleaseThreshold && (withinThreshold = !0)
            }
            return withinThreshold
        }

        function getTouchInProgress() {
            return !($element.data(PLUGIN_NS + "_intouch") !== !0)
        }

        function setTouchInProgress(val) {
            $element && (val === !0 ? ($element.bind(MOVE_EV, touchMove), $element.bind(END_EV, touchEnd), LEAVE_EV && $element.bind(LEAVE_EV, touchLeave)) : ($element.unbind(MOVE_EV, touchMove, !1), $element.unbind(END_EV, touchEnd, !1), LEAVE_EV && $element.unbind(LEAVE_EV, touchLeave, !1)), $element.data(PLUGIN_NS + "_intouch", val === !0))
        }

        function createFingerData(id, evt) {
            var f = {
                start: {
                    x: 0,
                    y: 0
                },
                last: {
                    x: 0,
                    y: 0
                },
                end: {
                    x: 0,
                    y: 0
                }
            };
            return f.start.x = f.last.x = f.end.x = evt.pageX || evt.clientX, f.start.y = f.last.y = f.end.y = evt.pageY || evt.clientY, fingerData[id] = f, f
        }

        function updateFingerData(evt) {
            var id = void 0 !== evt.identifier ? evt.identifier : 0,
                f = getFingerData(id);
            return null === f && (f = createFingerData(id, evt)), f.last.x = f.end.x, f.last.y = f.end.y, f.end.x = evt.pageX || evt.clientX, f.end.y = evt.pageY || evt.clientY, f
        }

        function getFingerData(id) {
            return fingerData[id] || null
        }

        function setMaxDistance(direction, distance) {
            direction != NONE && (distance = Math.max(distance, getMaxDistance(direction)), maximumsMap[direction].distance = distance)
        }

        function getMaxDistance(direction) {
            return maximumsMap[direction] ? maximumsMap[direction].distance : void 0
        }

        function createMaximumsData() {
            var maxData = {};
            return maxData[LEFT] = createMaximumVO(LEFT), maxData[RIGHT] = createMaximumVO(RIGHT), maxData[UP] = createMaximumVO(UP), maxData[DOWN] = createMaximumVO(DOWN), maxData
        }

        function createMaximumVO(dir) {
            return {
                direction: dir,
                distance: 0
            }
        }

        function calculateDuration() {
            return endTime - startTime
        }

        function calculateTouchesDistance(startPoint, endPoint) {
            var diffX = Math.abs(startPoint.x - endPoint.x),
                diffY = Math.abs(startPoint.y - endPoint.y);
            return Math.round(Math.sqrt(diffX * diffX + diffY * diffY))
        }

        function calculatePinchZoom(startDistance, endDistance) {
            var percent = endDistance / startDistance * 1;
            return percent.toFixed(2)
        }

        function calculatePinchDirection() {
            return 1 > pinchZoom ? OUT : IN
        }

        function calculateDistance(startPoint, endPoint) {
            return Math.round(Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2)))
        }

        function calculateAngle(startPoint, endPoint) {
            var x = startPoint.x - endPoint.x,
                y = endPoint.y - startPoint.y,
                r = Math.atan2(y, x),
                angle = Math.round(180 * r / Math.PI);
            return 0 > angle && (angle = 360 - Math.abs(angle)), angle
        }

        function calculateDirection(startPoint, endPoint) {
            if (comparePoints(startPoint, endPoint)) return NONE;
            var angle = calculateAngle(startPoint, endPoint);
            return 45 >= angle && angle >= 0 ? LEFT : 360 >= angle && angle >= 315 ? LEFT : angle >= 135 && 225 >= angle ? RIGHT : angle > 45 && 135 > angle ? DOWN : UP
        }

        function getTimeStamp() {
            var now = new Date;
            return now.getTime()
        }

        function getbounds(el) {
            el = $(el);
            var offset = el.offset(),
                bounds = {
                    left: offset.left,
                    right: offset.left + el.outerWidth(),
                    top: offset.top,
                    bottom: offset.top + el.outerHeight()
                };
            return bounds
        }

        function isInBounds(point, bounds) {
            return point.x > bounds.left && point.x < bounds.right && point.y > bounds.top && point.y < bounds.bottom
        }

        function comparePoints(pointA, pointB) {
            return pointA.x == pointB.x && pointA.y == pointB.y
        }
        var options = $.extend({}, options),
            useTouchEvents = SUPPORTS_TOUCH || SUPPORTS_POINTER || !options.fallbackToMouseEvents,
            START_EV = useTouchEvents ? SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? "MSPointerDown" : "pointerdown" : "touchstart" : "mousedown",
            MOVE_EV = useTouchEvents ? SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? "MSPointerMove" : "pointermove" : "touchmove" : "mousemove",
            END_EV = useTouchEvents ? SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? "MSPointerUp" : "pointerup" : "touchend" : "mouseup",
            LEAVE_EV = useTouchEvents ? SUPPORTS_POINTER ? "mouseleave" : null : "mouseleave",
            CANCEL_EV = SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? "MSPointerCancel" : "pointercancel" : "touchcancel",
            distance = 0,
            direction = null,
            currentDirection = null,
            duration = 0,
            startTouchesDistance = 0,
            endTouchesDistance = 0,
            pinchZoom = 1,
            pinchDistance = 0,
            pinchDirection = 0,
            maximumsMap = null,
            $element = $(element),
            phase = "start",
            fingerCount = 0,
            fingerData = {},
            startTime = 0,
            endTime = 0,
            previousTouchEndTime = 0,
            fingerCountAtRelease = 0,
            doubleTapStartTime = 0,
            singleTapTimeout = null,
            holdTimeout = null;
        try {
            $element.bind(START_EV, touchStart), $element.bind(CANCEL_EV, touchCancel)
        } catch (e) {
            $.error("events not supported " + START_EV + "," + CANCEL_EV + " on jQuery.swipe")
        }
        this.enable = function() {
            return this.disable(), $element.bind(START_EV, touchStart), $element.bind(CANCEL_EV, touchCancel), $element
        }, this.disable = function() {
            return removeListeners(), $element
        }, this.destroy = function() {
            removeListeners(), $element.data(PLUGIN_NS, null), $element = null
        }, this.option = function(property, value) {
            if ("object" == typeof property) options = $.extend(options, property);
            else if (void 0 !== options[property]) {
                if (void 0 === value) return options[property];
                options[property] = value
            } else {
                if (!property) return options;
                $.error("Option " + property + " does not exist on jQuery.swipe.options")
            }
            return null
        }
    }
    var VERSION = "1.6.17",
        LEFT = "left",
        RIGHT = "right",
        UP = "up",
        DOWN = "down",
        IN = "in",
        OUT = "out",
        NONE = "none",
        AUTO = "auto",
        SWIPE = "swipe",
        PINCH = "pinch",
        TAP = "tap",
        DOUBLE_TAP = "doubletap",
        LONG_TAP = "longtap",
        HORIZONTAL = "horizontal",
        VERTICAL = "vertical",
        ALL_FINGERS = "all",
        DOUBLE_TAP_THRESHOLD = 10,
        PHASE_START = "start",
        PHASE_MOVE = "move",
        PHASE_END = "end",
        PHASE_CANCEL = "cancel",
        SUPPORTS_TOUCH = "ontouchstart" in window,
        SUPPORTS_POINTER_IE10 = window.navigator.msPointerEnabled && !window.navigator.pointerEnabled && !SUPPORTS_TOUCH,
        SUPPORTS_POINTER = (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) && !SUPPORTS_TOUCH,
        PLUGIN_NS = "TouchSwipe",
        defaults = {
            fingers: 1,
            threshold: 75,
            cancelThreshold: null,
            pinchThreshold: 20,
            maxTimeThreshold: null,
            fingerReleaseThreshold: 250,
            longTapThreshold: 500,
            doubleTapThreshold: 200,
            swipe: null,
            swipeLeft: null,
            swipeRight: null,
            swipeUp: null,
            swipeDown: null,
            swipeStatus: null,
            pinchIn: null,
            pinchOut: null,
            pinchStatus: null,
            click: null,
            tap: null,
            doubleTap: null,
            longTap: null,
            hold: null,
            triggerOnTouchEnd: !0,
            triggerOnTouchLeave: !1,
            allowPageScroll: "auto",
            fallbackToMouseEvents: !0,
            excludedElements: ".noSwipe",
            preventDefaultEvents: !0
        };
    $.fn.swipe = function(method) {
        var $this = $(this),
            plugin = $this.data(PLUGIN_NS);
        if (plugin && "string" == typeof method) {
            if (plugin[method]) return plugin[method].apply(plugin, Array.prototype.slice.call(arguments, 1));
            $.error("Method " + method + " does not exist on jQuery.swipe")
        } else if (plugin && "object" == typeof method) plugin.option.apply(plugin, arguments);
        else if (!(plugin || "object" != typeof method && method)) return init.apply(this, arguments);
        return $this
    }, $.fn.swipe.version = VERSION, $.fn.swipe.defaults = defaults, $.fn.swipe.phases = {
        PHASE_START: PHASE_START,
        PHASE_MOVE: PHASE_MOVE,
        PHASE_END: PHASE_END,
        PHASE_CANCEL: PHASE_CANCEL
    }, $.fn.swipe.directions = {
        LEFT: LEFT,
        RIGHT: RIGHT,
        UP: UP,
        DOWN: DOWN,
        IN: IN,
        OUT: OUT
    }, $.fn.swipe.pageScroll = {
        NONE: NONE,
        HORIZONTAL: HORIZONTAL,
        VERTICAL: VERTICAL,
        AUTO: AUTO
    }, $.fn.swipe.fingers = {
        ONE: 1,
        TWO: 2,
        THREE: 3,
        FOUR: 4,
        FIVE: 5,
        ALL: ALL_FINGERS
    }
});
! function(e, s, t, n) {
    "use strict";
    e.fn.slideAndSwipe = function(s) {
        function t(e, s, t, n) {
            "start" == s && (r = a.hasClass("ssm-nav-visible") ? 0 : l);
            var o;
            "move" == s && "left" == t ? (o = 0 > r ? r - n : -n, i(o, 0)) : "move" == s && "right" == t ? (o = 0 > r ? r + n : n, i(o, 0)) : "cancel" == s && "left" == t && 0 === r ? i(0, d.speed) : "end" == s && "left" == t ? v() : "end" != s && "cancel" != s || "right" != t || console.log("end")
        }

        function n() {
            return /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor)
        }

        function o() {
            return /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor)
        }

        function i(s, t) {
            a.css("transition-duration", (t / 1e3).toFixed(1) + "s"), s >= 0 && (s = 0), l >= s && (s = l - 25), n() || o() ? a.css("-webkit-transform", "translate(" + s + "px,0)") : a.css("transform", "translate(" + s + "px,0)"), "0" == s && (e(".ssm-toggle-nav").addClass("ssm-nav-visible"), e("html").css("overflow", "hidden"), e(".ssm-overlay").fadeIn())
        }
        var a = e(this),
            l = -a.outerWidth(),
            r = l,
            d = e.extend({
                triggerOnTouchEnd: !0,
                swipeStatus: t,
                allowPageScroll: "vertical",
                threshold: 100,
                excludedElements: "label, button, input, select, textarea, .noSwipe",
                speed: 250
            }, s);
        a.swipe(d);
        var v = function() {
                a.removeClass("ssm-nav-visible"), i(l, d.speed), e("html").css("overflow", "visible"), e(".ssm-overlay").fadeOut()
            },
            c = function() {
                a.addClass("ssm-nav-visible"), i(0, d.speed)
            };
        e(".ssm-toggle-nav").click(function() {
            a.hasClass("ssm-nav-visible") ? v() : c()
        })
    }
}(window.jQuery || window.$, document, window), "undefined" != typeof module && module.exports && (module.exports = slideAndSwipe);
/*! iFrame Resizer (iframeSizer.contentWindow.min.js) - v3.5.15 - 2017-10-15
 *  Desc: Include this file in any page being loaded into an iframe
 *        to force the iframe to resize to the content size.
 *  Requires: iframeResizer.min.js on host page.
 *  Copyright: (c) 2017 David J. Bradshaw - dave@bradshaw.net
 *  License: MIT
 */

! function(a) {
    "use strict";

    function b(a, b, c) {
        "addEventListener" in window ? a.addEventListener(b, c, !1) : "attachEvent" in window && a.attachEvent("on" + b, c)
    }

    function c(a, b, c) {
        "removeEventListener" in window ? a.removeEventListener(b, c, !1) : "detachEvent" in window && a.detachEvent("on" + b, c)
    }

    function d(a) {
        return a.charAt(0).toUpperCase() + a.slice(1)
    }

    function e(a) {
        var b, c, d, e = null,
            f = 0,
            g = function() {
                f = Ha(), e = null, d = a.apply(b, c), e || (b = c = null)
            };
        return function() {
            var h = Ha();
            f || (f = h);
            var i = xa - (h - f);
            return b = this, c = arguments, 0 >= i || i > xa ? (e && (clearTimeout(e), e = null), f = h, d = a.apply(b, c), e || (b = c = null)) : e || (e = setTimeout(g, i)), d
        }
    }

    function f(a) {
        return ma + "[" + oa + "] " + a
    }

    function g(a) {
        la && "object" == typeof window.console && console.log(f(a))
    }

    function h(a) {
        "object" == typeof window.console && console.warn(f(a))
    }

    function i() {
        j(), g("Initialising iFrame (" + location.href + ")"), k(), n(), m("background", W), m("padding", $), A(), s(), t(), o(), C(), u(), ia = B(), N("init", "Init message from host page"), Da()
    }

    function j() {
        function b(a) {
            return "true" === a ? !0 : !1
        }
        var c = ha.substr(na).split(":");
        oa = c[0], X = a !== c[1] ? Number(c[1]) : X, _ = a !== c[2] ? b(c[2]) : _, la = a !== c[3] ? b(c[3]) : la, ja = a !== c[4] ? Number(c[4]) : ja, U = a !== c[6] ? b(c[6]) : U, Y = c[7], fa = a !== c[8] ? c[8] : fa, W = c[9], $ = c[10], ua = a !== c[11] ? Number(c[11]) : ua, ia.enable = a !== c[12] ? b(c[12]) : !1, qa = a !== c[13] ? c[13] : qa, Aa = a !== c[14] ? c[14] : Aa
    }

    function k() {
        function a() {
            var a = window.iFrameResizer;
            g("Reading data from page: " + JSON.stringify(a)), Ca = "messageCallback" in a ? a.messageCallback : Ca, Da = "readyCallback" in a ? a.readyCallback : Da, ta = "targetOrigin" in a ? a.targetOrigin : ta, fa = "heightCalculationMethod" in a ? a.heightCalculationMethod : fa, Aa = "widthCalculationMethod" in a ? a.widthCalculationMethod : Aa
        }

        function b(a, b) {
            return "function" == typeof a && (g("Setup custom " + b + "CalcMethod"), Fa[b] = a, a = "custom"), a
        }
        "iFrameResizer" in window && Object === window.iFrameResizer.constructor && (a(), fa = b(fa, "height"), Aa = b(Aa, "width")), g("TargetOrigin for parent set to: " + ta)
    }

    function l(a, b) {
        return -1 !== b.indexOf("-") && (h("Negative CSS value ignored for " + a), b = ""), b
    }

    function m(b, c) {
        a !== c && "" !== c && "null" !== c && (document.body.style[b] = c, g("Body " + b + ' set to "' + c + '"'))
    }

    function n() {
        a === Y && (Y = X + "px"), m("margin", l("margin", Y))
    }

    function o() {
        document.documentElement.style.height = "", document.body.style.height = "", g('HTML & body height set to "auto"')
    }

    function p(a) {
        var e = {
            add: function(c) {
                function d() {
                    N(a.eventName, a.eventType)
                }
                Ga[c] = d, b(window, c, d)
            },
            remove: function(a) {
                var b = Ga[a];
                delete Ga[a], c(window, a, b)
            }
        };
        a.eventNames && Array.prototype.map ? (a.eventName = a.eventNames[0], a.eventNames.map(e[a.method])) : e[a.method](a.eventName), g(d(a.method) + " event listener: " + a.eventType)
    }

    function q(a) {
        p({
            method: a,
            eventType: "Animation Start",
            eventNames: ["animationstart", "webkitAnimationStart"]
        }), p({
            method: a,
            eventType: "Animation Iteration",
            eventNames: ["animationiteration", "webkitAnimationIteration"]
        }), p({
            method: a,
            eventType: "Animation End",
            eventNames: ["animationend", "webkitAnimationEnd"]
        }), p({
            method: a,
            eventType: "Input",
            eventName: "input"
        }), p({
            method: a,
            eventType: "Mouse Up",
            eventName: "mouseup"
        }), p({
            method: a,
            eventType: "Mouse Down",
            eventName: "mousedown"
        }), p({
            method: a,
            eventType: "Orientation Change",
            eventName: "orientationchange"
        }), p({
            method: a,
            eventType: "Print",
            eventName: ["afterprint", "beforeprint"]
        }), p({
            method: a,
            eventType: "Ready State Change",
            eventName: "readystatechange"
        }), p({
            method: a,
            eventType: "Touch Start",
            eventName: "touchstart"
        }), p({
            method: a,
            eventType: "Touch End",
            eventName: "touchend"
        }), p({
            method: a,
            eventType: "Touch Cancel",
            eventName: "touchcancel"
        }), p({
            method: a,
            eventType: "Transition Start",
            eventNames: ["transitionstart", "webkitTransitionStart", "MSTransitionStart", "oTransitionStart", "otransitionstart"]
        }), p({
            method: a,
            eventType: "Transition Iteration",
            eventNames: ["transitioniteration", "webkitTransitionIteration", "MSTransitionIteration", "oTransitionIteration", "otransitioniteration"]
        }), p({
            method: a,
            eventType: "Transition End",
            eventNames: ["transitionend", "webkitTransitionEnd", "MSTransitionEnd", "oTransitionEnd", "otransitionend"]
        }), "child" === qa && p({
            method: a,
            eventType: "IFrame Resized",
            eventName: "resize"
        })
    }

    function r(a, b, c, d) {
        return b !== a && (a in c || (h(a + " is not a valid option for " + d + "CalculationMethod."), a = b), g(d + ' calculation method set to "' + a + '"')), a
    }

    function s() {
        fa = r(fa, ea, Ia, "height")
    }

    function t() {
        Aa = r(Aa, za, Ja, "width")
    }

    function u() {
        !0 === U ? (q("add"), F()) : g("Auto Resize disabled")
    }

    function v() {
        g("Disable outgoing messages"), ra = !1
    }

    function w() {
        g("Remove event listener: Message"), c(window, "message", S)
    }

    function x() {
        null !== Z && Z.disconnect()
    }

    function y() {
        q("remove"), x(), clearInterval(ka)
    }

    function z() {
        v(), w(), !0 === U && y()
    }

    function A() {
        var a = document.createElement("div");
        a.style.clear = "both", a.style.display = "block", document.body.appendChild(a)
    }

    function B() {
        function c() {
            return {
                x: window.pageXOffset !== a ? window.pageXOffset : document.documentElement.scrollLeft,
                y: window.pageYOffset !== a ? window.pageYOffset : document.documentElement.scrollTop
            }
        }

        function d(a) {
            var b = a.getBoundingClientRect(),
                d = c();
            return {
                x: parseInt(b.left, 10) + parseInt(d.x, 10),
                y: parseInt(b.top, 10) + parseInt(d.y, 10)
            }
        }

        function e(b) {
            function c(a) {
                var b = d(a);
                g("Moving to in page link (#" + e + ") at x: " + b.x + " y: " + b.y), R(b.y, b.x, "scrollToOffset")
            }
            var e = b.split("#")[1] || b,
                f = decodeURIComponent(e),
                h = document.getElementById(f) || document.getElementsByName(f)[0];
            a !== h ? c(h) : (g("In page link (#" + e + ") not found in iFrame, so sending to parent"), R(0, 0, "inPageLink", "#" + e))
        }

        function f() {
            "" !== location.hash && "#" !== location.hash && e(location.href)
        }

        function i() {
            function a(a) {
                function c(a) {
                    a.preventDefault(), e(this.getAttribute("href"))
                }
                "#" !== a.getAttribute("href") && b(a, "click", c)
            }
            Array.prototype.forEach.call(document.querySelectorAll('a[href^="#"]'), a)
        }

        function j() {
            b(window, "hashchange", f)
        }

        function k() {
            setTimeout(f, ba)
        }

        function l() {
            Array.prototype.forEach && document.querySelectorAll ? (g("Setting up location.hash handlers"), i(), j(), k()) : h("In page linking not fully supported in this browser! (See README.md for IE8 workaround)")
        }
        return ia.enable ? l() : g("In page linking not enabled"), {
            findTarget: e
        }
    }

    function C() {
        g("Enable public methods"), Ba.parentIFrame = {
            autoResize: function(a) {
                return !0 === a && !1 === U ? (U = !0, u()) : !1 === a && !0 === U && (U = !1, y()), U
            },
            close: function() {
                R(0, 0, "close"), z()
            },
            getId: function() {
                return oa
            },
            getPageInfo: function(a) {
                "function" == typeof a ? (Ea = a, R(0, 0, "pageInfo")) : (Ea = function() {}, R(0, 0, "pageInfoStop"))
            },
            moveToAnchor: function(a) {
                ia.findTarget(a)
            },
            reset: function() {
                Q("parentIFrame.reset")
            },
            scrollTo: function(a, b) {
                R(b, a, "scrollTo")
            },
            scrollToOffset: function(a, b) {
                R(b, a, "scrollToOffset")
            },
            sendMessage: function(a, b) {
                R(0, 0, "message", JSON.stringify(a), b)
            },
            setHeightCalculationMethod: function(a) {
                fa = a, s()
            },
            setWidthCalculationMethod: function(a) {
                Aa = a, t()
            },
            setTargetOrigin: function(a) {
                g("Set targetOrigin: " + a), ta = a
            },
            size: function(a, b) {
                var c = "" + (a ? a : "") + (b ? "," + b : "");
                N("size", "parentIFrame.size(" + c + ")", a, b)
            }
        }
    }

    function D() {
        0 !== ja && (g("setInterval: " + ja + "ms"), ka = setInterval(function() {
            N("interval", "setInterval: " + ja)
        }, Math.abs(ja)))
    }

    function E() {
        function b(a) {
            function b(a) {
                !1 === a.complete && (g("Attach listeners to " + a.src), a.addEventListener("load", f, !1), a.addEventListener("error", h, !1), k.push(a))
            }
            "attributes" === a.type && "src" === a.attributeName ? b(a.target) : "childList" === a.type && Array.prototype.forEach.call(a.target.querySelectorAll("img"), b)
        }

        function c(a) {
            k.splice(k.indexOf(a), 1)
        }

        function d(a) {
            g("Remove listeners from " + a.src), a.removeEventListener("load", f, !1), a.removeEventListener("error", h, !1), c(a)
        }

        function e(b, c, e) {
            d(b.target), N(c, e + ": " + b.target.src, a, a)
        }

        function f(a) {
            e(a, "imageLoad", "Image loaded")
        }

        function h(a) {
            e(a, "imageLoadFailed", "Image load failed")
        }

        function i(a) {
            N("mutationObserver", "mutationObserver: " + a[0].target + " " + a[0].type), a.forEach(b)
        }

        function j() {
            var a = document.querySelector("body"),
                b = {
                    attributes: !0,
                    attributeOldValue: !1,
                    characterData: !0,
                    characterDataOldValue: !1,
                    childList: !0,
                    subtree: !0
                };
            return m = new l(i), g("Create body MutationObserver"), m.observe(a, b), m
        }
        var k = [],
            l = window.MutationObserver || window.WebKitMutationObserver,
            m = j();
        return {
            disconnect: function() {
                "disconnect" in m && (g("Disconnect body MutationObserver"), m.disconnect(), k.forEach(d))
            }
        }
    }

    function F() {
        var a = 0 > ja;
        window.MutationObserver || window.WebKitMutationObserver ? a ? D() : Z = E() : (g("MutationObserver not supported in this browser!"), D())
    }

    function G(a, b) {
        function c(a) {
            var c = /^\d+(px)?$/i;
            if (c.test(a)) return parseInt(a, V);
            var d = b.style.left,
                e = b.runtimeStyle.left;
            return b.runtimeStyle.left = b.currentStyle.left, b.style.left = a || 0, a = b.style.pixelLeft, b.style.left = d, b.runtimeStyle.left = e, a
        }
        var d = 0;
        return b = b || document.body, "defaultView" in document && "getComputedStyle" in document.defaultView ? (d = document.defaultView.getComputedStyle(b, null), d = null !== d ? d[a] : 0) : d = c(b.currentStyle[a]), parseInt(d, V)
    }

    function H(a) {
        a > xa / 2 && (xa = 2 * a, g("Event throttle increased to " + xa + "ms"))
    }

    function I(a, b) {
        for (var c = b.length, e = 0, f = 0, h = d(a), i = Ha(), j = 0; c > j; j++) e = b[j].getBoundingClientRect()[a] + G("margin" + h, b[j]), e > f && (f = e);
        return i = Ha() - i, g("Parsed " + c + " HTML elements"), g("Element position calculated in " + i + "ms"), H(i), f
    }

    function J(a) {
        return [a.bodyOffset(), a.bodyScroll(), a.documentElementOffset(), a.documentElementScroll()]
    }

    function K(a, b) {
        function c() {
            return h("No tagged elements (" + b + ") found on page"), document.querySelectorAll("body *")
        }
        var d = document.querySelectorAll("[" + b + "]");
        return 0 === d.length && c(), I(a, d)
    }

    function L() {
        return document.querySelectorAll("body *")
    }

    function M(b, c, d, e) {
        function f() {
            da = m, ya = n, R(da, ya, b)
        }

        function h() {
            function b(a, b) {
                var c = Math.abs(a - b) <= ua;
                return !c
            }
            return m = a !== d ? d : Ia[fa](), n = a !== e ? e : Ja[Aa](), b(da, m) || _ && b(ya, n)
        }

        function i() {
            return !(b in {
                init: 1,
                interval: 1,
                size: 1
            })
        }

        function j() {
            return fa in pa || _ && Aa in pa
        }

        function k() {
            g("No change in size detected")
        }

        function l() {
            i() && j() ? Q(c) : b in {
                interval: 1
            } || k()
        }
        var m, n;
        h() || "init" === b ? (O(), f()) : l()
    }

    function N(a, b, c, d) {
        function e() {
            a in {
                reset: 1,
                resetPage: 1,
                init: 1
            } || g("Trigger event: " + b)
        }

        function f() {
            return va && a in aa
        }
        f() ? g("Trigger event cancelled: " + a) : (e(), Ka(a, b, c, d))
    }

    function O() {
        va || (va = !0, g("Trigger event lock on")), clearTimeout(wa), wa = setTimeout(function() {
            va = !1, g("Trigger event lock off"), g("--")
        }, ba)
    }

    function P(a) {
        da = Ia[fa](), ya = Ja[Aa](), R(da, ya, a)
    }

    function Q(a) {
        var b = fa;
        fa = ea, g("Reset trigger event: " + a), O(), P("reset"), fa = b
    }

    function R(b, c, d, e, f) {
        function h() {
            a === f ? f = ta : g("Message targetOrigin: " + f)
        }

        function i() {
            var h = b + ":" + c,
                i = oa + ":" + h + ":" + d + (a !== e ? ":" + e : "");
            g("Sending message to host page (" + i + ")"), sa.postMessage(ma + i, f)
        }!0 === ra && (h(), i())
    }

    function S(a) {
        function c() {
            return ma === ("" + a.data).substr(0, na)
        }

        function d() {
            return a.data.split("]")[1].split(":")[0]
        }

        function e() {
            return a.data.substr(a.data.indexOf(":") + 1)
        }

        function f() {
            return !("undefined" != typeof module && module.exports) && "iFrameResize" in window
        }

        function j() {
            return a.data.split(":")[2] in {
                "true": 1,
                "false": 1
            }
        }

        function k() {
            var b = d();
            b in m ? m[b]() : f() || j() || h("Unexpected message (" + a.data + ")")
        }

        function l() {
            !1 === ca ? k() : j() ? m.init() : g('Ignored message of type "' + d() + '". Received before initialization.')
        }
        var m = {
            init: function() {
                function c() {
                    ha = a.data, sa = a.source, i(), ca = !1, setTimeout(function() {
                        ga = !1
                    }, ba)
                }
                "interactive" === document.readyState || "complete" === document.readyState ? c() : (g("Waiting for page ready"), b(window, "readystatechange", m.initFromParent))
            },
            reset: function() {
                ga ? g("Page reset ignored by init") : (g("Page size reset by host page"), P("resetPage"))
            },
            resize: function() {
                N("resizeParent", "Parent window requested size check")
            },
            moveToAnchor: function() {
                ia.findTarget(e())
            },
            inPageLink: function() {
                this.moveToAnchor()
            },
            pageInfo: function() {
                var a = e();
                g("PageInfoFromParent called from parent: " + a), Ea(JSON.parse(a)), g(" --")
            },
            message: function() {
                var a = e();
                g("MessageCallback called from parent: " + a), Ca(JSON.parse(a)), g(" --")
            }
        };
        c() && l()
    }

    function T() {
        "loading" !== document.readyState && window.parent.postMessage("[iFrameResizerChild]Ready", "*")
    }
    if ("undefined" != typeof window) {
        var U = !0,
            V = 10,
            W = "",
            X = 0,
            Y = "",
            Z = null,
            $ = "",
            _ = !1,
            aa = {
                resize: 1,
                click: 1
            },
            ba = 128,
            ca = !0,
            da = 1,
            ea = "bodyOffset",
            fa = ea,
            ga = !0,
            ha = "",
            ia = {},
            ja = 32,
            ka = null,
            la = !1,
            ma = "[iFrameSizer]",
            na = ma.length,
            oa = "",
            pa = {
                max: 1,
                min: 1,
                bodyScroll: 1,
                documentElementScroll: 1
            },
            qa = "child",
            ra = !0,
            sa = window.parent,
            ta = "*",
            ua = 0,
            va = !1,
            wa = null,
            xa = 16,
            ya = 1,
            za = "scroll",
            Aa = za,
            Ba = window,
            Ca = function() {
                h("MessageCallback function not defined")
            },
            Da = function() {},
            Ea = function() {},
            Fa = {
                height: function() {
                    return h("Custom height calculation function not defined"), document.documentElement.offsetHeight
                },
                width: function() {
                    return h("Custom width calculation function not defined"), document.body.scrollWidth
                }
            },
            Ga = {},
            Ha = Date.now || function() {
                return (new Date).getTime()
            },
            Ia = {
                bodyOffset: function() {
                    return document.body.offsetHeight + G("marginTop") + G("marginBottom")
                },
                offset: function() {
                    return Ia.bodyOffset()
                },
                bodyScroll: function() {
                    return document.body.scrollHeight
                },
                custom: function() {
                    return Fa.height()
                },
                documentElementOffset: function() {
                    return document.documentElement.offsetHeight
                },
                documentElementScroll: function() {
                    return document.documentElement.scrollHeight
                },
                max: function() {
                    return Math.max.apply(null, J(Ia))
                },
                min: function() {
                    return Math.min.apply(null, J(Ia))
                },
                grow: function() {
                    return Ia.max()
                },
                lowestElement: function() {
                    return Math.max(Ia.bodyOffset(), I("bottom", L()))
                },
                taggedElement: function() {
                    return K("bottom", "data-iframe-height")
                }
            },
            Ja = {
                bodyScroll: function() {
                    return document.body.scrollWidth
                },
                bodyOffset: function() {
                    return document.body.offsetWidth
                },
                custom: function() {
                    return Fa.width()
                },
                documentElementScroll: function() {
                    return document.documentElement.scrollWidth
                },
                documentElementOffset: function() {
                    return document.documentElement.offsetWidth
                },
                scroll: function() {
                    return Math.max(Ja.bodyScroll(), Ja.documentElementScroll())
                },
                max: function() {
                    return Math.max.apply(null, J(Ja))
                },
                min: function() {
                    return Math.min.apply(null, J(Ja))
                },
                rightMostElement: function() {
                    return I("right", L())
                },
                taggedElement: function() {
                    return K("right", "data-iframe-width")
                }
            },
            Ka = e(M);
        b(window, "message", S), T()
    }
}();

function cfgWinSizeVNPayQR(cfg) {
    var newWidth = $(window).width();
    var newHeight = $(window).height();
    if (newWidth < 900)
        cfg.width = newWidth;
    if (newHeight > 600)
        cfg.width = newHeight;

    return cfg;
}

function vnpay_snippet(settings) {
    var cfg = {
        width: 768,
        height: 490,
        url: "#"
    };
    $("#vnpay_modal").hide();
    cfg = $.extend({}, cfg, settings);
    cfg = cfgWinSizeVNPayQR(cfg);
    var iframe, modal, content, method, overlay;
    content = $('<div id="vnpay_content" class="vnpay_content" allowfullscreen></div>');
    iframe = $('<iframe id="vnpay_frame" />');
    var script = document.createElement('script');
    document.getElementsByTagName('body')[0].appendChild(script);
    script.onload = function() {
        iframe.attr("src", cfg.url);
    }
    // script.onerror = function() { 
    //   alert('Hi?n t?i dang c� l?i k?t n?i v?i VNPAY vui l�ng th? l?i sau ho?c g?i h? tr? d? du?c gi�p d?!');
    // } 
    script.setAttribute('src', cfg.url);


    //set style for iframe
    iframe.css("border", "none");
    iframe.css({
        height: cfg.height - 14 || 'auto',
        position: 'absolute'
    });
    content.empty().append(iframe);
    content.css({
        width: cfg.width - 14 || 'auto'
    });
    content.css("cssText", "height: " + cfg.height + "px !important;");
    overlay = $("#vnpay_modal");
    overlay.after(content);
}

function detectmob() {
    if (navigator.userAgent.match(/Android/i) ||
        navigator.userAgent.match(/webOS/i) ||
        navigator.userAgent.match(/iPhone/i) ||
        navigator.userAgent.match(/iPad/i) ||
        navigator.userAgent.match(/iPod/i) ||
        navigator.userAgent.match(/BlackBerry/i) ||
        navigator.userAgent.match(/Windows Phone/i)
    ) {
        return true;
    } else {
        return false;
    }
}
(function() {
    'use strict';

    var B2B2CGatewayApp = angular.module("B2B2CGatewayApp", [
            'ngStorage',
            'tmh.dynamicLocale',
            'pascalprecht.translate',
            'ngResource',
            'ngCookies',
            'ngAria',
            'ngCacheBuster',
            'ngFileUpload',
            'ui.bootstrap',
            'ui.bootstrap.datetimepicker',
            'ui.router',
            'infinite-scroll',
            // jhipster-needle-angularjs-add-module JHipster will add new module here
            // 'angular-loading-bar',
            //'oc.lazyLoad',
            'ngSanitize', "oc.lazyLoad", "credit-cards", 'slickCarousel', 'blockUI'
        ])
        .config(['$rootScopeProvider', '$locationProvider', appConfig])
        .config(bCfg)
        .run(run);

    function appConfig($rootScopeProvider, $locationProvider) {
        // $locationProvider.html5Mode({ enabled: true, requireBase: true });
        console.log('Change TTL');
        $rootScopeProvider.digestTtl(30);
    }

    function bCfg(blockUIConfig) {

        // Change the default overlay message
        blockUIConfig.message = '';

        // Change the default delay to 100ms before the blocking is visible
        // blockUIConfig.delay = 100;

        // Display the property value in the custom template.
        blockUIConfig.template = '<div class="loader"></div>';

        // Tell the blockUI service to ignore certain requests
        blockUIConfig.requestFilter = function(config) {
            // If the request starts with '/api/quote' ...
            if (config.url.indexOf("metasrv/api") > -1) {
                return false; // ... don't block it.
            } else if (config.url.match(/(?:\/api\/hotel\/meta\-keyword\-search)/)) {
                return false; // ... don't block it.
            } else if (config.url.indexOf('hotel/filter-availability') > -1) {
                return false; // ... don't block it.
            }
        };

        // blockUIConfig.autoBlock = false;


    }

    /** Metronic APP **/
    B2B2CGatewayApp.config(['$ocLazyLoadProvider', function($ocLazyLoadProvider) {
        $ocLazyLoadProvider.config({
            // global configs go here
        });
    }]);

    B2B2CGatewayApp.config(['$controllerProvider', function($controllerProvider) {
        // this option might be handy for migrating old apps, but please don't use it
        // in new ones!
        $controllerProvider.allowGlobals();
    }]);

    /********************************************
     END: BREAKING CHANGE in AngularJS v1.3.x:
     *********************************************/

    /* Setup global settings */
    B2B2CGatewayApp.factory('settings', ['$rootScope', function($rootScope) {
        // supported languages
        var settings = {
            layout: {
                pageSidebarClosed: false, // sidebar menu state
                pageContentWhite: true, // set page content layout
                pageBodySolid: false, // solid body color state
                pageAutoScrollOnLoad: 1000 // auto scroll to top on page load
            },
            assetsPath: '../bower_components/gtd-theme',
            globalPath: '../bower_components/gtd-theme/global',
            layoutPath: '../bower_components/gtd-theme/layouts/layout3',
        };

        $rootScope.settings = settings;

        return settings;
    }]);

    /* Setup window close event */
    B2B2CGatewayApp.factory('beforeUnload', ['$rootScope', '$window', function($rootScope, $window) {
        $window.onunload = function() {
            $rootScope.$broadcast('onUnload');
        };
        return {};
    }]);

    /* Setup App Main Controller */
    B2B2CGatewayApp.controller('AppController', ['$scope', '$rootScope', '$location', '$cookies', 'ThemeCfg', 'MerchantService', '$state', 'AuthServerProvider', function($scope, $rootScope, $location, $cookies, ThemeCfg, MerchantService, $state, AuthServerProvider) {
        $scope.$on('$viewContentLoaded', function() {
            App.initComponents(); // init core components
            // Layout.init(); //  Init entire layout(header, footer, sidebar, etc) on page load if the partials included in server side instead of loading with ng-include directive
            Layout.init();
        });

        // embed layout
        var expireDate = new Date();
        expireDate.setDate(expireDate.getDate() + 30);
        if ($location.search().embed) {
            $cookies.put('liteEmbed', true, {
                'expires': expireDate
            });
            localStorage.setItem('liteEmbed', true);
        } else {
            $cookies.put('liteEmbed', false, {
                'expires': expireDate
            });
            localStorage.setItem('liteEmbed', false);
        }

        if ($location.search().merchant_code || $cookies.get("merchant_code") || localStorage.getItem("merchant_code")) {
            var lc_merchant = $location.search().merchant_code;
            var ck_merchant = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");
            var expireDate = new Date();
            expireDate.setDate(expireDate.getDate() + 30);
            if (lc_merchant && (lc_merchant != ck_merchant)) {
                localStorage.setItem('merchant_code', lc_merchant);
                $cookies.put('merchant_code', lc_merchant, {
                    'expires': expireDate
                });
            }
            // $window.parent.postMessage("Hello", "https://davidwalsh.name");
            switch (lc_merchant) {
                // TODO: VIETTEL also need validate.
                case 'LIENVIETBANK':
                    lienvietLogin();
                    break;
                case 'SEABANK':
                    seaBankLogin();
                    break;
                case 'FSOFT':
                    fSoftLogin();
                    break;
                case 'VIETTEL':
                    loginForSpecial();
                    break;
                case 'TIKI':
                    loginForSpecial();
                    break;
                default:
                    if ($location.search().access_token) {
                        MerchantService.loginWithToken($location.search().access_token);
                    } else {
                        var token = AuthServerProvider.getToken();
                        if (!token) {
                            redirectToUnknownMerchant();
                        }
                    }
                    break;
            }

            function loginForSpecial() {
                ignoreBrowerBack();
                MerchantService.verifyMerchant().then(
                    function(response) {
                        if (response.data && response.data.agencyCode)
                            MerchantService.login();
                        else {
                            redirectToUnknownMerchant();
                        }
                    },
                    function(error) {
                        redirectToUnknownMerchant();
                    }
                );
                MerchantService.login();
            }

            function seaBankLogin() {
                var user = $location.search().user;
                var signature = $location.search().signature;

                if (user && signature) {
                    MerchantService.seaBankValidate(user, signature).then(
                        // Validate success
                        function(response) {
                            if (response.data && response.data.success) {
                                // Update msisdn = userID extracted from encrypted data.
                                MerchantService.updateMsisdn(response.data.result);
                                // Login with new data.
                                MerchantService.login();
                            } else {
                                redirectToUnknownMerchant();
                            }
                        },
                        // on Validate error
                        function(errors) {
                            redirectToUnknownMerchant();
                        }
                    );
                } else {
                    MerchantService.login();
                }

            }

            function lienvietLogin() {
                var data = $location.search().data;
                if (!data) data = $cookies.get('data');
                var key = $location.search().key;
                if (!key) key = $cookies.get('key');
                MerchantService.lienVietValidate(data, key).then(
                    // Validate success
                    function(response) {
                        if (response.data && response.data.success) {
                            // Update msisdn = userID extracted from encrypted data.
                            MerchantService.updateMsisdn(response.data.result);
                            // Login with new data.
                            MerchantService.login();
                        } else {
                            redirectToUnknownMerchant();
                        }
                    },
                    // on Validate error
                    function(errors) {
                        redirectToUnknownMerchant();
                    }
                );
            }

            function ignoreBrowerBack() {
                $scope.$on('$stateChangeSuccess', function() {
                    //view loaded do some stuff.
                    $location.replace(); //clear last history route
                });
            }

            function fSoftLogin() {
                MerchantService.fSoftValidate().then(
                    // Validate success
                    function(response) {
                        if (response.data && response.data.success) {
                            // Update msisdn = userID extracted from encrypted data.
                            MerchantService.updateMsisdn(response.data.result.userId);
                            // Login with new data.
                            MerchantService.login().then(
                                function(abc) {
                                    MerchantService.fSoftSearchFlight(response.data.result);
                                },

                                // on Validate error
                                function(params) {
                                    redirectToUnknownMerchant();
                                }
                            );

                        } else {
                            redirectToUnknownMerchant();
                        }
                    },

                    // on Validate error
                    function(params) {
                        redirectToUnknownMerchant();
                    }
                )
            }

        } else {
            redirectToUnknownMerchant();
        }

        function redirectToUnknownMerchant() {
            // $state.go('error-partner');
            // Exclude URL
            // if(!(window.location.href.indexOf("external-booking-detail" ) > -1
            // || window.location.href.indexOf("external-booking-payment") > -1
            // || window.location.href.indexOf("external-final-booking") > -1)) {
            //     window.location.href = "#/error-partner";
            // }

            window.location.href = "#/error-partner";
        }


        $scope.this_route = function() {
            var merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");
            var paramMerchant = $location.search().merchant_code;
            if (paramMerchant) {
                if (paramMerchant !== merchant_code) {
                    location.reload();
                }
                return String($location.search().merchant_code).toUpperCase();
            } else {
                return String(merchant_code).toUpperCase();
            }
        };

        $scope.enable_template = function() {
            var merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code")

            if (!ThemeCfg[String(merchant_code).toUpperCase()]) {
                return true;
            } else return false;
        }
    }]);

    /***
     Layout Partials.
     By default the partials are loaded through AngularJS ng-include directive. In case they loaded in server side(e.g: PHP include function) then below partial
     initialization can be disabled and Layout.init() should be called on page load complete as explained above.
     ***/

    /* Setup Layout Part - Sidebar */
    B2B2CGatewayApp.controller('SidebarController', ['$scope', function($scope) {
        $scope.$on('$includeContentLoaded', function() {
            Layout.initSidebar($state); // init sidebar
        });
    }]);

    /* Setup Layout Part - Quick Sidebar */
    B2B2CGatewayApp.controller('QuickSidebarController', ['$scope', function($scope) {
        $scope.$on('$includeContentLoaded', function() {
            setTimeout(function() {
                QuickSidebar.init(); // init quick sidebar
            }, 2000);
        });
    }]);

    /* Setup Layout Part - Sidebar */
    B2B2CGatewayApp.controller('PageHeadController', ['$scope', function($scope) {
        $scope.$on('$includeContentLoaded', function() {
            Demo.init(); // init theme panel
        });
    }]);

    /* Setup Layout Part - Theme Panel */
    B2B2CGatewayApp.controller('ThemePanelController', ['$scope', function($scope) {
        $scope.$on('$includeContentLoaded', function() {
            Demo.init(); // init theme panel
        });
    }]);

    /* Setup Layout Part - Footer */
    B2B2CGatewayApp.controller('FooterController', ['$scope', function($scope) {
        $scope.$on('$includeContentLoaded', function() {
            Layout.initFooter(); // init footer
        });
    }]);

    run.$inject = ['stateHandler', 'translationHandler', '$cookies', "$rootScope", '$window', "settings", "$state", "beforeUnload", 'Auth', "MetaData", "GlobalSrv", 'Principal', 'DialogService', 'ValidationUtils', '$http'];

    function run(stateHandler, translationHandler, $cookies, $rootScope, $window, settings, $state, beforeUnload, Auth, MetaData, GlobalSrv, Principal, DialogService, ValidationUtils, $http) {
        stateHandler.initialize();
        translationHandler.initialize();

        $rootScope.$state = $state; // state to be accessed from view
        $rootScope.$settings = settings; // state to be accessed from view

        console.log("Run - b2bURL: " + $ibe.getB2BAppUrl());
        console.log("Run - saleChannel: " + $ibe.getSaleChannel());
        console.log("Run - tokenKey: " + $ibe.getTokenKey());

        //+++ listen login & logout event - only support B2C and B2B2C
        $window.addEventListener("storage", function(event) {
            var k = event.key;
            var newValue = event.newValue;
            var url = event.url;
            var oldValue = event.oldValue;
            console.log("storage event: key: " + k + ", url: " + url + ", oldValue: " + oldValue + ", newValue: " + newValue + ", window loation: " + $window.location.origin);

            if ($ibe.isB2C()) {
                console.log("process for B2C request for normal-login and social-login...");

                if (k === 'jhi-authenticationToken' && url.indexOf($window.location.origin) !== -1) {
                    if (oldValue && (newValue === null || newValue === '')) {
                        $rootScope.$broadcast('syncLogout');
                    } else if ((!oldValue || oldValue === null || oldValue === '') && newValue) {
                        $rootScope.$broadcast('syncAuthenticationSuccess');
                    }
                } else if (k == 'social-login-success') {
                    if (ValidationUtils.isIE()) {
                        console.log('Receive social message login success for IE');

                        if (newValue != 'social::success') {
                            return;
                        } else {
                            var token = $cookies.get('social-authentication');
                            console.log('token = ' + token);
                            if (token) {
                                Auth.loginWithToken(token, false).then(function() {
                                    $cookies.remove('social-authentication');
                                    Principal.identity(true).then(function() {
                                        $rootScope.$broadcast('authenticationSuccess');
                                    });
                                });
                            }
                            localStorage.setItem("social-login-success", "");
                        }
                    }
                }
            } else if ($ibe.isB2B2C()) {
                console.log("process for B2B2C request for having tokenKeys...");

                if (k === 'jhi-authenticationToken' && url.indexOf($window.location.origin) !== -1) {
                    if (oldValue && (newValue === null || newValue === '')) {
                        $rootScope.$broadcast('syncLogout');
                    } else if (newValue && (oldValue != newValue)) {
                        $rootScope.$broadcast('syncAuthenticationSuccess');
                    }
                }
            }
        });

        function callback(ip) {
            console.log(ip);
        }

        $http.jsonp('https://api.ipify.org/?format=jsonp&callback=JSON_CALLBACK').then(
            function(success) {
                console.log(success);
                localStorage.setItem("client-ip", success.data.ip);
            }
        );



        //---

        Offline.options = {
            // to check the connection status immediatly on page load.
            checkOnLoad: false,

            // to monitor AJAX requests to check connection.
            interceptRequests: true,

            // to automatically retest periodically when the connection is down (set to false to disable).
            reconnect: {
                // delay time in seconds to wait before rechecking.
                initialDelay: 3,

                // wait time in seconds between retries.
                delay: 10
            },

            // to store and attempt to remake requests which failed while the connection was down.
            requests: true
        };


        if (!$.fn.bootstrapDP && $.fn.datepicker && $.fn.datepicker.noConflict) {
            var datepicker = $.fn.datepicker.noConflict();
            $.fn.bootstrapDP = datepicker;
        }

        if (!$.fn.bootstrapDTP && $.fn.datetimepicker) {
            $.fn.bootstrapDTP = $.fn.datetimepicker;

        }

        MetaData.searchAirportsLocal('VN').then(function result(res) {
            var airports = res;
            GlobalSrv.setVnAirports(airports);
        });

        //+++ process B2B2C Request

        $rootScope.$on('B2B2CGatewayApp.http5xxError', function(event, httpResponse) {
            /* https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
            500 Internal Server Error
            501 Not Implemented
            502 Bad Gateway
            503 Service Unavailable
             */
            console.log("--->>> INFO: B2B2CGatewayApp.httpError: " + httpResponse.status);
            var error = {
                title: "Lỗi Kết Nối",
                message: "Hiện nay bạn không kết nối được với dịch vụ của chúng tôi, xin vui lòng thử lại sau!"
            };
            //show dialog
            DialogService.openAlertDialog(error);
        });

        $rootScope.$on('authenticationSuccess', function() {
            console.log("app.module - authenticationSuccess --- Checking.... ");
            processB2B2CMessage();
        });

        /**
         * Process logout for B2B
         */
        $rootScope.$on('logoutSuccess', function() {
            console.log("Run - logoutSuccess - saleChannel: " + $ibe.getSaleChannel());

            if ($ibe.isB2B2C()) {
                if ($window.opener) {
                    console.log("app.module - logoutSuccess --- call - $window.close() .... ");
                    try {
                        $window.close();
                    } catch (err) {
                        console.log("app.module - $window.close() --- err: " + err);
                    }
                } else {
                    console.log("app.module - logoutSuccess --- call - processB2B2CMessage .... ");
                    var isGotoB2B = true;
                    processB2B2CMessage(isGotoB2B);
                }
            }
        });

        /**
         * Process after load application_state_success
         *
         */
        $rootScope.$on('loadAppStateSuccess', function() {
            console.log("Run - loadAppStateSuccess - saleChannel: " + $ibe.getSaleChannel());

            if (!$ibe.hasTokenKey()) {
                console.log("rootScope - app.module - loadAppStateSuccess --- Checking.... ");
                processB2B2CMessage();
            }
        });

        $rootScope.$on('onUnload', function(e) {
            if ($ibe.isB2B2C()) {
                Auth.logout();
                //clean ibe token
                try {
                    $ibe.resetTokenKey();
                } catch (err) {
                    console.log("app.module - onUnload - resetTokenKey - err: " + err);
                }
                console.log('app.module - onBeforeUnload - leaving page'); // Use 'Preserve Log' option in Console
            }
        });

        $rootScope.$watch(function() {
            return window.location.href;
        }, function(value) {
            try {
                window.top.postMessage('gtdIframeHref:' + btoa(value), '*');
            } catch (err) {
                console.log('Error postMessage');
            }
        });

        function processB2B2CMessage(isGotoB2B) {
            //+++ check B2B2C Access
            var processB2B2CMsg = false;

            var isAuth = Principal.isAuthenticated();
            console.log("app.module - processB2B2CMessage --- isB2B2C: " + $ibe.isB2B2C() + ", isAuth: " + isAuth);

            if ($ibe.isB2B2C()) {
                if (!angular.isUndefined(isAuth) && isAuth) {
                    //user already login check B2B roles
                    if (!Principal.hasAuthority("ROLE_B2B")) {
                        console.log("app.module - user already login but doesnt have ROLE_B2B");
                        processB2B2CMsg = true;
                    }
                } else {
                    console.log("app.module - user access B2B2C directly or Logout");

                    //user access B2B2C directly or Logout
                    processB2B2CMsg = true;
                }
            }

            console.log("app.module - processB2B2CMessage --- processB2B2CMsg: " + processB2B2CMsg + " - isGotoB2B: " + isGotoB2B);

            if (processB2B2CMsg) {
                var error = {};
                error.redirectUrl = $ibe.getB2BAppUrl();

                if (isGotoB2B) {
                    $window.location.href = error.redirectUrl;

                } else {
                    //show dialog
                    DialogService.openB2B2CDialog(error);
                }

                //console.log('app.module - Show Dialog - goto Home...');
                //$state.go('home');
            }
            //---
        }
        //---
    }

    // Override Log
    var console = (function(c) {
        return {
            log: function(v) {
                if (true) {
                    c.log(v);
                }
            }
        };
    }(window.console));
    window.console = console;

    /** https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith **/
    if (!String.prototype.endsWith)
        String.prototype.endsWith = function(searchStr, Position) {
            // This works much better than >= because
            // it compensates for NaN:
            if (!(Position < this.length))
                Position = this.length;
            else
                Position |= 0; // round position
            return this.substr(Position - searchStr.length,
                searchStr.length) === searchStr;
        };

    if (!String.prototype.startsWith) {
        String.prototype.startsWith = function(searchString, position) {
            return this.substr(position || 0, searchString.length) === searchString;
        };
    }

    if (!String.prototype.toTitleCase) {
        String.prototype.toTitleCase = function() {
            return this.toLowerCase().replace(/(^|\s)([a-z])/g, function(m, p1, p2) {
                return p1 + p2.toUpperCase();
            });
        };
    }

    if (!String.prototype.includes) {
        String.prototype.includes = function(str) {
            var returnValue = false;

            if (this.indexOf(str) !== -1) {
                returnValue = true;
            }

            return returnValue;
        };

    }

    // GotadiApp.run(["$rootScope", "settings", "$state", function($rootScope, settings, $state) {
    //     $rootScope.$state = $state; // state to be accessed from view
    //     $rootScope.$settings = settings; // state to be accessed from view
    // }]);

})();

(function() {
    if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) var e = jQuery.fn.select2.amd;
    return e.define("select2/i18n/vi", [], function() {
        return {
            inputTooLong: function(e) {
                var t = e.input.length - e.maximum,
                    n = "Vui lòng nhập ít hơn " + t + " ký tự";
                return t != 1 && (n += "s"), n
            },
            inputTooShort: function(e) {
                var t = e.minimum - e.input.length,
                    n = "Vui lòng nhập nhiều hơn " + t + ' ký tự';
                return n
            },
            loadingMore: function() {
                return "Đang lấy thêm kết quả…"
            },
            maximumSelected: function(e) {
                var t = "Chỉ có thể chọn được " + e.maximum + " lựa chọn";
                return t
            },
            noResults: function() {
                return "Không tìm thấy kết quả"
            },
            searching: function() {
                return "Đang tìm…"
            }
        }
    }), {
        define: e.define,
        require: e.require
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('User', User);

    User.$inject = ['$resource', '$http', '$log', 'SUBSCRIBED_URL', 'API_URL'];

    function User($resource, $http, $log, SUBSCRIBED_URL, API_URL) {
        var service = $resource(API_URL + '/api/users/:login', {}, {
            'query': {
                method: 'GET',
                isArray: true
            },
            'get': {
                method: 'GET',
                transformResponse: function(data) {
                    data = angular.fromJson(data);
                    return data;
                }
            },
            'save': {
                method: 'POST'
            },
            'update': {
                method: 'PUT'
            },
            'delete': {
                method: 'DELETE'
            }

        });


        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Subscribed', Subscribed);

    Subscribed.$inject = ['$resource', '$http', '$log', 'SUBSCRIBED_URL', '$q', 'API_URL'];

    function Subscribed($resource, $http, $log, SUBSCRIBED_URL, $q, API_URL) {
        var service = {
            Subscribed: Subscribed
        };

        function Subscribed(email, phone) {
            var config = {
                headers: {
                    'Content-Type': 'application/json'
                }
            };
            var data = {
                email: email,
                phone: phone,
            };
            $log.log(data);
            $log.log(SUBSCRIBED_URL);

            return $http.post(
                    API_URL + SUBSCRIBED_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback gPaymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    //alert(response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback gPaymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });

        }

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('UIService', UIService);

    UIService.$inject = [];

    function UIService() {
        var service = {
            hideBodyScroll: hideBodyScroll,
            showBodyScroll: showBodyScroll
        };

        return service;

        function hideBodyScroll() {
            // $("body").addClass("hotel-hide-scroll");
        }

        function showBodyScroll() {
            // $("body").removeClass("hotel-hide-scroll");
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('DataService', DataService);

    DataService.$inject = ['$resource', '$localStorage'];

    function DataService($resource, $localStorage) {

        var _startTransactionTime;

        var _searchOptions;
        var _searchResult;
        var _advanceSearchFilterOptions;
        var _departSearchOptions;
        var _departSearchResult;
        var _returnSearchOptions;
        var _returnSearchResult;
        var _departFlight;
        var _returnFlight;
        var _savedSearchOptions;

        var _departGroupItem;
        var _departPricedItinerary;

        var _orgDepartGroupItem;
        var _orgDepartPricedItinerary;

        var _returnGroupItem;
        var _returnPricedItinerary;

        var _bookingModel;
        var _paymentModel;

        var _hotelSearchOptions;
        var _hotelAdvanceSearchFilterOptions;
        var _hotelSearchResult;
        var _selectedHotel;
        var _selectedHotelAvail;
        var _selectedHotelProduct;
        var _selectedHotelRoom;
        var _hotelBookingModel;
        var _hotelPaymentModel;
        var _hotelSavedSearchOptions;

        return {
            // SAVED Search options
            getSavedSearchOption: function() {
                var model = $localStorage.savedSearchOptions;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setSavedSearchOption: function(value) {
                    // _searchOptions = value;
                    $localStorage.savedSearchOptions = value;
                }

                // HOTEL SAVED Search options
                ,
            getHotelSavedSearchOption: function() {
                var model = $localStorage.hotelSavedSearchOptions;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setHotelSavedSearchOption: function(value) {
                    // _searchOptions = value;
                    $localStorage.hotelSavedSearchOptions = value;
                }

                // FLIGHT
                ,
            getSearchOption: function() {
                // var model = _searchOptions;
                // if (model == undefined || model == null) {
                //     model = {}
                // }
                // return model;

                var model = $localStorage.searchOptions;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setSearchOption: function(value) {
                    // _searchOptions = value;
                    $localStorage.searchOptions = value;
                }

                ,
            getSearchResult: function() {
                var model = _searchResult;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            setSearchResult: function(value) {
                    _searchResult = value;
                }

                // Advance search filter options
                ,
            getAdvanceSearchFilterOptions: function() {
                var model = _advanceSearchFilterOptions;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            setAdvanceSearchFilterOptions: function(values) {
                    _advanceSearchFilterOptions = values;
                }

                // Depart search
                ,
            getDepartSearchOption: function() {
                // var model = _departSearchOptions;
                // if (model == undefined || model == null) {
                //     model = {}
                // }
                // return model;

                var model = $localStorage.departSearchOptions;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setDepartSearchOption: function(value) {
                    $localStorage.departSearchOptions = value;
                }

                ,
            getDepartSearchResult: function() {
                var model = _departSearchResult;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setDepartSearchResult: function(value) {
                    _departSearchResult = value;
                }

                // Return search
                ,
            getReturnSearchOption: function() {
                // var model = _returnSearchOptions;
                // if (model == undefined || model == null) {
                //     model = {}
                // }
                // return model;
                var model = $localStorage.returnSearchOptions;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setReturnSearchOption: function(value) {
                    // _returnSearchOptions = value;
                    $localStorage.returnSearchOptions = value;
                }

                ,
            getReturnSearchResult: function() {
                var model = _returnSearchResult;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setReturnSearchResult: function(value) {
                    _returnSearchResult = value;
                }

                ,
            getDepartFlight: function() {
                var model = _departFlight;
                if (model == undefined || model == null) {
                    model = {};
                }

                return model;
            },
            setDepartFlight: function(value) {
                    _departFlight = value;
                }

                ,
            getReturnFlight: function() {
                var model = _returnFlight;
                if (model == undefined || model == null) {
                    model = {};
                }

                return model;
            },
            setReturnFlight: function(value) {
                    _returnFlight = value;
                }

                ,
            getDepartGroupItem: function() {
                var model = _departGroupItem;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setDepartGroupItem: function(value) {
                    _departGroupItem = value;
                }

                ,
            getDepartPricedItinerary: function() {
                var model = _departPricedItinerary;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setDepartPricedItinerary: function(value) {
                    _departPricedItinerary = value;
                }

                ,
            getOrgDepartGroupItem: function() {
                var model = _orgDepartGroupItem;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setOrgDepartGroupItem: function(value) {
                    _orgDepartGroupItem = value;
                }

                ,
            getOrgDepartPricedItinerary: function() {
                var model = _orgDepartPricedItinerary;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setOrgDepartPricedItinerary: function(value) {
                    _orgDepartPricedItinerary = value;
                }

                ,
            getReturnGroupItem: function() {
                var model = _returnGroupItem;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setReturnGroupItem: function(value) {
                    _returnGroupItem = value;
                }

                ,
            getReturnPricedItinerary: function() {
                var model = _returnPricedItinerary;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setReturnPricedItinerary: function(value) {
                    _returnPricedItinerary = value;
                }

                ,
            getBookingModel: function() {
                var model = _bookingModel;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setBookingModel: function(value) {
                    _bookingModel = value;
                }

                ,
            getPaymentModel: function() {
                var model = _paymentModel;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setPaymentModel: function(value) {
                    _paymentModel = value;
                }

                // HOTELS
                ,
            getHotelSearchOptions: function() {
                // var model = _hotelSearchOptions;
                // if (model == undefined || model == null) {
                //     model = {}
                // }
                // return model;
                var model = $localStorage.hotelSearchOptions;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setHotelSearchOptions: function(value) {
                    $localStorage.hotelSearchOptions = value;
                }

                ,
            getHotelSearchResult: function() {
                var model = _hotelSearchResult;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setHotelSearchResult: function(value) {
                    _hotelSearchResult = value;
                }

                // Advance search filter options
                ,
            getHotelAdvanceSearchFilterOptions: function() {
                var model = _hotelAdvanceSearchFilterOptions;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            setHotelAdvanceSearchFilterOptions: function(values) {
                    _hotelAdvanceSearchFilterOptions = values;
                }

                ,
            getSelectedHotel: function() {
                var model = _selectedHotel;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setSelectedHotel: function(value) {
                    _selectedHotel = value;
                }

                ,
            getSelectedHotelAvail: function() {
                var model = _selectedHotelAvail;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setSelectedHotelAvail: function(value) {
                    _selectedHotelAvail = value;
                }

                ,
            getSelectedHotelProduct: function() {
                var model = _selectedHotelProduct;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setSelectedHotelProduct: function(value) {
                    _selectedHotelProduct = value;
                }

                ,
            getSelectedHotelRoom: function() {
                var model = _selectedHotelRoom;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setSelectedHotelRoom: function(value) {
                    _selectedHotelRoom = value;
                }

                ,
            getHotelBookingModel: function() {
                var model = _hotelBookingModel;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setHotelBookingModel: function(value) {
                    _hotelBookingModel = value;
                }

                ,
            getHotelPaymentModel: function() {
                var model = _hotelPaymentModel;
                if (model == undefined || model == null) {
                    model = {};
                }
                return model;
            },
            setHotelPaymentModel: function(value) {
                    _hotelPaymentModel = value;
                }

                // PROFILE
                ,
            getAllAirlines: function() {
                var model = $localStorage.allAirlines;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            setAllAirlines: function(value) {
                    $localStorage.allAirlines = value;
                }

                ,
            getStartTransactionTime: function() {
                var model = _startTransactionTime;
                if (model == undefined || model == null) {
                    _startTransactionTime = new Date();
                }
                return _startTransactionTime;
            },
            setStartTransactionTime: function(value) {
                _startTransactionTime = value;
            },
            setNewStartTransactionTime: function() {
                _startTransactionTime = new Date();
            }

        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('ProfileService', ProfileService);

    ProfileService.$inject = ['$http', 'API_URL'];

    function ProfileService($http, API_URL) {

        var dataPromise;

        var service = {
            getProfileInfo: getProfileInfo
        };

        return service;

        function getProfileInfo() {
            if (angular.isUndefined(dataPromise)) {
                dataPromise = $http.get(API_URL + '/api/profile-info').then(function(result) {
                    if (result.data.activeProfiles) {
                        var response = {};
                        response.activeProfiles = result.data.activeProfiles;
                        response.ribbonEnv = result.data.ribbonEnv;
                        response.inProduction = result.data.activeProfiles.indexOf("prod") !== -1;
                        response.swaggerEnabled = result.data.activeProfiles.indexOf("swagger") !== -1;
                        return response;
                    }
                });
            }
            return dataPromise;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('pageRibbon', pageRibbon);

    pageRibbon.$inject = ['ProfileService', '$rootScope', '$translate'];

    function pageRibbon(ProfileService, $rootScope, $translate) {
        var directive = {
            replace: true,
            restrict: 'AE',
            template: '<div class="ribbon hidden"><a href="" data-translate="global.ribbon.{{ribbonEnv}}">{{ribbonEnv}}</a></div>',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs) {
            ProfileService.getProfileInfo().then(function(response) {
                if (response.ribbonEnv) {
                    scope.ribbonEnv = response.ribbonEnv;
                    element.addClass(response.ribbonEnv);
                    element.removeClass('hidden');
                }
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('gtdFormPayment3D', gtdFormPayment3D);

    gtdFormPayment3D.$inject = ['Base64'];

    function gtdFormPayment3D(Base64) {
        var service = {
            redirectPayment3D: redirectPayment3D
        }

        function redirectPayment3D(url, paReq, md, termUrl) {
            var form = document.createElement('form');
            document.body.appendChild(form);
            form.method = 'post';
            form.action = url;

            var inputPaReq = document.createElement('input');
            inputPaReq.type = 'hidden';
            inputPaReq.name = 'PaReq';
            inputPaReq.value = paReq;
            form.appendChild(inputPaReq);

            var inputTermUrl = document.createElement('input');
            inputTermUrl.type = 'hidden';
            inputTermUrl.name = 'TermUrl';
            inputTermUrl.value = termUrl;
            form.appendChild(inputTermUrl);

            var inputMD = document.createElement('input');
            inputMD.type = 'hidden';
            inputMD.name = 'MD';
            inputMD.value = md;
            form.appendChild(inputMD);

            form.submit();

        }

        return service;
    }
})();

(function() {
    'use strict';
    angular
        .module('B2B2CGatewayApp')
        .factory('MetaData', MetaData);

    MetaData.$inject = ['$resource', '$http', '$log', 'GlobalSrv', 'DataService', 'META_AIRPORT_URL', 'META_SEARCH_AIRPORT_URL', 'META_AIRLINE_URL', 'META_COUNTRY_CODE_URL', 'META_SEARCH_LOOKUP_URL', 'META_DESTINATION_URL', 'PAYMENT_ATM_DEBIT_OPTIONS', 'API_URL'];

    function MetaData($resource, $http, $log, GlobalSrv, DataService, META_AIRPORT_URL, META_SEARCH_AIRPORT_URL, META_AIRLINE_URL, META_COUNTRY_CODE_URL, META_SEARCH_LOOKUP_URL, META_DESTINATION_URL, PAYMENT_ATM_DEBIT_OPTIONS, API_URL) {

        var service = {
            getAirports: getAirports,
            getAirlines: getAirlines,
            getCountries: getCountries

                ,
            searchAirports: searchAirports,
            searchAirportsWithout: searchAirportsWithout,
            searchAirportsLocal: searchAirportsLocal,
            searchLookups: searchLookups

                ,
            searchDestinations: searchDestinations

                ,
            getHotelDestinationsAndPlaces: getHotelDestinationsAndPlaces,
            getPriceOptions: getPriceOptions,
            getStarRatingOptions: getStarRatingOptions,
            getHotelFeatures: getHotelFeatures

                ,
            getAtmDebitOptions: getAtmDebitOptions
        };

        return service;

        function getAirports() {


            var data = [{
                id: 'HAN',
                text: 'Hà Nội'
            }, {
                id: 'SGN',
                text: 'Hồ Chí Minh'
            }, {
                id: 'DAD',
                text: 'Đà Nẵng'
            }, {
                id: 3,
                text: 'Hội An'
            }, {
                id: 4,
                text: 'Vũng Tàu'
            }, {
                id: 5,
                text: 'Singapore'
            }, {
                id: 6,
                text: 'Hongkong'
            }];
            return data;
        }

        function getAirlines() {
            return $http({
                method: 'GET',
                url: API_URL + META_AIRLINE_URL,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("Search getAirlines result: ");
                $log.log(response.data);
                DataService.setAllAirlines(response.data);
                return response.data;
            }, function errorCallback(response) {
                return response.data;
            });
        }

        function searchAirports(val) {
            return $http({
                method: 'GET',
                url: API_URL + META_SEARCH_AIRPORT_URL,
                params: {
                    "query": val
                }
            }).then(function successCallback(response) {
                $log.log("Search Airports result: ");
                $log.log(response.data);

                GlobalSrv.addLocalAirports(response.data);

                return response.data;
            }, function errorCallback(response) {
                return response.data;
            });
        }

        function searchAirportsWithout(val, searchOptions, type) {
            return $http({
                method: 'GET',
                url: API_URL + META_SEARCH_AIRPORT_URL,
                params: {
                    "query": val
                }
            }).then(function successCallback(response) {
                $log.log("Search Airports result: ");
                $log.log(response.data);

                GlobalSrv.addLocalAirports(response.data);

                var tmp = response.data;

                var result = [];

                var excluded = '';
                if ('FROM' == type) {
                    excluded = searchOptions.toAirPort;
                } else if ('TO' == type) {
                    excluded = searchOptions.fromAirPort;
                }

                var isVNAirport = false;
                var vnAirports = GlobalSrv.getVnAirports();
                angular.forEach(vnAirports, function(airport) {
                    if (excluded) {
                        // $log.log(airport.code.toLowerCase() + ":" + excluded.toLowerCase() + ":" + airport.countryCode);
                        if (airport.code.toLowerCase() == excluded.toLowerCase() && airport.countryCode == 'VN') {
                            isVNAirport = true;
                        }
                    }
                });


                angular.forEach(tmp, function(item) {
                    if (item.code != excluded) {

                        if (searchOptions.dtype == 'domestic') {
                            if (item.countryCode == 'VN') {
                                result.push(item);
                            }
                        } else {
                            if (isVNAirport) {
                                if (item.countryCode != 'VN') {
                                    result.push(item);
                                }

                            } else {
                                result.push(item);
                            }

                        }

                    }
                });

                return result;
            }, function errorCallback(response) {
                return response.data;
            });
        }

        function searchAirportsLocal(countryCode) {
            return $http({
                method: 'GET',
                url: API_URL + META_SEARCH_AIRPORT_URL,
                params: {
                    "query": '1',
                    "country": "VN",
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("Search searchAirportsLocal result: ");
                $log.log(response.data);

                GlobalSrv.addLocalAirports(response.data);

                return response.data;
            }, function errorCallback(response) {
                return [];
            });
        }

        function searchLookups(domain, objectName, getAllOptional) {

            var query;
            // if (getAllOptional) {
            //     query = "air";
            // } else {
            //     query = "objectName:\"" +  objectName + "\"";
            // }

            if (getAllOptional) {
                domain = "Air";
                objectName = '';
            }

            return $http({
                method: 'GET',
                url: API_URL + META_SEARCH_LOOKUP_URL,
                params: {
                    "query": query,
                    "page": 0,
                    "size": 1000,
                    "domain_name": domain,
                    "object_name": objectName
                }
            }).then(function successCallback(response) {
                // $log.log("Search searchLookups result: " + domain + ":" + objectName);
                // $log.log("response=" + JSON.stringify(response.data));

                if (getAllOptional) {
                    GlobalSrv.setAllLookups(response.data);
                }

                return response.data;
            }, function errorCallback(response) {
                return response.data;
            });
        }

        var count = 0;

        function searchDestinations(val) {
            return $http({
                method: 'GET',
                url: API_URL + META_DESTINATION_URL,
                params: {
                    "query": val
                }
            }).then(function successCallback(response) {
                count++;
                $log.log("Search searchDestinations result: ");
                $log.log(count);

                // GlobalSrv.addLocalDestinations(response.data);

                return response.data;
            }, function errorCallback(response) {
                return [];
            });
        }

        function getCountries() {

            return $http({
                method: 'GET',
                url: API_URL + META_COUNTRY_CODE_URL,
                params: {
                    "page": 0,
                    "size": 1000,
                    "sort": "sortname,asc"
                }
            }).then(function successCallback(response) {
                $log.log("Search getCountries result: ");
                $log.log(response.data);

                GlobalSrv.setAllCountries(response.data);

                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCountries result: ");
                $log.log(response);
                return [];
            });
        }

        function getAtmDebitOptions() {

            return $http({
                method: 'GET',
                url: API_URL + PAYMENT_ATM_DEBIT_OPTIONS,
                params: {
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("Search getAtmDebitOptions result: ");
                $log.log(response.data);

                //GlobalSrv.setAllCountries(response.data);

                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getAtmDebitOptions result: ");
                $log.log(response);
                return [];
            });
        }

        /** Hotels **/
        function getHotelDestinationsAndPlaces() {
            var data = [{
                id: 0,
                text: 'Hà Nội'
            }, {
                id: 1,
                text: 'Hồ Chí Minh'
            }, {
                id: 2,
                text: 'Đà Nẵng'
            }, {
                id: 3,
                text: 'Hội An'
            }, {
                id: 4,
                text: 'Vũng Tàu'
            }, {
                id: 5,
                text: 'Singapore'
            }, {
                id: 6,
                text: 'Hongkong'
            }];
            return data;
        }

        function getPriceOptions() {
            var data = [{
                id: 1,
                text: ' ota_hotel.lower',
                from: 0,
                to: 1000000,
                checked: false
            }, {
                id: 2,
                text: 'ota_hotel.from1',
                from: 1500000,
                to: 3500000,
                checked: false
            }, {
                id: 3,
                text: 'ota_hotel.from2',
                from: 3500000,
                to: 5500000,
                checked: false
            }, {
                id: 4,
                text: 'ota_hotel.higher',
                from: 7500000,
                to: -1,
                checked: false
            }];
            return data;
        }

        function getStarRatingOptions() {
            var data = [{
                id: 1,
                text: '1',
                checked: false
            }, {
                id: 2,
                text: '2',
                checked: false
            }, {
                id: 3,
                text: '3',
                checked: false
            }, {
                id: 4,
                text: '4',
                checked: false
            }, {
                id: 5,
                text: '5',
                checked: false
            }].reverse();
            return data;
        }

        function getHotelFeatures() {
            var data = [{
                id: 1,
                text: "Free Wifi",
                cls: 'hotel-free-wifi-icon',
                checked: false
            }, {
                id: 2,
                text: "Có chỗ đậu xe",
                cls: 'hotel-free-car-icon',
                checked: false
            }, {
                id: 3,
                text: "Có phòng gym",
                cls: 'hotel-free-gym-icon',
                checked: false
            }, {
                id: 4,
                text: "Có phục vụ bữa ăn",
                cls: 'hotel-free-meal-icon',
                checked: false
            }];
            return data;
        }

    }
})();

(function() {
    'use strict';
    angular
        .module('B2B2CGatewayApp')
        .factory('Hotel', Hotel);

    Hotel.$inject = ['$log', '$rootScope', '$q', '$resource', '$http', '$timeout', 'RequestUtils', 'GlobalSrv', 'DataService', 'PricingUtils', 'HOTEL_SEARCH_METADATA_URL', 'HOTEL_SEARCH_URL', 'HOTEL_SEARCH_CACHE_URL', 'HOTEL_FILTER_OPTIONS_URL', 'HOTEL_CHECK_AVAILABILITY_URL', 'HOTEL_DRAFT_BOOKING_URL', 'HOTEL_ADD_BOOKING_TRAVELLER_URL', 'HOTEL_PAYMENT_BOOKING_URL', 'HOTEL_ORDER_HOTEL_URL', 'PAYMENT_PAYMENT_BOOKING_URL', 'DEFAULT_PAGE_SIZE', 'PRICING_VOUCHER_VALIDATE_URL', 'PRICING_VOUCHER_REDEEM_URL', 'API_URL', 'PAYMENT_PROMO_OPTIONS_URL'];

    function Hotel($log, $rootScope, $q, $resource, $http, $timeout, RequestUtils, GlobalSrv, DataService, PricingUtils, HOTEL_SEARCH_METADATA_URL, HOTEL_SEARCH_URL, HOTEL_SEARCH_CACHE_URL, HOTEL_FILTER_OPTIONS_URL, HOTEL_CHECK_AVAILABILITY_URL, HOTEL_DRAFT_BOOKING_URL, HOTEL_ADD_BOOKING_TRAVELLER_URL, HOTEL_PAYMENT_BOOKING_URL, HOTEL_ORDER_HOTEL_URL, PAYMENT_PAYMENT_BOOKING_URL, DEFAULT_PAGE_SIZE, PRICING_VOUCHER_VALIDATE_URL, PRICING_VOUCHER_REDEEM_URL, API_URL, PAYMENT_PROMO_OPTIONS_URL) {

        var service = {
            searchHotelMetaData: searchHotelMetaData,
            searchHotel: searchHotel,
            searchHotelInCache: searchHotelInCache,
            getAdvanceFilterOptions: getAdvanceFilterOptions

                ,
            checkHotelAvailability: checkHotelAvailability,
            createDraftBooking: createDraftBooking,
            addHotelTravellers: addHotelTravellers,
            paymentBooking: paymentBooking,
            gPaymentBooking: gPaymentBooking,
            orderTickets: orderTickets,
            validateVoucher: validateVoucher,
            redeemVoucher: redeemVoucher,
            gPaymentPromotion: gPaymentPromotion
        };

        function searchHotelMetaData(val) {

            if (!val) {
                return;
            }

            var data = {};

            $log.log("++++++++++++++++++++++++++++");
            $log.log("searchHotelMetaData:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("val=" + val);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + HOTEL_SEARCH_METADATA_URL + '?keyword=' + val, data)
                .then(function successCallback(response) {
                    $log.log("Search searchHotelMetaData result: ");
                    $log.log(response.data.result);
                    // angular.forEach(response.data.result, function (item) {
                    //     item.id = item.code;
                    // });

                    GlobalSrv.addLocalDestinations(response.data.result);

                    return response.data.result;
                }, function errorCallback(response) {
                    return [];
                });
        }

        function searchHotel(options) {

            // alert(moment(options.checkindate).format('MM-DD-YYYY') + ":" + moment(options.checkoutdate).format('MM-DD-YYYY'));

            var paras = {
                'page': options.page ? options.page : 0,
                'size': options.size ? options.size : DEFAULT_PAGE_SIZE,
                'hotel_code': options.destinationCode,
                'checkin_date': moment(options.checkindate, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                'checkout_date': moment(options.checkoutdate, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                'aduts_qtt': options.adultNo ? options.adultNo : 1,
                'children_qtt': options.childrenNo ? options.childrenNo : 0
            };

            $log.log("++++++++++++++++++++++++++++");
            $log.log("Search criteria searchHotel:");
            // $log.log("paras=" + JSON.stringify(paras));
            $log.log("paras=");
            $log.log(paras);
            $log.log("++++++++++++++++++++++++++++");

            var pax = [];
            if (options.pax) {
                for (var i = 0; i < options.pax.length; i++) {
                    var paxItem = {};
                    paxItem.adultQuantity = options.pax[i].adultNo;
                    paxItem.childrenAges = options.pax[i].paxDetails;
                    pax.push(paxItem);
                }
            }

            $log.log("Search criteria :");
            // $log.log("pax=" + JSON.stringify(pax));
            $log.log("pax=");
            $log.log(pax);

            return $http.post(
                    API_URL + RequestUtils.buildUrl(HOTEL_SEARCH_URL, paras), pax)
                // , [
                //     {
                //         "adultQuantity": "1",
                //         "childrenAges": [
                //             "1"
                //         ]
                //     }
                // ])

                // $http({
                //     method: 'POST',
                //     url: RequestUtils.buildUrl(HOTEL_SEARCH_URL, paras),
                //     data: [
                //         {"AdultQuantity": 1, "ChildrenAges": [4,4,4]}
                //     ]
                // })
                .then(function successCallback(response) {
                    $log.log('successCallback searchHotel');
                    $log.log(response);
                    $timeout(function() {
                        $rootScope.$broadcast('gtd-hotel-search-completed');
                    });
                    //$rootScope.$broadcast('event-flight-seach-completed');
                    return response.data;
                }, function errorCallback(response) {
                    $log.log('errorCallback searchHotel');
                    $log.log(response);
                    $timeout(function() {
                        $rootScope.$broadcast('gtd-hotel-search-completed');
                    });
                    return $q.reject(response);
                    //return response.data;
                });
        }

        function searchHotelInCache(options) {
            var paras = {
                page: options.page ? options.page : 0,
                // size: 1,
                size: options.size ? options.size : DEFAULT_PAGE_SIZE,
                sort: options.sortField ? options.sortField + "," + options.sortDir : "price,asc"
            };

            var data = {
                searchId: options.searchId
            };



            data.filter = {};

            if (options.advanceFilters) {
                data.filter = options.advanceFilters;
            }

            if (options.sameLoc) {
                data.filter.sameLoc = options.sameLoc;
                data.filter.lat = options.lat;
                data.filter.lng = options.lng;
            }

            var config = {
                headers: {
                    'Content-Type': 'application/json'
                }
            };

            $log.log("++++++++++++++++++++++++++++");
            $log.log("Search criteria searchHotelInCache:");
            // $log.log("data = " + JSON.stringify(data));
            $log.log("data = " + data);
            // $log.log("paras = " + JSON.stringify(paras));
            $log.log("paras = " + paras);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + RequestUtils.buildUrl(HOTEL_SEARCH_CACHE_URL,
                        paras), data, config)
                .then(function successCallback(response) {
                    $log.log('successCallback searchHotelInCache');
                    $log.log(response);
                    return response.data;
                });
        }

        function getAdvanceFilterOptions(options) {
            var data = {
                searchId: options.searchId
            };

            $log.log("++++++++++++++++++++++++++++");
            $log.log("Search Options getAdvanceFilterOptions:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + HOTEL_FILTER_OPTIONS_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback getAdvanceFilterOptions');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    $timeout(function() {
                        // $rootScope.$broadcast('event-flight-seach-completed');
                    });
                    return response.data ? response.data.filter : {};
                });
        }

        function checkHotelAvailability(options, selectedHotel) {

            // $log.log("selectedHotel = " + JSON.stringify(selectedHotel));
            $log.log("selectedHotel = " + selectedHotel);
            var data = {
                searchId: options.searchId,
                hotelId: selectedHotel.id
            };

            if (selectedHotel.hotelAvailabilityId) {
                data.hotelAvailabilityId = selectedHotel.hotelAvailabilityId;
            }

            var pax = [];
            if (options.pax) {
                for (var i = 0; i < options.pax.length; i++) {
                    var paxItem = {};
                    paxItem.adultQuantity = options.pax[i].adultNo;
                    paxItem.childrenAges = options.pax[i].paxDetails;
                    pax.push(paxItem);
                }
                data.pax = pax;
            }

            var checkindate = null;
            if (options.checkindate) {
                checkindate = moment(options.checkindate, 'DD-MM-YYYY').format('MM-DD-YYYY');
                data.checkIn = checkindate;
            }

            var checkoutdate = null;
            if (options.checkoutdate) {
                checkoutdate = moment(options.checkoutdate, 'DD-MM-YYYY').format('MM-DD-YYYY');
                data.checkOut = checkoutdate;
            }

            $log.log("checkHotelAvailability criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=");
            $log.log(data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + HOTEL_CHECK_AVAILABILITY_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback checkHotelAvailability');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return response.data ? response.data : {};
                });
        }

        function createDraftBooking(options, hotel, product, room) {

            // $log.log('hotel = ' + JSON.stringify(hotel));
            // $log.log('product = ' + JSON.stringify(product));
            // $log.log('room = ' + JSON.stringify(room));

            $log.log('hotel = ' + hotel);
            $log.log('product = ' + product);
            $log.log('room = ' + room);

            // var data = {
            //     hotelCode: hotel.hotelCode,
            //     hotelLookedAvailabilityId: hotel.id,
            //     productId: product.id,
            //     productCode: product.code,
            //     supplierCode: hotel.supplierCode
            // };

            /**
             * {
             *  "hotelAvailabilityId": "string",
             *  "productId": "string"
             * }
             */
            var data = {
                hotelAvailabilityId: hotel.id,
                productId: product.id
            };
            /*
            data.hotelInfo = {
                hotelCode: hotel.hotelCode,
                hotelLookedAvailabilityId: hotel.id,
                productId: product.id,
                productCode: product.code,
                supplierCode: hotel.supplierCode
            };
            */

            $log.log("createDraftBooking criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + HOTEL_DRAFT_BOOKING_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback createDraftBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback createDraftBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return $q.reject(response);
                });
        }

        function addHotelTravellers(options, bookingModel) {
            var data = {
                "bookingNumber": bookingModel.bookingNumber
                    //searchId: options.searchId,
                    ,
                bookingTravelerInfos: [],
                bookingContacts: []
                    /* TODO : traveler_info will be remove later */
                    //travelerInfo: {}
                    ,
                "taxReceiptRequest": {
                    "taxReceiptRequest": bookingModel.showForm,
                    "bookingNumber": bookingModel.bookingNumber,
                    "taxCompanyName": bookingModel.biCompany,
                    "taxAddress1": bookingModel.biAddress,
                    "taxAddress2": bookingModel.biMobile,
                    "taxNumber": bookingModel.biMst,
                    "taxPersonalInfoContact": JSON.stringify({
                        "name": bookingModel.tPCName,
                        "phone": bookingModel.tPCPhone,
                        "email1": bookingModel.tPCemail,
                        "fname": bookingModel.tPCfName,
                        "phoneCode3": bookingModel.tPCPhoneCode,
                        "note": bookingModel.tPCNote
                    })
                }
            };

            //+++ build bookingContacts
            var bookingContacts = [];
            var contacts = bookingModel.contacts;
            if (contacts !== null && contacts !== undefined) {
                angular.forEach(contacts, function(value, key) {
                    var c = value;

                    // var idx = c.ciName.indexOf(" ");
                    // var fname = c.ciName.substr(idx + 1);
                    // var sname = c.ciName.substr(0, idx);

                    bookingContacts.push({
                        "gender": c.ciGender,
                        "firstName": c.ciFName,
                        "surName": c.ciName,
                        "email": c.ciEmail,

                        "phoneCode1": c.ciMobileCode,
                        "phoneNumber1": c.ciMobile,

                        "phoneCode2": c.ciMobileCode,
                        "phoneNumber2": c.ciMobile

                        //"gender": "MALE",
                        //"address1": "string",
                        //"address2": "string",
                        //"ccEmail": "string",
                        //"city": "string",
                        //"contactLevel": "PRIMARY",
                        //"contactType": "CUSTOMER",
                        //"country": "string",
                        //"postalCode": "string"
                    });
                });
            }
            data.bookingContacts = bookingContacts;
            //---

            //+++ build bookingTravelerInfo include service request
            var bookingTravelerInfos = [];
            var customers = bookingModel.customers;

            if (customers !== null && customers !== undefined) {
                angular.forEach(customers, function(value, key) {
                    var c = value;

                    var travelerInfo = {
                        traveler: {},
                        serviceRequests: []
                    };

                    travelerInfo.traveler = {
                        "firstName": c.cuName,
                        "surName": c.cuFamilyName,
                        "gender": c.cuGender,
                        "adultType": c.type,
                        "dob": c.cuDob,
                        "productCode": c.productCode


                        // "country": c.cuNationality,
                        // "nationality": c.cuNationality,

                        // "documentType": "string",
                        // "documentNumber": c.cuId,
                        // "documentIssuingCountry":  c.cuNationality,
                        // "documentExpiredDate": c.cuExpiredDate
                        // "documentExpiredDate": "2017-08-26T22:16:31.466Z",

                        // "documentIssuedDate": "2017-08-26T22:16:31.466Z",
                        // "address1": "string",
                        // "address2": "string",
                        // "email": "string",
                        // "city": "string",
                        //
                        // "phoneNumber1": "string",
                        // "phoneNumber2": "string",
                        // "phoneNumber3": "string",
                        // "phoneNumber4": "string",
                        // "phoneNumber5": "string",
                        // "postalCode": "string"
                    };

                    //+++ TODO - add additional pacakge
                    // if (options.searchType == 'oneway') {
                    //     var depSsr = options.ssrOfferItemsDepart[0].ssrItems;
                    // } else {
                    //     var depSsr = options.ssrOfferItemsDepart[0].ssrItems;
                    //     var retSsr = options.ssrOfferItemsReturn[0].ssrItems;
                    // }

                    //---

                    bookingTravelerInfos.push(travelerInfo);
                });
            }

            data.bookingTravelerInfos = bookingTravelerInfos;
            //---

            // data.travelerInfo.airTravelers = airTravelers;
            // data.travelerInfo.contactInfos = contactInfos;

            $log.log("addTicketTravellers criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=");
            $log.log(data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + HOTEL_ADD_BOOKING_TRAVELLER_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback addHotelTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback addHotelTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return $q.reject(response);
                });
        }

        function paymentBooking(bookingModel, paymentModel, bjson) {

            if (paymentModel.cardModel) {
                paymentModel.cardModel.id = paymentModel.cardModel.cardId;
            }

            var data = {
                "bookingPaymentType": {
                    bookingCode: bjson.bookingInfo.bookingCode,
                    bookingNumber: bookingModel.bookingNumber,
                    paymentType: paymentModel.paymentOption
                },
                "payByCreditCardReq": {
                    bookingNumber: bookingModel.bookingNumber,
                    bookingCode: bjson.bookingInfo.bookingCode,
                    amount: PricingUtils.getHotelTotalPricing(bjson),
                    card: paymentModel.cardModel,
                    paToken: paymentModel.paToken
                }
            };

            // $log.log("paymentBooking criteria:");
            $log.log("Hotel.paymentBooking:: data=");
            $log.log(data);
            // $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + HOTEL_PAYMENT_BOOKING_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback paymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback paymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return $q.reject(response);
                });

        }

        function gPaymentPromotion(productType, status, page, size) {
            $log.log('productTypeproductType');
            $log.log(productType);
            var config = {
                params: {
                    status: status,
                    productType: productType,
                    page: page,
                    size: size
                },
            };
            return $http.get(
                    API_URL + PAYMENT_PROMO_OPTIONS_URL, config)
                .then(function successCallback(response) {
                    $log.log('successCallback PAYMENT_PROMO');
                    $log.log(response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback PAYMENT_PROMO');
                    $log.log(response);
                    return $q.reject(response);
                });
        }

        function gPaymentBooking(bookingModel, paymentModel, bjson) {

            var data = {
                "bookingPaymentType": {
                    bookingCode: bjson.bookingInfo.bookingCode,
                    bookingNumber: bookingModel.bookingNumber,
                    paymentType: paymentModel.paymentOption
                }
            };
            if (paymentModel.paymentOption === "VNPAYQR") {
                data.payByVnPayReq = {
                    bookingNumber: bookingModel.bookingNumber,
                    bookingCode: bjson.bookingInfo.bookingCode,
                    amount: PricingUtils.getHotelTotalPricing(bjson),
                    is_mobile: bjson.is_mobile
                };
            } else {
                data.payByDebitCardReq = {
                    bookingNumber: bookingModel.bookingNumber,
                    bookingCode: bjson.bookingInfo.bookingCode,
                    amount: PricingUtils.getHotelTotalPricing(bjson),
                    address: paymentModel.cardModel.address,
                    email: paymentModel.cardModel.email,
                    fullname: paymentModel.cardModel.fullName,
                    mobile: paymentModel.cardModel.mobile,
                    paymentOption: paymentModel.cardModel.bank
                };
            }

            $log.log(data.payByVnPayReq);
            $log.log("gPaymentBooking criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("Hotel.gPaymentBooking:: data=");
            $log.log(data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + PAYMENT_PAYMENT_BOOKING_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback gPaymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    //alert(response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback gPaymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return $q.reject(response);
                });

        }

        function orderTickets(bookingModel, bjson) {

            var data = {
                bookingCode: bjson.bookingInfo.bookingCode,
                bookingNumber: bookingModel.bookingNumber

            };

            $log.log("orderTickets criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("Hotel.orderTickets:: data=");
            $log.log(data);
            $log.log("++++++++++++++++++++++++++++");




            return $http.post(
                    API_URL + HOTEL_ORDER_HOTEL_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback orderTickets');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback orderTickets');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);
                    return $q.reject(response);
                });
        }

        function validateVoucher(bookingModel) {

            var voucherObj = bookingModel.voucher;

            var data = {
                voucherCode: voucherObj.voucherCode,
                bookingNumber: bookingModel.bookingNumber
            };

            $log.log("validateVoucher criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + PRICING_VOUCHER_VALIDATE_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback validateVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback validateVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        function redeemVoucher(bookingModel) {

            var voucherObj = bookingModel.voucher;

            var data = {
                voucherCode: voucherObj.voucherCode,
                trackingCode: voucherObj.trackingCode,
                bookingNumber: bookingModel.bookingNumber
            };

            $log.log("redeemVoucher criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + PRICING_VOUCHER_REDEEM_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback redeemVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback redeemVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('GtdHotelService', GtdHotelService);

    GtdHotelService.$inject = [
        '$log', '$http', '$localStorage', '$rootScope', '$timeout', '$uibModal', '$state', '$window', '$q',
        'DataService', 'Base64', 'GlobalSrv',
        'HOTEL_SEARCH_URL', 'DEFAULT_PAGE_SIZE', 'HOTEL_STATES', 'HOTEL_SEARCH_CACHE_URL', 'HOTEL_CHECK_AVAILABILITY_URL', 'API_URL'
    ];

    function GtdHotelService(
        $log, $http, $localStorage, $rootScope, $timeout, $uibModal, $state, $window, $q,
        DataService, Base64, GlobalSrv,
        HOTEL_SEARCH_URL, DEFAULT_PAGE_SIZE, HOTEL_STATES, HOTEL_SEARCH_CACHE_URL, HOTEL_CHECK_AVAILABILITY_URL, API_URL
    ) {
        var canceler = $q.defer();
        var resolved = false;
        var timer;

        var isFirstTime = false;

        // Search option Attributes name
        var HOTEL_SEARCH_OPTIONS = "hotelSearchOptions";
        var HOTEL_SEARCH_FILTER = "hotelSearchFilter";
        var HOTEL_SEARCH_ADVANCE = "hotelSearchAdvance";
        var HOTEL_SEARCH_BODY = "hotelSearchBody";
        var HOTEL_SEARCH_FROM_CACHE = "hotelSearchFromCache";
        // Retry limit
        var RETRY_LIMIT = 0;

        // Current retry times
        var countRetry = 0;

        // Default filter values
        var filterParams = {
            checkin_date: moment(new Date(new Date().getTime() + 1 * 86400000)).format('DD-MM-YYYY'),
            checkout_date: moment(new Date(new Date().getTime() + 2 * 86400000)).format('DD-MM-YYYY'),
            hotel_code: null,
            page: 0,
            size: DEFAULT_PAGE_SIZE
        };

        // Default filter from cache
        var filterFromCache = {
            page: 0,
            size: DEFAULT_PAGE_SIZE,
            searchId: null,
            subSearchIds: null,
            sort: null,
            totalPages: 0
        };

        // Default pax values
        var filterBody = [{
            adultQuantity: 2,
            childQuantity: 0,
            childrenAges: []
        }];

        // Default advance search values
        var filterAdvance = {
            featureOptions: [],
            lat: null,
            lng: null,
            nameOptions: [],
            priceOptions: [],
            sameLoc: null,
            starOptions: null
        };

        var selectedDestination = {};

        // Hotel UI states will be handled.
        var hotelStates = {
            CHANGE_SEARCH_FILTER: '[Hotel] Search filter changed',
            DO_SEARCH: '[Hotel] Do search',
            RETRY_SEARCH: '[Hotel] Retry search',
            FINISH_SEARCH: '[Hotel] Finish Search',
            SHOW_LOADING: '[Hotel] Show loading',
            SHOW_SUB_LOADING: '[Hotel] Show sub loading',
            HIDE_LOADING: '[Hotel] Hide loading',
            SEARCH_ERROR: '[Hotel] Search error',
            PAGEABLE_CHANGED: '[Hotel] Pageable changed',
            HOTEL_AVAILABILITY_CHANGED: '[Hotel] Availability changed',
            HOTEL_ADVANCE_SEARCH_CHANGED: '[Hotel] Advance searech changed',
            HOTEL_SELECTED_DESTINATION_CHANGED: '[Hotel] Selected destination changed',
            HOTEL_PAX_CHANGED: '[Hotel] Hotel pax changed'
        };

        // Export funtions
        var services = {
            getStates: getStates,
            initStates: initStates,
            saveSearchFilter: saveSearchFilter,
            search: search,
            showLoading: showLoading,
            hideLoading: hideLoading,
            updateSearchOptions: updateSearchOptions,
            getSearchOptions: getSearchOptions,
            getPaxFilter: getPaxFilter,
            updatePaxInfo: updatePaxInfo,
            updatePaxDisplay: updatePaxDisplay,
            openModalUpdateRoomDetail: openModalUpdateRoomDetail,
            getPaxSummary: getPaxSummary,
            smartSearch: smartSearch,
            getPagination: getPagination,
            chageSmartSearchPage: chageSmartSearchPage,
            updateFilterAdvanceName: updateFilterAdvanceName,
            updateFilterAdcancePrices: updateFilterAdcancePrices,
            updateFilterAdcanceStarts: updateFilterAdcanceStarts,
            getFilterAdvance: getFilterAdvance,
            changeSort: changeSort,
            getFilterParams: getFilterParams,
            goToDetail: goToDetail,
            checkHotelAvailability: checkHotelAvailability,
            backToResult: backToResult,
            resetPage: resetPage,
            validateDateRange: validateDateRange,
            getSelectedDestination: getSelectedDestination,
            updateSelectedDestination: updateSelectedDestination,
            resetSearchOption: resetSearchOption
        };

        init();

        // Constructor service
        function init() {
            var destination = $localStorage.localDestinations;
            selectedDestination = destination || {};

            var searchOption = $localStorage[HOTEL_SEARCH_OPTIONS];
            if (searchOption) {
                filterParams = searchOption[HOTEL_SEARCH_FILTER] ? searchOption[HOTEL_SEARCH_FILTER] : filterParams;
                filterBody = searchOption[HOTEL_SEARCH_BODY] ? searchOption[HOTEL_SEARCH_BODY] : filterBody;
                filterAdvance = searchOption[HOTEL_SEARCH_ADVANCE] ? searchOption[HOTEL_SEARCH_ADVANCE] : filterAdvance;
            }

            filterParams.hotel_code = selectedDestination.code || "";
        }

        function getSelectedDestination() {
            return angular.copy(selectedDestination);
        }

        function updateSelectedDestination(destination) {
            selectedDestination = destination;
            filterParams.hotel_code = selectedDestination.code;
            _updateState(hotelStates.HOTEL_SELECTED_DESTINATION_CHANGED, selectedDestination);
        }

        function _saveSelectedDestinationToLocalStorate() {
            $localStorage.localDestinations = selectedDestination;
        }

        function resetSearchOption() {
            filterParams = {
                checkin_date: moment(new Date(new Date().getTime() + 1 * 86400000)).format('DD-MM-YYYY'),
                checkout_date: moment(new Date(new Date().getTime() + 2 * 86400000)).format('DD-MM-YYYY'),
                hotel_code: filterParams.hotel_code,
                page: 0,
                size: DEFAULT_PAGE_SIZE
            };
            filterBody = [{
                adultQuantity: 2,
                childQuantity: 0,
                childrenAges: []
            }];
            filterAdvance = {
                featureOptions: [],
                lat: null,
                lng: null,
                nameOptions: [],
                priceOptions: [],
                sameLoc: null,
                starOptions: null
            };
        }

        // Save user search filter to localstorage.
        function saveSearchFilter() {
            var searchOptions = {};
            searchOptions[HOTEL_SEARCH_FILTER] = filterParams;
            searchOptions[HOTEL_SEARCH_BODY] = filterBody;
            searchOptions[HOTEL_SEARCH_ADVANCE] = filterAdvance;
            $localStorage[HOTEL_SEARCH_OPTIONS] = searchOptions;
        }

        function getFilterParams() {
            return filterParams;
        }

        function updateFilterAdvanceName(hotelName) {
            filterAdvance.nameOptions = [hotelName];
        }

        function updateFilterAdcancePrices(prices) {
            filterAdvance.priceOptions = prices;
        }

        function updateFilterAdcanceStarts(starts) {
            filterAdvance.starOptions = starts;
        }

        // Update search filter when user changed
        function updateSearchOptions(searchOption) {
            filterParams = searchOption[HOTEL_SEARCH_FILTER] ? searchOption[HOTEL_SEARCH_FILTER] : filterParams;
            filterBody = searchOption[HOTEL_SEARCH_BODY] ? searchOption[HOTEL_SEARCH_BODY] : filterBody;
            filterAdvance = searchOption[HOTEL_SEARCH_ADVANCE] ? searchOption[HOTEL_SEARCH_ADVANCE] : filterAdvance;
            filterFromCache = searchOption[HOTEL_SEARCH_FROM_CACHE] ? searchOption[HOTEL_SEARCH_FROM_CACHE] : filterFromCache;
            filterParams.hotel_code = selectedDestination.code || "";
            _searchFilterChanged();
        }

        // Update pax info whan user changed
        function updatePaxInfo(pax) {
            filterBody = pax;
            _paxInfoChanged();
        }

        function _paxInfoChanged() {
            _updateState(hotelStates.HOTEL_PAX_CHANGED, filterBody);
        }

        function hotelAvailabilityChanged(data) {
            _updateState(hotelStates.HOTEL_AVAILABILITY_CHANGED, data);
        }

        // Get Hotel UI states will be handled.
        // TODO: Consider move states to constants.
        function getStates() {
            return hotelStates;
        }

        // Get current search options
        function getSearchOptions() {
            var serchOptions = {};
            serchOptions[HOTEL_SEARCH_FILTER] = filterParams;
            serchOptions[HOTEL_SEARCH_BODY] = filterBody;
            serchOptions[HOTEL_SEARCH_ADVANCE] = filterAdvance;
            serchOptions[HOTEL_SEARCH_FROM_CACHE] = filterFromCache;

            return angular.copy(serchOptions);
        }

        // Get current pax detail
        function getPaxFilter() {
            return angular.copy(filterBody);
        }

        function initStates(params) {

        }

        function checkHotelAvailability(selectedHotel) {

            $log.log("selectedHotel = " + selectedHotel);
            var data = {
                searchId: filterFromCache.searchId,
                hotelId: selectedHotel.id,
                hotelAvailabilityId: selectedHotel.id + "|" + selectedHotel.supplierSessionId,
                pax: filterBody,
                checkIn: moment(filterParams.checkin_date, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                checkOut: moment(filterParams.checkout_date, 'DD-MM-YYYY').format('MM-DD-YYYY')
            };

            showLoading();

            return $http.post(
                    API_URL + HOTEL_CHECK_AVAILABILITY_URL, data)
                .then(function successCallback(response) {
                    hideLoading();
                    $log.log('successCallback checkHotelAvailability');
                    $log.log("response = " + response);
                    hotelAvailabilityChanged(response.data ? response.data : {});
                }, function(error) {
                    hideLoading();
                });
        }

        function saveTheLastSearchDestination(destination) {

        }

        // Update pax detail which showed in UI.
        function updatePaxDisplay() {

            var paxDetail = {
                roomQuantity: 0,
                adultQuantity: 0,
                childQuantity: 0
            };

            var searchOptions = getSearchOptions();

            paxDetail.roomQuantity = searchOptions.hotelSearchBody.length;
            searchOptions.hotelSearchBody.forEach(function name(pax) {
                paxDetail.adultQuantity += +pax.adultQuantity;
                paxDetail.childQuantity += +pax.childQuantity;
            });

            return paxDetail;

        }

        function _resetFilterFromCache() {
            filterFromCache = {
                page: 0,
                size: DEFAULT_PAGE_SIZE,
                searchId: null,
                subSearchIds: null,
                sort: null,
                totalPages: 0
            };

            _pageableChanged();
        }

        function _resetFilterAdvance() {
            filterAdvance = {
                featureOptions: [],
                lat: null,
                lng: null,
                nameOptions: [],
                priceOptions: [],
                sameLoc: null,
                starOptions: null
            };
            _filterAdvanceChanged();
        }

        function chageSmartSearchPage(pageNum) {
            filterFromCache.page = pageNum;
            _pageableChanged();
        }

        function changeSort(sort) {
            filterFromCache.sort = sort;
            _pageableChanged();
        }

        function getFilterAdvance() {
            return filterAdvance;
        }

        function goToDetail(item) {
            DataService.setSelectedHotel(item);

            var url = $state.go('hotel-detail/:hotel_id/:params', {
                "hotel_id": item.id,
                "params": Base64.encodeJson(getSearchOptions())
            }, {
                absolute: true
            });

            // $window.open(url, '_blank').focus();

            GlobalSrv.addRecentViewHotels(item);
        }

        function resetPage() {
            filterFromCache.page = 0;
        }

        function _cancelSearch() {

            canceler.reject("http call aborted");
        }

        function _clearTimeoutRequest() {
            // $timeout.cancel(timer);
            clearTimeout(timer);
        }

        function _scrollToTop() {
            document.body.scrollTop = 0; // For Safari
            document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
        }

        // Call smart search API
        function smartSearch(withoutLoading) {
            if (resolved) {
                _cancelSearch();
            }

            canceler = $q.defer();
            resolved = true;

            if (!withoutLoading) {
                showLoading();
            }

            var filterBody = {
                searchId: filterFromCache.searchId,

                filter: filterAdvance,
            };

            if (isFirstTime) {
                isFirstTime = false;
                filterBody.subSearchIds = [filterFromCache.searchId];
            }

            var reqParams = {
                page: filterFromCache.page,
                size: filterFromCache.size,
                sort: filterFromCache.sort
            };
            _scrollToTop();

            $http.post(
                API_URL + HOTEL_SEARCH_CACHE_URL,
                filterBody, {
                    params: reqParams,
                    timeout: canceler.promise
                }
            ).then(
                searchSuccessHandle,
                searchFailedHandle
            );

        }

        function backToResult() {
            $state.go('hotel-search', {
                "params": Base64.encodeJson(getSearchOptions())
            });
        }

        // Call search API
        function search() {
            if (resolved) {
                _cancelSearch();
            }
            _clearTimeoutRequest();

            canceler = $q.defer();
            resolved = true;

            _resetFilterFromCache();
            _resetFilterAdvance();
            showLoading();
            App.scrollTop();
            // Build request body
            // NOTE: Always re-format data to match backend datetime format.
            var filterReq = {
                checkin_date: moment(filterParams.checkin_date, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                checkout_date: moment(filterParams.checkout_date, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                hotel_code: filterParams.hotel_code,
                page: "0",
                size: DEFAULT_PAGE_SIZE
            };

            countRetry++;
            isFirstTime = true;

            _saveSelectedDestinationToLocalStorate();
            saveSearchFilter();

            $http.post(
                API_URL +
                HOTEL_SEARCH_URL,
                filterBody, {
                    params: filterReq,
                    timeout: canceler.promise
                }
            ).then(
                function(response) {
                    // response.data.hotels = [response.data.hotels[0], response.data.hotels[1]];
                    searchSuccessHandle(response);
                    if (!response.data.errors && response.data.hotels && response.data.hotels.length > 0) {
                        showSubLoading();
                        timer = setTimeout(_callSmartSearch, 2000);
                    }

                },
                searchFailedHandle
            );
        }

        function validateDateRange(checkin, checkout) {
            var checkinDate = moment(checkin, 'DD-MM-YYYY');
            var checkoutDate = moment(checkout, 'DD-MM-YYYY');
            var compareDate = checkoutDate.subtract(30, "days");

            if (moment(checkinDate).isSameOrAfter(compareDate)) {
                return true;
            } else { // Over 30 days
                return false;
            }
        }

        function _callSmartSearch() {
            smartSearch(true);
        }

        // Handle search success
        function searchSuccessHandle(response) {
            resolved = false;
            hideLoading();
            if (response.data.errors) {
                searchError();
            } else {

                if (response.data.hotels && response.data.hotels.length > 0) {
                    _searchResultChanged(response.data);
                    _updateSearchFromCacheFilter(response.data.page, response.data.searchId);
                } else {
                    searchError();
                }
            }
        }

        function _updateSearchFromCacheFilter(pageable, searchId) {
            // Update currentpage
            filterFromCache.page = pageable.pageNumber;
            filterFromCache.searchId = searchId;
            filterFromCache.subSearchIds = [searchId];
            filterFromCache.totalPages = pageable.totalPage;
            filterFromCache.size = pageable.offset;
            _pageableChanged();
        }


        function getPagination() {
            return filterFromCache;
        }

        // Handle search failed
        function searchFailedHandle(error) {
            resolved = false;
            if (countRetry <= RETRY_LIMIT) {
                timer = setTimeout(function() {
                    search();
                }, 1000);
                showLoading();

            } else {
                hideLoading();
                searchError();
                countRetry = 0;
            }
        }

        // Notify to action when Search Error occured
        function searchError() {
            _updateState(hotelStates.SEARCH_ERROR);
        }

        // Notify to action show loading
        function showSubLoading() {
            _updateState(hotelStates.SHOW_SUB_LOADING);
        }

        // Notify to action show loading
        function showLoading() {
            _updateState(hotelStates.SHOW_LOADING);
        }

        // Notify to action hide loading
        function hideLoading() {
            _updateState(hotelStates.HIDE_LOADING);
        }

        function _pageableChanged() {
            _updateState(hotelStates.PAGEABLE_CHANGED, filterFromCache);
        }

        function _filterAdvanceChanged() {
            _updateState(hotelStates.HOTEL_ADVANCE_SEARCH_CHANGED, filterAdvance);
        }

        // Notify to action when search finish success. Include smart search and search function
        function _searchResultChanged(data) {
            _updateState(hotelStates.FINISH_SEARCH, data);
        }

        // Notify to action when search filter changed
        function _searchFilterChanged() {
            saveSearchFilter();
            _updateState(hotelStates.CHANGE_SEARCH_FILTER, getSearchOptions());
        }

        // Ulti function to notify states changed
        function _updateState(state, payload) {
            $log.debug("=== State changed ===");
            $log.info(state);
            $log.debug(payload);

            $rootScope.$emit(HOTEL_STATES, {
                state: state,
                payload: angular.copy(payload)
            });
        }

        // Ulti function to open modal update pax detail
        function openModalUpdateRoomDetail() {
            $uibModal.open({
                animation: true,
                backdrop: true,
                templateUrl: 'app/hotels/hotel.chooseroom.html',
                controller: 'HotelChooseroomController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
        }

        // Util funtion to get sumary pax info
        function getPaxSummary() {
            var paxDetail = {
                roomQuantity: 0,
                adultQuantity: 0,
                childQuantity: 0
            };
            paxDetail.roomQuantity = filterBody.length;
            filterBody.forEach(function name(pax) {
                paxDetail.adultQuantity += +pax.adultQuantity;
                paxDetail.childQuantity += +pax.childQuantity;
            });

            return paxDetail;
        }

        return services;
    }
})();


(function() {
    'use strict';
    angular
        .module('B2B2CGatewayApp')
        .factory('GlobalSrv', GlobalSrv);

    GlobalSrv.$inject = ['$resource', '$localStorage', '$sessionStorage'];

    function GlobalSrv($resource, $localStorage, $sessionStorage) {

        return {
            // Local Airporst
            getLocalAirports: function() {
                var model = $localStorage.localAirports;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            addLocalAirports: function(values) {
                    var v = this.getLocalAirports();

                    for (var i in values) {
                        // if (v.indexOf(values[i]) == -1) {
                        //     console.log(values[i]);
                        //     v.push(values[i]);
                        // }

                        if (v.filter(function(e) {
                                return e.id == values[i].id && e.code == values[i].code;
                            }).length <= 0) {
                            /* vendors contains the element we're looking for */
                            // console.log(values[i]);
                            v.push(values[i]);
                        }
                    }

                    $localStorage.localAirports = v;

                }

                // VN Airports
                ,
            getVnAirports: function() {
                var model = $localStorage.vnAirports;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            setVnAirports: function(value) {
                    $localStorage.vnAirports = value;
                }

                // lookups
                ,
            getAllLookups: function() {
                var model = $localStorage.allLookups;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            setAllLookups: function(value) {
                    $localStorage.allLookups = value;
                }

                // countries
                ,
            getAllCountries: function() {
                var model = $localStorage.allCountries;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            setAllCountries: function(value) {
                    $localStorage.allCountries = value;
                }

                // destinations
                ,
            getLocalDestinations: function() {
                var model = $localStorage.localDestinations;
                if (model == undefined || model == null) {
                    model = [];
                }
                return model;
            },
            addLocalDestinations: function(values) {
                    // var v = this.getLocalDestinations();

                    // for (var i in values) {
                    //     if (v.indexOf(values[i]) == -1) {
                    //         v.push(values[i]);
                    //     }
                    // }

                    $localStorage.localDestinations = values;
                }

                ,
            addRecentViewHotels: function(value) {
                if (!$localStorage.recentHotels) {
                    $localStorage.recentHotels = [];
                }

                var index = $localStorage.recentHotels.indexOf(value);

                if (index > -1) {
                    $localStorage.recentHotels.splice(index, 1);
                }

                $localStorage.recentHotels.push(value);

                if ($localStorage.recentHotels.length > 5) {
                    $localStorage.recentHotels = $localStorage.recentHotels.splice(0, $localStorage.recentHotels.length - 5);
                }

            },
            getRecentViewHotels: function() {
                var hotels = $localStorage.recentHotels ? $localStorage.recentHotels : [];
                if (hotels.length > 3) {
                    return hotels.slice(-3).reverse();
                } else {
                    return hotels.reverse();
                }
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('B2B2CGatewayApp')
        .factory('Flight', Flight);

    Flight.$inject = ['$log', '$rootScope', '$q', '$resource', '$http', '$timeout', 'RequestUtils', 'GlobalSrv', 'DataService', 'PricingUtils',
        'TICKET_SRV_BASE_URL',
        'DEFAULT_PAGE_SIZE',
        'TICKET_SEARCH_URL',
        'TICKET_SEARCH_INTERNATIONAL_URL',
        'TICKET_SEARCH_CACHE_URL',
        'TICKET_GET_FILTER_OPTIONS_URL',
        'TICKET_GET_GROUP_DETAIL_URL',
        'TICKET_AIR_REVALIDATE_URL',
        'TICKET_CREATE_DRAFT_BOOKING_URL',
        'TICKET_UPDATE_BOOKING_TAGS_URL',
        'TICKET_CHANGE_DRAFT_BOOKING_OWNER_URL',
        'TICKET_ADD_TRAVELLER_URL',
        'TICKET_PAYMENT_BOOKING_URL',
        'TICKET_ORDER_TICKET_URL',
        'TICKET_GET_FARE_RULES_URL',
        'TICKET_AIR_GET_SSR_URL',
        'PAYMENT_PAYMENT_BOOKING_URL',
        'PAYMENT_FEE_OPTIONS_URL',
        'PAYMENT_PROMO_DISCOUNT_URL',
        'PAYMENT_PROMO_OPTIONS_URL',
        'PRICING_VOUCHER_VALIDATE_URL',
        'PRICING_VOUCHER_REDEEM_URL',
        'PRICING_PROMO_REDEEM_URL',
        'PRICING_PROMO_VOID_URL',
        'TIKI_ORDER_URL',
        'VIETTEL_URL',
        'LIENVIET_URL',
        'SEA_URL',
        '$cookies',
        '$window',
        'DialogService',
        'API_URL',
        'API_URL_CALLBACK'
    ];

    function Flight($log, $rootScope, $q, $resource, $http, $timeout, RequestUtils, GlobalSrv, DataService, PricingUtils,
        TICKET_SRV_BASE_URL,
        DEFAULT_PAGE_SIZE,
        TICKET_SEARCH_URL,
        TICKET_SEARCH_INTERNATIONAL_URL,
        TICKET_SEARCH_CACHE_URL,
        TICKET_GET_FILTER_OPTIONS_URL,
        TICKET_GET_GROUP_DETAIL_URL,
        TICKET_AIR_REVALIDATE_URL,
        TICKET_CREATE_DRAFT_BOOKING_URL,
        TICKET_UPDATE_BOOKING_TAGS_URL,
        TICKET_CHANGE_DRAFT_BOOKING_OWNER_URL,
        TICKET_ADD_TRAVELLER_URL,
        TICKET_PAYMENT_BOOKING_URL,
        TICKET_ORDER_TICKET_URL,
        TICKET_GET_FARE_RULES_URL,
        TICKET_AIR_GET_SSR_URL,
        PAYMENT_PAYMENT_BOOKING_URL,
        PAYMENT_FEE_OPTIONS_URL,
        PAYMENT_PROMO_DISCOUNT_URL,
        PAYMENT_PROMO_OPTIONS_URL,
        PRICING_VOUCHER_VALIDATE_URL,
        PRICING_VOUCHER_REDEEM_URL,
        PRICING_PROMO_REDEEM_URL,
        PRICING_PROMO_VOID_URL,
        TIKI_ORDER_URL,
        VIETTEL_URL,
        LIENVIET_URL,
        SEA_URL,
        $cookies,
        $window,
        DialogService,
        API_URL,
        API_URL_CALLBACK
    ) {

        var service = {
            searchFlight: searchFlight,
            searchFlightInternational: searchFlightInternational

                ,
            searchFlightInCache: searchFlightInCache,
            searchGroupDetail: searchGroupDetail

                ,
            getFareRules: getFareRules

                ,
            getDateAvailableOptions: getDateAvailableOptions,
            getAirlineAvailableOptions: getAirlineAvailableOptions,
            getTransitAvailableOptions: getTransitAvailableOptions,
            getTimeAvailableOptions: getTimeAvailableOptions,
            getClassAvailableOptions: getClassAvailableOptions,
            getClassInterAvailableOptions: getClassInterAvailableOptions,
            getTicketPolicyOptions: getTicketPolicyOptions,
            getTicketSsr: getTicketSsr

                ,
            getAdvanceFilterOptions: getAdvanceFilterOptions

                ,
            revalidateTicket: revalidateTicket,
            createDraftBooking: createDraftBooking,
            updateBookingTags: updateBookingTags,
            changeDraftBookingOwner: changeDraftBookingOwner,
            addTicketTravellers: addTicketTravellers,
            paymentBooking: paymentBooking,
            orderTickets: orderTickets

                ,
            getPopularPlaces: getPopularPlaces,
            getPopularFlights: getPopularFlights,
            getPopularHotels: getPopularHotels

                ,
            gPaymentFeeOpt: gPaymentFeeOpt,
            gPaymentPromoDiscount: gPaymentPromoDiscount,
            validatePromo: validatePromo,
            redeemPromo: redeemPromo,
            voidPromo: voidPromo,
            gPaymentPromotion: gPaymentPromotion,
            gPaymentBooking: gPaymentBooking

                ,
            validateVoucher: validateVoucher,
            redeemVoucher: redeemVoucher,
            flightBookingOTPService: flightBookingOTPService,
            createOrderTiki: createOrderTiki,
            getViettelPaymentURL: getViettelPaymentURL,
            externalPayment: externalPayment,
            lienVietPayment: lienVietPayment
        };

        /**
         *
         * @param options
         */
        function searchFlight(options) {
            var paras = {
                'page': options.page ? options.page : 0,
                'size': options.size ? options.size : DEFAULT_PAGE_SIZE,
                // 'origin_code': options.fromAirPort ? 'HAN' : 'HAN',
                // 'destination_code': options.toAirPort ? 'SGN' : 'SGN',
                'origin_code': options.fromAirPort,
                'destination_code': options.toAirPort,
                // 'departure_date': options.departureDate,
                // 'returnture_date': options.returnDate ? options.returnDate : options.departureDate,
                'departure_date': moment(options.departureDate, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                //'returnture_date': options.returnDate ? moment(options.returnDate).format('MM-DD-YYYY') : moment(options.departureDate).format('MM-DD-YYYY'),
                'returnture_date': moment(options.returnDate, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                'cabin_class': 'E',
                'route_type': options.searchType == 'oneway' ? 'ONEWAY' : 'ROUNDTRIP',
                // 'route_type': 'ONEWAY',
                'aduts_qtt': options.adultNo ? options.adultNo : 1,
                'children_qtt': options.childrenNo ? options.childrenNo : 0,
                'infants_qtt': options.newBornNo ? options.newBornNo : 0,
                'suppliers': options.suppliers ? options.suppliers : ['VJ', 'BL', 'VN', 'QH'],
                'time': +new Date(),
                'key': ""
            };

            var strInput = paras.origin_code + paras.destination_code + paras.departure_date + paras.returnture_date + paras.cabin_class + paras.route_type +
                paras.aduts_qtt + paras.children_qtt + paras.infants_qtt + paras.page + paras.size + paras.time;

            var hashMac = CryptoJS.HmacSHA256(strInput, "Gotadi").toString(CryptoJS.enc.Base64);

            paras.key = hashMac;

            // $log.log("++++++++++++++++++++++++++++");
            // $log.log("Search criteria searchFlight:");
            // //$log.log("paras=" + JSON.stringify(paras));
            // $log.log("paras=" + paras);
            // $log.log("++++++++++++++++++++++++++++");

            return $http({
                method: 'GET',
                url: API_URL + TICKET_SEARCH_URL,
                params: paras
            }).then(function successCallback(response) {
                $log.log('successCallback searchFlight');
                $log.log(response);
                $timeout(function() {
                    $rootScope.$broadcast('event-flight-seach-completed');
                });
                //$rootScope.$broadcast('event-flight-seach-completed');
                return response.data;
            }, function errorCallback(response) {
                $log.log('errorCallback searchFlight');
                $log.log(response);
                $timeout(function() {
                    $rootScope.$broadcast('event-flight-seach-completed');
                });
                return $q.reject(response);
                //return response.data;
            });
        }

        /**
         *
         * @param options
         */
        function searchFlightInternational(options) {
            var paras = {
                'page': options.page ? options.page : 0,
                'size': options.size ? options.size : DEFAULT_PAGE_SIZE,
                // 'origin_code': options.fromAirPort ? 'HAN' : 'HAN',
                // 'destination_code': options.toAirPort ? 'SGN' : 'SGN',
                'origin_code': options.fromAirPort ? options.fromAirPort : 'HAN',
                'destination_code': options.toAirPort ? options.toAirPort : 'SGN',
                'departure_date': moment(options.departureDate, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                'returnture_date': moment(options.returnDate, 'DD-MM-YYYY').format('MM-DD-YYYY'),
                // 'departure_date': '05-05-2017',
                // 'returnture_date': '06-06-2017',
                'cabin_class': 'E',
                'route_type': options.searchType == 'oneway' ? 'ONEWAY' : 'ROUNDTRIP',
                // 'route_type': 'ONEWAY',
                'aduts_qtt': options.adultNo ? options.adultNo : 1,
                'children_qtt': options.childrenNo ? options.childrenNo : 0,
                'infants_qtt': options.newBornNo ? options.newBornNo : 0,
                // 'suppliers': ['VIETJET', 'JETSTAR', 'VNA', '1B', 'MF']
                'time': +new Date(),
                'key': ""
            };

            var strInput = paras.origin_code + paras.destination_code + paras.departure_date + paras.returnture_date + paras.cabin_class + paras.route_type +
                paras.aduts_qtt + paras.children_qtt + paras.infants_qtt + paras.page + paras.size + paras.time;

            var hashMac = CryptoJS.HmacSHA256(strInput, "Gotadi").toString(CryptoJS.enc.Base64);

            paras.key = hashMac;

            // $log.log("++++++++++++++++++++++++++++");
            // $log.log("Search criteria searchFlightInternational:");
            // //$log.log("paras=" + JSON.stringify(paras));
            // $log.log("paras=" + paras);
            // $log.log("++++++++++++++++++++++++++++");

            return $http({
                method: 'GET',
                url: API_URL + TICKET_SEARCH_INTERNATIONAL_URL,
                params: paras
            }).then(function successCallback(response) {
                $log.log('successCallback searchFlightInternational');
                $log.log(response);
                $timeout(function() {
                    $rootScope.$broadcast('event-flight-seach-completed');
                });
                //$rootScope.$broadcast('event-flight-seach-completed');
                return response.data;
            }, function errorCallback(response) {
                $log.log('errorCallback searchFlightInternational');
                $log.log(response);
                $timeout(function() {
                    $rootScope.$broadcast('event-flight-seach-completed');
                });
                return $q.reject(response);
                //return response.data;
            });
        }

        /**
         *
         * @param options
         */
        function searchFlightInCache(options) {
            var paras = {
                page: options.page ? options.page : 0,
                size: options.size ? options.size : DEFAULT_PAGE_SIZE,
                // sort: options.sortField ? options.sortField + ",asc" : "price,asc"
                sort: options.sortField + "," + options.sortDir
            };

            // Default SORT
            if (!options.sortField) {
                paras.sort = 'price,asc';
            }

            var data = {
                searchId: options.searchId
            };

            // if (options.advanceFilters) {
            //     data.filter = options.advanceFilters;
            //     data.filter.step = options.selectStep;
            // } else {
            //     data.filter = {};
            //     data.filter.step = options.selectStep;
            // }
            data.filter = options.advanceFilters;
            // data.filter.groupId = options.searchId;

            //+++ Tung: 23Sep2017 - fix TypeError: Cannot set property 'step' of undefined
            if (data.filter) {
                data.filter.step = options.selectStep;
            } else {
                data.filter = {};
                data.filter.step = options.selectStep;
            }
            //---

            // alert(options.searchType + ":" + options.selectStep);

            if (options.returnDomestic == true && options.dtype == 'domestic') {
                data.departureItinerary = options.departureItinerary;
            }
            // data.departureItinerary = options.departureItinerary;

            var config = {
                headers: {
                    'Content-Type': 'application/json'
                }
            };

            // $log.log("++++++++++++++++++++++++++++");
            // $log.log("Search criteria searchFlightInCache:");
            // //$log.log("data = " + JSON.stringify(data));
            // //$log.log("paras = " + JSON.stringify(paras));
            // $log.log("data = " + data);
            // $log.log("paras = " + paras);
            // $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + RequestUtils.buildUrl(TICKET_SEARCH_CACHE_URL,
                        paras), data, config)
                .then(function successCallback(response) {
                    $log.log('successCallback searchFlightInCache');
                    $log.log(response);
                    return response.data;
                });
        }

        /**
         *
         * @param options
         */
        function searchGroupDetail(options) {
            var paras = {
                page: options.page ? options.page : 0,
                // size: options.size ? options.size : DEFAULT_PAGE_SIZE,
                size: 1000,
                // sort: options.sortField ? options.sortField + ",asc" : "price,asc"
                sort: options.sortField + "," + options.sortDir
            };

            // Default SORT
            if (!options.sortField) {
                paras.sort = 'price,asc';
            }

            var departureItinerary = null;
            if (options.selectStep == 2) {
                departureItinerary = {
                    groupId: options.departureItinerary.groupId,
                    airlineCode: options.departureItinerary.airlineCode,
                    fareSourceCode: options.departureItinerary.fareSourceCode,
                    supplierCode: options.departureItinerary.supplierCode,
                    searchId: options.departureItinerary.searchId
                }
            }

            var data = {
                searchId: options.searchId,
                departureItinerary: departureItinerary
            };
            //Tan fix thay đổi hành trình (GPM-275)
            //if(data.filter) {
            // NAM.HUYNHPHUONG - FIX LOI SORT VNA
            if (options.advanceFilters) {
                data.filter = options.advanceFilters;
                // data.filter.groupId = options.searchId;
                // TODO: check for change from SearchID -> GroupID
                data.filter.groupId = options.groupId;

                data.filter.minPrice = options.minPrice;
                data.filter.loadMore = options.loadMore;
                data.filter.priceItineraryId = options.priceItineraryId;
                data.filter.step = options.selectStep;
            }
            // $log.log("++++++++++++++++++++++++++++");
            // $log.log("Search Options searchGroupDetail:");
            // // $log.log("data=" + JSON.stringify(data));
            // $log.log("data=" + data);
            // $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + RequestUtils.buildUrl(TICKET_GET_GROUP_DETAIL_URL + options.groupId,
                        paras)
                    //TICKET_GET_GROUP_DETAIL_URL + options.groupId
                    , data)
                .then(function successCallback(response) {
                    $log.log('successCallback searchGroupDetail');
                    $log.log("response=");
                    $log.log(response);
                    return response.data;
                });
        }

        /**
         *
         * @param options
         * @param groupItem
         * @param pricedItinerary
         */
        function getFareRules(options, groupItem, pricedItinerary) {
            var data = {
                fareSourceCode: pricedItinerary.airItineraryPricingInfo.fareSourceCode,
                groupId: groupItem.groupId,
                searchId: options.searchId
            };

            // $log.log("++++++++++++++++++++++++++++");
            // $log.log("getFareRules:");
            // $log.log("data=" + data);
            // $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + TICKET_GET_FARE_RULES_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback getFareRules');
                    $log.log("response=");
                    $log.log(response);
                    return response.data;
                });
        }

        /**
         *
         * @param options
         */
        function getAdvanceFilterOptions(options) {
            var data = {
                searchId: options.searchId
            };

            if (options.returnDomestic == true && options.dtype == 'domestic') {
                data.departureItinerary = options.departureItinerary;
            }

            // data.departureItinerary = options.departureItinerary;

            $log.log("++++++++++++++++++++++++++++");
            $log.log("Search Options getAdvanceFilterOptions:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + TICKET_GET_FILTER_OPTIONS_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback getAdvanceFilterOptions');
                    // $log.log("response = " + JSON.stringify(response));
                    $timeout(function() {
                        $rootScope.$broadcast('event-flight-seach-completed');
                    });
                    return response.data ? response.data.itineraryFilter : {};
                });
        }

        /**
         *
         * @returns {Array}
         */
        function getTransitAvailableOptions() {
            var data = [];
            data = [{
                id: 0,
                text: 'Bay thẳng',
                checked: false
            }, {
                id: 1,
                text: '1 Điểm Dừng',
                checked: false
            }, {
                id: 2,
                text: '2+ Điểm Dừng',
                checked: false
            }];

            return data;
        }

        /**
         *
         * @returns {*[]}
         */
        function getTimeAvailableOptions() {
            var data = [{
                id: 0,
                from: '0:00',
                to: '6:00',
                val: '-6',
                checked: false
            }, {
                id: 1,
                from: '6:00',
                to: '12:00',
                val: '+6-12',
                checked: false
            }, {
                id: 2,
                from: '12:00',
                to: '18:00',
                val: '+12-18',
                checked: false
            }, {
                id: 3,
                from: '18:00',
                to: '0:00',
                val: '+18',
                checked: false
            }];

            return data;
        }

        /**
         *
         * @returns {Array}
         */
        function getClassAvailableOptions() {
            var data = [];
            data = [{
                    id: "economy",
                    text: "ota_air.cabin_class.economy",
                    "checked": false
                }, {
                    id: "business",
                    text: "ota_air.cabin_class.business",
                    "checked": false
                }, {
                    id: "promo",
                    text: "ota_air.cabin_class.promo",
                    "checked": false
                }

            ];
            return data;
        }

        function getClassInterAvailableOptions() {
            var data = [];
            data = [{
                id: "economy",
                text: "ota_air.cabin_class.economy",
                "checked": false
            }, {
                id: "premium",
                text: "ota_air.cabin_class.premium",
                "checked": false
            }, {
                id: "business",
                text: "ota_air.cabin_class.business",
                "checked": false
            }, {
                id: "first",
                text: "ota_air.cabin_class.first",
                "checked": false
            }];
            return data;
        }

        /**
         *
         * @returns {*[]}
         */
        function getTicketPolicyOptions() {
            var data = [{
                id: "true",
                text: "Có thể hoàn vé",
                "checked": false
            }, {
                id: "false",
                text: "Không hoàn/ Huỷ",
                "checked": false
            }];
            return data;
        }

        /**
         *
         * @returns {Array}
         */
        function getDateAvailableOptions() {
            var data = [];
            return data;
        }

        /**
         *
         * @returns {Array}
         */
        function getAirlineAvailableOptions() {
            var data = [];
            var filter = DataService.getAdvanceSearchFilterOptions();
            if (filter && filter.airlineOptions) {
                angular.forEach(filter.airlineOptions, function(item) {
                    data.push({
                        id: item.split(":")[0],
                        text: item.split(":")[1],
                        price: item.split(":")[2],
                        unit: "VND",
                        checked: false
                    });
                });
            }
            return data;
        }

        /**
         *
         * @param options
         * @param groupItem
         * @param pricedItinerary
         */
        function revalidateTicket(options, groupItem, pricedItinerary) {

            var data = {
                searchId: options.searchId,
                fareSourceCode: pricedItinerary.airItineraryPricingInfo.fareSourceCode,
                groupId: groupItem.groupId
            };

            $log.log("revalidateTicket criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + TICKET_AIR_REVALIDATE_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback revalidateTicket');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                });
        }

        /**
         * Result from AirTicket DraftBooking
         * {
         *    "bookingType": "DOME",
         *    "isPerBookingType": false,
         *    "isRoundTripType": false,
         *    "markupType": "PER_PAX_PER_BOOKING",
         *    "roundType": "string",
         *    "success": false,
         *    "bookingCode": {
         *      "bookingCode": "string",
         *      "bookingNumber": "string"
         *    },
         *    "departDraftItineraryInfo": {
         *      "searchId": "string",
         *      "bookingDirection": "DEPARTURE",
         *      "fareSourceCode": "string",
         *      "groupId": "string",
         *      "itinTotalFare": {
         *          ...
         *     }
         *    },
         *    "returnDraftItineraryInfo": {
         *      "searchId": "string",
         *      "bookingDirection": "DEPARTURE",
         *      "fareSourceCode": "string",
         *      "groupId": "string",
         *      "itinTotalFare": {
         *         ...
         *     }
         *    }
         *  }
         */
        function createDraftBooking(options, groupItem, pricedItinerary, options2, groupItem2, pricedItinerary2) {

            var data = {
                itineraryInfos: [{
                    searchId: options.searchId,
                    fareSourceCode: pricedItinerary.airItineraryPricingInfo.fareSourceCode,
                    groupId: groupItem.groupId
                }]
                //searchId: options.searchId
            };

            if (options2 != null && options.dtype == 'domestic' && options.searchType == 'roundtrip') {
                // TODO: server check for duplication
                // if (options2 != null) {
                data.itineraryInfos.push({
                    searchId: options2.searchId,
                    fareSourceCode: pricedItinerary2.airItineraryPricingInfo.fareSourceCode,
                    groupId: groupItem2.groupId
                });
            }

            $log.log("createDraftBooking criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + TICKET_CREATE_DRAFT_BOOKING_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback createDraftBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback createDraftBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        // tam can cook
        function updateBookingTags(bookingId, tags) {

            return $http.put(
                    API_URL + TICKET_UPDATE_BOOKING_TAGS_URL + '/' + bookingId + '/tags', tags)
                .then(function successCallback(response) {
                    $log.log('successCallback updateBookingTags');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback updateBookingTags');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        /**
         *
         * @param booking_number
         */
        function changeDraftBookingOwner(booking_number) {

            var data = {
                bookingNumber: booking_number
            };

            $log.log("createDraftBooking criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + TICKET_CHANGE_DRAFT_BOOKING_OWNER_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback changeDraftBookingOwner');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback changeDraftBookingOwner');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        /**
         *
         * @param booking_number
         */
        function getTicketSsr(booking_number) {

            return $http({
                method: 'GET',
                url: API_URL + TICKET_AIR_GET_SSR_URL + '/' + booking_number
            }).then(function successCallback(response) {
                $log.log('successCallback getTicketSsr');
                $log.log(response);
                return response.data;
            }, function errorCallback(response) {
                $log.log('errorCallback getTicketSsr');
                $log.log(response);
                return $q.reject(response);
            });
        }

        /**
         *
         * @param options
         * @param bookingModel
         */
        function addTicketTravellers(options, bookingModel) {
            var data = {
                "bookingNumber": bookingModel.bookingNumber
                    //searchId: options.searchId,
                    ,
                bookingTravelerInfos: [],
                bookingContacts: []
                    /* TODO : traveler_info will be remove later */
                    //travelerInfo: {}
                    ,
                "taxReceiptRequest": {
                    "taxReceiptRequest": bookingModel.showForm,
                    "bookingNumber": bookingModel.bookingNumber,
                    "taxCompanyName": bookingModel.biCompany,
                    "taxAddress1": bookingModel.biAddress,
                    "taxAddress2": bookingModel.biMobile,
                    "taxNumber": bookingModel.biMst,
                    "taxPersonalInfoContact": JSON.stringify({
                        "name": bookingModel.tPCName,
                        "phone": bookingModel.tPCPhone,
                        "email1": bookingModel.tPCemail,
                        "fname": bookingModel.tPCfName,
                        "phoneCode3": bookingModel.tPCPhoneCode,
                        "note": bookingModel.tPCNote
                    })
                }
            };

            //+++ build bookingContacts
            var bookingContacts = [];
            var contacts = bookingModel.contacts;
            if (contacts !== null && contacts !== undefined) {
                angular.forEach(contacts, function(value, key) {
                    var c = value;

                    // var idx = c.ciName.indexOf(" ");
                    // var fname = c.ciName.substr(idx + 1);
                    // var sname = c.ciName.substr(0, idx);

                    bookingContacts.push({
                        "gender": c.ciGender,
                        "firstName": c.ciFName,
                        "surName": c.ciName,
                        "email": c.ciEmail,
                        "postCode": c.postcode,
                        // "phoneCode1": c.ciMobileCode,
                        "phoneCode1": "",
                        "phoneNumber1": c.ciMobile,

                        // "phoneCode2": c.ciMobileCode,
                        "phoneCode2": "",
                        "phoneNumber2": c.ciMobile

                        //"gender": "MALE",
                        //"address1": "string",
                        //"address2": "string",
                        //"ccEmail": "string",
                        //"city": "string",
                        //"contactLevel": "PRIMARY",
                        //"contactType": "CUSTOMER",
                        //"country": "string",
                        //"postalCode": "string"
                    });
                });
            }
            data.bookingContacts = bookingContacts;
            //---

            //+++ build bookingTravelerInfo include service request
            var bookingTravelerInfos = [];
            var customers = bookingModel.customers;

            if (customers !== null && customers !== undefined) {
                angular.forEach(customers, function(value, key) {
                    var c = value;

                    var travelerInfo = {
                        traveler: {},
                        serviceRequests: []
                    };

                    travelerInfo.traveler = {
                        "firstName": c.cuName,
                        "surName": c.cuFamilyName,
                        "gender": c.cuGender,
                        "adultType": c.type,
                        "dob": c.cuDob,

                        "memberCard": true,
                        "memberCardType": c.cuCardType,
                        "memberCardNumber": c.cuCardNo,

                        "country": c.cuNationality,
                        "nationality": c.cuNationality,

                        // "documentType": "string",
                        "documentNumber": c.cuId,
                        "documentIssuingCountry": c.cuNationality,
                        "documentExpiredDate": c.cuExpiredDate
                        // "documentExpiredDate": "2017-08-26T22:16:31.466Z",

                        // "documentIssuedDate": "2017-08-26T22:16:31.466Z",
                        // "address1": "string",
                        // "address2": "string",
                        // "email": "string",
                        // "city": "string",
                        //
                        // "phoneNumber1": "string",
                        // "phoneNumber2": "string",
                        // "phoneNumber3": "string",
                        // "phoneNumber4": "string",
                        // "phoneNumber5": "string",
                        // "postalCode": "string"
                    };

                    //+++ TODO - add additional pacakge
                    // if (options.searchType == 'oneway') {
                    //     var depSsr = options.ssrOfferItemsDepart[0].ssrItems;
                    // } else {
                    //     var depSsr = options.ssrOfferItemsDepart[0].ssrItems;
                    //     var retSsr = options.ssrOfferItemsReturn[0].ssrItems;
                    // }
                    if (c.departServiceRequests && c.departServiceRequests.length > 0) {
                        angular.forEach(c.departServiceRequests, function(value, key) {
                            var ssr = value;

                            $log.log("departServiceRequests add to traveler:");
                            // $log.log("data=" + JSON.stringify(ssr));
                            $log.log("data=" + ssr);
                            $log.log("++++++++++++++++++++++++++++");

                            travelerInfo.serviceRequests.push({
                                /* populate fareCode for each service_request */
                                /* bookingDirection will be DEPARTURE or RETURN */
                                "bookingDirection": "DEPARTURE",
                                "fareCode": ssr.fareSourceCode,
                                "serviceType": ssr.serviceType,
                                "ssrAmount": ssr.amount,
                                "ssrCode": ssr.code,
                                "ssrId": ssr.id,
                                "ssrName": ssr.name
                            });
                        });
                    }


                    if (c.returnServiceRequests && c.returnServiceRequests.length > 0) {
                        angular.forEach(c.returnServiceRequests, function(value, key) {
                            var ssr = value;

                            $log.log("returnServiceRequests add to traveler:");
                            // $log.log("data=" + JSON.stringify(ssr));
                            $log.log("data=" + ssr);
                            $log.log("++++++++++++++++++++++++++++");

                            travelerInfo.serviceRequests.push({
                                /* populate fareCode for each service_request */
                                /* bookingDirection will be DEPARTURE or RETURN */
                                "bookingDirection": "RETURN",
                                "fareCode": ssr.fareSourceCode,
                                "serviceType": ssr.serviceType,
                                "ssrAmount": ssr.amount,
                                "ssrCode": ssr.code,
                                "ssrId": ssr.id,
                                "ssrName": ssr.name
                            });
                        });
                    }
                    //---

                    bookingTravelerInfos.push(travelerInfo);
                });
            }

            data.bookingTravelerInfos = bookingTravelerInfos;
            //---

            // data.travelerInfo.airTravelers = airTravelers;
            // data.travelerInfo.contactInfos = contactInfos;

            $log.log("addTicketTravellers criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + TICKET_ADD_TRAVELLER_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback addTicketTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback addTicketTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        /**
         *
         * @param bookingModel
         * @param paymentModel
         * @param bjson
         */
        function paymentBooking(bookingModel, paymentModel, bjson) {

            if (paymentModel.cardModel) {
                paymentModel.cardModel.id = paymentModel.cardModel.cardId;
            }

            var data = {
                "bookingPaymentType": {
                    bookingCode: bookingModel.bookingCode,
                    bookingNumber: bookingModel.bookingNumber,
                    paymentType: paymentModel.paymentOption
                },
                "payByCreditCardReq": {
                    bookingNumber: bookingModel.bookingNumber,
                    bookingCode: bookingModel.bookingCode,
                    amount: PricingUtils.getTotalPricing(bjson),
                    card: paymentModel.cardModel,
                    paToken: paymentModel.paToken
                }
            };

            // $log.log("paymentBooking criteria:");
            // // $log.log("data=" + JSON.stringify(data));
            // $log.log("data=" + data);
            // $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + TICKET_PAYMENT_BOOKING_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback paymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback paymentBooking');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });

        }

        function gPaymentPromotion(productType, status, page, size) {
            $log.log('productTypeproductType');
            $log.log(productType);
            var config = {
                params: {
                    status: status,
                    productType: productType,
                    page: page,
                    size: size
                },
            };
            return $http.get(
                    API_URL + PAYMENT_PROMO_OPTIONS_URL, config)
                .then(function successCallback(response) {
                    $log.log('successCallback PAYMENT_PROMO');
                    $log.log(response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback PAYMENT_PROMO');
                    $log.log(response);
                    return $q.reject(response);
                });
        }

        /**
         *
         * @param bookingNumber
         * @param paymentType
         */
        function gPaymentPromoDiscount(bookingNumber, bookingCode, promotionId, promotionType) {
            var data = {
                "bookingNumber": bookingNumber,
                "bookingCode": bookingCode,
                "promotionId": promotionId,
                "promotionType": promotionType
            };
            return $http.post(
                    API_URL + PAYMENT_PROMO_DISCOUNT_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback gPaymentFeeOpt');
                    $log.log("response = " + response);

                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback gPaymentFeeOpt');
                    $log.log("response = " + response);

                    return $q.reject(response);
                });
        }

        /**
         *
         * @param bookingNumber
         * @param paymentType
         */
        function gPaymentFeeOpt(bookingNumber, paymentType, tempDiscountAmount) {
            var data = {
                "bookingNumber": bookingNumber,
                "paymentType": paymentType,
                "tempDiscountAmount": tempDiscountAmount
            };

            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + PAYMENT_FEE_OPTIONS_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback gPaymentFeeOpt');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);

                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback gPaymentFeeOpt');
                    // $log.log("response = " + JSON.stringify(response));
                    $log.log("response = " + response);

                    return $q.reject(response);
                });
        }

        function flightBookingOTPService(bookingModel, otpreq) {
            var data = {
                "bookingNumber": bookingModel.bookingNumber,
                otpServiceReq: otpreq,
                bookingTravelerInfos: [],
                bookingContacts: [],
                taxReceiptRequest: {
                    "taxReceiptRequest": bookingModel.showForm,
                    "bookingNumber": bookingModel.bookingNumber,
                    "taxCompanyName": bookingModel.biCompany,
                    "taxAddress1": bookingModel.biAddress,
                    "taxAddress2": bookingModel.biMobile,
                    "taxNumber": bookingModel.biMst,
                    "taxPersonalInfoContact": JSON.stringify({
                        "name": bookingModel.tPCName,
                        "phone": bookingModel.tPCPhone,
                        "email1": bookingModel.tPCemail,
                        "fname": bookingModel.tPCfName,
                        "phoneCode3": bookingModel.tPCPhoneCode,
                        "note": bookingModel.tPCNote
                    })
                }
            };

            //+++ build bookingContacts
            var bookingContacts = [];
            var contacts = bookingModel.contacts;
            if (contacts !== null && contacts !== undefined) {
                angular.forEach(contacts, function(value, key) {
                    var c = value;
                    bookingContacts.push({
                        "gender": c.ciGender,
                        "firstName": c.ciFName,
                        "surName": c.ciName,
                        "email": c.ciEmail,
                        "postCode": c.postcode,
                        "phoneCode1": "",
                        "phoneNumber1": c.ciMobile,
                        "phoneCode2": "",
                        "phoneNumber2": c.ciMobile
                    });
                });
            }
            data.bookingContacts = bookingContacts;
            //---

            //+++ build bookingTravelerInfo include service request
            var bookingTravelerInfos = [];
            var customers = bookingModel.customers;

            if (customers !== null && customers !== undefined) {
                angular.forEach(customers, function(value, key) {
                    var c = value;

                    var travelerInfo = {
                        traveler: {},
                        serviceRequests: []
                    };

                    travelerInfo.traveler = {
                        "firstName": c.cuName,
                        "surName": c.cuFamilyName,
                        "gender": c.cuGender,
                        "adultType": c.type,
                        "dob": c.cuDob,
                        "memberCard": true,
                        "memberCardType": c.cuCardType,
                        "memberCardNumber": c.cuCardNo,
                        "country": c.cuNationality,
                        "nationality": c.cuNationality,
                        "documentNumber": c.cuId,
                        "documentIssuingCountry": c.cuNationality,
                        "documentExpiredDate": c.cuExpiredDate
                    };

                    //+++ TODO - add additional pacakge
                    if (c.departServiceRequests && c.departServiceRequests.length > 0) {
                        angular.forEach(c.departServiceRequests, function(value, key) {
                            var ssr = value;
                            $log.log("departServiceRequests add to traveler:");
                            // $log.log("data=" + JSON.stringify(ssr));
                            $log.log("data=" + ssr);
                            $log.log("++++++++++++++++++++++++++++");

                            travelerInfo.serviceRequests.push({
                                /* populate fareCode for each service_request */
                                /* bookingDirection will be DEPARTURE or RETURN */
                                "bookingDirection": "DEPARTURE",
                                "fareCode": ssr.fareSourceCode,
                                "serviceType": ssr.serviceType,
                                "ssrAmount": ssr.amount,
                                "ssrCode": ssr.code,
                                "ssrId": ssr.id,
                                "ssrName": ssr.name
                            });
                        });
                    }


                    if (c.returnServiceRequests && c.returnServiceRequests.length > 0) {
                        angular.forEach(c.returnServiceRequests, function(value, key) {
                            var ssr = value;

                            $log.log("returnServiceRequests add to traveler:");
                            // $log.log("data=" + JSON.stringify(ssr));
                            $log.log("data=" + ssr);
                            $log.log("++++++++++++++++++++++++++++");

                            travelerInfo.serviceRequests.push({
                                /* populate fareCode for each service_request */
                                /* bookingDirection will be DEPARTURE or RETURN */
                                "bookingDirection": "RETURN",
                                "fareCode": ssr.fareSourceCode,
                                "serviceType": ssr.serviceType,
                                "ssrAmount": ssr.amount,
                                "ssrCode": ssr.code,
                                "ssrId": ssr.id,
                                "ssrName": ssr.name
                            });
                        });
                    }
                    //---

                    bookingTravelerInfos.push(travelerInfo);
                });
            }

            data.bookingTravelerInfos = bookingTravelerInfos;

            $log.log("addTicketTravellers criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");
            console.log(data);
            return $http.post(
                    API_URL + TICKET_ADD_TRAVELLER_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback addTicketTravellers');
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback addTicketTravellers');
                    return $q.reject(response);
                });
        }


        /**
         *
         * @param bookingModel
         * @param paymentModel
         * @param bjson
         */
        function gPaymentBooking(bookingModel, paymentModel, bjson) {

            var data = null;
            //HuyTT
            if (paymentModel.paymentOption === "VNPAYQR") {
                data = {
                    "bookingPaymentType": {
                        bookingCode: bookingModel.bookingCode,
                        bookingNumber: bookingModel.bookingNumber,
                        paymentType: paymentModel.paymentOption
                    },
                    "payByVnPayReq": {
                        bookingNumber: bookingModel.bookingNumber,
                        bookingCode: bookingModel.bookingCode,
                        amount: PricingUtils.getTotalPricing(bjson),
                        is_mobile: bjson.is_mobile
                    }
                };
            } else if (paymentModel.paymentOption === "MOMO") {
                data = {
                    "bookingPaymentType": {
                        bookingCode: bookingModel.bookingCode,
                        bookingNumber: bookingModel.bookingNumber,
                        paymentType: paymentModel.paymentOption
                    },
                    "payByMoMoRequest": {
                        bookingNumber: bookingModel.bookingNumber,
                        bookingCode: bookingModel.bookingCode,
                        amount: PricingUtils.getTotalPricing(bjson),
                        is_mobile: bjson.is_mobile
                    }
                };
            } else if (paymentModel.paymentOption === "VIETTELPAY") {
                data = {
                    "bookingPaymentType": {
                        bookingCode: bookingModel.bookingCode,
                        bookingNumber: bookingModel.bookingNumber,
                        paymentType: paymentModel.paymentOption
                    },
                    "partnerPaymentReq": {
                        bookingNumber: bookingModel.bookingNumber,
                        bookingCode: bookingModel.bookingCode,
                        amount: PricingUtils.getTotalPricing(bjson),
                        is_mobile: bjson.is_mobile
                    }
                };
            } else if (paymentModel.paymentOption === "PAYOO") {
                data = {
                    "bookingPaymentType": {
                        bookingCode: bookingModel.bookingCode,
                        bookingNumber: bookingModel.bookingNumber,
                        paymentType: paymentModel.paymentOption
                    },
                    "payByPayooReq": {
                        bookingNumber: bookingModel.bookingNumber,
                        bookingCode: bookingModel.bookingCode,
                        amount: PricingUtils.getTotalPricing(bjson),
                        is_mobile: bjson.is_mobile
                    }
                };
            }
            //End HuyTT
            else {
                data = {
                    "bookingPaymentType": {
                        bookingCode: bookingModel.bookingCode,
                        bookingNumber: bookingModel.bookingNumber,
                        paymentType: paymentModel.paymentOption
                    },
                    "payByDebitCardReq": {
                        bookingNumber: bookingModel.bookingNumber,
                        bookingCode: bookingModel.bookingCode,
                        amount: PricingUtils.getTotalPricing(bjson),
                        address: paymentModel.cardModel.address,
                        email: paymentModel.cardModel.email,
                        fullname: paymentModel.cardModel.fullName,
                        mobile: paymentModel.cardModel.mobile,
                        paymentOption: paymentModel.cardModel.bank
                    }
                };
            }

            $log.log("gPaymentBooking criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=");
            $log.log(data);

            return $http.post(
                    API_URL + PAYMENT_PAYMENT_BOOKING_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback gPaymentBooking 2');
                    $log.log(response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback gPaymentBooking 2');
                    $log.log(response);
                    return $q.reject(response);
                });

        }

        /**
         *
         * @param bookingModel
         */
        function orderTickets(bookingModel) {

            var data = {
                bookingCode: bookingModel.bookingCode,
                bookingNumber: bookingModel.bookingNumber

            };

            $log.log("orderTickets criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + TICKET_ORDER_TICKET_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback orderTickets');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback orderTickets');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        /**
         *
         * @returns {string[]}
         */
        function getPopularPlaces() {
            var data = [
                "Đà Nẵng", "Nha Trang", "Đà Lạt", "Phú Quốc", "Hà Nội"
            ];
            return data;
        }

        /**
         *
         * @returns {string[]}
         */
        function getPopularFlights() {
            var data = [
                "Hồ Chí Minh đến Nha Trang",
                "Hồ Chí Minh đến Đà Lạt",
                "Hồ Chí Minh đến Huế",
                "Hồ Chí Minh đến Đà Nẵng",
                "Hồ Chí Minh đến Hà Nội",
                "Hồ Chí Minh đến Hải Phòng",
                "Hồ Chí Minh đến Vinh",
                "Hồ Chí Minh đến Phú Quốc"
            ];
            return data;
        }

        /**
         *
         * @returns {string[]}
         */
        function getPopularHotels() {
            var data = [
                "Shanghai hotel", "Beijing hotel", "Guangzhou hotel"
            ];
            return data;
        }

        /**
         *
         * @param bookingModel
         */
        function validatePromo(bookingModel, id) {
            var data = {
                id: id,
                bookingNumber: bookingModel.bookingNumber
            };
            $log.log("validateVoucher criteria:");
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + PRICING_VOUCHER_VALIDATE_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback validateVoucher');
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback validateVoucher');
                    return $q.reject(response);
                });
        }

        function validateVoucher(bookingModel) {

            var voucherObj = bookingModel.voucher;

            var data = {
                voucherCode: voucherObj.voucherCode,
                bookingNumber: bookingModel.bookingNumber
            };

            $log.log("validateVoucher criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + PRICING_VOUCHER_VALIDATE_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback validateVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback validateVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        /**
         *
         * @param bookingModel
         */
        function redeemVoucher(bookingModel) {

            var voucherObj = bookingModel.voucher;

            var data = {
                voucherCode: voucherObj.voucherCode,
                trackingCode: voucherObj.trackingCode,
                bookingNumber: bookingModel.bookingNumber
            };

            $log.log("redeemVoucher criteria:");
            // $log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");



            return $http.post(
                    API_URL + PRICING_VOUCHER_REDEEM_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback redeemVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback redeemVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        function createOrderTiki(bookingNumber, customerID) {
            var url = API_URL_CALLBACK + '/api/tiki/place-order?bookingNumber=' + bookingNumber + '&tikiCustomerId=' + customerID;


            $log.log("Create Tiki order");
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    url, null, {
                        noAuth: true
                    })
                .then(function successCallback(response) {
                    $log.log('successCallback Create Tiki order');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback Create Tiki order');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        function getLienVietPaymentURL(bookingNumber) {

            var data = $cookies.get("lienviet-data");
            var key = $cookies.get("lienviet-key");

            var url = API_URL_CALLBACK + LIENVIET_URL + '/place-order';
            var body = {
                bookingNumber: bookingNumber,
                data: data,
                key: key
            };

            return $http.post(
                    url, body, {
                        noAuth: true
                    })
                .then(function successCallback(response) {
                    $log.log('successCallback Lien Viet order');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback Lien Viet order');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });

        }

        function getViettelPaymentURL(bookingNumber) {

            var reqURL = API_URL_CALLBACK + VIETTEL_URL + '/tmdt/booking/get-request-place-order?bookingNumber=' + bookingNumber;

            return $http({
                    method: 'get',
                    url: reqURL,
                    transformResponse: function(response) {
                        return response;
                    },
                    noAuth: true
                })
                .then(function successCallback(response) {
                    $log.log('successCallback redeemVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback redeemVoucher');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }


        function externalPayment(bookingNumber) {
            var type = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;
            switch (type) {
                case "TIKI":
                    var customerID = $cookies.get('msisdn') || localStorage.getItem('msisdn');
                    createOrderTiki(bookingNumber, customerID).then(function(response) {
                        $window.top.location.href = response.redirect_url;

                    }, function error(response) {
                        $log.log('errorCallback Create Tiki order');
                        // $log.log("response = " + JSON.stringify(response));
                    });
                    break;
                case "VIETTEL":
                    getViettelPaymentURL(bookingNumber).then(function(response) {
                        $window.location.href = response;

                    }, function error(response) {
                        $log.log('errorCallback Create viettel order');
                        // $log.log("response = " + JSON.stringify(response));
                    });
                    break;
                case "SEABANK":
                    // // alert("Post Iframe message");
                    // var appId = "seabankapp";
                    // var seaData = {
                    //     "OrderId": bookingNumber,
                    //     "RequestId":""
                    // };
                    var data = 'seabankapp://' + encodeURIComponent('{"OrderId":"' + bookingNumber + '","RequestId":""}');

                    if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
                        window.location = data;
                    } else if (navigator.userAgent.toLowerCase().indexOf("android") > -1) {
                        var androidUrl = "intent://view?data=" + encodeURIComponent('{"OrderId":"' + bookingNumber + '","RequestId":""}') +
                            "/#intent;scheme=" + 'seabankapp;package=' + 'vn.com.seabank.mb1' + ";end";
                        window.location = androidUrl;
                    } else {
                        parent.postMessage(bookingNumber, "*");
                    }

                    break;

                case "LIENVIETBANK":
                    // TODO: Implement get and redirect to LienViet payment site
                    getLienVietPaymentURL(bookingNumber).then(function(response) {
                        if (response.success) {
                            $window.location.href = response.result;
                        } else {
                            DialogService.openAlertDialog({
                                title: "Error",
                                message: response.result
                            });
                        }

                    }, function error(response) {
                        $log.log('errorCallback Create viettel order');
                        // $log.log("response = " + JSON.stringify(response));
                    })
                    break;
                case "FSOFT":
                    break;
                default:
                    if (!!type) {
                        partnerPayment(bookingNumber, type).then(function(response) {
                            if (response.isSuccess) {
                                // $window.location.href = response.result;
                                // var newWindow = $window;
                                // newWindow.location = response.result;
                                // $window.open(response.result).focus();
                                $window.location.href = response.result;
                            } else {
                                DialogService.openAlertDialog({
                                    title: "Error",
                                    message: response.result
                                });
                            }

                        }, function error(response) {
                            $log.log('errorCallback Create viettel order');
                            // $log.log("response = " + JSON.stringify(response));
                        });
                    }
                    break;
            }

        }

        function partnerPayment(bookingNumber, type) {
            var reqURL = API_URL + "/api/partner/place-order?bookingNumber=" + bookingNumber;
            return $http({
                    method: 'GET',
                    url: reqURL,
                    // noAuth : true,
                    // headers:{
                    //     "X-ibe-req-name": type
                    // }
                })
                .then(function successCallback(response) {
                    $log.log('successCallback lienVietPayment');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback lienVietPayment');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        function lienVietPayment(data, key, agent_site) {
            var reqURL = API_URL_CALLBACK + LIENVIET_URL + '/commit?data=' + data + '&key=' + key + '&agent_site=' + agent_site;
            return $http({
                    method: 'GET',
                    url: reqURL,
                    noAuth: true
                })
                .then(function successCallback(response) {
                    $log.log('successCallback lienVietPayment');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback lienVietPayment');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }


        function redeemPromo(paymentModel, bookingModel) {
            var data = {
                bookingCode: bookingModel.bookingCode,
                bookingNumber: bookingModel.bookingNumber,
                promotionId: paymentModel.promotions.id,
                promotionCode: '',
                promotionType: paymentModel.promotions.promotionType,
                price: bookingModel.bookingInfo.totalFare
            };
            if (paymentModel.promotions.promotionType == 'AIRLINES_CODE') {
                data.airlinesCode = bookingModel.bookingInfo.transactionInfos[0].supplierCode;
            }
            if (paymentModel.promotions.promotionType == 'CREDIT_CARD') {
                data.cardNumber = paymentModel.cardModel.cardNumber;
            }
            $log.log('bookingModel.airlinesCode');
            $log.log(bookingModel);
            return $http.post(
                    API_URL + PRICING_PROMO_REDEEM_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback redeemPromo');
                    $log.log(response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback redeemPromo');
                    $log.log(response);
                    return $q.reject(response);
                });
        }

        function voidPromo(bookingNumber, promotionID) {
            var data = {
                bookingNumber: bookingNumber,
                "promotionID": promotionID
            }
            return $http.post(
                    API_URL + PRICING_PROMO_VOID_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback VoidPromo');
                    $log.log(response);
                    return response.data ? response.data : {};
                }, function error(response) {
                    $log.log('errorCallback VoidPromo');
                    $log.log(response);
                    return $q.reject(response);
                });
        }
        return service;
    }
})();

(function() {
    'use strict';
    angular
        .module('B2B2CGatewayApp')
        .factory('CustomerService', CustomerService);

    CustomerService.$inject = ['$window', '$log', '$resource', '$http', '$q', 'ParseLinks', 'GlobalSrv', 'DataService', 'DateUtils', 'CUSTOMER_PROFILE_URL', 'B2B_AGENT_PROFILE_URL', 'CUSTOMER_PROFILE_AVATAR_URL', 'CUSTOMER_PROFILE_AVATAR_COMMON_URL', 'PROFILE_SHORT_URL', 'CUSTOMER_TRAVELLERS_URL', 'CUSTOMER_TRAVELLERS_FOR_BOTH_URL', 'CUSTOMER_TRAVELLERS_DETAIL_URL', 'CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL', 'AIR_CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL', 'PRICING_CREDIT_CARDS_URL', 'PRICING_CREDIT_CARDS_DELETE_ALL_URL', 'PAYMENT_SUB_CARD_URL', 'PAYMENT_UNSUB_CARD_URL', 'BOOKING_SEARCH_URL', 'BOOKING_DETAILS_URL', 'PRODUCT_BOOKING_DETAILS_URL', 'PRODUCT_FINAL_BOOKING_DETAILS_URL', 'GET_AVAILABLE_PAYMENT_TYPE', '$cookies', 'MerchantService', 'API_URL'];

    function CustomerService($window, $log, $resource, $http, $q, ParseLinks, GlobalSrv, DataService, DateUtils, CUSTOMER_PROFILE_URL, B2B_AGENT_PROFILE_URL, CUSTOMER_PROFILE_AVATAR_URL, CUSTOMER_PROFILE_AVATAR_COMMON_URL, PROFILE_SHORT_URL, CUSTOMER_TRAVELLERS_URL, CUSTOMER_TRAVELLERS_FOR_BOTH_URL, CUSTOMER_TRAVELLERS_DETAIL_URL, CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL, AIR_CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL, PRICING_CREDIT_CARDS_URL, PRICING_CREDIT_CARDS_DELETE_ALL_URL, PAYMENT_SUB_CARD_URL, PAYMENT_UNSUB_CARD_URL, BOOKING_SEARCH_URL, BOOKING_DETAILS_URL, PRODUCT_BOOKING_DETAILS_URL, PRODUCT_FINAL_BOOKING_DETAILS_URL, GET_AVAILABLE_PAYMENT_TYPE, $cookies, MerchantService, API_URL) {

        var service = {
            getCustomerTravellers: getCustomerTravellers,
            getCustomerTravellersPagination: getCustomerTravellersPagination,
            getCustomerTravellersForBoth: getCustomerTravellersForBoth,
            getCustomerTraveller: getCustomerTraveller,
            addCustomerTravellers: addCustomerTravellers,
            deleteCustomerTravellers: deleteCustomerTravellers,
            addCustomerTravellersProfile: addCustomerTravellersProfile,

            getCustomerProfile: getCustomerProfile,
            getShortProfile: getShortProfile,
            getCustomerProfileAvatar: getCustomerProfileAvatar,
            updateCustomerProfile: updateCustomerProfile,
            updateAvatarCustomer: updateAvatarCustomer,

            getCreditCards: getCreditCards,
            createCreditCards: createCreditCards,
            deleteCreditCards: deleteCreditCards,

            searchBookings: searchBookings,
            getBooking: getBooking,
            getBookingByNumber: getBookingByNumber,
            getFinalBookingByNumber: getFinalBookingByNumber,
            deleteBookings: deleteBookings

                ,
            getB2BProfile: getB2BProfile,
            getAvailablePaymentType: getAvailablePaymentType
        };

        return service;

        function getCustomerProfile(id) {
            return $http({
                method: 'GET',
                url: API_URL + CUSTOMER_PROFILE_URL + "/" + id,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000,
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getCustomerProfile result: ");
                $log.log(response);
                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCustomerProfile result: ");
                $log.log(response);
                return response.data;
            });
        }

        //Huy update avatar begin
        function getCustomerProfileAvatar(id) {
            return $http({
                method: 'GET',
                url: API_URL + CUSTOMER_PROFILE_AVATAR_URL + "/" + id
            }).then(function successCallback(response) {
                $log.log("successCallback getCustomerProfileAvatar result: ");
                $log.log(response);
                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCustomerProfileAvatar result: ");
                $log.log(response);
                return response.data;
            });
        }

        //End

        function getB2BProfile(loginname) {
            if (MerchantService.isSimpleView()) {
                return $q.reject();
            }

            return $http.post(
                    API_URL + B2B_AGENT_PROFILE_URL, loginname)
                .then(function successCallback(response) {
                    $log.log("successCallback getB2BProfile result: ");
                    $log.log(response);
                    return response.data;
                }, function errorCallback(response) {
                    $log.log("errorCallback getB2BProfile result: ");
                    $log.log(response);
                    return response.data;
                });
        }

        function getShortProfile() {

            if (MerchantService.isSimpleView()) {
                return $q.reject();
            }

            return $http({
                method: 'GET',
                url: API_URL + PROFILE_SHORT_URL,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getShortProfile result: ");
                $log.log(response);
                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getShortProfile result: ");
                $log.log(response);
                return response.data;
            });
        }

        function getCustomerTravellers() {
            return $http({
                method: 'GET',

                url: API_URL + CUSTOMER_TRAVELLERS_URL,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getCustomerTravellers result: ");
                $log.log(response);

                // var d = response.data;
                //
                // d.links = ParseLinks.parse(response.headers('link'));
                // d.totalItems = response.headers('X-Total-Count');
                // d.totalPages = response.headers('X-Total-Page');
                //
                // $log.log('links = ' + d.links);
                // $log.log(d.links);
                // $log.log('totalItems = ' + d.totalItems);
                // $log.log('totalPages = ' + d.totalPages);
                //
                // // $log.log(headers(), 'headers');
                //
                // return d;

                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCustomerTravellers result: ");
                $log.log(response);
                return [];
            });
        }

        function getCustomerTravellersPagination(page) {
            return $http({
                method: 'GET',
                url: API_URL + CUSTOMER_TRAVELLERS_URL,
                params: {
                    "query": '',
                    "page": page - 1,
                    "size": 10
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getCustomerTravellers result: ");
                $log.log(response);

                var d = response.data;

                d.links = ParseLinks.parse(response.headers('link'));
                d.totalItems = response.headers('X-Total-Count');
                d.totalPages = response.headers('X-Total-Page');

                $log.log('links = ' + d.links);
                $log.log(d.links);
                $log.log('totalItems = ' + d.totalItems);
                $log.log('totalPages = ' + d.totalPages);

                // $log.log(headers(), 'headers');

                return d;

                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCustomerTravellers result: ");
                $log.log(response);
                return [];
            });
        }

        function getCustomerTravellersForBoth() {
            return $http({
                method: 'GET',
                url: API_URL + CUSTOMER_TRAVELLERS_FOR_BOTH_URL,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getCustomerTravellersForBoth result: ");
                $log.log(response);

                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCustomerTravellersForBoth result: ");
                $log.log(response);
                return [];
            });
        }

        function getCustomerTraveller(id) {
            return $http({
                method: 'GET',
                url: API_URL + CUSTOMER_TRAVELLERS_DETAIL_URL + "/" + id,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getCustomerTraveller result: ");
                $log.log(response);

                // response.data.dob = DateUtils.convertZoneDateFromServer(response.data.dob);
                if (response.data.dob) response.data.dob = DateUtils.convertZoneDateFromServer(response.data.dob);
                if (response.data.expiredDate) response.data.expiredDate = DateUtils.convertZoneDateFromServer(response.data.expiredDate);
                if (response.data.issuedDate) response.data.issuedDate = DateUtils.convertZoneDateFromServer(response.data.issuedDate);

                // $log.log('response.data.dob' + response.data.dob + ', response.data.expiredDate=' + response.data.expiredDate
                //     + ',response.data.issuedDate=)' + response.data.issuedDate);

                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCustomerTraveller result: ");
                $log.log(response);

                return response;
            });
        }

        // used in booking
        function addCustomerTravellers(bookingOptions) {
            var data = [];

            var customers = bookingOptions.customers;
            var customerInfos = [];

            if (customers != null && customers != undefined) {
                angular.forEach(customers, function(value, key) {
                    var item = value;
                    if (item.checked == 1) {

                        var tmp = {
                            "id": item.id,
                            "adultType": item.type,
                            "country": item.cuNationality,
                            "dob": item.cuDob,
                            "expiredDate": item.cuExpiredDate,
                            "documentNumber": item.cuId,
                            "documentType": item.cuPp,
                            "firstName": item.cuName,
                            "gender": item.cuGender,
                            "nationality": item.cuNationality,
                            "surName": item.cuFamilyName
                        };

                        if (item.cuCardType && item.cuCardNo) {
                            tmp.memberCards = [{
                                "cardType": item.cuCardType,
                                "cardNumber": item.cuCardNo,
                                "id": item.cuCardId
                            }];
                        }

                        customerInfos.push(tmp);
                    }

                });
            }

            var contacts = bookingOptions.contacts;
            //$log.log("contacts = " + JSON.stringify(contacts));
            $log.log("contacts = " + contacts);

            if (contacts != null && contacts != undefined) {
                angular.forEach(contacts, function(value, key) {
                    var item = value;
                    if (item.checked == 1) {
                        // var idx = item.ciName.indexOf(" ");
                        // var fname = item.ciName.substr(idx + 1);
                        // var sname = item.ciName.substr(0, idx);

                        customerInfos.push({
                            "id": item.id,
                            "gender": item.ciGender,
                            "firstName": item.ciName,
                            "surName": item.ciFName,
                            "email": item.ciEmail,
                            "phoneNumber1": item.ciMobile,
                            "postalCode": item.ciMobileCode
                        });
                    }

                });
            }

            data = customerInfos;


            //if (customerInfos.length > 0) {
            $log.log("addCustomerTravellers criteria:");
            //$log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.put(
                    API_URL + AIR_CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback addCustomerTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback addCustomerTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
            //}


        }

        // used in profile
        function addCustomerTravellersProfile(options) {
            var data = options;

            var dataCollection = [];
            dataCollection.push(data);

            // PROCESS DATE
            if (data.dob) data.dob = DateUtils.convertZoneDateToServer(data.dob);
            if (data.expiredDate) data.expiredDate = DateUtils.convertZoneDateToServer(data.expiredDate);
            if (data.issuedDate) data.issuedDate = DateUtils.convertZoneDateToServer(data.issuedDate);

            // PROCESS PHONE
            if (data.phoneNumbers) {
                var length = data.phoneNumbers.length;
                if (length >= 1) {
                    data.phoneNumber1 = data.phoneNumbers[0].text;
                }
                if (length >= 2) {
                    data.phoneNumber2 = data.phoneNumbers[1].text;
                }
                if (length >= 3) {
                    data.phoneNumber3 = data.phoneNumbers[2].text;
                }
                if (length >= 4) {
                    data.phoneNumber4 = data.phoneNumbers[3].text;
                }
                if (length >= 5) {
                    data.phoneNumber5 = data.phoneNumbers[4].text;
                }

                if (length == 1) {
                    data.phoneNumber2 = '';
                    data.phoneNumber3 = '';
                    data.phoneNumber4 = '';
                    data.phoneNumber5 = '';

                } else if (length == 2) {
                    data.phoneNumber3 = '';
                    data.phoneNumber4 = '';
                    data.phoneNumber5 = '';

                } else if (length == 3) {
                    data.phoneNumber4 = '';
                    data.phoneNumber5 = '';

                } else if (length == 4) {
                    data.phoneNumber5 = '';
                }
            } else {
                data.phoneNumber1 = '';
                data.phoneNumber2 = '';
                data.phoneNumber3 = '';
                data.phoneNumber4 = '';
                data.phoneNumber5 = '';
            }

            // PROCESS MEMBER CARDS
            angular.forEach(data.editMemberCards, function(item, value) {
                item.cardNumber = item.curCardNumber;
                item.cardType = item.curCardType;
            });
            data.memberCards = data.memberCards.concat(data.editMemberCards);

            data.memberCardsTemp = [];
            for (var i = 0; i < data.memberCards.length; i++) {
                if (data.memberCards[i].cardType && data.memberCards[i].cardNumber) {
                    data.memberCardsTemp.push(data.memberCards[i]);
                }
            }
            data.memberCards = data.memberCardsTemp;

            $log.log("addCustomerTravellersProfile criteria:");
            //$log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.put(
                    API_URL + CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL, dataCollection)
                .then(function successCallback(response) {
                    $log.log('successCallback addCustomerTravellersProfile');
                    // $log.log("response = " + JSON.stringify(response));

                    if (response.data) {
                        response.data.success = true;
                    }

                    return response.data ? response.data : {};
                }, function errorCallBack(response) {
                    $log.log('errorCallBack addCustomerTravellersProfile');
                    // $log.log("response = " + JSON.stringify(response));
                    // return response.data ? response.data : {};
                    return $q.reject(response);
                });
            //}


        }

        function updateCustomerProfile(options) {
            var data = options;

            $log.log("updateCustomerProfile criteria:");
            //$log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.put(
                    API_URL + CUSTOMER_PROFILE_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback updateCustomerProfile');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallBack(response) {
                    $log.log('errorCallBack updateCustomerProfile');
                    // $log.log("response = " + JSON.stringify(response));
                    // return response.data ? response.data : {};
                    return $q.reject(response);
                });
            //}
        }

        // Update avatar for user
        function updateAvatarCustomer(options) {
            var data = options;

            $log.log("updateCustomerAvatar criteria:");
            //console.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.put(
                    API_URL + CUSTOMER_PROFILE_AVATAR_COMMON_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback updateCustomerAvatar');
                    return response.data ? response.data : {};
                }, function errorCallBack(response) {
                    $log.log('errorCallBack updateCustomerAvatar');

                    return $q.reject(response);
                });
            //}
        }

        function getCreditCards() {
            return $http({
                method: 'GET',
                url: API_URL + PRICING_CREDIT_CARDS_URL,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getCreditCards result: ");
                $log.log(response);
                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getCreditCards result: ");
                $log.log(response);
                return [];
            });
        }

        function getAvailablePaymentType() {
            return $http({
                method: 'GET',
                url: API_URL + GET_AVAILABLE_PAYMENT_TYPE
            }).then(function successCallback(response) {
                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getAvailablePaymentType result: ");
                $log.log(response);
                return [];
            });
        }

        function createCreditCards(cardModel, paToken) {
            var data = {
                "card": cardModel,
                "paToken": paToken
            };
            //data.orgCode = 'C';
            // data.card.firstName = 'Thang';
            // data.card.lastName = 'Pham';
            // data.card.address = 'Address1';
            // data.card.country = 'VN';
            // data.card.city = 'HN';
            // data.card.state = 'HN';
            // data.card.postalCode = '084';
            // data.card.email = 'thangpv@fsoft.com.vn';
            // data.card.phoneNumber = '0988669696';
            data.card.cardId = null;

            // Change to match Enum
            if (data.type === 'MASTERCARD') {
                data.type = 'MASTER';
            }

            $log.log("createCreditCards criteria:");
            //$log.log("data=" + JSON.stringify(data));
            $log.log("data=" + data);
            $log.log("++++++++++++++++++++++++++++");

            return $http.post(
                    API_URL + PAYMENT_SUB_CARD_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback createCreditCards');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback createCreditCards');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                    // return response.data ? response.data : {};
                });
        }

        function deleteCreditCards(ids) {
            var data = ids;

            var data = ids.split(':');
            // data = data.filter(v => v != '');
            data = data.filter(function(entry) {
                return entry.trim() != '';
            });

            data = {
                "cardIds": data
            };

            //$log.log("deleteCreditCards ids = " + JSON.stringify(data));
            $log.log("deleteCreditCards ids = " + data);

            return $http.post(
                    API_URL + PAYMENT_UNSUB_CARD_URL, data)
                .then(function successCallback(response) {
                    $log.log('successCallback deleteCreditCards');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback deleteCreditCards');
                    // $log.log("response = " + JSON.stringify(response));
                    return $q.reject(response);
                });
        }

        function deleteCustomerTravellers(ids) {
            var data = ids;
            //$log.log("deleteCustomerTravellers ids = " + JSON.stringify(ids));
            $log.log("deleteCustomerTravellers ids = " + ids);

            // data.orgCode = 'C';
            //
            // if (data.type == 'MASTERCARD') {
            //     data.type = 'MASTER';
            // }

            return $http.delete(
                    API_URL + CUSTOMER_TRAVELLERS_URL + "?ids=" + data, data)
                .then(function successCallback(response) {
                    $log.log('successCallback deleteCustomerTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback deleteCustomerTravellers');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                });
        }

        function searchBookings(options) {

            var paras = {
                "query": '',
                "page": options.page,
                "size": 15,
                "bookingCode": options.bookingCode,
                "bookingStatus": options.bookingStatus,
                "fromDate": options.fromDate,
                "toDate": options.toDate,
                "fromLocationName": options.fromLocationName,
                "toLocationName": options.toLocationName,
                "supplierType": options.supplierType
            };

            //$log.log('searchBookings:paras = ' + JSON.stringify(paras));
            $log.log('searchBookings:paras = ' + paras);

            return $http({
                method: 'GET',
                url: API_URL + BOOKING_SEARCH_URL,
                params: paras
            }).then(function successCallback(response, status, headers, config) {
                $log.log("successCallback searchBookings result: ");
                $log.log(response);

                var d = response.data;

                //d.links = ParseLinks.parse(response.headers('link'));
                d.links = "/api/bookings";
                d.totalItems = response.headers('X-Total-Count');

                // $log.log(headers(), 'headers');

                return d;
            }, function errorCallback(response) {
                $log.log("errorCallback searchBookings result: ");
                $log.log(response);
                return [];
            });
        }

        function getBooking(id) {
            $log.log("getBooking(id):" + BOOKING_DETAILS_URL + "/" + id);
            return $http({
                method: 'GET',
                url: API_URL + BOOKING_DETAILS_URL + "/" + id,
                params: {
                    "query": '',
                    "page": 0,
                    "size": 1000
                }
            }).then(function successCallback(response) {
                $log.log("successCallback getBooking result: ");
                $log.log(response);
                return response.data;
            }, function errorCallback(response) {
                $log.log("errorCallback getBooking result: ");
                $log.log(response);
                return response.data;
            });
        }

        function getBookingByNumber(bookingNumber) {
            $log.log("getBookingByNumber(bookingNumber): " + PRODUCT_BOOKING_DETAILS_URL + ", bookingNumber:" + bookingNumber);
            var paras = {
                "booking_number": bookingNumber
            };
            return $http({
                method: 'GET',
                url: API_URL + PRODUCT_BOOKING_DETAILS_URL,
                params: paras
            }).then(function successCallback(response) {
                $log.log('successCallback getBookingByNumber');
                $log.log(response);

                // $window.parent.postMessage(response.data,'*');

                return response.data;
            }, function errorCallback(response) {
                $log.log('errorCallback getBookingByNumber');
                $log.log(response);
                return $q.reject(response);
            });
        }

        function getFinalBookingByNumber(bookingNumber, waitCallBack) {
            $log.log("getBookingByNumber(bookingNumber): " + PRODUCT_FINAL_BOOKING_DETAILS_URL + ", bookingNumber:" + bookingNumber);
            var paras = {
                "booking_number": bookingNumber
            };
            return $http({
                method: 'GET',
                url: API_URL + PRODUCT_FINAL_BOOKING_DETAILS_URL,
                params: paras
            }).then(function successCallback(response) {
                $log.log('successCallback getBookingByNumber');
                $log.log(response);
                return response.data;
            }, function errorCallback(response) {
                $log.log('errorCallback getBookingByNumber');
                $log.log(response);
                return $q.reject(response);
            });
        }

        function deleteBookings(ids) {
            var data = ids;
            //$log.log("deleteBookings ids = " + JSON.stringify(ids));
            $log.log("deleteBookings ids = " + ids);

            // data.orgCode = 'C';
            //
            // if (data.type == 'MASTERCARD') {
            //     data.type = 'MASTER';
            // }

            return $http.delete(
                    API_URL + BOOKING_DETAILS_URL + "?ids=" + data, data)
                .then(function successCallback(response) {
                    $log.log('successCallback deleteBookings');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                }, function errorCallback(response) {
                    $log.log('errorCallback deleteBookings');
                    // $log.log("response = " + JSON.stringify(response));
                    return response.data ? response.data : {};
                });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('BannerService', BannerService);

    BannerService.$inject = ['$http', '$cookies', '$q', 'MerchantService'];

    function BannerService($http, $cookies, $q, MerchantService) {

        var dataPromise;

        var service = {
            getBanners: getBanners
        };

        return service;

        function getBanners() {

            if (MerchantService.isSimpleView()) {
                return $q.reject();
            }

            // if (angular.isUndefined(dataPromise)) {
            dataPromise = $http.get('https://www2.gotadi.com/Admin/Bannerslider/ListbannerAPI/', {
                noAuth: true
            }).then(function(result) {
                if (!!result && !!result.data) {
                    return result.data;
                }
                return [];
            });
            // }
            return dataPromise;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Register', Register);

    Register.$inject = ['$resource', 'API_URL'];

    function Register($resource, API_URL) {
        return $resource(API_URL + '/api/register', {}, {});
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Principal', Principal);

    Principal.$inject = ['$q', 'Account', 'OtaTrackerService'];

    function Principal($q, Account, OtaTrackerService) {
        var _identity,
            _authenticated = false;

        var service = {
            authenticate: authenticate,
            hasAnyAuthority: hasAnyAuthority,
            hasAuthority: hasAuthority,
            identity: identity,
            isAuthenticated: isAuthenticated,
            isIdentityResolved: isIdentityResolved
        };

        return service;

        function authenticate(identity) {
            _identity = identity;
            _authenticated = identity !== null;
        }

        function hasAnyAuthority(authorities) {
            if (!_authenticated || !_identity || !_identity.authorities) {
                return false;
            }

            for (var i = 0; i < authorities.length; i++) {
                if (_identity.authorities.indexOf(authorities[i]) !== -1) {
                    return true;
                }
            }

            return false;
        }

        function hasAuthority(authority) {
            if (!_authenticated) {
                return $q.when(false);
            }

            return this.identity().then(function(_id) {
                return _id.authorities && _id.authorities.indexOf(authority) !== -1;
            }, function() {
                return false;
            });
        }

        function identity(force) {
            var deferred = $q.defer();

            if (force === true) {
                _identity = undefined;
            }

            // check and see if we have retrieved the identity data from the server.
            // if we have, reuse it by immediately resolving
            if (angular.isDefined(_identity)) {
                deferred.resolve(_identity);

                return deferred.promise;
            }

            // retrieve the identity data from the server, update the identity object, and then resolve.
            Account.get().$promise
                .then(getAccountThen)
                .catch(getAccountCatch);

            return deferred.promise;

            function getAccountThen(account) {
                _identity = account.data;
                _authenticated = true;
                deferred.resolve(_identity);

                /* OtaTrackerService.connect(); */
            }

            function getAccountCatch() {
                _identity = null;
                _authenticated = false;
                deferred.resolve(_identity);
            }
        }

        function isAuthenticated() {
            return _authenticated;
        }

        function isIdentityResolved() {
            return angular.isDefined(_identity);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('PasswordResetInit', PasswordResetInit);

    PasswordResetInit.$inject = ['$resource', 'API_URL'];

    function PasswordResetInit($resource, API_URL) {
        var service = $resource(API_URL + '/api/account/reset-password/init', {}, {});

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('PasswordResetFinish', PasswordResetFinish);

    PasswordResetFinish.$inject = ['$resource', 'API_URL'];

    function PasswordResetFinish($resource, API_URL) {
        var service = $resource(API_URL + '/api/account/reset-password/finish', {}, {});

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Password', Password);

    Password.$inject = ['$resource', 'API_URL'];

    function Password($resource, API_URL) {
        var service = $resource(API_URL + '/api/account/change-password', {}, {});

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('MerchantService', MerchantService);

    MerchantService.$inject = ['$location', 'AuthServerProvider', 'Principal', '$cookies', '$http', '$rootScope', '$q', '$translate', '$window', 'DialogService', '$state',
        'LIENVIET_URL', 'API_URL', 'API_URL_CALLBACK', 'SEA_URL', 'FSOFT_URL',
        '$log', 'ValidationUtils', 'Base64', '$uibModal', 'DataService', 'Flight'
    ];


    function MerchantService($location, AuthServerProvider, Principal, $cookies, $http, $rootScope, $q, $translate, $window, DialogService, $state,
        LIENVIET_URL, API_URL, API_URL_CALLBACK, SEA_URL, FSOFT_URL,
        $log, ValidationUtils, Base64, $uibModal, DataService, Flight
    ) {
        var ctrl = this;

        ctrl.searchOptions = {};
        ctrl.searchResult = [];
        var modalInstance = null;
        var merchantCode = getMerchant();
        var msisdn = $location.search().msisdn;
        var resetModal = function() {
            modalInstance = null;
        };
        var serv = {
            login: getLoggedIn,
            isSimpleView: isSimpleView,
            updateMerchantName: updateMerchantName,
            updateMsisdn: updateMsisdn,
            lienVietValidate: lienVietValidate,
            fSoftValidate: fSoftValidate,
            fSoftSearchFlight: fSoftSearchFlight,
            seaBankValidate: seaBankValidate,
            isIframeView: isIframeView,
            scrollToTopIframe: scrollToTopIframe,
            loginWithToken: loginWithToken,
            isSingleLayout: isSingleLayout,
            getMerchant: getMerchant,
            filterArraySupplier: filterArraySupplier,
            verifyMerchant: verifyMerchant
        };

        function verifyMerchant() {
            var url = API_URL + '/api/partner/ibe-internal-config/agency/' + merchantCode;

            return $http({
                method: 'GET',
                url: url,
                noAuth: true
            });
        }

        var simpleViewMerchant = ['VIETTEL', 'TIKI', 'LIENVIETBANK', 'SEABANK', 'LOOPBACK', 'TRUEMONEY', 'FASTGO', 'SMARTPAY'];

        var iFrameMerchant = ['TIKI', 'FSOFT'];

        if (!msisdn) msisdn = $cookies.get('msisdn') || localStorage.getItem('msisdn');

        var data;
        var key;

        // Use for LIENVIETBANK
        if (merchantCode == 'LIENVIETBANK') {
            // data = $location.search().data;
            // if (!data) data = $cookies.get('data');
            // key = $location.search().key;
            // if (!key) key = $cookies.get('key');
        }
        // Use for FSOFT-TSS
        if (merchantCode == 'FSOFT') {
            data = $location.search().user_data;
            if (!data) data = $cookies.get('user_data');
            key = $location.search().signature;
            if (!key) key = $cookies.get('signature');
        }

        ctrl.isSignleLayout = false;

        var layout = $location.search().layout;
        if (layout) {
            switch (layout) {
                case 'single':
                    ctrl.isSignleLayout = true;
                    break;
                case 'dual':
                    ctrl.isSignleLayout = false;
                    break;
                default:
                    break;
            }
        }

        function isSingleLayout() {
            if (merchantCode === 'SEABANK' || merchantCode === 'FASTGO') {
                return true;
            }

            return ctrl.isSignleLayout;
        }

        function loginWithToken(token) {
            AuthServerProvider.loginWithToken(token, true);
            $rootScope.$broadcast('authenticationSuccess');
        }

        function getLoggedIn() {

            if (!merchantCode || !msisdn) return;
            var cb = angular.noop;
            var deferred = $q.defer();

            // Check user status
            AuthServerProvider.login({
                    username: msisdn + "@gotadi.com",
                    password: msisdn,
                    rememberMe: true
                })
                .then(loginThen)
                .catch(register);

            // User exist and login success
            function loginThen(data) {
                Principal.identity(true).then(function(account) {
                    $rootScope.msisdn = msisdn;
                    $rootScope.$broadcast('authenticationSuccess');
                    if (account !== null) {
                        $translate.use(account.langKey).then(function() {
                            $translate.refresh();
                        });
                    }
                    deferred.resolve(data);
                });
                return cb();
            }

            // User not existed then create the new one and logoin
            function register(data) {
                $http({
                    method: 'POST',
                    url: API_URL + '/api/merchant/register',
                    data: {
                        "merchantCode": merchantCode,
                        "phone": msisdn
                    }
                }).then(function success() {
                    AuthServerProvider.login({
                        username: msisdn + "@gotadi.com",
                        password: msisdn,
                        rememberMe: true
                    }).then(function(res) {
                        Principal.identity(true).then(function(acc) {
                            $rootScope.msisdn = msisdn;
                            $rootScope.$broadcast('authenticationSuccess');
                        });
                    });
                }, function errorCallback(response) {
                    // var error = {};
                    // error.title = 'Error';
                    // error.message = 'Có vấn đề xảy ra. Vui lòng quay lại sau hoặc liên hệ với tổng đài viên để được hỗ trợ!';
                    // DialogService.openNoActionDialog(error);
                    window.location.href = "#/error-partner";
                });
            }


            return deferred.promise;
        }


        function isSimpleView() {
            var currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;
            if (simpleViewMerchant.indexOf(currentMerchant) > -1) {
                return true;
            }

            return false;
        }


        function isIframeView() {
            var currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;
            if (iFrameMerchant.indexOf(currentMerchant) > -1) {
                return true;
            }

            return false;
        }


        function seaBankValidate(user, signature) {
            var url = API_URL_CALLBACK + SEA_URL + "/booking/validate?user=?" + user + "&signature=" + signature;
            return $http({
                method: 'POST',
                url: url,
                noAuth: true
            });

        }

        function lienVietValidate(data, key) {
            $cookies.put("lienviet-data", data);
            $cookies.put("lienviet-key", key);

            var url = API_URL_CALLBACK + LIENVIET_URL + "/validate?data=?" + data + "&key=" + key;
            return $http({
                method: 'POST',
                url: url,
                noAuth: true
            });
        }


        function fSoftValidate() {

            $cookies.put("user_data", data);
            var sig = key.split(' ').join('%2B');
            $cookies.put("signature", sig);

            var url = API_URL + FSOFT_URL + "/validate?data=" + data + "&key=" + sig;
            return $http({
                method: 'POST',
                url: url,
                noAuth: true
            });
        }

        function fSoftSearchFlight(data) {


            var fSoftSearchParam = {
                IsAutoSearch: data.IsAutoSearch,
                IsDomestic: data.IsDomestic,
                NCRange: data.NCRange,
                Prefill_EndTime: data.Prefill_EndTime,
                Prefill_StartTime: data.Prefill_StartTime,
                RoleLevel: data.RoleLevel,
                RouteType: data.RouteType,
                Suppliers: data.Suppliers,
                arrivalLocation: data.arrivalLocation,
                departureLocation: data.departureLocation,
                email: data.email,
                fullName: data.fullName,
                mobileNumber: data.mobileNumber,
                userId: data.userId

            };

            ctrl.searchOptions.fromAirPort = data.departureLocation;
            ctrl.searchOptions.toAirPort = data.arrivalLocation;
            var arrayTimeStartTime = data.Prefill_StartTime.split("/");
            if (arrayTimeStartTime.length > 0) {
                ctrl.searchOptions.departureDate = data.Prefill_StartTime.split("/").join("-");
            } else {
                ctrl.searchOptions.departureDate = data.Prefill_StartTime;
            }

            var arrayTimeEndTime = data.Prefill_EndTime.split("/");
            if (arrayTimeEndTime.length > 0) {
                ctrl.searchOptions.returnDate = data.Prefill_EndTime.split("/").join("-");
            } else {
                ctrl.searchOptions.returnDate = "";
            }


            if (data.IsDomestic) {
                ctrl.searchOptions.dtype = "domestic";
            } else {
                ctrl.searchOptions.dtype = "international";
            }
            if (data.RouteType == 'ONEWAY') {
                ctrl.searchOptions.searchType = "oneway";
                ctrl.searchOptions.returnDate = "";
            } else {
                ctrl.searchOptions.searchType = "roundtrip";

            }
            ctrl.searchOptions.adultNo = 1;
            ctrl.searchOptions.childrenNo = 0;
            ctrl.searchOptions.newBornNo = 0;
            ctrl.searchOptions.class = "E";
            ctrl.searchOptions.NCRange = data.NCRange;
            ctrl.searchOptions.RoleLevel = data.RoleLevel;
            ctrl.searchOptions.Suppliers = ['VJ', 'VN', '0V']

            searchFlight();

        }

        ctrl.getSearchSpecialType = function() {
            var searchdirectiontype = 'oneway';

            var searchType = ctrl.searchOptions.searchType;
            var dtype = ctrl.searchOptions.dtype;

            if (ctrl.searchOptions.searchType != 'roundtrip') {
                return 'oneway';
            } else {
                return dtype;
            }
        };

        function searchFlight() {

            // Validate search criteria
            if (!ValidationUtils.validateFlightSearch(ctrl.searchOptions)) {
                return;
            }

            // DO SEARCH

            var searchSpecialType = ctrl.getSearchSpecialType();

            ctrl.searchOptions.searchSpecialType = searchSpecialType;
            ctrl.searchOptions.selectStep = 1;
            ctrl.searchOptions.returnDomestic = false;

            ctrl.searchOptions.departureItinerary = {};
            ctrl.searchOptions.returnSearchId = null;
            ctrl.searchOptions.searchId = null;
            ctrl.searchOptions.ssrOfferItemsDepart = [];
            ctrl.searchOptions.ssrOfferItemsReturn = [];
            ctrl.searchOptions.page = 0;
            ctrl.searchOptions.size = 15;
            ctrl.searchOptions.airLine = [];
            ctrl.searchOptions.selectAirlines = [];

            if (merchantCode && merchantCode == 'FSOFT') {
                var RoleLevel = +ctrl.searchOptions.RoleLevel;
                var NCRange = +ctrl.searchOptions.NCRange;
                if (RoleLevel == 1 && NCRange > 0) {
                    // ctrl.searchOptions.selectAirlines = ["VJ", "VN"];

                }
                if (RoleLevel == 2) {
                    // see all airSupplier
                    // ctrl.searchOptions.selectAirlines = ["VJ", "VN", "BL"];
                }
                if (RoleLevel == 1 && NCRange == 0) {

                    ctrl.searchOptions.selectAirlines = ["VN"];
                }

            }

            ctrl.searchOptions.advanceFilterOptions = {};
            DataService.setSearchOption(ctrl.searchOptions);
            // Show Dialogs:
            // open();

            DataService.setSearchOption(ctrl.searchOptions);
            DataService.setSearchResult(ctrl.searchResult);

            DataService.setSavedSearchOption(jQuery.extend({}, ctrl.searchOptions));
            var departSearchOptions = jQuery.extend({}, ctrl.searchOptions);
            var departSearchResult = jQuery.extend({}, ctrl.searchResult);

            departSearchOptions.departureDate = ctrl.searchOptions.departureDate;

            if (ctrl.searchOptions.dtype != 'international') {
                departSearchOptions.suppliers = ctrl.searchOptions.selectAirlines;
                $log.log("departSearchOptions.suppliers = " + departSearchOptions.suppliers);
            }

            departSearchOptions.fromAirPort = ctrl.searchOptions.fromAirPort;
            departSearchOptions.toAirPort = ctrl.searchOptions.toAirPort;

            if (departSearchOptions.dtype == 'international') {
                open();
                var myDataPromise = Flight.searchFlightInternational(departSearchOptions);
                myDataPromise.then(function(result) {
                    ctrl.searchResult = result;
                    departSearchResult = result;

                    ctrl.searchOptions.searchId = result.searchId;
                    departSearchOptions.searchId = result.searchId;

                    // Do get advance filter options
                    Flight.getAdvanceFilterOptions(ctrl.searchOptions).then(function(result) {
                        DataService.setAdvanceSearchFilterOptions(result);
                        ctrl.searchOptions.advanceFilterOptions = result;
                        departSearchOptions.advanceFilterOptions = result;

                        DataService.setDepartSearchResult(departSearchResult);
                        DataService.setDepartSearchOption(departSearchOptions);

                        var returnSearchOptions = jQuery.extend({}, departSearchResult);
                        var returnSearchResult = jQuery.extend({}, departSearchOptions);

                        DataService.setReturnSearchResult(returnSearchOptions);
                        DataService.setReturnSearchOption(returnSearchResult);

                        // ctrl.doSearch({
                        //     $searchResult: ctrl.searchResult
                        //     , $searchOptions: ctrl.searchOptions
                        // });
                        $state.go('flight-search', {
                            "searchOptions": ctrl.searchOptions,
                            "searchResult": ctrl.searchResult,
                            "searchCompleted": true,
                            "filterCompleted": false,
                            "params": Base64.encodeJson(ctrl.searchOptions)
                        });
                    });

                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            } else {
                open();
                var myDataPromise = Flight.searchFlight(departSearchOptions);
                myDataPromise.then(function(result) {
                    ctrl.searchResult = result;
                    departSearchResult = result;

                    ctrl.searchOptions.searchId = result.searchId;
                    ctrl.searchOptions.returnSearchId = result.returnSearchId;
                    departSearchOptions.searchId = result.searchId;

                    // Do get advance filter options
                    Flight.getAdvanceFilterOptions(ctrl.searchOptions).then(function(result) {
                        DataService.setAdvanceSearchFilterOptions(result);
                        ctrl.searchOptions.advanceFilterOptions = result;
                        departSearchOptions.advanceFilterOptions = result;

                        DataService.setDepartSearchResult(departSearchResult);
                        DataService.setDepartSearchOption(departSearchOptions);

                        // ctrl.doSearch({
                        //     $searchResult: ctrl.searchResult
                        //     , $searchOptions: ctrl.searchOptions
                        // });
                        $state.go('flight-search', {
                            "searchOptions": ctrl.searchOptions,
                            "searchResult": ctrl.searchResult,
                            "searchCompleted": true,
                            "filterCompleted": false,
                            "params": Base64.encodeJson(ctrl.searchOptions)
                        });
                    });

                    // Setup Search Return trip
                    if (ctrl.searchOptions.searchType == 'roundtrip') {
                        var returnSearchOptions = jQuery.extend({}, ctrl.searchOptions);
                        var returnSearchResult = jQuery.extend({}, ctrl.searchResult);

                        returnSearchOptions.departureDate = ctrl.searchOptions.returnDate;
                        returnSearchOptions.returnDate = ctrl.searchOptions.returnDate;
                        returnSearchOptions.fromAirPort = ctrl.searchOptions.toAirPort;
                        returnSearchOptions.toAirPort = ctrl.searchOptions.fromAirPort;
                        returnSearchOptions.searchId = result.returnSearchId;

                        DataService.setReturnSearchOption(returnSearchOptions);

                    }


                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });

            }

            // $state.go('flight-search', {"searchOptions": ctrl.searchOptions, "searchResult": ctrl.searchResult
            //     , "searchCompleted": true
            //     , "filterCompleted": true
            //     , "params": Base64.encodeJson(ctrl.searchOptions)});


        };


        function open() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/search/flight.search.loading.html',
                controller: 'FlightSearchLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    searchOptions: function() {
                        return ctrl.searchOptions;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        function updateMerchantName(newValue) {
            merchantCode = newValue;

        }

        function updateMsisdn(newValue) {
            msisdn = newValue;
        }

        function scrollToTopIframe() {
            App.scrollTop(); // scroll to the top on content load
            if ('parentIFrame' in window) {
                window.parentIFrame.scrollTo(0, 0);
            }
        }

        function getMerchant() {
            var merchantCode = $location.search().merchant_code;
            if (!merchantCode) merchantCode = $cookies.get('merchant_code') || localStorage.getItem("merchant_code");
            return merchantCode;
        }

        function filterArraySupplier() {
            var result = ['VN', 'VJ', '0V'];
            return result;
        }

        return serv;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('hasAuthority', hasAuthority);

    hasAuthority.$inject = ['Principal'];

    function hasAuthority(Principal) {
        var directive = {
            restrict: 'A',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs) {
            var authority = attrs.hasAuthority.replace(/\s+/g, '');

            var setVisible = function() {
                    element.removeClass('hidden');
                },
                setHidden = function() {
                    element.addClass('hidden');
                },
                defineVisibility = function(reset) {

                    if (reset) {
                        setVisible();
                    }

                    Principal.hasAuthority(authority)
                        .then(function(result) {
                            if (result) {
                                setVisible();
                            } else {
                                setHidden();
                            }
                        });
                };

            if (authority.length > 0) {
                defineVisibility(true);

                scope.$watch(function() {
                    return Principal.isAuthenticated();
                }, function() {
                    defineVisibility(true);
                });
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('hasAnyAuthority', hasAnyAuthority);

    hasAnyAuthority.$inject = ['Principal'];

    function hasAnyAuthority(Principal) {
        var directive = {
            restrict: 'A',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs) {
            var authorities = attrs.hasAnyAuthority.replace(/\s+/g, '').split(',');

            var setVisible = function() {
                    element.removeClass('hidden');
                },
                setHidden = function() {
                    element.addClass('hidden');
                },
                defineVisibility = function(reset) {
                    var result;
                    if (reset) {
                        setVisible();
                    }

                    result = Principal.hasAnyAuthority(authorities);
                    if (result) {
                        setVisible();
                    } else {
                        setHidden();
                    }
                };

            if (authorities.length > 0) {
                defineVisibility(true);

                scope.$watch(function() {
                    return Principal.isAuthenticated();
                }, function() {
                    defineVisibility(true);
                });
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Auth', Auth);

    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish', 'OtaTrackerService'];

    function Auth($rootScope, $state, $sessionStorage, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish, OtaTrackerService) {
        var service = {
            activateAccount: activateAccount,
            authorize: authorize,
            changePassword: changePassword,
            createAccount: createAccount,
            getPreviousState: getPreviousState,
            login: login,
            logout: logout,
            loginWithToken: loginWithToken,
            resetPasswordFinish: resetPasswordFinish,
            resetPasswordInit: resetPasswordInit,
            resetPreviousState: resetPreviousState,
            storePreviousState: storePreviousState,
            updateAccount: updateAccount
        };

        return service;

        function activateAccount(key, callback) {
            var cb = callback || angular.noop;

            return Activate.get(key,
                function(response) {
                    return cb(response);
                },
                function(err) {
                    return cb(err);
                }.bind(this)).$promise;
        }

        function authorize(force) {
            var authReturn = Principal.identity(force).then(authThen);

            return authReturn;

            function authThen() {
                var isAuthenticated = Principal.isAuthenticated();

                // an authenticated user can't access to login and register pages
                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {
                    $state.go('home');
                }

                // recover and clear previousState after external login redirect (e.g. oauth2)
                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {
                    var previousState = getPreviousState();
                    resetPreviousState();
                    $state.go(previousState.name, previousState.params);
                }

                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {
                    if (isAuthenticated) {
                        // user is signed in but not authorized for desired state
                        $state.go('accessdenied');
                    } else {
                        // user is not authenticated. stow the state they wanted before you
                        // send them to the login service, so you can return them when you're done
                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);

                        // now, send them to the signin state so they can log in
                        $state.go('accessdenied').then(function() {
                            LoginService.open();
                        });
                    }
                }
            }
        }

        function changePassword(oldPassword, newPassword, callback) {
            var cb = callback || angular.noop;

            return Password.save({
                "oldPassword": oldPassword,
                "newPassword": newPassword
            }, function() {
                return cb();
            }, function(err) {
                return cb(err);
            }).$promise;
        }

        function createAccount(account, callback) {
            var cb = callback || angular.noop;

            return Register.save(account,
                function() {
                    return cb(account);
                },
                function(err) {
                    this.logout();
                    return cb(err);
                }.bind(this)).$promise;
        }

        function login(credentials, callback) {
            var cb = callback || angular.noop;
            var deferred = $q.defer();

            AuthServerProvider.login(credentials)
                .then(loginThen)
                .catch(function(err) {
                    this.logout();
                    deferred.reject(err);
                    return cb(err);
                }.bind(this));

            function loginThen(data) {
                Principal.identity(true).then(function(account) {
                    // After the login the language will be changed to
                    // the language selected by the user during his registration
                    if (account !== null) {
                        $translate.use(account.langKey).then(function() {
                            $translate.refresh();
                        });
                    }
                    /* OtaTrackerService.sendActivity(); */
                    deferred.resolve(data);
                });
                return cb();
            }

            return deferred.promise;
        }

        function loginWithToken(jwt, rememberMe) {
            return AuthServerProvider.loginWithToken(jwt, rememberMe);
        }

        function logout() {
            AuthServerProvider.logout();
            Principal.authenticate(null);
        }

        function resetPasswordFinish(keyAndPassword, callback) {
            var cb = callback || angular.noop;

            return PasswordResetFinish.save(keyAndPassword, function() {
                return cb();
            }, function(err) {
                return cb(err);
            }).$promise;
        }

        function resetPasswordInit(mail, callback) {
            var cb = callback || angular.noop;

            return PasswordResetInit.save(mail, function() {
                return cb();
            }, function(err) {
                return cb(err);
            }).$promise;
        }

        function updateAccount(account, callback) {
            var cb = callback || angular.noop;

            return Account.save(account,
                function() {
                    return cb(account);
                },
                function(err) {
                    return cb(err);
                }.bind(this)).$promise;
        }

        function getPreviousState() {
            var previousState = $sessionStorage.previousState;
            return previousState;
        }

        function resetPreviousState() {
            delete $sessionStorage.previousState;
        }

        function storePreviousState(previousStateName, previousStateParams) {
            var previousState = {
                "name": previousStateName,
                "params": previousStateParams
            };
            $sessionStorage.previousState = previousState;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('AuthServerProvider', AuthServerProvider);

    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q', '$cookies', 'API_URL'];

    function AuthServerProvider($http, $localStorage, $sessionStorage, $q, $cookies, API_URL) {
        var service = {
            getToken: getToken,
            login: login,
            loginWithToken: loginWithToken,
            storeAuthenticationToken: storeAuthenticationToken,
            logout: logout
        };

        return service;

        function getToken() {

            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;
        }

        function login(credentials) {

            var data = {
                username: credentials.username,
                password: credentials.password,
                rememberMe: credentials.rememberMe
            };
            return $http.post(API_URL + '/api/authenticate', data).then(authenticateSuccess);

            function authenticateSuccess(response) {
                var bearerToken = response.data.id_token;
                if (angular.isDefined(bearerToken)) {
                    var jwt = bearerToken;
                    service.storeAuthenticationToken(jwt, credentials.rememberMe);
                    return jwt;
                }
            }
        }

        function loginWithToken(jwt, rememberMe) {
            var deferred = $q.defer();

            if (angular.isDefined(jwt)) {
                this.storeAuthenticationToken(jwt, rememberMe);
                deferred.resolve(jwt);
            } else {
                deferred.reject();
            }

            return deferred.promise;
        }

        function storeAuthenticationToken(jwt, rememberMe) {
            if ($ibe.isB2C() || $ibe.isB2B2C()) {
                $localStorage.authenticationToken = jwt;
            } else {
                if (rememberMe) {
                    $localStorage.authenticationToken = jwt;
                } else {
                    $sessionStorage.authenticationToken = jwt;
                }
            }
        }

        function logout() {
            //clean social token
            $cookies.remove('social-authentication');
            delete $localStorage.authenticationToken;
            delete $sessionStorage.authenticationToken;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Activate', Activate);

    Activate.$inject = ['$resource', 'API_URL'];

    function Activate($resource, API_URL) {
        var service = $resource(API_URL + '/api/activate', {}, {
            'get': {
                method: 'GET',
                params: {},
                isArray: false
            }
        });

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Account', Account);

    Account.$inject = ['$resource', 'API_URL'];

    function Account($resource, API_URL) {
        var service = $resource(API_URL + '/api/account', {}, {
            'get': {
                method: 'GET',
                params: {},
                isArray: false,
                interceptor: {
                    response: function(response) {
                        // expose response
                        return response;
                    }
                }
            }
        });

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('VNPayQRPaymentController', VNPayQRPaymentController);

    VNPayQRPaymentController.$inject = ['$log', '$rootScope', '$scope', '$window', '$interval', '$state', '$stateParams', '$timeout', '$sce', 'Auth', 'Base64', 'Hotel', 'DataService', 'CustomerService', 'DialogService', 'Flight', 'FlightUtils', 'PricingUtils'];

    function VNPayQRPaymentController($log, $rootScope, $scope, $window, $interval, $state, $stateParams, $timeout, $sce, Auth, Base64, Hotel, DataService, CustomerService, DialogService, Flight, FlightUtils, PricingUtils) {
        var vm = this;
        vm.bookingModel = {
            voucher: {},
            departGroupItem: {},
            departPricedItinerary: {},
            departItinTotalFare: {},
            returnGroupItem: {},
            returnPricedItinerary: {},
            returnItinTotalFare: {}
        };
        //---
        vm.bookingModel.curStep = 1;

        vm.paymentModel = {};
        vm.paymentModel.cardModel = {};
        vm.paymentModel.cardModel.cardId = -1;

        $scope.$on('event-payment-voucher-redeem-succeeded', function(event, data) {
            if (data) {
                vm.tempVoucher = data;
            } else {
                vm.tempVoucher = {};
            }
        });

        var _booking_number_param = Base64.decodeString($stateParams.booking_number);
        vm.bookingModel.bookingNumber = _booking_number_param;
        vm.paymentModel.paymentOption = 'VNPAYQR'
        CustomerService.getBookingByNumber(_booking_number_param).then(function(result) {
            vm.bjson = result;
            vm.bookingModel = result;
            var model;
            if ($stateParams.params == "HOTEL") {
                vm.orderType = "HOTEL";
                model = Hotel;
            } else {
                vm.orderType = "FLIGHT";
                model = Flight;
            }
            vm.bjson.is_mobile = false;
            var tempDiscountAmount = 0;
            if (vm.tempVoucher && vm.tempVoucher.discountAmount) {
                tempDiscountAmount = vm.tempVoucher.discountAmount;
            }
            Flight.gPaymentFeeOpt(vm.bookingModel.bookingNumber, vm.paymentModel.paymentOption, tempDiscountAmount).then(function(result) {
                var paymentFeeOptions = result.peymentFees;

                angular.forEach(paymentFeeOptions, function(item, value) {
                    if (item.paymentType == vm.paymentModel.paymentOption) {
                        vm.bookingModel.bookingInfo.displayPriceInfo.paymentFee = item.amount;
                    }
                });
            });
            model.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(res) {
                vnpay_snippet({
                    height: 1500,
                    width: 900,
                    url: res.paymentAuthUrl
                });
            });
        }, function error(e) {
            $log.log('Error somewhere');

        });

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('MobileVNPayQRController', MobileVNPayQRController);

    MobileVNPayQRController.$inject = ['$log', '$rootScope', '$scope', '$window', '$interval', '$state', '$stateParams', '$timeout', '$sce', 'Auth', 'Base64', 'Hotel', 'DataService', 'CustomerService', 'DialogService', 'Flight', 'FlightUtils', 'PricingUtils'];

    function MobileVNPayQRController($log, $rootScope, $scope, $window, $interval, $state, $stateParams, $timeout, $sce, Auth, Base64, Hotel, DataService, CustomerService, DialogService, Flight, FlightUtils, PricingUtils) {
        var vm = this;
        vm.bookingModel = {
            voucher: {},
            departGroupItem: {},
            departPricedItinerary: {},
            departItinTotalFare: {},
            returnGroupItem: {},
            returnPricedItinerary: {},
            returnItinTotalFare: {}
        };
        //---
        vm.bookingModel.curStep = 1;

        vm.paymentModel = {};
        vm.paymentModel.cardModel = {};
        vm.paymentModel.cardModel.cardId = -1;

        $scope.$on('event-payment-voucher-redeem-succeeded', function(event, data) {
            if (data) {
                vm.tempVoucher = data;
            } else {
                vm.tempVoucher = {};
            }
        });

        var _booking_number_param = Base64.decodeString($stateParams.booking_number);
        vm.bookingModel.bookingNumber = _booking_number_param;
        vm.paymentModel.paymentOption = 'VNPAYQR';
        CustomerService.getBookingByNumber(_booking_number_param).then(function(result) {
            vm.bjson = result;
            vm.bookingModel = result;
            var model;
            if ($stateParams.params == "HOTEL") {
                vm.orderType = "HOTEL";
                model = Hotel;
            } else {
                vm.orderType = "FLIGHT";
                model = Flight;
            }
            vm.bjson.is_mobile = true;
            var tempDiscountAmount = 0;
            if (vm.tempVoucher && vm.tempVoucher.discountAmount) {
                tempDiscountAmount = vm.tempVoucher.discountAmount;
            }
            Flight.gPaymentFeeOpt(vm.bookingModel.bookingNumber, vm.paymentModel.paymentOption, tempDiscountAmount).then(function(result) {
                var paymentFeeOptions = result.peymentFees;

                angular.forEach(paymentFeeOptions, function(item, value) {
                    if (item.paymentType == vm.paymentModel.paymentOption) {
                        vm.bookingModel.bookingInfo.displayPriceInfo.paymentFee = item.amount;
                    }
                });
            });
            model.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(res) {
                vnpay_snippet({
                    height: 1500,
                    width: 900,
                    url: res.paymentAuthUrl
                });
            });
        }, function error(e) {
            $log.log('Error somewhere');
        });

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function controllerNameByParams($stateParams) {
        // naive example of dynamic controller name mining
        // from incoming state params

        var controller = "MobileVNPayQRController";

        if ($stateParams.payment_method === "VNPAYQR") {
            console.log("Redirect to MobileVNPayQRController controller.")
            return "MobileVNPayQRController";
        }

        if ($stateParams.payment_method === "ATM_DEBIT") {
            if ($stateParams.params === "FLIGHT") {
                console.log("Redirect to FlightBookingPaymentController controller.")
                return "FlightBookingPaymentController";
            }
            if ($stateParams.params === "HOTEL") {
                console.log("Redirect to HotelBookingController controller.")
                return "HotelBookingController";
            }
        }

        return controller;
    }

    function templateNameByParams($stateParams) {
        if ($stateParams.payment_method === "VNPAYQR") {
            console.log("Loading mobile.qr.booking.payment template.")
            return "app/mobile/flights/booking/mobile.qr.booking.payment.html";
        }
        if ($stateParams.payment_method === "ATM_DEBIT") {
            if ($stateParams.params === "FLIGHT") {
                console.log("Loading mobile.flights.booking.payment.html template.")
                return "app/mobile/flights/booking/mobile.flights.booking.payment.html";
            }
            if ($stateParams.params === "HOTEL") {
                console.log("Loading mobile.hotels.booking.payment.html template.")
                return "app/mobile/flights/booking/mobile.hotels.booking.payment.html";
            }
        }
    }

    function stateConfig($stateProvider) {
        $stateProvider
            .state('mobile-booking-payment/:booking_number/:is_mobile/:payment_method/:params', {
                url: '/mobile-booking-payment/:booking_number/:is_mobile/:payment_method/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        // templateUrl: 'app/mobile/flights/booking/mobile.flights.booking.payment.html',
                        // controller: 'MobileVNPayQRController',
                        templateUrl: function($stateParams) {
                            return templateNameByParams($stateParams)
                        },
                        controllerProvider: function($stateParams) {
                            var controllerName = controllerNameByParams($stateParams);
                            return controllerName;
                        },
                        controllerAs: 'vm',

                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })
            .state('mobile-booking-payment/credit-3d/:booking_number/:acs_url/:pa_req/:md/:term_url/:params', {
                url: '/mobile-booking-payment/credit-3d/:booking_number/:acs_url/:pa_req/:md/:term_url/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/mobile/flights/booking/mobile.flights.booking.payment.3d.auth.external.html',
                        controller: 'MobileFlightsBookingPayment3DAuthExternalController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })
            .state('mobile-booking-payment/credit-3d?:pa_res', {
                url: '/mobile-booking-payment/credit-3d?:pa_res'
            })
            .state('payment-vnpay-qr/:booking_number/:params', {
                url: '/payment-vnpay-qr/:booking_number/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/mobile/flights/booking/vnpay.qr.payment.html',
                        controller: 'VNPayQRPaymentController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })
            .state('vnpay-complete-mobile/:booking_number/:bookingStatus/:paymentStatus/:issuedStatus', {
                url: '/vnpay-complete-mobile/:booking_number/:bookingStatus/:paymentStatus/:issuedStatus',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/mobile/flights/booking/mobile.booking.result.html',
                        controller: 'MobileVNPayQRSuccessController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('MobileFlightsBookingPayment3DAuthExternalController', MobileFlightsBookingPayment3DAuthExternalController);

    MobileFlightsBookingPayment3DAuthExternalController.$inject = ['$log', '$rootScope', '$scope', '$window', '$interval', '$state', '$stateParams', '$timeout', '$sce', 'Auth', 'Base64'];

    function MobileFlightsBookingPayment3DAuthExternalController($log, $rootScope, $scope, $window, $interval, $state, $stateParams, $timeout, $sce, Auth, Base64) {
        var vm = this;

        vm.progress = 0;
        vm.givenUrl = Base64.decodeString($stateParams.acs_url);
        vm.paReq = Base64.decodeString($stateParams.pa_req);
        vm.md = Base64.decodeString($stateParams.md);
        vm.termUrl = Base64.decodeString($stateParams.term_url);
        $log.log(vm.givenUrl + ' ' + vm.paReq + ' ' + vm.md + ' ' + vm.termUrl);

        vm.cancel = cancel;

        function cancel() {
            //$uibModalInstance.dismiss('cancel');
            // $window.removeEventListener('message', listener);
        }

        $scope.$on('message', function(event, item) {
            cancel();
        });

        $scope.trustSrc = function(src) {
            return $sce.trustAsResourceUrl(src);
        }

        var listener = function(e) {
            // $log.log("FlightPayment3DAuthExternalController - listener: " + e.data);
            //console.log("FlightPaymentExternalController - listener - %j", e.data);
            //$rootScope.$broadcast('message', e.data);
            cancel();

            $window.removeEventListener('message', listener);

            // if (e.data && angular.isString(e.data) && e.data.indexOf("true") !== -1) {
            //     $rootScope.$broadcast('DoPaymentWith3DAuth', e.data);
            // }

            $rootScope.$broadcast('DoPaymentWith3DAuthConfirmation', e.data);

        };

        $window.addEventListener('message', listener);

        // $window.postMessage("hello", "http://localhost:8080");

        function wait(ms) {
            var start = new Date().getTime();
            var end = start;
            while (end < start + ms) {
                end = new Date().getTime();
            }
        }

        //TODO: remove
        //$uibModalInstance.dismiss('cancel');

        // store the interval promise in this variable
        var promise;

        vm.setProgress = function() {
            // $log.log(vm.progress);
            vm.progress = vm.progress + (100 - vm.progress) / 10;
            // $log.log(vm.progress);
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // store the interval promise
            promise = $interval(vm.setProgress, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });

        $scope.$on('DoPaymentWith3DAuthConfirmation', function(event, item) {
            $log.log("DoPaymentWith3DAuth - " + item);
            $state.go('mobile-booking-payment/credit-3d?:pa_res', {
                "pa_res": item
            });
        });

        $timeout(function() {
            var form = angular.element('#newibe_PAEnrollForm_form');
            form[0].submit();
        }, 100);
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('MobileVNPayQRSuccessController', MobileVNPayQRSuccessController);

    MobileVNPayQRSuccessController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$uibModal', '$interval', 'Flight', 'DataService', 'DateUtils', 'ValidationUtils', 'CustomerService', 'FlightUtils', 'Base64', 'DialogService', '$location'];

    function MobileVNPayQRSuccessController($log, $rootScope, $scope, $state, $stateParams, $timeout, $uibModal, $interval, Flight, DataService, DateUtils, ValidationUtils, CustomerService, FlightUtils, Base64, DialogService, $location) {
        var vm = this;
        var _booking_number_param = Base64.decodeString($stateParams.booking_number);
        //++++ initial parameter
        if (_booking_number_param) {
            CustomerService.getFinalBookingByNumber(_booking_number_param).then(function(result) {
                window.location.href = '#/mobile-booking-result?' + $stateParams.booking_number + "&booking_status=" + result.bookingInfo.status + "&payment_status=" + result.bookingInfo.paymentStatus + "&issue_status=" + result.bookingInfo.issuedStatus;
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('NavbarController', NavbarController);

    NavbarController.$inject = ['$log', '$state', 'Auth', 'Principal', 'ProfileService', 'LoginService', '$scope', '$uibModal', 'RegisterService', '$cookies', '$rootScope', 'CustomerService', '$translate', 'tmhDynamicLocale', '$location', 'MerchantService'];

    function NavbarController($log, $state, Auth, Principal, ProfileService, LoginService, $scope, $uibModal, RegisterService, $cookies, $rootScope, CustomerService, $translate, tmhDynamicLocale, $location, MerchantService) {

        // $scope.$on('$includeContentLoaded', function() {
        //     Layout.initHeader(); // init header 
        // });

        var vm = this;
        vm.currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;

        vm.isNavbarCollapsed = true;
        vm.isAuthenticated = Principal.isAuthenticated;

        vm.authenticationError = false;
        vm.inactivateError = false;
        vm.credentials = {};
        vm.login = login;
        vm.password = null;
        vm.rememberMe = true;
        vm.username = null;
        vm.language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');
        if (!vm.language) {
            vm.language = "vi";
        }
        vm.language = "vi";
        vm.changeLanguage = changeLanguage;
        vm.getProfileInfo = getProfileInfo;

        // var lc_msisdn = $location.search().msisdn;
        // var ck_msisdn = $cookies.get('msisdn');
        // if((lc_msisdn && ck_msisdn) && (lc_msisdn != ck_msisdn ||  (!lc_msisdn &&ck_msisdn))) {
        //     window.location.reload();
        // }

        // $scope.$watch($rootScope.msisdn , function(newVal, oldVal) {
        //     console.log('akdgfsgasdfga=======================asfasdf')
        //     Principal.identity(true).then(function(acc) {
        //         vm.identity = acc;
        //         if(acc != null) {
        //             $translate.use(acc.langKey).then(function () {
        //                 $translate.refresh();
        //             });
        //         }
        //     })
        // });



        //keep sale_channel
        vm.isB2B2C = $ibe.isB2B2C();

        Principal.identity().then(function(user) {
            vm.identity = user;
            console.log("InfoUser: ");
            console.log(vm.identity);
            // nam.huynhphuong - fix ISSUE IBE2-499
            if (vm.identity == null) {
                vm.identity = {};
            }
            var isB2B = Principal.hasAnyAuthority(['ROLE_B2B']);
            if (isB2B) {
                CustomerService.getB2BProfile(vm.identity.login).then(function success(result) {
                    vm.identity.displayName = result.agentName;
                    vm.identity.email = vm.identity.login;
                });
            } else {
                var isB2C = Principal.hasAnyAuthority(['ROLE_B2C']);
                if (isB2C) {
                    CustomerService.getShortProfile(vm.identity.id).then(function success(result) {
                        CustomerService.getCustomerProfile(result.requesterId).then(function success(spResult) {
                            CustomerService.getCustomerTraveller(spResult.defaultTravellerId).then(function success(result) {
                                vm.identity.displayName = "";
                                if (typeof result.firstName != "undefined") {
                                    vm.identity.displayName = result.firstName;
                                }
                                if (typeof result.surName != "undefined") {
                                    vm.identity.displayName = vm.identity.displayName + " " + result.surName;
                                }
                            });
                        });
                    });
                }
            }

            if ((!vm.identity.displayName || vm.identity.displayName.length === 0 || vm.identity.displayName === " ")) {
                vm.identity.displayName = vm.identity.login;
            }
            // end fix

            // do something with data only inside this inner function
            //$log.log("vm.identity = " + JSON.stringify(user));

        });


        if (!MerchantService.isSimpleView()) {
            vm.getProfileInfo();
        }

        function getProfileInfo() {
            ProfileService.getProfileInfo().then(function(response) {
                vm.inProduction = response.inProduction;
                vm.swaggerEnabled = response.swaggerEnabled;
            });
        };


        function changeLanguage() {
            $translate.use(vm.language);
            tmhDynamicLocale.set(vm.language);
        };
        $scope.$on('$viewContentLoaded', function() {

            Layout.initHeader(); // init header

            var resBreakpointMd = App.getResponsiveBreakpoint('sm');
            //alert(resBreakpointMd + ":" + App.getViewPort().width);

            $('.nav a:not(.nolink)').on('click', function() {
                //$('.btn-navbar').click(); //bootstrap 2.x
                if (App.getViewPort().width < resBreakpointMd) {
                    $('.navbar-toggle').click(); //bootstrap 3.x by Richard
                }
            });
        });

        $scope.$on('authenticationSuccess', function() {
            $log.log("NavbarController --> authenticationSuccess event...");
            Principal.identity().then(function(account) {
                vm.identity = account;
                // nam.huynhphuong - fix ISSUE IBE2-499
                if (vm.identity == null) {
                    vm.identity = {};
                }
                var isB2B = Principal.hasAnyAuthority(['ROLE_B2B']);
                if (isB2B) {
                    CustomerService.getB2BProfile(vm.identity.login).then(function success(result) {
                        vm.identity.displayName = result.agentName;
                        vm.identity.email = vm.identity.login;
                    });
                } else {
                    var isB2C = Principal.hasAnyAuthority(['ROLE_B2C']);
                    if (isB2C) {
                        CustomerService.getShortProfile(vm.identity.id).then(function success(result) {
                            CustomerService.getCustomerProfile(result.requesterId).then(function success(spResult) {
                                CustomerService.getCustomerTraveller(spResult.defaultTravellerId).then(function success(result) {
                                    vm.identity.displayName = "";
                                    if (typeof result.firstName != "undefined") {
                                        vm.identity.displayName = result.firstName;
                                    }
                                    if (typeof result.surName != "undefined") {
                                        vm.identity.displayName = vm.identity.displayName + " " + result.surName;;
                                    }
                                });
                            });
                        });
                    }
                }

                if ((!vm.identity.displayName || vm.identity.displayName.length === 0 || vm.identity.displayName === " ")) {
                    vm.identity.displayName = vm.identity.login;
                }
                // end fix
            });
        });

        $scope.$on('syncAuthenticationSuccess', function() {
            $log.log("NavbarController --> syncAuthenticationSuccess event...");
            Principal.identity(true).then(function(account) {
                $rootScope.$broadcast('authenticationSuccess');
            });
        });

        $scope.$on('syncLogout', function() {
            $log.log("NavbarController --> syncLogout event...");
            syncLogout();
        });

        vm.login = login;
        vm.logout = logout;
        vm.register = register;
        vm.toggleNavbar = toggleNavbar;
        vm.collapseNavbar = collapseNavbar;
        vm.$state = $state;

        function login() {
            collapseNavbar();
            LoginService.open();
        }

        function logout() {
            collapseNavbar();
            Auth.logout();
            $state.go('home');

            //clean ibe token
            try {
                $ibe.resetTokenKey();
            } catch (err) {
                $log.log("AuthServerProvider.logout - err: " + err);
            }
            vm.identity = {};
            $rootScope.$broadcast('logoutSuccess');
        }

        function syncLogout() {
            collapseNavbar();
            Principal.authenticate(null);
            $log.log("$state.current.name" + $state.current.name);
            if ($state.current.name === 'home') {
                $state.reload();
            } else {
                $state.go('home');
            }

            //clean ibe token
            try {
                $ibe.resetTokenKey();
            } catch (err) {
                $log.log("AuthServerProvider.logout - err: " + err);
            }
            $rootScope.$broadcast('logoutSuccess');
        }

        function toggleNavbar() {
            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;
        }

        function collapseNavbar() {
            vm.isNavbarCollapsed = true;
        }

        /** Register dialog **/
        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        function register() {
            collapseNavbar();
            RegisterService.open();
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('activeMenu', activeMenu);

    activeMenu.$inject = ['$translate', '$locale', 'tmhDynamicLocale'];

    function activeMenu($translate, $locale, tmhDynamicLocale) {
        var directive = {
            restrict: 'A',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs) {
            var language = attrs.activeMenu;

            scope.$watch(function() {
                return $translate.use();
            }, function(selectedLanguage) {
                if (language === selectedLanguage) {
                    tmhDynamicLocale.set(language);
                    element.addClass('active');
                } else {
                    element.removeClass('active');
                }
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('activeLink', activeLink);

    function activeLink() {
        var directive = {
            restrict: 'A',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs) {
            var clazz = attrs.activeLink;
            var path = attrs.href;
            path = path.substring(1); //hack because path does bot return including hashbang
            scope.location = location;
            scope.$watch('location.path()', function(newPath) {
                if (path === newPath) {
                    element.addClass(clazz);
                } else {
                    element.removeClass(clazz);
                }
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider
            .state('error', {
                parent: 'app',
                url: '/error',
                data: {
                    authorities: [],
                    pageTitle: 'error.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'app/layouts/error/error.html'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('error');
                        return $translate.refresh();
                    }]
                }
            })
            .state('accessdenied', {
                parent: 'app',
                url: '/accessdenied',
                data: {
                    authorities: []
                },
                views: {
                    'content@': {
                        templateUrl: 'app/layouts/error/accessdenied.html'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('error');
                        return $translate.refresh();
                    }]
                }
            });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FooterController', FooterController);

    FooterController.$inject = ['LINKS'];

    function FooterController(LINKS) {

        // $scope.$on('$includeContentLoaded', function() {
        //     Layout.initHeader(); // init header
        // });

        var vm = this;

        vm.links = LINKS;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')

        /*
         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
         They are written in English to avoid character encoding issues (not a perfect solution)
         */
        .constant('LINKS', [{
                "url": "",
                "text": "Giới thiệu Gotadi",
                "key": "about"
            },
            {
                "url": "",
                "text": "Các điều khoản sử dụng",
                "key": "terms"
            },
            {
                "url": "",
                "text": "Ý kiến của người dùng",
                "key": "feedback"
            },
            {
                "url": "",
                "text": "Liên hệ",
                "key": "contact"
            },
            {
                "url": "",
                "text": "Tuyển dụng",
                "key": "recruitment"
            },
            {
                "url": "",
                "text": "Khách hàng doanh nghiệp",
                "key": "company"
            },
            {
                "url": "",
                "text": "Dành cho đại lý",
                "key": "agent"
            }
        ]);
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider', 'TEMPLATE_URL'];

    function templateNameByParams(TEMPLATE_URL) {
        var merchant_code = String(Cookies.get('merchant_code')).toUpperCase();
        if (!TEMPLATE_URL[merchant_code] || !TEMPLATE_URL[merchant_code].hotel_search)
            return TEMPLATE_URL['DEFAULT'].hotel_search;
        return TEMPLATE_URL[merchant_code].hotel_search;
    }

    function stateConfig($stateProvider, TEMPLATE_URL) {
        $stateProvider
            .state('hotel-search-home', {
                parent: 'hotel',
                url: '/hotel',
                data: {
                    //authorities: ['ROLE_USER']
                    merchant_code: null,
                    msisdn: null
                },
                views: {
                    'content@': {
                        templateUrl: function() {
                            return templateNameByParams(TEMPLATE_URL, 'hotel_search');
                        },
                        // 'app/hotels/search/hotel.search.home.html',
                        controller: 'HotelSearchHomeController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {}
            })

            .state('hotel-search', {
                parent: 'hotel',
                url: '/hotel-search?params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/hotels/search/hotel.search.html',
                        controller: 'HotelSearchController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined,
                    "init": undefined,
                    "searchCompleted": undefined,
                    "filterCompleted": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });

    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelSearchLoadingController', HotelSearchLoadingController);

    HotelSearchLoadingController.$inject = ['$log', '$rootScope', '$scope', '$interval', '$state', '$timeout', 'Auth', '$uibModalInstance', 'searchOptions'];

    function HotelSearchLoadingController($log, $rootScope, $scope, $interval, $state, $timeout, Auth, $uibModalInstance, searchOptions) {
        var vm = this;

        $log.log('SearchOptions in loading dialog:');
        $log.log(searchOptions);

        vm.searchOptions = searchOptions;
        vm.progress = 0;

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        $scope.$on('gtd-hotel-search-completed', function(event, item) {
            // wait(3000);
            //
            cancel();
        });

        function wait(ms) {
            var start = new Date().getTime();
            var end = start;
            while (end < start + ms) {
                end = new Date().getTime();
            }
        }

        //TODO: remove
        // $uibModalInstance.dismiss('cancel');

        // store the interval promise in this variable
        var promise;

        vm.setProgress = function() {
            // $log.log(vm.progress);
            vm.progress = vm.progress + (100 - vm.progress) / 10;
            // $log.log(vm.progress);
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // store the interval promise
            promise = $interval(vm.setProgress, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });


    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelSearchHomeController', HotelSearchHomeController);

    HotelSearchHomeController.$inject = ['$rootScope', '$scope', '$state', '$timeout', 'Hotel', 'DataService', 'DEFAULT_PAGE_SIZE', 'Base64', 'BannerService', 'ThemeCfg', '$cookies'];

    function HotelSearchHomeController($rootScope, $scope, $state, $timeout, Hotel, DataService, DEFAULT_PAGE_SIZE, Base64, BannerService, ThemeCfg, $cookies) {
        $('.page-content').addClass('home');
        var vm = this;

        var merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");


        if (!ThemeCfg[merchant_code] == false)
            vm.enable_template = true;
        else
            vm.enable_template = false;

        if (vm.enable_template) {
            $('.flight-search-home').css('max-width', "640px");
            $('.hotel-search-home').css('max-width', "640px");
        }
        vm.searchResult = [];

        // Default init
        vm.searchOptions = {};
        vm.searchOptions.size = DEFAULT_PAGE_SIZE; //15
        vm.searchOptions.page = 0;
        vm.searchOptions.adultNo = 1;
        vm.searchOptions.childrenNo = 0;
        vm.searchOptions.checkindate = moment(new Date(new Date().getTime() + 1 * 86400000)).format('DD-MM-YYYY');
        vm.searchOptions.checkoutdate = moment(new Date(new Date().getTime() + 2 * 86400000)).format('DD-MM-YYYY');

        vm.hotelTempSearchOptions = DataService.getHotelSearchOptions();
        if (vm.hotelTempSearchOptions.checkin) {
            vm.hotelSearchOptions = vm.hotelTempSearchOptions;
        }

        //TODO: remove
        vm.searchResult = {};
        vm.searchResult.result = [1, 2, 3];

        vm.topHotelIdx = 1;

        vm.setupControl = function() {
            var options = {
                $FillMode: 1, //[Optional] The way to fill image in slide, 0 stretch, 1 contain (keep aspect ratio and put all inside slide), 2 cover (keep aspect ratio and cover whole slide), 4 actual size, 5 contain for large image, actual size for small image, default value is 0
                $DragOrientation: 3, //[Optional] Orientation to drag slide, 0 no drag, 1 horizental, 2 vertical, 3 either, default value is 1 (Note that the $DragOrientation should be the same as $PlayOrientation when $Cols is greater than 1, or parking position is not 0)
                $AutoPlay: true, //[Optional] Whether to auto play, to enable slideshow, this option must be set to true, default value is false
                $Idle: 2500, //[Optional] Interval (in milliseconds) to go for next slide since the previous stopped if the slider is auto playing, default value is 3000
                // $SlideshowOptions: {                                //[Optional] Options to specify and enable slideshow or not
                //     $Class: $JssorSlideshowRunner$,                 //[Required] Class to create instance of slideshow
                //     $Transitions: _SlideshowTransitions,            //[Required] An array of slideshow transitions to play slideshow
                //     $TransitionsOrder: 1,                           //[Optional] The way to choose transition to play slide, 1 Sequence, 0 Random
                //     $ShowLink: true                                    //[Optional] Whether to bring slide link on top of the slider when slideshow is running, default value is false
                // },

                $BulletNavigatorOptions: { //[Optional] Options to specify and enable navigator or not
                    $Class: $JssorBulletNavigator$, //[Required] Class to create navigator instance
                    $ChanceToShow: 2, //[Required] 0 Never, 1 Mouse Over, 2 Always
                    $AutoCenter: 1, //[Optional] Auto center navigator in parent container, 0 None, 1 Horizontal, 2 Vertical, 3 Both, default value is 0
                    $Steps: 1, //[Optional] Steps to go for each navigation request, default value is 1
                    $Rows: 1, //[Optional] Specify lanes to arrange items, default value is 1
                    $SpacingX: 10, //[Optional] Horizontal space between each item in pixel, default value is 0
                    $SpacingY: 10, //[Optional] Vertical space between each item in pixel, default value is 0
                    $Orientation: 1 //[Optional] The orientation of the navigator, 1 horizontal, 2 vertical, default value is 1
                }
            };

            //responsive code begin
            //you can remove responsive code if you don't want the slider scales
            //while window resizing
            // function ScaleSlider() {
            //     var parentWidth = $('#slider1_container').parent().width();
            //     var parentHeight = $('#slider1_container').parent().height();
            //     if (parentWidth) {
            //         jssor_slider1.$ScaleWidth(parentWidth);
            //     }
            //     // if (parentHeight)  {
            //     //     jssor_slider1.$ScaleHeight(parentHeight);
            //     // }
            //     else
            //         window.setTimeout(ScaleSlider, 30);
            // }
            // //Scale slider after document ready
            // ScaleSlider();
            //
            // //Scale slider while window load/resize/orientationchange.
            // $(window).bind("load", ScaleSlider);
            // $(window).bind("resize", ScaleSlider);
            // $(window).bind("orientationchange", ScaleSlider);
            //responsive code end

            $(".owl-carousel").owlCarousel({
                autoPlay: 3000, //Set AutoPlay to 3 seconds
                dots: true,
                items: 1,
                // itemsDesktop: [1199, 3],
                // itemsDesktopSmall: [979, 3]
                responsive: {
                    480: {
                        items: 1,
                        dots: true
                    }, // from zero to 480 screen width 4 items
                    768: {
                        items: 2,
                        dots: true
                    }, // from 480 screen widthto 768 6 items
                    1024: {
                        items: 3
                    } // from 768 screen width to 1024 8 items
                }
            });
        };

        vm.doSearch = function($searchResult, $searchOptions) {
            vm.searchResult = $searchResult;
            vm.searchOptions = $searchOptions;

            DataService.setHotelSearchResult($searchResult);
            DataService.setHotelSearchOptions($searchOptions);

            $timeout(function() {
                $rootScope.$broadcast("gtd-hotel-search-completed", null);

            }, 0);

            if (vm.searchResult && vm.searchResult.page && vm.searchResult.page.totalElements > 0) {
                $state.go('hotel-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": false,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            } else {
                $state.go('hotel-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": true,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            }

        };

        function isEmail(email) {
            var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            return regex.test(email);
        }
        $scope.subscriceEmail = function() {
            var email = $('.form-subscrice .email input').val();
            var phone = $('.form-subscrice .phone input').val();
            var messageResult = '';
            var classAdd = 'error';
            var classRemove = 'success';
            if (email == '') {
                messageResult = 'Email kh�ng du?c d? tr?ng.';
            } else {
                messageResult = 'Email d� t?n t?i tr�n h? th?ng.';
                if (isEmail(email) != false) {
                    Subscribed.Subscribed(email, phone).then(function(result) {
                        if (result.id) {
                            $('.form-subscrice .messageResult').html('�ang k� th�nh c�ng.');
                            $('.form-subscrice .messageResult').removeClass('Error');
                            $('.form-subscrice .messageResult').addClass('success');
                        } else {
                            $('.form-subscrice .messageResult').html('Email d� t?n t?i tr�n h? th?ng.');
                            $('.form-subscrice .messageResult').removeClass('success');
                            $('.form-subscrice .messageResult').addClass('Error');
                        }
                    });
                } else {
                    messageResult = 'Email kh�ng h?p l?.';
                }
            }
            $('.form-subscrice .messageResult').html(messageResult);
            $('.form-subscrice .messageResult').removeClass(classRemove);
            $('.form-subscrice .messageResult').addClass(classAdd);
        };

        vm.switchHotel = function(id) {
            vm.topHotelIdx = id;
        };

        vm.setupControl();

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelSearchController', HotelSearchController);

    HotelSearchController.$inject = [
        '$log', '$scope', '$state', '$stateParams', '$rootScope',
        'Base64', 'GtdHotelService',
        'HOTEL_STATES'
    ];

    function HotelSearchController(
        $log, $scope, $state, $stateParams, $rootScope,
        Base64, GtdHotelService,
        HOTEL_STATES) {

        var vm = this;

        vm.paxDetail = {
            roomQuantity: 0,
            adultQuantity: 0,
            childQuantity: 0
        };

        vm.params = $stateParams.params;

        // Default show nothing
        vm.displayState = null;

        vm.hotelStates = GtdHotelService.getStates();

        vm.updatePaxDisplay = updatePaxDisplay;
        vm.retry = retry;

        vm.showLoading = true;
        vm.showSubLoading = false;

        var listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
            if (!newValue) {
                return;
            }
            switch (newValue.state) {
                case vm.hotelStates.SHOW_SUB_LOADING:
                    vm.showSubLoading = true;
                    break;
                case vm.hotelStates.SHOW_LOADING:
                    vm.displayState = newValue.state;
                    vm.showLoading = true;
                    break;
                case vm.hotelStates.HIDE_LOADING:
                    vm.displayState = newValue.state;
                    vm.showLoading = false;
                    vm.showSubLoading = false;
                    break;
                case vm.hotelStates.SEARCH_ERROR:
                    vm.displayState = newValue.state;
                    break;
                case vm.hotelStates.FINISH_SEARCH:
                    vm.displayState = newValue.state;
                    vm.searchResult = newValue.payload;
                    break;
                case vm.hotelStates.CHANGE_SEARCH_FILTER:
                    vm.searchOptions = newValue.payload;
                    vm.updatePaxDisplay();
                    break;
                default:
                    break;
            }
        });

        function updatePaxDisplay() {
            vm.paxDetail = {
                roomQuantity: 0,
                adultQuantity: 0,
                childQuantity: 0
            };
            vm.paxDetail.roomQuantity = vm.searchOptions.hotelSearchBody.length;
            vm.searchOptions.hotelSearchBody.forEach(function name(pax) {
                vm.paxDetail.adultQuantity += vm.searchOptions.hotelSearchBody.adultQuantity;
                vm.paxDetail.childQuantity += vm.searchOptions.hotelSearchBody.childQuantity;
            });

        }

        function retry() {
            GtdHotelService.search();
        }

        $scope.$watch('$root.hotelStates', function(newValue, oldValue) {

        });

        if (vm.params) {
            try {

                vm.searchOptions = Base64.decodeJson(vm.params);

                GtdHotelService.updateSearchOptions(vm.searchOptions);

                vm.updatePaxDisplay();

                GtdHotelService.search();

            } catch (err) {
                $log.log(err);
            }
        }

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            listener = null;
        });
        /** END CHECK TIMEOUT **/
        $scope.changeItinerary = function() {
            $('.hotel-search-header').slideToggle();
        };
        $scope.filterItinerary = function() {
            $('.formFilter').toggleClass('show');
            $('.sm-form-filter').show();
        };
        $scope.closeFilterItinerary = function() {
            $('.formFilter').removeClass('show');
            $('.sm-form-filter').hide();
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelSearchConfirmBookingController', HotelSearchConfirmBookingController);

    HotelSearchConfirmBookingController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', 'Auth', '$uibModalInstance', 'searchOptions', 'currentItem'];

    function HotelSearchConfirmBookingController($log, $rootScope, $scope, $state, $timeout, Auth, $uibModalInstance, searchOptions, currentItem) {
        var vm = this;

        $log.log('SearchOptions in loading dialog:');
        $log.log(searchOptions);

        vm.searchOptions = searchOptions;

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        vm.doSubmit = function() {
            $uibModalInstance.dismiss('cancel');

            // Go to
            $state.go('booking-info', {
                "searchOptions": vm.searchOptions,
                "searchResult": vm.searchResult
            });
        };

        $scope.$on('gtd-hotel-search-date-paginator-init', function(event, item) {
            // wait(3000);
            //
            vm.cancel();
        });

        function wait(ms) {
            var start = new Date().getTime();
            var end = start;
            while (end < start + ms) {
                end = new Date().getTime();
            }
        }


    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider
            .state('inventory', {
                parent: 'hotel',
                url: '/inventory',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/hotels/Inventory/hotel.inventory.html',
                        controller: 'HotelInventoryController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('global');
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelInventoryController', HotelInventoryController);

    HotelInventoryController.$inject = ['$log', '$rootScope', '$scope', '$interval', '$state', '$timeout', '$http', 'DialogService'];

    function HotelInventoryController($log, $rootScope, $scope, $interval, $state, $timeout, $http, DialogService) {
        var vm = this;
        vm.registry = registry;


        function registry() {
            if (!vm.hotelName || !vm.phoneNumber || !vm.email || !vm.address) {
                return false;
            }
            var dto = {};
            dto.hotelName = vm.hotelName;
            dto.phoneNumber = vm.phoneNumber;
            dto.email = vm.email;
            dto.address = vm.address;
            dto.fullName = vm.fullName;

            return $http({
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                url: '/api/form/hotel-inventory',
                data: angular.toJson(dto)
            }).then(function successCallback(response, result) {
                $state.go('inventory', result, {
                    reload: true
                });
                DialogService.openAlertDialog({
                    "title": "Thông báo",
                    "message": "Cảm ơn bạn đã gửi thông tin liên hệ, chúng tôi sẽ liên lạc với bạn trong thời gian sớm nhất."
                });
                return response.data;
            }, function errorCallback(response) {
                return response.data;
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('hotel', {
                abstract: true,
                parent: 'app',

                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            })

            .state('hotel-booking-terms', {
                parent: 'app',
                url: '/hotel-booking-terms',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/home/hotel-booking-terms.html',
                        controller: 'BlankController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            });
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelChooseroomController', HotelChooseroomController);

    HotelChooseroomController.$inject = [
        '$log', '$uibModalInstance',
        'GtdHotelService'
    ];

    function HotelChooseroomController(
        $log, $uibModalInstance,
        GtdHotelService
    ) {
        var vm = this;
        vm.init = init;
        vm.increaseAdult = increaseAdult;
        vm.decreaseAdult = decreaseAdult;
        vm.increaseChild = increaseChild;
        vm.decreaseChild = decreaseChild;
        vm.limitInput = limitInput;

        vm.ageOptions = [];

        for (var i = 1; i <= 17; i++) {
            vm.ageOptions.push(i);
        }

        vm.init();


        // $log.log(vm.chooseRoomSearchOptions);
        // vm.chooseRoomSearchOptions.forEach(function (item) {
        //     for (var i = 0; i < item.childrenNo; i++) {
        //         if (item.paxDetails[i] == "0") {
        //             item.paxDetails[i] = "";
        //         }
        //     }
        // });


        function init() {
            vm.init = init;

            vm.chooseRoomSearchOptions = angular.copy(GtdHotelService.getPaxFilter());
        }

        function increaseAdult(pax) {
            if (pax.adultQuantity && pax.adultQuantity < 8) {
                pax.adultQuantity++;
            } else {
                pax.adultQuantity = 8;
            }
        }

        function decreaseAdult(pax) {
            if (pax.adultQuantity && pax.adultQuantity > 1) {
                pax.adultQuantity--;
            } else {
                pax.adultQuantity = 1;
            }
        }

        function increaseChild(pax) {
            if (pax.childQuantity < 4) {
                pax.childQuantity++;
                pax.childrenAges.push("1");
            } else {
                pax.childQuantity = 4;
            }
        }

        function decreaseChild(pax) {
            if (pax.childQuantity && pax.childQuantity > 0) {
                pax.childQuantity--;
                pax.childrenAges.pop();
            } else {
                pax.childQuantity = 0;
            }
        }

        function limitInput($event, obj, field, maxLength) {
            if (obj !== undefined && obj[field] > maxLength) {
                obj[field] = maxLength;
            }
        }

        vm.addPax = function() {
            if (vm.chooseRoomSearchOptions.length < 8) {
                vm.chooseRoomSearchOptions.push({
                    adultQuantity: "2",
                    childQuantity: "0",
                    childrenAges: []
                });
            }
            //$log.log(JSON.stringify(vm.searchOptions.pax));
        };
        vm.removePax = function(index) {
            if (vm.chooseRoomSearchOptions.length > 1) {
                vm.chooseRoomSearchOptions.splice(index, 1);
            }
        };

        $uibModalInstance.result.finally(function() {

        });

        vm.cancel = function cancel() {
            GtdHotelService.updatePaxInfo(vm.chooseRoomSearchOptions);

            $uibModalInstance.dismiss('cancel');
        };

        // $scope.$on('event-flight-load-completed', function (event, item) {
        //     vm.cancel();
        // });

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider
            .state('hotel-detail/:hotel_id/:params', {
                parent: 'hotel',
                url: '/hotel-detail/:hotel_id/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/hotels/details/hotel.detail.html',
                        controller: 'HotelDetailController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {}
            });

    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelDetailController', HotelDetailController);

    HotelDetailController.$inject = [
        '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$log', '$filter',
        'Hotel', 'DataService', 'DialogService', 'Base64', 'GlobalSrv', 'HotelUtils', 'GtdHotelService',
        'PREFIX_DEFAULT_POLICY_STRING', 'AFTER_DEFAULT_POLICY_STRING', 'HOTEL_STATES'
    ];

    function HotelDetailController(
        $rootScope, $scope, $state, $stateParams, $timeout, $log, $filter,
        Hotel, DataService, DialogService, Base64, GlobalSrv, HotelUtils, GtdHotelService,
        PREFIX_DEFAULT_POLICY_STRING, AFTER_DEFAULT_POLICY_STRING, HOTEL_STATES) {
        var vm = this;

        //++++ initial parameter
        vm.hotelId = $stateParams.hotel_id;
        vm.params = $stateParams.params;

        vm.isLoading = true;


        vm.hotelAvailabilityChanged = hotelAvailabilityChanged;
        vm.initControl = initControl;

        vm.selectedDestination = GtdHotelService.getSelectedDestination();

        vm.hotelStates = GtdHotelService.getStates();
        if (vm.params) {
            try {
                vm.searchOptions = Base64.decodeJson(vm.params);
                GtdHotelService.updateSearchOptions(vm.searchOptions);
            } catch (err) {
                $log.log(err);
            }
        }

        vm.initControl();

        function initControl() {

            var listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
                if (!newValue) {
                    return;
                }
                switch (newValue.state) {
                    case vm.hotelStates.SHOW_LOADING:
                        vm.isLoading = true;
                        break;
                    case vm.hotelStates.HIDE_LOADING:
                        vm.isLoading = false;
                        break;
                    case vm.hotelStates.HOTEL_AVAILABILITY_CHANGED:
                        vm.hotelAvailabilityChanged(newValue.payload);
                        break;
                    default:
                        break;
                }
            });
        }

        $scope.changeItinerary = function() {
            $('.hotel-search-header').slideToggle();
        };


        vm.backSearchResult = function() {
            GtdHotelService.backToResult();
        };
        //get supplierSessionId form search result cell
        var retrievedsupplierSessionId = localStorage.getItem('ctrl.item.supplierSessionId');
        GtdHotelService.checkHotelAvailability({
            "id": vm.hotelId,
            "supplierSessionId": retrievedsupplierSessionId
        });
        var cnt = 0;

        function hotelAvailabilityChanged(result) {

            $log.log("Get checkHotelAvailability hotel.service");
            $log.log(result);
            $log.log(result.valid);
            if (result != null &&
                result.hotel.products == null &&
                cnt < 1) {
                cnt++;
                GtdHotelService.checkHotelAvailability({
                    "id": vm.hotelId,
                    "supplierSessionId": result.hotel.supplierSessionId
                });
            }

            if (result.success) {

                DataService.setSelectedHotel(result.hotel);
                DataService.setSelectedHotelAvail(result.hotel);

                GlobalSrv.addRecentViewHotels(result.hotel);

                vm.searchCompleted = true;
                vm.selectedHotel = result.hotel;
                if (vm.selectedHotel && vm.selectedHotel.products) {
                    vm.selectedHotel.products.forEach(function(feature) {
                        var roomDescription = feature.roomLongDescription;
                        if (roomDescription && roomDescription.length > 0) {
                            var arrDesc = roomDescription.split('<br />');
                            feature.arrDesc = [];
                            for (var i = 0; i < arrDesc.length; i++) {
                                if (arrDesc[i].indexOf('Internet') > 0 || i == 2) break;
                                feature.arrDesc[i] = arrDesc[i].replace('<strong>', '').replace('</strong>', '').replace('Phòng', '');
                            }
                            feature.arrDesc.reverse();
                        }

                        if (!feature.nonRefundable && feature.policyString) {
                            var prefixStr = PREFIX_DEFAULT_POLICY_STRING.replace(new RegExp('\\{0\\}', 'gm'), vm.selectedHotel.hotelMeta.name);
                            feature.displayPolicyString = feature.policyString.replace(prefixStr, '');
                            var date = feature.displayPolicyString.match(/(\d{2}):(\d{2}) \(\(\w{3}\+(\d{2}):(\d{2})\)\), (\d{2})([\/.-])(\d{2})([\/.-])(\d{4})/g);
                            if (date) {
                                var policyAfter = feature.displayPolicyString.replace(date, '');
                                $log.log(date);

                                var rawdate = date[0];
                                var res = rawdate.replace(/{.*?}/g, "")
                                    .replace(/\[.*?\]/g, "")
                                    .replace(/<.*?>/g, "")
                                    .replace(/\(.*?\)/g, "");


                                date = moment(res, 'HH:mm, , DD-MM-YYYY').format('HH:mm, dddd, DD-MM-YYYY');
                                $log.log(date);
                                feature.displayPolicyString = date;
                                $log.log(feature.displayPolicyString);
                            }
                        }
                        feature.adultQuantity = 0;
                        feature.childQuantity = 0;
                        if (feature.rooms) {
                            feature.rooms.forEach(function(room) {
                                feature.adultQuantity = feature.adultQuantity + room.pax.adultQuantity;
                                feature.childQuantity = feature.childQuantity + room.pax.childQuantity;
                            });
                        }
                    });
                }
                HotelUtils.getFacilities(vm.selectedHotel);

                // TODO: Remove ignore Expedia
                // if(vm.selectedHotel.supplierCode === 'E'){
                //     vm.selectedHotel.products = [];
                // }
                // End remove ignore Expedia

                // vm.selectedHotel = DataService.getSelectedHotel();

                // vm.selectedHotel.hotelContent = JSON.parse(vm.selectedHotel.hotelMetadata.hotelContent);
                // vm.selectedHotel.hotelContent = vm.selectedHotel.hotelMeta;

                $timeout(function() {
                    $rootScope.$broadcast("gtd-load-details-completed", null);
                }, 1000);
            } else {
                DialogService.openAlertDialog({
                    "title": $filter('translate')('hotel.search.error.title'),
                    "message": $filter('translate')('hotel.search.result.errormess')
                });
                // GtdHotelService.backSearchResult();
            }
        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider

            .state('hotel-booking/:booking_number/:params', {
                parent: 'hotel',
                url: '/hotel-booking/:booking_number/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/hotels/booking/hotel.booking.html',
                        controller: 'HotelBookingController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined,
                    "hotelId": undefined
                },
                resolve: {}
            })

            .state('hotel-booking-result/:booking_number/:params', {
                parent: 'flight',
                url: '/hotel-booking-result/:booking_number/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/hotels/booking/hotel.booking.result.html',
                        controller: 'HotelBookingResultController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {}
            })

            .state('hotel-booking-result/:booking_number/:is_mobile/:params', {
                parent: 'flight',
                url: '/hotel-booking-result/:booking_number/:is_mobile/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/hotels/booking/hotel.booking.result.html',
                        controller: 'HotelBookingResultController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {}
            });

    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelBookingResultController', HotelBookingResultController);

    HotelBookingResultController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$uibModal', 'Flight', 'DataService', 'CustomerService', 'Base64', 'DialogService', '$location', 'FlightUtils'];

    function HotelBookingResultController($log, $rootScope, $scope, $state, $stateParams, $timeout, $uibModal, Flight, DataService, CustomerService, Base64, DialogService, $location, FlightUtils) {

        //vm.paymentModel.paymentOption = 'atm';
        var vm = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        // @..@ NAM.HUYNHPHUONG - close VNPAY popup
        if ($location.search().vnp_Amount) {
            if ($('#vnpay_close')) {
                $('#vnpay_close').click();
            }
            $state.reload();
        }

        // vm.departFlightModel = DataService.getDepartFlight();
        // vm.returnFlightModel = DataService.getReturnFlight();
        // vm.bookingModel = DataService.getHotelBookingModel();
        // vm.paymentModel = DataService.getHotelPaymentModel();

        //+++ initial bookingModel
        vm.bookingModel = {
            voucher: {},
            departGroupItem: {},
            departPricedItinerary: {},
            departItinTotalFare: {},
            returnGroupItem: {},
            returnPricedItinerary: {},
            returnItinTotalFare: {}
        };
        //---

        vm.openLoading = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/flight.loading.html',
                controller: 'FlightLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };
        vm.closeLoading = function() {
            if (modalInstance == null) return;
            modalInstance.close();
        };
        vm.openLoading();


        //TODO: remove later

        // vm.searchOptions = DataService.getHotelSearchOptions();

        // vm.selectedHotel = DataService.getSelectedHotel();
        // vm.selectedHotelProduct = DataService.getSelectedHotelProduct();
        // vm.selectedHotelRoom = DataService.getSelectedHotelRoom();

        //$log.log("vm.bookingModel=" + JSON.stringify(vm.bookingModel));
        // $log.log("vm.bookingModel=" + vm.bookingModel);

        //++++ initial parameter
        vm.bookingModel.bookingNumber = Base64.decodeString($stateParams.booking_number);
        $log.log('$stateParams.booking_number = ');
        $log.log(vm.bookingModel.bookingNumber);

        /**
         * NAM.HUYNHPHUONG - Mobile payment
         */
        if ($stateParams.is_mobile) {
            //++++ initial parameter
            if ($stateParams.is_mobile === 'mobile') {
                if ($stateParams.booking_number) {
                    CustomerService.getFinalBookingByNumber(vm.bookingModel.bookingNumber).then(function(result) {
                        if (!!result.bookingInfo) {
                            var bookingStatus = result.bookingInfo.status;
                            var paymentStatus = result.bookingInfo.paymentStatus;
                            var issueStatus = result.bookingInfo.issuedStatus;
                            $state.go('mobile-booking-result?booking_status=:booking_status&payment_status=:payment_status&issue_status=:issue_status', {
                                'booking_status': bookingStatus,
                                'payment_status': paymentStatus,
                                'issue_status': issueStatus
                            });
                        }
                    });
                }
            }
        }


        CustomerService.getFinalBookingByNumber(vm.bookingModel.bookingNumber).then(function(result) {
            vm.closeLoading();

            vm.bkgroup = result;
            $log.log("+++++ vm.bkgroup = ");
            $log.log(vm.bkgroup);

            vm.selectedHotel = vm.bkgroup.hotelAvailability;
            vm.selectedHotelProduct = vm.bkgroup.hotelAvailability.products[0];
            vm.selectedHotelRoom = vm.bkgroup.hotelAvailability.products[0].rooms[0];

            $log.log("+++ Hotel booking +++");
            //$log.log("selectedHotel=" + JSON.stringify(vm.selectedHotel));
            //$log.log("selectedHotelProduct=" + JSON.stringify(vm.selectedHotelProduct));
            //$log.log("selectedHotelRoom=" + JSON.stringify(vm.selectedHotelRoom));
            $log.log("selectedHotel=" + vm.selectedHotel);
            $log.log(vm.selectedHotel);
            $log.log("selectedHotelProduct=" + vm.selectedHotelProduct);
            $log.log(vm.selectedHotelProduct);
            $log.log("selectedHotelRoom=" + vm.selectedHotelRoom);
            $log.log(vm.selectedHotelRoom);

            $timeout(function() {
                $rootScope.$broadcast("gtd-load-booking-completed", null);
            }, 1000);
        });

        //vm.bookingModel.curStep = 3;



        vm.doConfirm = function() {
            //$state.go('booking-result');
        };

        vm.doBack = function() {
            //$state.go('booking-confirm');
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelBookingController', HotelBookingController);

    HotelBookingController.$inject = ['$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$uibModal', '$log', 'Principal', 'Hotel', 'DataService', 'CustomerService', 'DialogService', 'Base64', '$cookies', 'Flight', '$window', 'gtdFormPayment3D'];

    function HotelBookingController($rootScope, $scope, $state, $stateParams, $timeout, $uibModal, $log, Principal, Hotel, DataService, CustomerService, DialogService, Base64, $cookies, Flight, $window, gtdFormPayment3D) {
        var vm = this;

        // Merchant will be redirect to detail page.
        // Note: Alternative flow.
        vm.merchantList = ['VIETTEL', 'TIKI', 'TRUEMONEY', 'FASTGO'];

        // Get current merchant.
        vm.currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;

        vm.viettelPayment = viettelPayment;
        vm.externalPayment = externalPayment;
        vm.tikiPayment = tikiPayment;

        // Init liteEmbed Option
        var liteEmbed = false;
        if ($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) {
            liteEmbed = (($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) === 'true');
        }

        // vm.departFlightModel = DataService.getDepartFlight();
        // vm.returnFlightModel = DataService.getReturnFlight();
        // vm.bookingModel = DataService.getHotelBookingModel();
        // vm.paymentModel = DataService.getHotelPaymentModel();

        //+++ initial bookingModel
        vm.bookingModel = {
            voucher: {},
            departGroupItem: {},
            departPricedItinerary: {},
            departItinTotalFare: {},
            returnGroupItem: {},
            returnPricedItinerary: {},
            returnItinTotalFare: {}
        };
        //---

        vm.paymentModel = {};
        vm.paymentModel.cardModel = {};
        vm.paymentModel.cardModel.cardId = -1;
        vm.hotelId = $stateParams.hotelId;

        vm.bjson = {};
        vm.bjson.bookingInfo = {};

        vm.searchOptions = DataService.getHotelSearchOptions();

        // vm.selectedHotel = DataService.getSelectedHotel();
        // vm.selectedHotelProduct = DataService.getSelectedHotelProduct();
        // vm.selectedHotelRoom = DataService.getSelectedHotelRoom();

        vm.bookingModel.curStep = 1;
        vm.bookingModel.biMobileCode = '84';
        vm.bookingModel.tPCPhoneCode = '84';

        //++++ initial parameter
        vm.bookingModel.bookingNumber = Base64.decodeString($stateParams.booking_number);
        $log.log('$stateParams.booking_number = ');
        $log.log(vm.bookingModel.bookingNumber);

        /**
         * NAM.HUYNHPHUONG - Mobile payment
         */
        vm.paymentModel.isMobileApp = false;
        if ($stateParams.is_mobile) {
            //++++ initial parameter
            if ($stateParams.is_mobile === 'mobile') {
                var _is_mobile = true;
                $log.log("_is_mobile = " + _is_mobile);
                vm.paymentModel.isMobileApp = _is_mobile;
            }

            if ($stateParams.payment_method) {
                //++++ initial parameter
                var _payment_method = $stateParams.payment_method;
                $log.log("_payment_method = " + _payment_method);
                vm.paymentModel.paymentOption = _payment_method;
            }
        }

        vm.termChange = termChange;

        function termChange(value) {
            vm.checkedTerm = value;
        }


        // Update data for step 3
        CustomerService.getBookingByNumber(vm.bookingModel.bookingNumber).then(function(result) {
            vm.bjson = result;
            $log.log("++ vm.bjson ++ ");
            $log.log(vm.bjson);

            //+++ check status
            var bookingStatus = vm.bjson.bookingInfo.status;
            var paymentStatus = vm.bjson.bookingInfo.paymentStatus;
            var issueStatus = vm.bjson.bookingInfo.issuedStatus;
            var supplierBookingStatus = vm.bjson.bookingInfo.supplierBookingStatus;

            $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);

            if (bookingStatus == 'PENDING') {
                // ok
                $log.log('VIEW - Booking Info');

            } else if (bookingStatus == 'BOOKED') {
                if (paymentStatus == 'PENDING' || paymentStatus == 'FAILED') {
                    $log.log('GOTO - booking-payment');


                    if (vm.merchantList.indexOf(vm.currentMerchant) > -1) {
                        var bookingNumber = Base64.encodeString(vm.bookingModel.bookingNumber);
                        if (supplierBookingStatus == 'BOOKED') {
                            vm.bookingModel.curStep = 3;
                        } else {
                            $state.go('user-profile-booking-htl/:booking_number/:mode', {
                                "booking_number": bookingNumber,
                                "mode": 'view'
                            });
                            return;
                        }
                    } else {
                        vm.bookingModel.curStep = 3;
                    }

                } else {
                    $log.log('GOTO - booking-result');
                    $state.go('hotel-booking-result/:booking_number/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                    });
                }
            } else {
                $log.log('GOTO - booking-result');

                $state.go('hotel-booking-result/:booking_number/:params', {
                    "profileBooking": vm.bookingModel,
                    "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                });
            }
            //---

            vm.selectedHotel = vm.bjson.hotelAvailability;
            vm.selectedHotelProduct = vm.bjson.hotelAvailability.products[0];
            vm.selectedHotelRoom = vm.bjson.hotelAvailability.products[0].rooms[0];
            vm.selectedHotelProduct.totalPerson = 0;
            vm.selectedHotelProduct.totalAdultQuantity = 0;
            if (vm.selectedHotelProduct && vm.selectedHotelProduct.rooms) {
                vm.selectedHotelProduct.rooms.forEach(function(room) {

                    //+++ keep productCode for add to customer
                    room.productCode = room.id;
                    //---

                    vm.selectedHotelProduct.totalPerson += room.pax.adultQuantity + room.pax.childQuantity;
                    vm.selectedHotelProduct.totalAdultQuantity += room.pax.adultQuantity;

                });
            }

            $log.log("+++ Hotel booking +++");
            //$log.log("selectedHotel=" + JSON.stringify(vm.selectedHotel));
            //$log.log("selectedHotelProduct=" + JSON.stringify(vm.selectedHotelProduct));
            //$log.log("selectedHotelRoom=" + JSON.stringify(vm.selectedHotelRoom));
            $log.log("selectedHotel=" + vm.selectedHotel);
            $log.log(vm.selectedHotel);
            $log.log("selectedHotelProduct=" + vm.selectedHotelProduct);
            $log.log(vm.selectedHotelProduct);
            $log.log("selectedHotelRoom=" + vm.selectedHotelRoom);
            $log.log(vm.selectedHotelRoom);

            $timeout(function() {
                $rootScope.$broadcast("gtd-load-booking-completed", null);
            }, 1000);

            // $log.log("+++++++++++++++++");
            // $log.log(vm.hotelBookingModel);
            //
            // vm.hotelBookingModel = result;
        }, function(result) {
            $log.log("++ vm.productBooking failed ++ ");
        });



        /**
         * Handler IssueTicket from Popup payment for ATM_DEBIT and CREDIT
         */
        $scope.$on('IssueTicket', function(event, item) {
            //+++ show waiting message
            vm.openLoading();
            //---

            Hotel.orderTickets(vm.bookingModel, vm.bjson)
                .then(function(result1) {
                    $log.log("Get Flight.orderTickets()");
                    $log.log(result1);

                    vm.paymentModel.payFailed = !result1.success;
                    DataService.setHotelPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    if (vm.paymentModel.isMobileApp) {
                        CustomerService.getFinalBookingByNumber(vm.bookingModel.bookingNumber).then(function(result) {
                            if (!!result.bookingInfo) {
                                var bookingStatus = result.bookingInfo.status;
                                var paymentStatus = result.bookingInfo.paymentStatus;
                                var issueStatus = result.bookingInfo.issuedStatus;
                                $state.go('mobile-booking-result?:booking_status&:payment_status&:issue_status', {
                                    'booking_status': bookingStatus,
                                    'payment_status': paymentStatus,
                                    'issue_status': issueStatus
                                });
                            }
                        });
                        return;
                    }

                    // // Go to
                    // $state.go('hotel-booking-result/:booking_number/:params', {"profileBooking": vm.bookingModel
                    // , "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)});
                    // Go to
                    $state.go('hotel-booking-result/:booking_number/:is_mobile/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber),
                        "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : '',
                        "params": ''
                        // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                    });


                }, function error(result1) {
                    // Go to
                    // $state.go('hotel-booking-result');
                    $log.log("error orderTickets");
                    //$log.log(JSON.stringify(result1));
                    $log.log(result1);

                    // DialogService.openHttpAlertDilalog(result1);
                    vm.paymentModel.payFailed = true;
                    DataService.setHotelPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    //$state.go('booking-result');
                    // $state.go('hotel-booking-result/:booking_number/:params', {"profileBooking": vm.bookingModel
                    //     , "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)});
                    $state.go('hotel-booking-result/:booking_number/:is_mobile/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                        "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : '',
                        "params": ''
                        // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                    });
                });
        });

        /**
         *
         */
        $scope.$on('DoPaymentWith3DAuthConfirmation', function(event, item) {
            $log.log("Hotel - DoPaymentWith3DAuthConfirmation - " + item);
            vm.paymentModel.paToken = item;

            vm.doPayment();
        });

        /**
         * Process Debit Payment with NganLuong
         */
        vm.doDebitPayment = function() {
            if (vm.paymentModel.paymentOption === 'ATM_DEBIT') {
                Hotel.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    // alert(JSON.stringify(result));

                    if (result.hasPaymentAuth && result.paymentAuthUrl) {
                        $log.log(result.paymentAuthUrl);
                        // vm.open(result.paymentAuthUrl, vm.paymentModel.isMobileApp);
                        $window.open(result.paymentAuthUrl, '_top');
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function(result) {

                    DialogService.openHttpAlertDilalog(result);
                });
            }
        };

        function externalPayment(type, payload) {
            switch (type) {
                case "TIKI":
                    vm.tikiPayment(payload.bookingNumber);
                    break;
                case "VIETTEL":
                    vm.viettelPayment(payload.bookingNumber);
                    break;

                default:
                    break;
            }

        }

        function tikiPayment(bookingNumber) {
            var customerID = $cookies.get('msisdn') || localStorage.getItem('msisdn');
            // var customerID = 100090562;
            Flight.createOrderTiki(bookingNumber, customerID).then(function(response) {
                $window.location.href = response.redirect_url;

            }, function error(response) {
                $log.log('errorCallback Create Tiki order');
                // $log.log("response = " + JSON.stringify(response));
            });
            return;
        }

        function viettelPayment(bookingNumber) {

            Flight.getViettelPaymentURL(bookingNumber).then(function(response) {
                $window.location.href = response;

            }, function error(response) {
                $log.log('errorCallback Create viettel order');
                // $log.log("response = " + JSON.stringify(response));
            });
            return;
        }

        /**
         * 171-VY.LTT
         */
        $("#button").click(function() {
            $('html, body').animate({
                scrollTop: $("#action-bar-mobile").offset().top
            }, 1000);
        });


        /**
         * Process other payment option Later, Credit, Balance
         */
        vm.doPayment = function() {
            //+++ show waiting message
            vm.openLoading();
            //---

            Hotel.paymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson)
                .then(function(result) {

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    $log.log("Get Hotel.paymentBooking()");
                    $log.log(result);

                    if (result.hasPaymentAuth && result.paymentAuthUrl) {
                        $log.log(result.paymentAuthUrl);
                        vm.open3DAuth(
                            result.paymentAuthUrl, result.paReq, result.md, result.termUrl
                        );

                    } else {
                        // Try to order - tickets
                        if (vm.paymentModel.paymentOption === 'CREDIT' ||
                            vm.paymentModel.paymentOption === 'BALANCE') {
                            // Try to save credit card for later
                            // vm.paymentModel.cardModel.type = $scope.cardForm.cardNumber.$ccType ? $scope.cardForm.cardNumber.$ccType.toUpperCase() : "OTHER";
                            if (Principal.isAuthenticated()) {
                                if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.cardId == -1 && vm.paymentModel.cardModel.checked) {

                                    CustomerService.createCreditCards(vm.paymentModel.cardModel, vm.paymentModel.paToken).then(function success(result) {
                                        //$state.go('user-profile-card');
                                        $log.log("success createCreditCards");
                                    }, function error(result) {
                                        //DialogService.openHttpAlertDilalog(result);
                                        $log.log("error createCreditCards");
                                        //$log.log(JSON.stringify(result));
                                        $log.log(result);
                                    });
                                }
                            }

                            //process payment
                            $rootScope.$broadcast("IssueTicket", null);

                        } else {

                            // $rootScope.$broadcast("event-flight-load-completed", null);

                            vm.paymentModel.payFailed = !result.success;
                            DataService.setHotelPaymentModel(vm.paymentModel);

                            // $state.go('hotel-booking-result', {"profileBooking": vm.bookingModel});
                            $state.go('hotel-booking-result/:booking_number/:params', {
                                "profileBooking": vm.bookingModel,
                                "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                            });
                        }

                        //reset payment token
                        vm.paymentModel.paToken = null;
                    }

                    // Go to
                    //$state.go('hotel-booking-result');
                }, function error(result) {

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    // Go to
                    // $state.go('hotel-booking-result');
                    $log.log("error paymentBooking");
                    //$log.log(JSON.stringify(result));
                    $log.log(result);

                    // DialogService.openHttpAlertDilalog(result);
                    vm.paymentModel.payFailed = true;
                    DataService.setHotelPaymentModel(vm.paymentModel);

                    //$state.go('booking-result');
                    // $state.go('hotel-booking-result', {"profileBooking": vm.bookingModel});
                    $state.go('hotel-booking-result/:booking_number/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                    });
                });
        }

        /**
         * Process when user click on Confirm button on screen
         *
         * @param bookingForm
         * @returns {boolean}
         */
        vm.doConfirm = function(bookingForm) {

            // Scroll to top in iFrame.
            if ('parentIFrame' in window) {
                window.parentIFrame.scrollTo(0, 0);
            }

            if (!bookingForm.$valid) {
                angular.element("[name='" + bookingForm.$name + "']").find('.ng-invalid:visible:first').focus();
                return false;
            }

            // vm.bookingModel.selectedHotelProduct = vm.selectedHotelProduct;
            vm.bookingModel.customers = vm.selectedHotelProduct.rooms;

            DataService.setHotelBookingModel(vm.bookingModel);

            $log.log("vm.bookingModel.curStep = " + vm.bookingModel.curStep);
            //$log.log("vm.bookingModel = " + JSON.stringify(vm.bookingModel));
            //$log.log("vm.paymentModel = " + JSON.stringify(vm.paymentModel));
            $log.log("vm.bookingModel = " + vm.bookingModel);
            $log.log("vm.paymentModel = " + vm.paymentModel);

            if (vm.bookingModel.curStep === 3) {
                //process payment
                DataService.setHotelPaymentModel(vm.paymentModel);

                if (vm.bookingModel.voucher) {
                    $log.log('vm.bookingModel.voucher.voucherValid = ' + vm.bookingModel.voucher.voucherValid);
                }
                $rootScope.$broadcast("event-payment-voucher-pre-send-data", null);

                if (vm.bookingModel.voucher && vm.bookingModel.voucher.voucherValid) {
                    $log.log("Payment::doConfirm - process redeem booking...");
                    Hotel.redeemVoucher(vm.bookingModel).then(function success(result) {
                        if (result.redeemValid && result.success) {
                            $log.log('Payment::doConfirm - result.redeemValid = ' + result.redeemValid + ", result.success = " + result.success);

                            if (vm.paymentModel.paymentOption === 'ATM_DEBIT') {
                                vm.doDebitPayment();
                            }
                            if (vm.paymentModel.paymentOption === 'VNPAYQR') {
                                Hotel.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                                    vnpay.open({
                                        width: 900,
                                        height: 800,
                                        url: result.paymentAuthUrl
                                    });
                                });

                                // window.location.href = "#/payment-vnpay-qr/"+$stateParams.booking_number+"/FLIGHT"
                            }
                            if (vm.paymentModel.paymentOption !== 'VNPAYQR' && vm.paymentModel.paymentOption !== 'ATM_DEBIT') {
                                vm.doPayment();
                            }

                        } else {
                            $log.log("Payment::doConfirm - payment voucher redeem invalid...");
                            $rootScope.$broadcast("event-payment-voucher-redeem-invalid", null);
                        }
                    }, function error(result) {
                        $log.log("Payment::doConfirm - payment voucher redeem error...");
                        $rootScope.$broadcast("event-payment-voucher-redeem-invalid", null);
                    });
                } else {
                    $log.log("Payment::doConfirm - process payment...");
                    if (vm.paymentModel.paymentOption === 'ATM_DEBIT') {
                        vm.doDebitPayment();

                    }
                    if (vm.paymentModel.paymentOption === 'VNPAYQR') {
                        Hotel.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                            vnpay.open({
                                width: 900,
                                height: 800,
                                url: result.paymentAuthUrl
                            });
                            // window.location.href = "#/payment-vnpay-qr/"+$stateParams.booking_number+"/FLIGHT"
                        });
                    }

                    if (vm.paymentModel.paymentOption !== 'VNPAYQR' && vm.paymentModel.paymentOption !== 'ATM_DEBIT') {
                        vm.doPayment();
                    }
                }
                // Update data for step 3
                CustomerService.getBookingByNumber(vm.bookingModel.bookingNumber).then(function(result) {
                    // vm.bjson = result;
                    // $log.log("++ vm.bjson ++ ");
                    // $log.log(vm.bjson);

                    // $log.log("+++++++++++++++++");
                    // $log.log(vm.hotelBookingModel);
                    //
                    // vm.hotelBookingModel = result;
                }, function(result) {
                    $log.log("++ vm.productBooking failed ++ ");
                });

                //$state.go('hotel-booking-result');
            } else if (vm.bookingModel.curStep === 2) {
                // Sync to CustomerTravellers
                CustomerService.addCustomerTravellers(vm.bookingModel).then(function(result) {
                    $log.log("Get addCustomerTravellers from customer.service");
                    $log.log(result);

                    //DialogService.openHttpAlertDilalog(result);
                }, function error(result) {
                    // DialogService.openHttpAlertDilalog(result);
                });

                // Try to create booking travellers
                Hotel.addHotelTravellers(vm.searchOptions, vm.bookingModel).then(function(result) {
                    $log.log("Get addTicketTravellers from flight.service");
                    $log.log(result);

                    if (DialogService.isResponseSuccess(result)) {
                        vm.bookingModel.code = result;
                        DataService.setHotelBookingModel(vm.bookingModel);




                        // Update data for step 3
                        CustomerService.getBookingByNumber(vm.bookingModel.bookingNumber).then(function(result) {
                            vm.bjson = result;
                            $log.log("++ vm.bjson ++ ");
                            $log.log(vm.bjson);
                            var bookingStatus = result.bookingInfo.status;
                            if ("BOOKED" === bookingStatus) {
                                // vm.externalPayment($cookies.get('merchant_code'),result);
                                if (vm.currentMerchant && vm.currentMerchant === 'FASTGO' || liteEmbed === true) {
                                    $log.log('GOTO - booking-payment===');
                                    $state.go('hotel-booking/:booking_number/:params', {
                                        "searchOptions": vm.searchOptions,
                                        "searchResult": vm.searchResult,
                                        "booking_number": Base64.encodeString(result.bookingNumber),
                                        "params": ''
                                    });
                                } else {
                                    Flight.externalPayment(result.bookingNumber);
                                    return;
                                }
                                // vm.externalPayment($cookies.get('merchant_code'),result);
                                // Flight.externalPayment(result.bookingNumber);
                                // return;
                            } else {
                                $state.go('hotel-booking-result/:booking_number/:params', {
                                    "searchOptions": vm.searchOptions,
                                    "searchResult": vm.searchResult,
                                    "booking_number": Base64.encodeString(result.bookingNumber),
                                    "params": ''
                                });
                                return;
                            }


                            // Go to
                            vm.bookingModel.curStep++;
                            // $state.go('booking-payment');

                            // $log.log("+++++++++++++++++");
                            // $log.log(vm.hotelBookingModel);
                            //
                            // vm.hotelBookingModel = result;
                        }, function(result) {
                            $log.log("++ vm.productBooking failed ++ ");
                        });


                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            } else {
                // curstep = 1 -> adv to 2
                vm.bookingModel.curStep++;
            }
        };

        /**
         * Define dialog instances
         */
        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        var modalAtmInstance = null;
        var resetAtmModal = function() {
            modalAtmInstance = null;
        };

        var modal3DAuthInstance = null;
        var reset3DAuthModal = function() {
            modal3DAuthInstance = null;
        };

        /**
         * Open payment dialog for DEBIT ATM option
         *
         * @param url
         */
        vm.open = function(url, isMobileApp) {
            var classModal = isMobileApp ? 'modal-fullscreen' : 'modal-window-extension';

            if (modalAtmInstance !== null) return;
            modalAtmInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.external.html',
                controller: 'FlightPaymentExternalController',
                controllerAs: 'vm',
                windowClass: classModal,
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    isMobile: function() {
                        return isMobileApp;
                    }
                }
            });
            modalAtmInstance.result.then(
                resetAtmModal,
                resetAtmModal
            );
        };

        /**
         * Open 3D Authentication for CREDIT payment option
         *
         * @param url
         * @param paReq
         * @param md
         * @param termUrl
         */
        vm.open3DAuth = function(url, paReq, md, termUrl) {
            if (modal3DAuthInstance !== null) return;
            // var givenUrl = $sce.trustAsResourceUrl(url);
            gtdFormPayment3D.redirectPayment3D(url, paReq, md, termUrl);
        };

        /**
         * Open loading dialog for waiting info
         */
        vm.openLoading = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/flight.loading.html',
                controller: 'FlightLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        /**
         * Process back to view hotel_detail
         */
        vm.doBack = function() {
            $state.go('hotel-detail/:hotel_id/:params', {
                "hotel_id": vm.hotelId,
                "params": Base64.encodeJson(vm.searchOptions)
            }, {
                reload: true
            });
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider', 'TEMPLATE_URL'];

    function templateNameByParams(TEMPLATE_URL) {
        var merchant_code = String(Cookies.get('merchant_code')).toUpperCase();

        if (!TEMPLATE_URL[merchant_code] || !TEMPLATE_URL[merchant_code].home)
            return TEMPLATE_URL['DEFAULT'].home;
        return TEMPLATE_URL[merchant_code].home;
    }

    function stateConfig($stateProvider, TEMPLATE_URL) {
        $stateProvider.state('home', {
                parent: 'app',
                url: '/',
                data: {
                    authorities: [],
                    pageTitle: 'GOTADI Template'
                },
                params: {
                    merchant_code: null,
                    msisdn: null
                },
                views: {
                    'content@': {
                        templateUrl: function() {
                            return templateNameByParams(TEMPLATE_URL);
                        },
                        // templateUrl: 'app/home/home.html',
                        controller: 'B2B2CHomeController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })
            .state('error-partner', {
                url: '/error-partner',
                data: {
                    authorities: [],
                    pageTitle: 'Opps...! Something went wrong.'
                },
                views: {
                    'content@': {
                        templateUrl: 'app/home/error-partner.html',
                    }
                }
            });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('B2B2CHomeController', B2B2CHomeController);

    B2B2CHomeController.$inject = ['$log', '$rootScope', '$scope', 'Principal', 'BannerService', 'LoginService', '$state', '$timeout', 'Hotel', 'Subscribed', 'Flight', 'DataService', 'DEFAULT_PAGE_SIZE', 'Base64', 'ValidationUtils', '$location', '$cookies', 'ThemeCfg'];

    function B2B2CHomeController($log, $rootScope, $scope, Principal, BannerService, LoginService, $state, $timeout, Hotel, Subscribed, Flight, DataService, DEFAULT_PAGE_SIZE, Base64, ValidationUtils, $location, $cookies, ThemeCfg) {
        // Tam - cookie
        $('.page-content').addClass('home');
        var merchant_code = '',
            msisdn = '';
        if ($location.search().merchant_code) {
            var expireDate = new Date();
            expireDate.setDate(expireDate.getDate() + 30);
            merchant_code = String($location.search().merchant_code).toUpperCase();
            $scope.merchant_code = merchant_code;
            $cookies.put('merchant_code', merchant_code, {
                'expires': expireDate
            });
            localStorage.setItem('merchant_code', merchant_code);
            if ($location.search().msisdn) {
                msisdn = $location.search().msisdn;
                $scope.msisdn = $location.search().msisdn;
                $cookies.put('msisdn', msisdn, {
                    'expires': expireDate
                });
                localStorage.setItem('msisdn', msisdn);
            }
        }

        var vm = this;

        merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");

        if (!ThemeCfg[merchant_code])
            vm.enable_template = true;
        else
            vm.enable_template = false;

        if (vm.enable_template) {
            $('.flight-search-home').css('max-width', "640px");
            $('.hotel-search-home').css('max-width', "640px");
        }
        var utm_source = '';
        if ($location.search().utm_source) {
            var expireDate = new Date();
            expireDate.setDate(expireDate.getDate() + 30);
            utm_source = $location.search().utm_source;
            $cookies.put('aff_id', utm_source, {
                'expires': expireDate
            });
        }

        $log.log('isIE = ' + ValidationUtils.isIE());

        var vm = this;

        // Hotel search options
        vm.hotelSearchOptions = {};
        // Default init
        vm.hotelSearchOptions = {};
        vm.hotelSearchOptions.size = DEFAULT_PAGE_SIZE; //15
        vm.hotelSearchOptions.page = 0;
        vm.hotelSearchOptions.adultNo = 1;
        vm.hotelSearchOptions.childrenNo = 0;
        vm.hotelSearchOptions.checkindate = moment(new Date(new Date().getTime() + 1 * 86400000)).format('DD-MM-YYYY');
        vm.hotelSearchOptions.checkoutdate = moment(new Date(new Date().getTime() + 2 * 86400000)).format('DD-MM-YYYY');

        vm.hotelTempSearchOptions = DataService.getHotelSearchOptions();
        if (vm.hotelTempSearchOptions.checkin) {
            vm.hotelSearchOptions = vm.hotelTempSearchOptions;
        }

        //TODO: remove
        // Default init
        vm.searchOptions = {};
        vm.searchOptions.searchType = "oneway"; //oneway
        vm.searchOptions.dtype = "domestic"; //international
        vm.searchOptions.size = DEFAULT_PAGE_SIZE; //15
        vm.searchOptions.page = 0;
        vm.searchOptions.adultNo = 1;
        vm.searchOptions.childrenNo = 0;
        vm.searchOptions.newBornNo = 0;
        vm.searchOptions.class = 'E';
        vm.searchOptions.departureDate = moment(new Date()).format('DD-MM-YYYY');
        vm.searchOptions.returnDate = moment(new Date()).format('DD-MM-YYYY');

        var so = DataService.getSearchOption();
        $log.log('so.searchType=' + so.searchType);
        if (so.searchType) {
            // vm.searchOptions = DataService.getSearchOption();
            vm.searchOptions = {};

            var savedSearchOptions = DataService.getSavedSearchOption();
            vm.searchOptions.fromAirPort = savedSearchOptions.fromAirPort;
            vm.searchOptions.toAirPort = savedSearchOptions.toAirPort;
            vm.searchOptions.departureDate = savedSearchOptions.departureDate;
            vm.searchOptions.returnDate = savedSearchOptions.returnDate;
            vm.searchOptions.searchType = savedSearchOptions.searchType;
            vm.searchOptions.dtype = savedSearchOptions.dtype;
            vm.searchOptions.adultNo = savedSearchOptions.adultNo;
            vm.searchOptions.childrenNo = savedSearchOptions.childrenNo;
            vm.searchOptions.newBornNo = savedSearchOptions.newBornNo;
            if (!vm.searchOptions.class || (vm.searchOptions.class != 'E' && vm.searchOptions.class != 'B')) {
                vm.searchOptions.class = 'E';
            }
            $log.log(vm.searchOptions);

            if (moment(vm.searchOptions.departureDate, 'DD-MM-YYYY').isBefore(moment(new Date()))) {
                vm.searchOptions.departureDate = moment(new Date()).format('DD-MM-YYYY');
            }

            if (moment(vm.searchOptions.returnDate, 'DD-MM-YYYY').isBefore(moment(new Date()))) {
                vm.searchOptions.returnDate = moment(new Date()).format('DD-MM-YYYY');
            }

            if (moment(vm.searchOptions.departureDate, 'DD-MM-YYYY').isAfter(moment(vm.searchOptions.returnDate, 'DD-MM-YYYY'))) {
                vm.searchOptions.returnDate = vm.searchOptions.departureDate;
            }
        }

        //+++ TungNQ-18Sept17: reset temp cache of search option
        vm.searchOptions.departureItinerary = {};
        vm.searchOptions.returnSearchId = null;
        vm.searchOptions.searchId = null;
        vm.searchOptions.ssrOfferItemsDepart = [];
        vm.searchOptions.ssrOfferItemsReturn = [];
        //---

        vm.searchResult = {};
        vm.searchResult.result = [1, 2, 3, 4, 5, 6];

        vm.topHotelIdx = 1;
        vm.bgWhite = true;

        vm.account = null;
        vm.isAuthenticated = null;
        vm.login = LoginService.open;
        vm.register = register;

        $scope.$on('authenticationSuccess', function() {
            getAccount();
        });

        getAccount();

        function getAccount() {
            Principal.identity().then(function(account) {
                vm.account = account;
                vm.isAuthenticated = Principal.isAuthenticated;
            });
        }

        function register() {
            $state.go('register');
        }

        function isEmail(email) {
            var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            return regex.test(email);
        }
        $scope.subscriceEmail = function() {
            var email = $('.form-subscrice .email input').val();
            var phone = $('.form-subscrice .phone input').val();
            var messageResult = '';
            var classAdd = 'error';
            var classRemove = 'success';
            if (email == '') {
                messageResult = 'Email không được để trống.';
            } else {
                messageResult = 'Email đã tồn tại trên hệ thống.';
                if (isEmail(email) != false) {
                    Subscribed.Subscribed(email, phone).then(function(result) {
                        if (result.id) {
                            $('.form-subscrice .messageResult').html('Đăng ký thành công.');
                            $('.form-subscrice .messageResult').removeClass('Error');
                            $('.form-subscrice .messageResult').addClass('success');
                        } else {
                            $('.form-subscrice .messageResult').html('Email đã tồn tại trên hệ thống.');
                            $('.form-subscrice .messageResult').removeClass('success');
                            $('.form-subscrice .messageResult').addClass('Error');
                        }
                    });
                } else {
                    messageResult = 'Email không hợp lệ.';
                }
            }
            $('.form-subscrice .messageResult').html(messageResult);
            $('.form-subscrice .messageResult').removeClass(classRemove);
            $('.form-subscrice .messageResult').addClass(classAdd);
        };


        vm.initControl = function() {
            // Init tabs
            $('.nav-tabs a').click(function(e) {
                e.preventDefault();
                $(this).tab('show');
            });

            var options = {
                $FillMode: 1, //[Optional] The way to fill image in slide, 0 stretch, 1 contain (keep aspect ratio and put all inside slide), 2 cover (keep aspect ratio and cover whole slide), 4 actual size, 5 contain for large image, actual size for small image, default value is 0
                $DragOrientation: 3, //[Optional] Orientation to drag slide, 0 no drag, 1 horizental, 2 vertical, 3 either, default value is 1 (Note that the $DragOrientation should be the same as $PlayOrientation when $Cols is greater than 1, or parking position is not 0)
                $AutoPlay: true, //[Optional] Whether to auto play, to enable slideshow, this option must be set to true, default value is false
                $Idle: 2500, //[Optional] Interval (in milliseconds) to go for next slide since the previous stopped if the slider is auto playing, default value is 3000

                $BulletNavigatorOptions: { //[Optional] Options to specify and enable navigator or not
                    $Class: $JssorBulletNavigator$, //[Required] Class to create navigator instance
                    $ChanceToShow: 2, //[Required] 0 Never, 1 Mouse Over, 2 Always
                    $AutoCenter: 1, //[Optional] Auto center navigator in parent container, 0 None, 1 Horizontal, 2 Vertical, 3 Both, default value is 0
                    $Steps: 1, //[Optional] Steps to go for each navigation request, default value is 1
                    $Rows: 1, //[Optional] Specify lanes to arrange items, default value is 1
                    $SpacingX: 10, //[Optional] Horizontal space between each item in pixel, default value is 0
                    $SpacingY: 10, //[Optional] Vertical space between each item in pixel, default value is 0
                    $Orientation: 1 //[Optional] The orientation of the navigator, 1 horizontal, 2 vertical, default value is 1
                }
            };
            // var jssor_slider1 = new $JssorSlider$('slider1_container', options);
        };
        vm.switchHotel = function(idx) {
            vm.topHotelIdx = idx;
        };

        vm.doSearchFlight = function($searchResult, $searchOptions) {
            vm.searchResult = $searchResult;
            vm.searchOptions = $searchOptions;
            if (vm.searchResult && vm.searchResult.page && vm.searchResult.page.totalElements > 0) {
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": false,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            } else {
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": true,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            }
        };

        vm.doSearchHotel = function($searchResult, $searchOptions) {
            vm.searchResult = $searchResult;
            vm.searchOptions = $searchOptions;

            DataService.setHotelSearchResult($searchResult);
            DataService.setHotelSearchOptions($searchOptions);

            $timeout(function() {
                // alert("BROADCAST");
                $rootScope.$broadcast("gtd-hotel-search-completed", null);

            }, 0);

            // $state.go('hotel-search');
            if (vm.searchResult && vm.searchResult.page && vm.searchResult.page.totalElements > 0) {
                $state.go('hotel-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": false,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            } else {
                $state.go('hotel-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": true,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            }

        };

        vm.initControl();
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider', 'TEMPLATE_URL'];

    function templateNameByParams(TEMPLATE_URL, type) {
        var merchant_code = Cookies.get("merchant_code");
        if (!TEMPLATE_URL[merchant_code] || !TEMPLATE_URL[merchant_code][type]) {
            return TEMPLATE_URL['DEFAULT'][type];
        }
        return TEMPLATE_URL[merchant_code][type];
    }

    function stateConfig($stateProvider, TEMPLATE_URL) {
        $stateProvider
            .state('flight-search-home', {
                parent: 'app',
                url: '/flight',
                data: {
                    //authorities: ['ROLE_USER']
                    merchant_code: null,
                    msisdn: null
                },
                views: {
                    'content@': {
                        templateUrl: function() {
                            return templateNameByParams(TEMPLATE_URL, 'flight_search');
                        },
                        // 'app/flights/search/flight.search.home.html',
                        controller: 'FlightSearchHomeController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })

            .state('flight-search', {
                parent: 'flight',
                url: '/flight-search?params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/flights/search/flight.search.html',
                        controller: 'FlightSearchController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined,
                    "init": undefined,
                    "searchCompleted": undefined,
                    "filterCompleted": 'Airline'
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            });

    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightSearchLoadingController', FlightSearchLoadingController);

    FlightSearchLoadingController.$inject = ['$cookies', '$log', '$rootScope', '$scope', '$interval', '$state', '$timeout', 'Auth', '$uibModalInstance', 'searchOptions'];

    function FlightSearchLoadingController($cookies, $log, $rootScope, $scope, $interval, $state, $timeout, Auth, $uibModalInstance, searchOptions) {
        var vm = this;

        $log.log('SearchOptions in loading dialog:');
        $log.log(searchOptions);

        vm.loading_img = '../../../content/images/progress-bar2.gif';
        if (String($cookies.get('merchant_code') || localStorage.getItem("merchant_code")).toUpperCase() === 'TIKI') {
            vm.loading_img = '../../../content/images/progress-bar2-tiki.gif';
        }
        if (String($cookies.get('merchant_code') || localStorage.getItem("merchant_code")).toUpperCase() === 'VIETTEL') {
            vm.loading_img = '../../../content/images/progress-bar2-viettel.gif';
        }

        if (String($cookies.get('merchant_code') || localStorage.getItem("merchant_code")).toUpperCase() === 'VTCPAY') {
            vm.loading_img = '../../../content/images/progress-bar-gotadi-vtc.gif';
        }

        vm.searchOptions = searchOptions;
        vm.progress = 0;

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        $scope.$on('event-flight-seach-completed', function(event, item) {
            cancel();
        });

        function wait(ms) {
            var start = new Date().getTime();
            var end = start;
            while (end < start + ms) {
                end = new Date().getTime();
            }
        }

        //TODO: remove
        //$uibModalInstance.dismiss('cancel');

        // store the interval promise in this variable
        var promise;

        vm.setProgress = function() {
            // $log.log(vm.progress);
            vm.progress = vm.progress + (100 - vm.progress) / 10;
            // $log.log(vm.progress);
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // store the interval promise
            promise = $interval(vm.setProgress, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightSearchHomeController', FlightSearchHomeController);

    FlightSearchHomeController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', 'Flight', 'DialogService', 'DataService', 'DEFAULT_PAGE_SIZE', 'Base64', 'BannerService', 'ThemeCfg', '$cookies'];

    function FlightSearchHomeController($log, $rootScope, $scope, $state, $stateParams, $timeout, Flight, DialogService, DataService, DEFAULT_PAGE_SIZE, Base64, BannerService, ThemeCfg, $cookies) {
        $('.page-content').addClass('home');
        var vm = this;
        var merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");

        if (!ThemeCfg[merchant_code])
            vm.enable_template = true;
        else
            vm.enable_template = false;

        if (vm.enable_template) {
            $('.flight-search-home').css('max-width', "640px");
            $('.hotel-search-home').css('max-width', "640px");
        }
        vm.searchResult = [];

        // Default init
        vm.searchOptions = {};
        vm.searchOptions.searchType = "oneway"; //oneway
        vm.searchOptions.dtype = "domestic"; //international
        vm.searchOptions.size = DEFAULT_PAGE_SIZE; //15
        vm.searchOptions.page = 0;
        vm.searchOptions.adultNo = 1;
        vm.searchOptions.childrenNo = 0;
        vm.searchOptions.newBornNo = 0;
        vm.searchOptions.class = 'E';
        vm.searchOptions.departureDate = moment(new Date()).format('DD-MM-YYYY');
        vm.searchOptions.returnDate = moment(new Date()).format('DD-MM-YYYY');


        var so = DataService.getSearchOption();
        $log.log('so.searchType=' + so.searchType);
        if (so.searchType) {
            // vm.searchOptions = DataService.getSearchOption();
            vm.searchOptions = {};

            var savedSearchOptions = DataService.getSavedSearchOption();
            vm.searchOptions.fromAirPort = savedSearchOptions.fromAirPort;
            vm.searchOptions.toAirPort = savedSearchOptions.toAirPort;
            vm.searchOptions.departureDate = savedSearchOptions.departureDate;
            vm.searchOptions.returnDate = savedSearchOptions.returnDate;
            vm.searchOptions.searchType = savedSearchOptions.searchType;
            vm.searchOptions.dtype = savedSearchOptions.dtype;
            vm.searchOptions.adultNo = savedSearchOptions.adultNo;
            vm.searchOptions.childrenNo = savedSearchOptions.childrenNo;
            vm.searchOptions.newBornNo = savedSearchOptions.newBornNo;
            if (!vm.searchOptions.class || (vm.searchOptions.class != 'E' && vm.searchOptions.class != 'B')) {
                vm.searchOptions.class = 'E';
            }

            if (moment(vm.searchOptions.departureDate, 'DD-MM-YYYY').isBefore(moment(new Date()))) {
                vm.searchOptions.departureDate = moment(new Date()).format('DD-MM-YYYY');
            }

            if (moment(vm.searchOptions.returnDate, 'DD-MM-YYYY').isBefore(moment(new Date()))) {
                vm.searchOptions.returnDate = moment(new Date()).format('DD-MM-YYYY');
            }

            if (moment(vm.searchOptions.departureDate, 'DD-MM-YYYY').isAfter(moment(vm.searchOptions.returnDate, 'DD-MM-YYYY'))) {
                vm.searchOptions.returnDate = vm.searchOptions.departureDate;
            }
        }

        //+++ TungNQ-18Sept17: reset temp cache of search option
        vm.searchOptions.departureItinerary = {};
        vm.searchOptions.returnSearchId = null;
        vm.searchOptions.searchId = null;
        vm.searchOptions.ssrOfferItemsDepart = [];
        vm.searchOptions.ssrOfferItemsReturn = [];
        //---

        //vm.searchOptions = {};

        vm.topRoundTripIdx = 1;
        vm.topOnewayIdx = 1;

        vm.doSearch = function($searchResult, $searchOptions) {
            vm.searchResult = $searchResult;
            vm.searchOptions = $searchOptions;

            $timeout(function() {
                // alert("BROADCAST");
                // $rootScope.$broadcast("gtd-refresh-airline-carousel", null);
            }, 1000);
            // alert('Redirect');
            // $state.go('flight-search', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult
            //     , "searchCompleted": true
            //     , "params": Base64.encodeJson(vm.searchOptions)});

            if (vm.searchResult && vm.searchResult.page && vm.searchResult.page.totalElements > 0) {
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": false,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            } else {
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": true,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            }
        };

        function isEmail(email) {
            var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            return regex.test(email);
        }
        $scope.subscriceEmail = function() {
            var email = $('.form-subscrice .email input').val();
            var phone = $('.form-subscrice .phone input').val();
            var messageResult = '';
            var classAdd = 'error';
            var classRemove = 'success';
            if (email == '') {
                messageResult = 'Email không được để trống.';
            } else {
                messageResult = 'Email đã tồn tại trên hệ thống.';
                if (isEmail(email) != false) {
                    Subscribed.Subscribed(email, phone).then(function(result) {
                        if (result.id) {
                            $('.form-subscrice .messageResult').html('Đăng ký thành công.');
                            $('.form-subscrice .messageResult').removeClass('Error');
                            $('.form-subscrice .messageResult').addClass('success');
                        } else {
                            $('.form-subscrice .messageResult').html('Email đã tồn tại trên hệ thống.');
                            $('.form-subscrice .messageResult').removeClass('success');
                            $('.form-subscrice .messageResult').addClass('Error');
                        }
                    });
                } else {
                    messageResult = 'Email không hợp lệ.';
                }
            }
            $('.form-subscrice .messageResult').html(messageResult);
            $('.form-subscrice .messageResult').removeClass(classRemove);
            $('.form-subscrice .messageResult').addClass(classAdd);
        };


        vm.initControl = function() {
            // Init tabs
            $('.nav-tabs a').click(function(e) {
                e.preventDefault();
                $(this).tab('show');
            });

            var options = {
                $FillMode: 1, //[Optional] The way to fill image in slide, 0 stretch, 1 contain (keep aspect ratio and put all inside slide), 2 cover (keep aspect ratio and cover whole slide), 4 actual size, 5 contain for large image, actual size for small image, default value is 0
                $DragOrientation: 3, //[Optional] Orientation to drag slide, 0 no drag, 1 horizental, 2 vertical, 3 either, default value is 1 (Note that the $DragOrientation should be the same as $PlayOrientation when $Cols is greater than 1, or parking position is not 0)
                $AutoPlay: true, //[Optional] Whether to auto play, to enable slideshow, this option must be set to true, default value is false
                $Idle: 2500, //[Optional] Interval (in milliseconds) to go for next slide since the previous stopped if the slider is auto playing, default value is 3000

                $BulletNavigatorOptions: { //[Optional] Options to specify and enable navigator or not
                    $Class: $JssorBulletNavigator$, //[Required] Class to create navigator instance
                    $ChanceToShow: 2, //[Required] 0 Never, 1 Mouse Over, 2 Always
                    $AutoCenter: 1, //[Optional] Auto center navigator in parent container, 0 None, 1 Horizontal, 2 Vertical, 3 Both, default value is 0
                    $Steps: 1, //[Optional] Steps to go for each navigation request, default value is 1
                    $Rows: 1, //[Optional] Specify lanes to arrange items, default value is 1
                    $SpacingX: 10, //[Optional] Horizontal space between each item in pixel, default value is 0
                    $SpacingY: 10, //[Optional] Vertical space between each item in pixel, default value is 0
                    $Orientation: 1 //[Optional] The orientation of the navigator, 1 horizontal, 2 vertical, default value is 1
                }
            };
            // var jssor_slider1 = new $JssorSlider$('slider1_container', options);
        };

        vm.switchTopRoundTrip = function(idx) {
            vm.topRoundTripIdx = idx;
        };

        vm.switchTopOneway = function(idx) {
            vm.topOnewayIdx = idx;
        };

        vm.initControl();

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightSearchController', FlightSearchController);

    FlightSearchController.$inject = ['$cookies', '$localStorage', '$location', '$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$interval', 'Flight', 'DataService', 'ValidationUtils', 'Base64', 'MerchantService'];

    function FlightSearchController($cookies, $localStorage, $location, $log, $rootScope, $scope, $state, $stateParams, $timeout, $interval, Flight, DataService, ValidationUtils, Base64, MerchantService) {
        var vm = this;


        $log.log($stateParams.searchOptions);
        $log.log($stateParams.searchResult);

        vm.searchResult = $stateParams.searchResult;
        vm.searchOptions = $stateParams.searchOptions;
        vm.params = $stateParams.params;
        vm.init = $stateParams.init;
        vm.searchCompleted = $stateParams.searchCompleted;
        vm.filterCompleted = $stateParams.filterCompleted;

        $log.log("Do refresh vm.init =: " + vm.init + ", searchCompleted=" + vm.searchCompleted);

        if (!vm.searchOptions) {
            vm.searchOptions = DataService.getSearchOption();
        }

        if (vm.params) {
            try {
                vm.searchOptions = Base64.decodeJson(vm.params);
                // check deserialize nothing (searchoptions is rebuild when user referesh another page -> have nothing
                if (!vm.searchOptions.fromAirPort || !vm.searchOptions.toAirPort) {
                    throw "Deseriaize null object";
                }

                if (vm.searchOptions.dtype == 'international' && vm.searchOptions.selectStep == 2) {
                    if (!(vm.searchResult && vm.searchResult.groupPricedItineraries && vm.searchResult.groupPricedItineraries.length > 0 && vm.searchResult.groupPricedItineraries[0].pricedItineraries && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)) {
                        vm.init = true;
                    }
                } else {
                    if (!vm.searchResult || (vm.searchResult && !vm.searchResult.page)) {
                        vm.init = true;
                    }
                }
            } catch (err) {
                $log.log('Deseriaize issues - get back from cache');
                $log.log(err);
                var savedSearchOptions = DataService.getSavedSearchOption();
                vm.searchOptions.fromAirPort = savedSearchOptions.fromAirPort;
                vm.searchOptions.toAirPort = savedSearchOptions.toAirPort;
                vm.searchOptions.departureDate = savedSearchOptions.departureDate;
                vm.searchOptions.returnDate = savedSearchOptions.returnDate;
                vm.searchOptions.searchType = savedSearchOptions.searchType;
                vm.searchOptions.dtype = savedSearchOptions.dtype;
                vm.searchOptions.adultNo = savedSearchOptions.adultNo;
                vm.searchOptions.childrenNo = savedSearchOptions.childrenNo;
                vm.searchOptions.newBornNo = savedSearchOptions.newBornNo;

                if (vm.searchOptions.dtype == 'international' && vm.searchOptions.selectStep == 2) {
                    if (!(vm.searchResult && vm.searchResult.groupPricedItineraries && vm.searchResult.groupPricedItineraries.length > 0 && vm.searchResult.groupPricedItineraries[0].pricedItineraries && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)) {
                        vm.init = true;
                    }
                } else {
                    if (!vm.searchResult || (vm.searchResult && !vm.searchResult.page)) {
                        vm.init = true;
                    }
                }
            }
        } else {
            var savedSearchOptions = DataService.getSavedSearchOption();
            vm.searchOptions.fromAirPort = savedSearchOptions.fromAirPort;
            vm.searchOptions.toAirPort = savedSearchOptions.toAirPort;
            vm.searchOptions.departureDate = savedSearchOptions.departureDate;
            vm.searchOptions.returnDate = savedSearchOptions.returnDate;
            vm.searchOptions.searchType = savedSearchOptions.searchType;
            vm.searchOptions.dtype = savedSearchOptions.dtype;
            vm.searchOptions.adultNo = savedSearchOptions.adultNo;
            vm.searchOptions.childrenNo = savedSearchOptions.childrenNo;
            vm.searchOptions.newBornNo = savedSearchOptions.newBornNo;

            if (vm.searchOptions.dtype == 'international' && vm.searchOptions.selectStep == 2) {
                if (!(vm.searchResult && vm.searchResult.groupPricedItineraries && vm.searchResult.groupPricedItineraries.length > 0 && vm.searchResult.groupPricedItineraries[0].pricedItineraries && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)) {
                    vm.init = true;
                }
            } else {
                if (!vm.searchResult || (vm.searchResult && !vm.searchResult.page)) {
                    vm.init = true;
                }
            }
        }

        vm.merchantCode = MerchantService.getMerchant();


        // init means Need To Init
        $scope.$on('gtd-filter-completed-off', function() {
            vm.filterCompleted = false;
        });
        $scope.$on('gtd-filter-completed-on', function() {
            vm.filterCompleted = true;
        });
        $scope.$on('gtd-search-completed-off', function() {
            vm.searchCompleted = false;
        });
        $scope.$on('gtd-search-completed-on', function() {
            vm.searchCompleted = true;
        });
        $scope.$on('gtd-init-off', function() {
            vm.init = false;
        });
        $scope.$on('gtd-init-on', function() {
            vm.init = true;
        });

        $scope.$on('gtd-adv-do-filter', function() {
            vm.alreadyFilter = true;
        });

        // vm.searchResult = Flight.searchFlight();

        vm.doSearch = function($searchResult, $searchOptions) {
            vm.searchResult = $searchResult;
            vm.searchOptions = $searchOptions;
            vm.searchCompleted = true;

            vm.filterCompleted = false;

            if (vm.searchResult && vm.searchResult.page && vm.searchResult.page.totalElements > 0) {
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": false,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            } else {
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "searchCompleted": true,
                    "filterCompleted": true,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            }

            // $state.go('flight-search', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult
            //     , "searchCompleted": true
            //     , "filterCompleted": false
            //     , "params": Base64.encodeJson(vm.searchOptions)});

            $timeout(function() {
                // alert("BROADCAST");
                // $rootScope.$broadcast("gtd-refresh-airline-carousel", null);
            }, 1000);
        };

        /** BEGIN CHECK TIMEOUT **/
        var promise;

        vm.checkTimeOut = function() {
            /* check for enter direct link */
            if (!vm.init) {
                vm.timeout = !ValidationUtils.checkSearchTimeout(vm.searchOptions, $stateParams.searchResult);
                if (vm.timeout) return;
            }
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // store the interval promise
            promise = $interval(vm.checkTimeOut, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });
        /** END CHECK TIMEOUT **/
        $scope.changeItinerary = function() {
            $('.flight-search-header').slideToggle();
        };
        $scope.filterItinerary = function() {
            $('.formFilter').toggleClass('show');
            $('.sm-form-filter').show();
        };
        $scope.closeFilterItinerary = function() {
            $('.formFilter').removeClass('show');
            $('.sm-form-filter').hide();
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightSearchConfirmBookingController', FlightSearchConfirmBookingController);

    FlightSearchConfirmBookingController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$q', 'Flight', 'DataService', '$uibModalInstance', 'searchOptions', 'DialogService', 'currentGroupItem', 'currentPricedItinerary', 'IBE_KEYS', 'Base64', '$window', 'MerchantService'];

    function FlightSearchConfirmBookingController($log, $rootScope, $scope, $state, $stateParams, $timeout, $q, Flight, DataService, $uibModalInstance, searchOptions, DialogService, currentGroupItem, currentPricedItinerary, IBE_KEYS, Base64, $window, MerchantService

    ) {
        var vm = this;
        $scope.ibeKeys = IBE_KEYS;
        vm.searchOptions = searchOptions;
        if (vm.searchOptions.searchType == 'oneway') {
            vm.currentGroupItem = currentGroupItem;
            vm.currentPricedItinerary = currentPricedItinerary;
        } else {
            vm.currentGroupItem = DataService.getDepartGroupItem();
            vm.currentPricedItinerary = DataService.getDepartPricedItinerary();
        }

        vm.returnGroupItem = DataService.getReturnGroupItem();
        vm.returnPricedItinerary = DataService.getReturnPricedItinerary();

        vm.departSearchOptions = DataService.getDepartSearchOption();
        vm.returnSearchOptions = DataService.getReturnSearchOption();

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        $scope.$on('event-close-confirm-booking', function(event, item) {
            vm.cancel();
        });

        vm.doSubmit = function() {
            //vm.openWindow("https://google.com");
            // Validate ticket
            var newWindow = $window;
            if (vm.searchOptions.searchType == 'oneway') {
                var myDataPromise = Flight.revalidateTicket(vm.searchOptions, vm.currentGroupItem, vm.currentPricedItinerary);
                myDataPromise.then(function(result) {
                    $log.log("Get revalidate from flight.service - result.valid:" + result.valid);

                    if (result.valid) {

                        // vm.searchOptions.ssrOfferItemsDepart = result.ssrOfferItems;

                        //TODO: create draft booking
                        Flight.createDraftBooking(vm.searchOptions, vm.currentGroupItem, vm.currentPricedItinerary)
                            .then(function(result) {
                                // $log.log("Get createDraftBooking from flight.service ONEWAY - " + JSON.stringify(result));
                                $log.log("Get createDraftBooking from flight.service ONEWAY");

                                if (DialogService.isResponseSuccess(result)) {
                                    //+++ Nov052017: Tung fix
                                    /**
                                     * BookingModel = {
                                     *  "bookingCode": "string",
                                     *  "bookingNumber": "string"
                                     *  "draftBookingInfo": {
                                     *      .....
                                     *  }
                                     * }
                                     */
                                    // var _bookingModel = result.bookingCode;
                                    // _bookingModel.draftBookingInfo = result;

                                    var _bookingModel = {};
                                    _bookingModel.bookingCode = result.bookingCode.bookingCode;
                                    _bookingModel.bookingNumber = result.bookingCode.bookingNumber;
                                    _bookingModel.draftBookingInfo = result;

                                    $log.log("Get createDraftBooking from flight.service ONEWAY - _bookingModel: " + JSON.stringify(_bookingModel));

                                    DataService.setBookingModel(_bookingModel);
                                    //---

                                    DataService.setSearchOption(vm.searchOptions);
                                    // DataService.setSearchResult(vm.searchResult);
                                    //
                                    // alert(JSON.stringify(vm.searchResult));

                                    // Go to

                                    vm.preSubmit(_bookingModel);

                                    var url = $state.go('booking-info/:booking_number/:params', {
                                        "booking_number": Base64.encodeString(_bookingModel.bookingNumber),
                                        "searchOptions": vm.searchOptions,
                                        "searchResult": vm.searchResult,
                                        "params": ''
                                    }, {
                                        absolute: true
                                    });
                                    $log.log(url);
                                    // newWindow.location = url;
                                    //$window.open(url).focus();
                                    //                                    $state.go('booking-info/:booking_number/:params', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult,
                                    //                                        "booking_number": Base64.encodeString(_bookingModel.bookingNumber)
                                    //                                        , "params": ''});


                                } else {
                                    newWindow.close();
                                    DialogService.openHttpAlertDilalog(result);
                                }
                            }, function error(result) {
                                newWindow.close();
                                DialogService.openHttpAlertDilalog(result);
                            });
                    } else {
                        // alert('The ticket is not available. Please choose another one!');
                        DialogService.openAlertDialog({
                            "title": "Error",
                            "message": "The ticket is not available. Please choose another one!"
                        });
                        //swal('Error', 'The ticket is not available. Please choose another one!', 'error');
                    }

                    $uibModalInstance.dismiss('cancel');


                });
            } else {
                // Roundtrip
                if (vm.departSearchOptions.dtype == 'international') {
                    vm.returnSearchOptions = vm.departSearchOptions;
                    DataService.setReturnSearchOption(vm.returnSearchOptions);
                }

                $q.all([
                    Flight.revalidateTicket(vm.departSearchOptions, vm.currentGroupItem, vm.currentPricedItinerary),
                    Flight.revalidateTicket(vm.returnSearchOptions, vm.returnGroupItem, vm.returnPricedItinerary)
                ]).then(function(data) {
                    $log.log("Get revalidate from flight.service");
                    $log.log('Validate roundtrip result: ' + data[0].valid + ":" + data[1].valid);

                    // vm.searchOptions.ssrOfferItemsDepart = data[0].ssrOfferItems;
                    // vm.searchOptions.ssrOfferItemsReturn = data[1].ssrOfferItems;

                    if (data[0].valid && data[1].valid) {
                        Flight.createDraftBooking(vm.departSearchOptions, vm.currentGroupItem, vm.currentPricedItinerary,
                                vm.returnSearchOptions, vm.returnGroupItem, vm.returnPricedItinerary
                            )
                            .then(function(result) {
                                // $log.log("Get createDraftBooking from flight.service ROUNDTRIP - " + JSON.stringify(result));
                                $log.log("Get createDraftBooking from flight.service ROUNDTRIP");

                                if (DialogService.isResponseSuccess(result)) {
                                    //+++ Nov052017: Tung fix
                                    /**
                                     * BookingModel = {
                                     *  "bookingCode": "string",
                                     *  "bookingNumber": "string"
                                     *  "draftBookingInfo": {
                                     *      .....
                                     *  }
                                     * }
                                     */
                                    // var _bookingModel = result.bookingCode;
                                    // _bookingModel.draftBookingInfo = result;

                                    var _bookingModel = {};
                                    _bookingModel.bookingCode = result.bookingCode.bookingCode;
                                    _bookingModel.bookingNumber = result.bookingCode.bookingNumber;
                                    _bookingModel.draftBookingInfo = result;

                                    $log.log("Get createDraftBooking from flight.service ROUNDTRIP - _bookingModel: " + JSON.stringify(_bookingModel));

                                    DataService.setBookingModel(_bookingModel);
                                    //---

                                    DataService.setSearchOption(vm.searchOptions);
                                    // DataService.setSearchResult(vm.searchResult);
                                    //
                                    // alert(JSON.stringify(vm.searchResult));

                                    // Go to
                                    vm.preSubmit(_bookingModel);
                                    //                                    $state.go('booking-info/:booking_number/:params', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult,
                                    //                                        "booking_number": Base64.encodeString(_bookingModel.bookingNumber)
                                    //                                        , "params": ''});
                                    var url = $state.go('booking-info/:booking_number/:params', {
                                        "booking_number": Base64.encodeString(_bookingModel.bookingNumber),
                                        "searchOptions": vm.searchOptions,
                                        "searchResult": vm.searchResult,
                                        "params": ''
                                    }, {
                                        absolute: true
                                    });
                                    $log.log(url);
                                    // newWindow.location = url;
                                    // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
                                } else {
                                    DialogService.openHttpAlertDilalog(result);
                                    newWindow.close();
                                }

                            }, function error(result) {
                                newWindow.close();
                                DialogService.openHttpAlertDilalog(result);
                            });
                    } else {
                        DialogService.openAlertDialog({
                            "title": "Error",
                            "message": "The ticket is not available. Please choose another one!"
                        });
                        //swal('Error', 'The ticket is not available. Please choose another one!', 'error');
                    }

                    $uibModalInstance.dismiss('cancel');
                });
            }

        };

        vm.preSubmit = function(_bookingModel) {

            _bookingModel.curStep = 1;
            if (!_bookingModel.biMobileCode) {
                _bookingModel.biMobileCode = '84';
            }

            _bookingModel.departSearchOptions = DataService.getDepartSearchOption();
            _bookingModel.returnSearchOptions = DataService.getReturnSearchOption();
            _bookingModel.searchOptions = DataService.getSearchOption();
            _bookingModel.departGroupItem = DataService.getDepartGroupItem();
            _bookingModel.departPricedItinerary = DataService.getDepartPricedItinerary();
            _bookingModel.returnGroupItem = DataService.getReturnGroupItem();
            _bookingModel.returnPricedItinerary = DataService.getReturnPricedItinerary();

            /* +++ 05Nov2017-Tung: add pricing for summary */
            var departItinTotalFare = {};
            var returnItinTotalFare = {};
            var isPerBookingType = false;

            if (_bookingModel.draftBookingInfo) {
                /* if a is NOT negative,undefined,null,empty value then... */
                isPerBookingType = _bookingModel.draftBookingInfo.isPerBookingType;

                departItinTotalFare = _bookingModel.draftBookingInfo.departDraftItineraryInfo.itinTotalFare;

                if (_bookingModel.draftBookingInfo.returnDraftItineraryInfo) {
                    returnItinTotalFare = _bookingModel.draftBookingInfo.returnDraftItineraryInfo.itinTotalFare;
                }
            } else {
                /* get defailt vaule from ticket */
                if (_bookingModel.departPricedItinerary && _bookingModel.departPricedItinerary.airItineraryPricingInfo) {
                    departItinTotalFare = _bookingModel.departPricedItinerary.airItineraryPricingInfo.itinTotalFare;
                }
                // departItinTotalFare = _bookingModel.departPricedItinerary.airItineraryPricingInfo.itinTotalFare;

                if (_bookingModel.returnPricedItinerary && _bookingModel.returnPricedItinerary.airItineraryPricingInfo) {
                    returnItinTotalFare = _bookingModel.returnPricedItinerary.airItineraryPricingInfo.itinTotalFare;
                }
            }
            _bookingModel.departItinTotalFare = departItinTotalFare;
            _bookingModel.returnItinTotalFare = returnItinTotalFare;
            _bookingModel.isPerBookingType = isPerBookingType;
            /* --- 05Nov2017-Tung */

            DataService.setBookingModel(_bookingModel);
        };

        vm.skipDialog = skipDialog;

        vm.doSubmit();
        //vm.skipDialog();

        function skipDialog() {
            if (MerchantService.isIframeView()) {
                vm.doSubmit();
            }
        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightPaymentExternalController', FlightPaymentExternalController);

    FlightPaymentExternalController.$inject = ['$log', '$rootScope', '$scope', '$window', '$interval', '$state', '$timeout', '$sce', 'Auth', '$uibModalInstance', 'paymentUrl', 'idOption', 'booking_number', 'CustomerService', 'FlightUtils', '$location', 'API_URL'];

    function FlightPaymentExternalController($log, $rootScope, $scope, $window, $interval, $state, $timeout, $sce, Auth, $uibModalInstance, paymentUrl, idOption, booking_number, CustomerService, FlightUtils, $location, API_URL) {
        var vm = this;

        vm.progress = 0;
        vm.givenUrl = $sce.trustAsResourceUrl(paymentUrl);
        vm.cancel = cancel;
        vm.idOption = $sce.trustAsResourceUrl(idOption);
        vm.booking_number = $sce.trustAsResourceUrl(booking_number);

        $scope.billingCode = API_URL + paymentUrl.split('billingCode=')[1] != null ? API_URL + paymentUrl.split('billingCode=')[1] : null;
        console.log("Billing Code: " + $scope.billingCode);


        // $scope.$on('message', function (event, item) {
        //     cancel();
        // });

        var listener = function(e) {
            //$log.log("FlightPaymentExternalController - listener: " + e.data);
            //console.log("FlightPaymentExternalController - listener - %j", e.data);
            //$rootScope.$broadcast('message', e.data);
            if (e.data.slice(0, 5) !== "IPGDI") return;
            vm.cancel();

            $window.removeEventListener('message', listener);

            if (e.data && angular.isString(e.data) && e.data.indexOf("true") !== -1) {
                $rootScope.$broadcast('IssueTicket');
            }
        };

        function cancel() {
            $uibModalInstance.dismiss('cancel');

            $window.removeEventListener('message', listener);
        }

        $window.addEventListener('message', listener);

        // $window.postMessage("hello", "http://localhost:8080");

        function wait(ms) {
            var start = new Date().getTime();
            var end = start;
            while (end < start + ms) {
                end = new Date().getTime();
            }
        }

        //TODO: remove
        //$uibModalInstance.dismiss('cancel');

        // store the interval promise in this variable
        var promise;

        vm.setProgress = function() {
            // $log.log(vm.progress);
            vm.progress = vm.progress + (100 - vm.progress) / 10;
            // $log.log(vm.progress);
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // store the interval promise
            promise = $interval(vm.setProgress, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };


        vm._loadBookingInfo = function(_booking_number_param) {
            CustomerService.getBookingByNumber(_booking_number_param).then(function(result) {
                var oldVm = FlightUtils.convertBookingToVM(result);
                if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                    // Check status
                    $log.log('vm.orgBookingModel=');
                    $log.log(oldVm.orgBookingModel);

                    var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                    var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                    var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                    var supplierBookingStatus = oldVm.orgBookingModel.bookingInfo.supplierBookingStatus;

                    $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);

                    if (bookingStatus == 'PENDING') {
                        var dbm = DataService.getBookingModel();
                        if (dbm.contacts != null && dbm.contacts.length > 0) {
                            // ok
                            $log.log('VIEW - booking-confirm');
                        } else {
                            $log.log('GOTO - booking-info');

                            $state.go('booking-info/:booking_number/:params', {
                                "searchOptions": vm.searchOptions,
                                "searchResult": vm.searchResult,
                                "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber),
                                "params": ''
                            });
                            // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
                        }
                    } else if (bookingStatus == 'BOOKED') {
                        if (paymentStatus == 'PENDING') {
                            $state.go();
                        } else if (paymentStatus == 'FAILED') {
                            $log.log('GOTO - booking-payment');
                            $state.go('booking-payment/:booking_number/:params', {
                                "searchOptions": vm.searchOptions,
                                "searchResult": vm.searchResult,
                                "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber),
                                "params": ''
                            });
                        } else {
                            $log.log('GOTO - booking-result');
                            $state.go('booking-result/:booking_number/:params', {
                                "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber)
                            });
                        }
                    } else {
                        $log.log('GOTO - booking-result');
                        $state.go('booking-result/:booking_number/:params', {
                            "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber)
                        });
                    }
                    $scope.start();
                } else {
                    $log.log('++++ Booking Not FOUND - GOTO - flight');
                    $state.go('flight-search-home');
                }
            }, function error(result) {
                $log.log('flight-search');
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            });
        };
        $scope.onIframeLoad = function(bookingNumber) {
            console.log('PageLoaded ' + bookingNumber);
            $('.modal-content .modal-header .modal-title .btn').click();
            vm._loadBookingInfo(bookingNumber);
        }
        // $scope.onIframeLoad();
        // starting the interval by default
        $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });

        vm.closePayoo = function() {
            $uibModalInstance.dismiss('cancel');
            $window.location.href = paymentUrl;
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightPayment3DAuthExternalController', FlightPayment3DAuthExternalController);

    FlightPayment3DAuthExternalController.$inject = ['$log', '$rootScope', '$scope', '$window', '$interval', '$state', '$timeout', '$sce', 'Auth', '$uibModalInstance', 'paymentUrl', 'paReq', 'md', 'termUrl'];

    function FlightPayment3DAuthExternalController($log, $rootScope, $scope, $window, $interval, $state, $timeout, $sce, Auth, $uibModalInstance, paymentUrl, paReq, md, termUrl) {
        var vm = this;

        vm.progress = 0;
        vm.givenUrl = $sce.trustAsResourceUrl(paymentUrl);
        vm.paReq = paReq;
        vm.md = md;
        vm.termUrl = termUrl;

        vm.cancel = cancel;

        function cancel() {
            $uibModalInstance.dismiss('cancel');

            // $window.removeEventListener('message', listener);
        }


        // $scope.$on('message', function (event, item) {
        //     cancel();
        // });

        var listener = function(e) {
            // $log.log("FlightPayment3DAuthExternalController - listener: " + e.data);
            //console.log("FlightPaymentExternalController - listener - %j", e.data);
            //$rootScope.$broadcast('message', e.data);
            cancel();

            $window.removeEventListener('message', listener);

            // if (e.data && angular.isString(e.data) && e.data.indexOf("true") !== -1) {
            //     $rootScope.$broadcast('DoPaymentWith3DAuth', e.data);
            // }

            $rootScope.$broadcast('DoPaymentWith3DAuthConfirmation', e.data);
        };

        $window.addEventListener('message', listener);

        // $window.postMessage("hello", "http://localhost:8080");

        function wait(ms) {
            var start = new Date().getTime();
            var end = start;
            while (end < start + ms) {
                end = new Date().getTime();
            }
        }

        //TODO: remove
        //$uibModalInstance.dismiss('cancel');

        // store the interval promise in this variable
        var promise;

        vm.setProgress = function() {
            // $log.log(vm.progress);
            vm.progress = vm.progress + (100 - vm.progress) / 10;
            // $log.log(vm.progress);
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // store the interval promise
            promise = $interval(vm.setProgress, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });

        $timeout(function() {
            var form = angular.element('#newibe_PAEnrollForm_form');
            form[0].submit();
        }, 100);
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('flight', {
            abstract: true,
            parent: 'app',

            resolve: {
                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('home');
                    $translatePartialLoader.addPart('flight');
                    $translatePartialLoader.addPart('hotel');
                    $translatePartialLoader.addPart('lookup');
                    return $translate.refresh();
                }]
            }
        });
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightLoadingController', FlightLoadingController);

    FlightLoadingController.$inject = ['$log', '$rootScope', '$scope', '$interval', '$state', '$timeout', 'Auth', '$uibModalInstance'];

    function FlightLoadingController($log, $rootScope, $scope, $interval, $state, $timeout, Auth, $uibModalInstance) {
        var vm = this;

        vm.progress = 0;

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        $scope.$on('event-flight-load-completed', function(event, item) {
            cancel();
        });

        function wait(ms) {
            var start = new Date().getTime();
            var end = start;
            while (end < start + ms) {
                end = new Date().getTime();
            }
        }

        //TODO: remove
        //$uibModalInstance.dismiss('cancel');

        // store the interval promise in this variable
        var promise;

        vm.setProgress = function() {
            // $log.log(vm.progress);
            vm.progress = vm.progress + (100 - vm.progress) / 10;
            // $log.log(vm.progress);
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // store the interval promise
            promise = $interval(vm.setProgress, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ExternalBookingResultController', ExternalBookingResultController);

    ExternalBookingResultController.$inject = ['$log', '$state', 'DataService', 'CustomerService', 'FlightUtils', 'Base64', 'partnerID'];

    function ExternalBookingResultController($log, $state, DataService, CustomerService, FlightUtils, Base64, partnerID) {

        var vm = this;

        // Dynamic string will be get from URL
        vm.payMethod = 'ViettelPay';
        vm.payType = '';
        vm.partnerID = null;
        vm.backUrl = null;
        vm.errorCode = null;
        vm.returnBookingModel = {};

        // Define states will be display in UI.
        vm.uiStates = {
            paymentRefund: "[ExternalBookingResult] Payment REFUNDED",
            paymentFailed: "[ExternalBookingResult] Payment FAILED",
            paymentSuccess: "[ExternalBookingResult] Payment SUCESS",
            paymentPending: "[ExternalBookingResult] Payment PENDING",
            paymentExpired: "[ExternalBookingResult] Payment EXPIRED",
            paymentSuccessOnprocess: "[ExternalBookingResult] Payment SUCCESS-ONPROGRESS",
            notfound: "[ExternalBookingResult] NOTFOUND",
            error: "[ExternalBookingResult] ERROR",
            loading: "[ExternalBookingResult] LOADING",
        };

        vm.displayType = {
            hotel: "[ExternalBookingResult] HOTEL",
            flight: "[ExternalBookingResult] FLIGHT",
        };

        vm.errorMessageDict = {};


        vm.currentDisplayType = "";

        vm.updateUIState = updateUIState;
        vm.udpateType = udpateType;
        vm.getBooking = getBooking;
        vm.initController = initController;
        vm.initErrorMessageDict = initErrorMessageDict;

        // Set default UI State
        vm.currentUIState = vm.uiStates.loading;

        $log.log('------- ExternalBookingResultController - $state.params:');
        $log.log($state.params);

        vm.parram = $state.params;

        vm.bookingNumber = null;

        vm.initController();

        function initController() {
            try {
                vm.bookingNumber = vm.parram.order_id || vm.parram.booking_number;

                vm.partnerID = vm.parram.partner_id || partnerID;

                vm.backUrl = vm.parram.back_url || "#";

                vm.errorCode = vm.parram.error_code || null;

                $log.log("vm.partnerID");
                $log.log(vm.partnerID);

                switch (vm.partnerID) {
                    case "VIETTEL":
                        vm.payMethod = "ViettelPay";
                        vm.payType = 'ví điện tử';
                        break;
                    case "LIENVIETBANK":
                        vm.payMethod = "Ví Việt";
                        vm.payType = 'ví điện tử';
                        break;
                    default:
                        vm.payMethod = vm.partnerID;
                        vm.payType = 'tài khoản';
                        break;
                }

                if (vm.bookingNumber !== null) {
                    // vm.bookingNumber = Base64.decodeString(vm.bookingNumber);
                    vm.getBooking(vm.bookingNumber);
                }
            } catch (error) {
                vm.updateUIState(vm.uiStates.notfound);
            }
            vm.initErrorMessageDict();
        }

        function initErrorMessageDict() {
            vm.errorMessageDict = {
                "INVALID_SIGNATURE": "Sai thông tin chữ ký điện tử ",
                "PAY-0001": "Tài khoản nguồn không tồn tại",
                "PAY-0002": "Tài khoản nguồn đã bị đóng",
                "PAY-0003": "Tài khoản nguồn đã bị khóa do khách hàng yêu cầu",
                "PAY-0004": "Tài khoản nguồn đã bị khóa bởi hệ thống",
                "PAY-0005": "Tài khoản nguồn đã bị đóng băng",
                "PAY-0006": "Tài khoản nguồn đang ở trạng thái chờ duyệt",
                "PAY-0007": "Tài khoản nguồn không đủ tiền",
                "PAY-0008": "Tài khoản nguồn không được phép ghi nợ",
                "PAY-0009": "Tài khoản thụ hưởng không hợp lệ",
                "PAY-0010": "Tài khoản nguồn trùng tài khoản thụ hưởng",
                "PAY-0011": "Tài khoản đăng nhập đã bị đóng hoặc không tồn tại. Hệ thống sẽ tự động đăng xuất",
                "PAY-0012": "Tài khoản đăng nhập đang ở trạng thái chờ duyệt. Hệ thống sẽ tự động đăng xuất",
                "PAY-0013": "Tài khoản đăng nhập đã bị khóa. Hệ thống sẽ tự động đăng xuất",
                "PAY-0014": "Khách hàng đang ở trạng thái chờ duyệt. Hệ thống sẽ tự động đăng xuất",
                "PAY-0015": "Khách hàng đã bị khóa. Hệ thống sẽ tự động đăng xuất",
                "PAY-0016": "Hệ thống đang tạm ngừng cung cấp dịch vụ",
                "PAY-0017": "ch vụ đang được nâng cấp, vui lòng thử lại sau",
                "PAY-0018": "Lỗi xử lý giao dịch",
                "PAY-0019": "Số tiền thanh toán vượt quá hạn mức/giao dịch",
                "PAY-0020": "Tài khoản đã thực hiện vượt quá hạn mức/ngày",
                "PAY-0021": "Tài khoản thực hiện quá số lần giao dịch/ngày",
                "PAY-0022": "Số tiền thực hiện nhỏ hơn hạn mức tối thiểu tài khoản",
                "PAY-0023": "Số tiền chuyển vượt quá hạn mức tối đa tài khoản thụ hưởng",
                "PAY-0024": "Thời gian thực hiện giao dịch đã hết",
                "PAY-0025": "Quý khách nhập sai OTP quá 3 lần",
                "PAY-0026": "Giao dịch có mã " + vm.bookingNumber + " đã bị hủy hoặc không tồn tại",
                "PAY-0027": "Quý khách đã nhập sai mật khẩu 5 lần, Tài khoản đăng nhập bị khóa",
            };
        }


        function getBooking(bookingNumber) {
            CustomerService.getFinalBookingByNumber(bookingNumber).then(function(result) {

                switch (result.supplierType) {
                    case 'HOTEL':
                        handleHotel(result);
                        break;

                    default:
                        handleFlight(result);
                        break;
                }

            }, function error(result) {
                $log.log('flight-search');
                vm.updateUIState(vm.uiStates.notfound);
            });
        }

        function udpateType(type) {
            vm.currentDisplayType = type;
            switch (vm.currentDisplayType) {
                case vm.displayType.hotel:
                    vm.typeName = "phòng";
                    break;

                case vm.displayType.flight:
                    vm.typeName = "vé";
                    break;

                default:
                    vm.typeName = "dịch vụ";
                    break;
            }
        }

        function handleHotel(result) {
            vm.udpateType(vm.displayType.hotel);
            vm.bkgroup = result;
            $log.log("+++++ vm.bkgroup = ");
            $log.log(vm.bkgroup);

            vm.selectedHotel = vm.bkgroup.hotelAvailability;
            vm.selectedHotelProduct = vm.bkgroup.hotelAvailability.products[0];
            vm.selectedHotelRoom = vm.bkgroup.hotelAvailability.products[0].rooms[0];

            $log.log("+++ Hotel booking +++");
            //$log.log("selectedHotel=" + JSON.stringify(vm.selectedHotel));
            //$log.log("selectedHotelProduct=" + JSON.stringify(vm.selectedHotelProduct));
            //$log.log("selectedHotelRoom=" + JSON.stringify(vm.selectedHotelRoom));
            $log.log("selectedHotel=" + vm.selectedHotel);
            $log.log(vm.selectedHotel);
            $log.log("selectedHotelProduct=" + vm.selectedHotelProduct);
            $log.log(vm.selectedHotelProduct);
            $log.log("selectedHotelRoom=" + vm.selectedHotelRoom);
            $log.log(vm.selectedHotelRoom);

            var bookingStatus = result.bookingInfo.status;
            var paymentStatus = result.bookingInfo.paymentStatus;
            var issueStatus = result.bookingInfo.issuedStatus;
            var supplierBookingStatus = result.supplierBookingStatus;
            switch (paymentStatus) {
                case "FAILED":
                    vm.updateUIState(vm.uiStates.paymentFailed);
                    break;
                case "SUCCEEDED":
                    if (issueStatus === "SUCCEEDED") {
                        vm.updateUIState(vm.uiStates.paymentSuccess);
                        break;
                    }
                    if (issueStatus === "TICKET_ON_PROCESS") {
                        vm.updateUIState(vm.uiStates.paymentSuccessOnprocess);
                        break;
                    }
                    vm.updateUIState(vm.uiStates.paymentFailed);
                    break;
                case "REFUNDED":
                    vm.updateUIState(vm.uiStates.paymentRefund);
                    break;
                case "PENDING":
                    if (vm.errorCode) {
                        vm.updateUIState(vm.uiStates.paymentFailed);
                    } else {
                        vm.updateUIState(vm.uiStates.paymentPending);
                    }
                    break;

                default:
                    break;
            }
        }

        function handleFlight(result) {
            vm.udpateType(vm.displayType.flight);

            var oldVm = FlightUtils.convertBookingToVM(result);
            if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                // Check status 
                var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                var supplierBookingStatus = oldVm.orgBookingModel.bookingInfo.supplierBookingStatus;

                //process all status
                $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);

                $log.log('VIEW - Booking Result');

                //+++ initial data
                vm.bookingModel = oldVm.orgBookingModel;
                vm.searchOptions = oldVm.searchOptions;

                // BACK 2U
                DataService.setBookingModel(vm.bookingModel);
                DataService.setSearchOption(vm.searchOptions);

                switch (paymentStatus) {
                    case "FAILED":
                        vm.updateUIState(vm.uiStates.paymentFailed);
                        break;
                    case "SUCCEEDED":
                        if (issueStatus === "SUCCEEDED") {
                            vm.updateUIState(vm.uiStates.paymentSuccess);
                            break;
                        }
                        if (issueStatus === "TICKET_ON_PROCESS") {
                            vm.updateUIState(vm.uiStates.paymentSuccessOnprocess);
                            break;
                        }
                        vm.updateUIState(vm.uiStates.paymentFailed);
                        break;
                    case "REFUNDED":
                        vm.updateUIState(vm.uiStates.paymentRefund);
                        break;
                    case "PENDING":
                        if (vm.errorCode) {
                            vm.updateUIState(vm.uiStates.paymentFailed);
                        } else {
                            vm.updateUIState(vm.uiStates.paymentPending);
                        }
                        break;

                    default:
                        break;
                }
            } else {
                $log.log('++++ Booking Not FOUND - GOTO - flight');
                vm.updateUIState(vm.uiStates.notfound);
            }

            /** BEGIN OLD CODE **/
            vm.bkgroup = result;

            if (vm.bkgroup) {

                var obj = vm.bkgroup;

                // Process contacts view
                var contactInfos = [];
                if (obj.travelerInfo) {
                    angular.forEach(obj.travelerInfo.contactInfos, function(value, key) {
                        var c = value;
                        contactInfos.push({
                            "ciEmail": c.email,
                            "ciName": c.firstName + " " + c.lastName,
                            // "ciMobileCode": c.phoneNumber1,
                            "ciMobileCode": "",
                            "ciMobile": c.phoneNumber1
                        });
                    });
                }

                obj.contacts = contactInfos;

                // Process customer view
                var customerInfos = [];
                if (obj.travelerInfo) {
                    angular.forEach(obj.travelerInfo.airTravelers, function(value, key) {
                        var c = value;

                        var cardType;
                        var cardNumber;
                        if (c.memberCards && c.memberCards[0]) {
                            cardType = c.memberCards[0].cardType;
                            cardNumber = c.memberCards[0].cardNumber;
                        }

                        customerInfos.push({
                            "cuDob": c.dateOfBirth,
                            "cuId": c.passport.passportNumber,
                            "cuPp": "Passport",
                            "cuName": c.passengerName.firstName,
                            "cuGender": c.passengerName.title,
                            "cuCardNo": c.frequentFlyerNumber,
                            "cuNationality": c.passport.country,
                            "cuFamilyName": c.passengerName.lastName
                        });

                    });
                }

                obj.customers = customerInfos;

                // Process tax view
                obj.biCompany = vm.taxCompanyName;
                obj.biMst = vm.taxNumber;
                obj.biMobile = vm.taxAddress2;
                obj.biAddress = vm.taxAddress1;

                // process payment view
                obj.departPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];
                obj.departGroupItem = obj.groupPricedItineraries[0];

                vm.searchOptions.searchType = 'oneway';

                if (obj.groupPricedItineraries && obj.groupPricedItineraries[1]) {
                    obj.returnGroupItem = obj.groupPricedItineraries[1];
                    obj.returnPricedItinerary = obj.groupPricedItineraries[1].pricedItineraries[0];

                    vm.searchOptions.searchType = 'roundtrip';
                } else if (obj.groupPricedItineraries[0].pricedItineraries[0].directionInd == 'RETURN') {
                    obj.returnGroupItem = obj.groupPricedItineraries[0];
                    obj.returnPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];

                    vm.searchOptions.searchType = 'roundtrip';
                }
                // Process flight view
                if (obj.departGroupItem.flightType == 'INTERNATIONAL') {
                    vm.searchOptions.dtype = 'international';

                    // Convert for view details -- DEPART
                    vm.flightModel = {};
                    vm.bookingModel.checkIn = obj.departPricedItinerary.originDestinationOptions[0].originDateTime;
                    vm.bookingModel.checkOut = obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime;
                    vm.bookingModel.noOfTransit = obj.departPricedItinerary.originDestinationOptions[0].flightSegments.length;
                    vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                    vm.bookingModel.airline = obj.departGroupItem.airline;
                    vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                    vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                    vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                    vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                    vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                    vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                    vm.bookingModel.flightIdx = 1;
                    vm.bookingModel.searchType = vm.searchOptions.searchType;
                    vm.bookingModel.booking = {};
                    vm.bookingModel.travelerInfo = obj.travelerInfo;
                    vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                    vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
                    vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;

                    // Convert for view details -- RETURN
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    if (obj.returnPricedItinerary && obj.returnGroupItem) {
                        vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                        vm.returnBookingModel.checkIn = obj.returnPricedItinerary.originDestinationOptions[1].originDateTime;
                        vm.returnBookingModel.checkOut = obj.returnPricedItinerary.originDestinationOptions[1].destinationDateTime;
                        vm.returnBookingModel.noOfTransit = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments.length;
                        vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                        vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                        vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                        vm.returnBookingModel.originLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].originLocationCode;
                        vm.returnBookingModel.destinationLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].destinationLocationCode;
                        vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[1].journeyDuration;
                        vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName;
                        vm.returnBookingModel.flightIdx = 2;
                        vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                        vm.returnBookingModel.booking = {};
                        vm.returnBookingModel.travelerInfo = obj.travelerInfo;
                        vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                        vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments;
                        vm.returnBookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
                    }
                } else {
                    vm.searchOptions.dtype = 'domestic';
                    // Convert for view details -- DEPART
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    vm.bookingModel.checkIn = obj.departPricedItinerary.originDestinationOptions[0].originDateTime;
                    vm.bookingModel.checkOut = obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime;
                    vm.bookingModel.noOfTransit = 1;
                    vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                    vm.bookingModel.airline = obj.departGroupItem.airline;
                    vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                    vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                    vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                    vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                    vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                    vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                    vm.bookingModel.flightIdx = 1;
                    vm.bookingModel.searchType = vm.searchOptions.searchType;
                    vm.bookingModel.booking = {};
                    vm.bookingModel.travelerInfo = obj.travelerInfo;
                    vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                    vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
                    vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;

                    // Convert for view details -- RETURN
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    if (obj.returnPricedItinerary && obj.returnGroupItem) {
                        vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                        vm.returnBookingModel.checkIn = obj.returnPricedItinerary.originDestinationOptions[0].originDateTime;
                        vm.returnBookingModel.checkOut = obj.returnPricedItinerary.originDestinationOptions[0].destinationDateTime;
                        vm.returnBookingModel.noOfTransit = 1;
                        vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                        vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                        vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                        vm.returnBookingModel.originLocationCode = obj.returnGroupItem.originLocationCode;
                        vm.returnBookingModel.destinationLocationCode = obj.returnGroupItem.destinationLocationCode;
                        vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[0].journeyDuration;
                        vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                        vm.returnBookingModel.flightIdx = 2;
                        vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                        vm.returnBookingModel.booking = {};
                        vm.returnBookingModel.travelerInfo = obj.travelerInfo;
                        vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                        vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments;
                        vm.returnBookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
                    }
                }
                // bind to view
                vm.orgBookingModel = obj;

            } else {
                $log.log('++++ Booking Not FOUND - GOTO - flight');
                vm.updateUIState(vm.uiStates.notfound);
            }
            /** END OLD CODE **/
        }





        // UI state update Helper.
        function updateUIState(state, payload) {
            $log.log("Previous state: " + vm.currentUIState);
            vm.currentUIState = state;
            $log.log("Current state: " + vm.currentUIState);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider
            .state('booking-info/:booking_number/:params', {
                parent: 'flight',
                url: '/booking-info/:booking_number/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/flight.booking.info.html',
                        controller: 'FlightBookingInfoController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })

            .state('booking-confirm/:booking_number/:params', {
                parent: 'flight',
                url: '/booking-confirm/:booking_number/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/flight.booking.confirm.html',
                        controller: 'FlightBookingConfirmController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })

            .state('booking-payment/:booking_number/:params', {
                parent: 'flight',
                url: '/booking-payment/:booking_number/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/flight.booking.payment.html',
                        controller: 'FlightBookingPaymentController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })

            .state('booking-result/:booking_number/:params', {
                parent: 'flight',
                url: '/booking-result/:booking_number/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/flight.booking.result.html',
                        controller: 'FlightBookingResultController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined,
                    "profileBooking": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })

            .state('booking-result/:booking_number/:is_mobile/:params', {
                parent: 'flight',
                url: '/booking-result/:booking_number/:is_mobile/:params',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/flight.booking.result.html',
                        controller: 'FlightBookingResultController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    "searchOptions": undefined,
                    "searchResult": undefined,
                    "profileBooking": undefined
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })
            .state('mobile-booking-result?:booking_status&:payment_status&:issue_status', {
                url: '/mobile-booking-result?:booking_status&:payment_status&:issue_status'
            })
            .state('external-booking-result', {
                url: '/products/external-booking-result?billcode:cust_msisdn:error_code:merchant_code:order_id:payment_status:trans_amount:vt_transaction_id:check_sum',
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/external.booking.result.html',
                        controller: 'ExternalBookingResultController',
                        controllerAs: 'vm'
                    }
                },
                data: {
                    authorities: [],
                    pageTitle: 'GOTADI Template'
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }],
                    partnerID: function() {
                        return "VIETTEL";
                    }
                }
            })
            .state('external-booking-detail', {
                url: '/products/external-final-booking-detail?booking_number:partner_id:back_url:error_code',
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/external.booking.result.html',
                        controller: 'ExternalBookingResultController',
                        controllerAs: 'vm'
                    }
                },
                data: {
                    authorities: [],
                    pageTitle: 'GOTADI Template'
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }],
                    partnerID: function() {
                        return "VIETTEL";
                    }
                }
            })
            .state('external-booking-detail/:booking_number/:partner_id', {
                url: '/products/external-final-booking-detail/:booking_number/:partner_id',
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/external.booking.result.html',
                        controller: 'ExternalBookingResultController',
                        controllerAs: 'vm'
                    }
                },
                data: {
                    authorities: [],
                    pageTitle: 'GOTADI Template'
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }],
                    partnerID: function() {
                        return "VIETTEL";
                    }
                }
            })
            .state('external-booking-payment?:bookingNumber&:partner_id&:backUrl:data:key:agent_site', {
                url: '/external-booking-payment?:bookingNumber&:partner_id&:backUrl:data:key:agent_site',
                views: {
                    'content@': {
                        templateUrl: 'app/flights/booking/external.payment.html',
                        controller: 'BookingPaymentExternalController',
                        controllerAs: 'vm'
                    }
                },
                data: {
                    authorities: [],
                    pageTitle: 'Booking Payment'
                },

            });
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightBookingResultController', FlightBookingResultController);

    FlightBookingResultController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$uibModal', '$interval', 'Flight', 'DataService', 'DateUtils', 'ValidationUtils', 'CustomerService', 'FlightUtils', 'Base64', 'DialogService', '$location'];

    function FlightBookingResultController($log, $rootScope, $scope, $state, $stateParams, $timeout, $uibModal, $interval, Flight, DataService, DateUtils, ValidationUtils, CustomerService, FlightUtils, Base64, DialogService, $location) {
        var vm = this;
        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        // @..@ NAM.HUYNHPHUONG - close VNPAY popup
        if ($location.search().vnp_Amount) {
            if ($('#vnpay_close')) {
                $('#vnpay_close').click();
            }
            $state.reload();
        }

        //+++ initial data
        vm.profileBooking = $stateParams.profileBooking;

        if (!vm.searchOptions) {
            vm.searchOptions = {};
        }
        //---

        vm.openLoading = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/flight.loading.html',
                controller: 'FlightLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };
        vm.closeLoading = function() {
            if (modalInstance == null) return;
            modalInstance.close();
        };
        vm.openLoading();

        // vm.departFlightModel = DataService.getDepartFlight();
        // vm.returnFlightModel = DataService.getReturnFlight();
        // vm.bookingModel = DataService.getBookingModel();
        // vm.paymentModel = DataService.getPaymentModel();

        $log.log('booking result - $stateParams - booking number:' + $stateParams.booking_number);

        //++++ initial parameter
        var _booking_number_param = Base64.decodeString($stateParams.booking_number);
        //---

        /**
         * NAM.HUYNHPHUONG - Mobile payment
         */
        if ($stateParams.is_mobile) {
            //++++ initial parameter
            if ($stateParams.is_mobile === 'mobile') {
                if ($stateParams.booking_number) {
                    CustomerService.getFinalBookingByNumber(_booking_number_param).then(function(result) {
                        var oldVm = FlightUtils.convertBookingToVM(result);
                        if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                            var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                            var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                            var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                            $state.go('mobile-booking-result?booking_status=:booking_status&payment_status=:payment_status&issue_status=:issue_status', {
                                'booking_status': bookingStatus,
                                'payment_status': paymentStatus,
                                'issue_status': issueStatus
                            });
                        }
                    });
                }
            }
        }

        if ($stateParams.booking_number) {
            CustomerService.getFinalBookingByNumber(_booking_number_param).then(function(result) {

                vm.closeLoading();

                var oldVm = FlightUtils.convertBookingToVM(result);
                if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                    // Check status
                    $log.log('vm.orgBookingModel=');
                    $log.log(oldVm.orgBookingModel);

                    var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                    var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                    var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                    var supplierBookingStatus = oldVm.orgBookingModel.bookingInfo.supplierBookingStatus;

                    //process all status
                    $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);

                    $log.log('VIEW - Booking Result');

                    //+++ initial data
                    vm.bookingModel = oldVm.orgBookingModel;
                    vm.searchOptions = oldVm.searchOptions;

                    // if(angular.isUndefined(vm.searchOptions) || vm.searchOptions === null) {
                    //     vm.searchOptions = {};
                    // }
                    if (!vm.searchOptions) {
                        vm.searchOptions = {};
                    }
                    //---

                    // BACK 2U
                    DataService.setBookingModel(vm.bookingModel);
                    DataService.setSearchOption(vm.searchOptions);

                    $timeout(function() {
                        $rootScope.$broadcast("gtd-load-booking-completed", null);
                    }, 1000);


                    $scope.start();
                } else {
                    $log.log('++++ Booking Not FOUND - GOTO - flight');
                    $state.go('flight-search-home');
                }


                /** BEGIN OLD CODE **/
                vm.bkgroup = result;
                $log.log("+++++ vm.bkgroup = ");
                $log.log(vm.bkgroup);

                if (vm.bkgroup) {
                    // CustomerService.searchBookings({
                    //     "bookingCode": vm.bookingModel.bookingNumber,
                    //     "supplierType": 'AIR'
                    // }).then(function(result) {
                    //     $log.log('CustomerService.getBooking result = ');
                    //     $log.log(result);

                    // vm.bookingModel = result[0];
                    // vm.bookingModel.duration = DateUtils.timeDiff(vm.bookingModel.departureDate, vm.bookingModel.returnDate);

                    // var content = vm.bookingModel.content.bookingContent;

                    // $log.log(content);
                    //
                    // var obj = JSON.parse(content).items[0];

                    var obj = vm.bkgroup;

                    // Process contacts view
                    var contactInfos = [];
                    if (obj.travelerInfo) {
                        angular.forEach(obj.travelerInfo.contactInfos, function(value, key) {
                            var c = value;

                            // var idx = c.phoneNumber1.indexOf(" ");
                            // var mobileCode = c.phoneNumber1.substr(idx + 1);
                            // var mobile = c.phoneNumber1.substr(0, idx);

                            contactInfos.push({
                                "ciEmail": c.email,
                                "ciName": c.firstName + " " + c.lastName,
                                // "ciMobileCode": c.phoneNumber1,
                                "ciMobileCode": "",
                                "ciMobile": c.phoneNumber1
                            });
                        });
                    }

                    obj.contacts = contactInfos;

                    // Process customer view
                    var customerInfos = [];
                    if (obj.travelerInfo) {
                        angular.forEach(obj.travelerInfo.airTravelers, function(value, key) {
                            var c = value;

                            // var idx = c.phoneNumber1.indexOf(" ");
                            // var mobileCode = c.phoneNumber1.substr(idx + 1);
                            // var mobile = c.phoneNumber1.substr(0, idx);

                            var cardType;
                            var cardNumber;
                            if (c.memberCards && c.memberCards[0]) {
                                cardType = c.memberCards[0].cardType;
                                cardNumber = c.memberCards[0].cardNumber;
                            }

                            customerInfos.push({
                                "cuDob": c.dateOfBirth,
                                "cuId": c.passport.passportNumber,
                                "cuPp": "Passport",
                                "cuName": c.passengerName.firstName,
                                "cuGender": c.passengerName.title,
                                "cuCardNo": c.frequentFlyerNumber,
                                "cuNationality": c.passport.country,
                                "cuFamilyName": c.passengerName.lastName
                            });

                        });
                    }

                    obj.customers = customerInfos;

                    // Process tax view
                    obj.biCompany = vm.taxCompanyName;
                    obj.biMst = vm.taxNumber;
                    obj.biMobile = vm.taxAddress2;
                    obj.biAddress = vm.taxAddress1;

                    // process payment view
                    obj.departPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];
                    obj.departGroupItem = obj.groupPricedItineraries[0];


                    vm.searchOptions.searchType = 'oneway';

                    if (obj.groupPricedItineraries && obj.groupPricedItineraries[1]) {
                        obj.returnGroupItem = obj.groupPricedItineraries[1];
                        obj.returnPricedItinerary = obj.groupPricedItineraries[1].pricedItineraries[0];

                        vm.searchOptions.searchType = 'roundtrip';
                    } else if (obj.groupPricedItineraries[0].pricedItineraries[0].directionInd == 'RETURN') {
                        obj.returnGroupItem = obj.groupPricedItineraries[0];
                        obj.returnPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];

                        vm.searchOptions.searchType = 'roundtrip';
                    }

                    // Process flight view
                    if (obj.departGroupItem.flightType == 'INTERNATIONAL') {
                        vm.searchOptions.dtype = 'international';

                        // Convert for view details -- DEPART
                        vm.flightModel = {};
                        vm.bookingModel.checkIn = obj.departPricedItinerary.originDestinationOptions[0].originDateTime;
                        vm.bookingModel.checkOut = obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime;
                        vm.bookingModel.noOfTransit = obj.departPricedItinerary.originDestinationOptions[0].flightSegments.length;
                        vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                        vm.bookingModel.airline = obj.departGroupItem.airline;
                        vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                        vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                        vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                        vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                        vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                        vm.bookingModel.flightIdx = 1;
                        vm.bookingModel.searchType = vm.searchOptions.searchType;
                        vm.bookingModel.booking = {};
                        vm.bookingModel.travelerInfo = obj.travelerInfo;
                        vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                        vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
                        vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;

                        // Convert for view details -- RETURN
                        // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                        if (obj.returnPricedItinerary && obj.returnGroupItem) {
                            vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                            vm.returnBookingModel.checkIn = obj.returnPricedItinerary.originDestinationOptions[1].originDateTime;
                            vm.returnBookingModel.checkOut = obj.returnPricedItinerary.originDestinationOptions[1].destinationDateTime;
                            vm.returnBookingModel.noOfTransit = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments.length;
                            vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                            vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                            vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                            vm.returnBookingModel.originLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].originLocationCode;
                            vm.returnBookingModel.destinationLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].destinationLocationCode;
                            vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[1].journeyDuration;
                            vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                            vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName;
                            vm.returnBookingModel.flightIdx = 2;
                            vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                            vm.returnBookingModel.booking = {};
                            vm.returnBookingModel.travelerInfo = obj.travelerInfo;
                            vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                            vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments;
                            vm.returnBookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
                        }

                    } else {
                        vm.searchOptions.dtype = 'domestic';

                        // Convert for view details -- DEPART
                        // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                        vm.bookingModel.checkIn = obj.departPricedItinerary.originDestinationOptions[0].originDateTime;
                        vm.bookingModel.checkOut = obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime;
                        vm.bookingModel.noOfTransit = 1;
                        vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                        vm.bookingModel.airline = obj.departGroupItem.airline;
                        vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                        vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                        vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                        vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                        vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                        vm.bookingModel.flightIdx = 1;
                        vm.bookingModel.searchType = vm.searchOptions.searchType;
                        vm.bookingModel.booking = {};
                        vm.bookingModel.travelerInfo = obj.travelerInfo;
                        vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                        vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
                        vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;

                        // Convert for view details -- RETURN
                        // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                        if (obj.returnPricedItinerary && obj.returnGroupItem) {
                            vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                            vm.returnBookingModel.checkIn = obj.returnPricedItinerary.originDestinationOptions[0].originDateTime;
                            vm.returnBookingModel.checkOut = obj.returnPricedItinerary.originDestinationOptions[0].destinationDateTime;
                            vm.returnBookingModel.noOfTransit = 1;
                            vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                            vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                            vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                            vm.returnBookingModel.originLocationCode = obj.returnGroupItem.originLocationCode;
                            vm.returnBookingModel.destinationLocationCode = obj.returnGroupItem.destinationLocationCode;
                            vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[0].journeyDuration;
                            vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                            vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                            vm.returnBookingModel.flightIdx = 2;
                            vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                            vm.returnBookingModel.booking = {};
                            vm.returnBookingModel.travelerInfo = obj.travelerInfo;
                            vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                            vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments;
                            vm.returnBookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
                        }
                    }

                    // bind to view
                    vm.orgBookingModel = obj;
                    // }, function(result) {
                    //     vm.productBooking = {};
                    //     $log.log("++ vm.productBooking failed ++ ");
                    // });
                } else {
                    $log.log('++++ Booking Not FOUND - GOTO - flight');
                    $state.go('flight-search-home');
                }
                /** END OLD CODE **/
            }, function error(result) {
                $log.log('flight-search');
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            });

        } else {
            $log.log('++++ NO Booking Number - GOTO - flight');
            $state.go('flight-search-home');
        }

        vm.departFlightModel = DataService.getDepartFlight();
        vm.returnFlightModel = DataService.getReturnFlight();
        vm.paymentModel = DataService.getPaymentModel();

        // if ($stateParams.params) {
        //     try {
        //         vm.bookingModel =  JSON.parse(Base64.decode($stateParams.params));
        //
        //         // vm.bookingModel.departGroupItem = DataService.getDepartGroupItem();
        //         // vm.bookingModel.departPricedItinerary = DataService.getDepartPricedItinerary();
        //         //
        //         // vm.bookingModel.returnGroupItem = DataService.getReturnGroupItem();
        //         // vm.bookingModel.returnPricedItinerary = DataService.getReturnPricedItinerary();
        //
        //         vm.departSearchOptions = vm.bookingModel.departSearchOptions;
        //         vm.returnSearchOptions = vm.bookingModel.returnSearchOptions;
        //         // vm.searchResult = DataService.getSearchResult();
        //         vm.searchOptions = vm.bookingModel.searchOptions;
        //
        //
        //         // BACK 2U
        //         DataService.setBookingModel(vm.bookingModel);
        //         DataService.setSearchOption(vm.searchOptions);
        //
        //     } catch (err) {
        //         $log.log(err);
        //         $state.go('flight-search', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult
        //             , "params": Base64.encode(JSON.stringify(vm.searchOptions))});
        //     }
        // }

        /** BEGIN CHECK TIMEOUT **/
        // Reset New Transaction Time
        // DataService.setNewStartTransactionTime();

        vm.checkTimeOut = function() {
            /* check for enter direct link */
            vm.timeout = !ValidationUtils.checkBookingTimeout(DataService.getBookingModel(), DataService.getPaymentModel(), /** ignore true **/ true);
            if (vm.timeout) return;
        };

        // starts the interval
        $scope.start = function() {
            vm.checkTimeOut();
        };

        // starting the interval by default
        // $scope.start();
        /** END CHECK TIMEOUT **/

        //TODO: remove later
        // vm.paymentModel.paymentOption = 'reserve';
        vm.returnBookingModel = {};

        // vm.bookingModel.departGroupItem = DataService.getDepartGroupItem();
        // vm.bookingModel.departPricedItinerary = DataService.getDepartPricedItinerary();
        //
        // vm.bookingModel.returnGroupItem = DataService.getReturnGroupItem();
        // vm.bookingModel.returnPricedItinerary = DataService.getReturnPricedItinerary();
        //
        // vm.departSearchOptions = DataService.getDepartSearchOption();
        // vm.returnSearchOptions = DataService.getReturnSearchOption();

        // vm.searchOptions = DataService.getSearchOption();

        // $log.log(vm.bookingModel.departGroupItem);
        // $log.log(vm.bookingModel.departPricedItinerary);
        // $log.log(vm.bookingModel);

        $log.log('+++++ START vm.bkgroup = "');
        if (vm.profileBooking) {
            vm.bookingModel = vm.profileBooking;
        }

        if (!vm.bookingModel) {
            vm.bookingModel = {};
        }

        // TODO: for testing
        // vm.bookingModel.bookingNumber = 'AICO1707100003822';

        // CustomerService.getBookingByNumber(_booking_number_param).then(function (result) {
        //     vm.bkgroup = result;
        //     $log.log("+++++ vm.bkgroup = ");
        //     $log.log(vm.bkgroup);
        //
        //     if(vm.bkgroup) {
        //         // CustomerService.searchBookings({
        //         //     "bookingCode": vm.bookingModel.bookingNumber,
        //         //     "supplierType": 'AIR'
        //         // }).then(function(result) {
        //         //     $log.log('CustomerService.getBooking result = ');
        //         //     $log.log(result);
        //
        //         // vm.bookingModel = result[0];
        //         // vm.bookingModel.duration = DateUtils.timeDiff(vm.bookingModel.departureDate, vm.bookingModel.returnDate);
        //
        //         // var content = vm.bookingModel.content.bookingContent;
        //
        //         // $log.log(content);
        //         //
        //         // var obj = JSON.parse(content).items[0];
        //
        //         var obj = vm.bkgroup;
        //
        //         // Process contacts view
        //         var contactInfos = [];
        //         if (obj.travelerInfo) {
        //             angular.forEach(obj.travelerInfo.contactInfos, function (value, key) {
        //                 var c = value;
        //
        //                 // var idx = c.phoneNumber1.indexOf(" ");
        //                 // var mobileCode = c.phoneNumber1.substr(idx + 1);
        //                 // var mobile = c.phoneNumber1.substr(0, idx);
        //
        //                 contactInfos.push(
        //                     {
        //                         "ciEmail": c.email,
        //                         "ciName": c.firstName + " " + c.lastName,
        //                         // "ciMobileCode": c.phoneNumber1,
        //                         "ciMobileCode": "",
        //                         "ciMobile": c.phoneNumber1
        //                     }
        //                 );
        //             });
        //         }
        //
        //         obj.contacts = contactInfos;
        //
        //         // Process customer view
        //         var customerInfos = [];
        //         if (obj.travelerInfo) {
        //             angular.forEach(obj.travelerInfo.airTravelers, function (value, key) {
        //                 var c = value;
        //
        //                 // var idx = c.phoneNumber1.indexOf(" ");
        //                 // var mobileCode = c.phoneNumber1.substr(idx + 1);
        //                 // var mobile = c.phoneNumber1.substr(0, idx);
        //
        //                 var cardType;
        //                 var cardNumber;
        //                 if (c.memberCards && c.memberCards[0]) {
        //                     cardType = c.memberCards[0].cardType;
        //                     cardNumber = c.memberCards[0].cardNumber;
        //                 }
        //
        //                 customerInfos.push(
        //                     {
        //                         "cuDob": c.dateOfBirth,
        //                         "cuId": c.passport.passportNumber,
        //                         "cuPp": "Passport",
        //                         "cuName": c.passengerName.firstName,
        //                         "cuGender": c.passengerName.title,
        //                         "cuCardNo": c.frequentFlyerNumber,
        //                         "cuNationality": c.passport.country,
        //                         "cuFamilyName": c.passengerName.lastName
        //                     }
        //                 );
        //
        //             });
        //         }
        //
        //         obj.customers = customerInfos;
        //
        //         // Process tax view
        //         obj.biCompany = vm.taxCompanyName;
        //         obj.biMst = vm.taxNumber;
        //         obj.biMobile = vm.taxAddress2;
        //         obj.biAddress = vm.taxAddress1;
        //
        //         // process payment view
        //         obj.departPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];
        //         obj.departGroupItem = obj.groupPricedItineraries[0];
        //
        //
        //         vm.searchOptions.searchType = 'oneway';
        //
        //         if (obj.groupPricedItineraries && obj.groupPricedItineraries[1]) {
        //             obj.returnGroupItem = obj.groupPricedItineraries[1];
        //             obj.returnPricedItinerary = obj.groupPricedItineraries[1].pricedItineraries[0];
        //
        //             vm.searchOptions.searchType = 'roundtrip';
        //         } else if (obj.groupPricedItineraries[0].pricedItineraries[0].directionInd == 'RETURN') {
        //             obj.returnGroupItem = obj.groupPricedItineraries[0];
        //             obj.returnPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];
        //
        //             vm.searchOptions.searchType = 'roundtrip';
        //         }
        //
        //         // Process flight view
        //         if (obj.departGroupItem.flightType == 'INTERNATIONAL') {
        //             vm.searchOptions.dtype = 'international';
        //
        //             // Convert for view details -- DEPART
        //             vm.flightModel = {};
        //             vm.bookingModel.checkIn = obj.departPricedItinerary.originDestinationOptions[0].originDateTime;
        //             vm.bookingModel.checkOut = obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime;
        //             vm.bookingModel.noOfTransit = obj.departPricedItinerary.originDestinationOptions[0].flightSegments.length;
        //             vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
        //             vm.bookingModel.airline = obj.departGroupItem.airline;
        //             vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
        //             vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
        //             vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
        //             vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
        //             vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
        //             vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
        //             vm.bookingModel.flightIdx = 1;
        //             vm.bookingModel.searchType = vm.searchOptions.searchType;
        //             vm.bookingModel.booking = {};
        //             vm.bookingModel.travelerInfo = obj.travelerInfo;
        //             vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
        //             vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
        //             vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
        //
        //             // Convert for view details -- RETURN
        //             // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
        //             if (obj.returnPricedItinerary && obj.returnGroupItem) {
        //                 vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
        //                 vm.returnBookingModel.checkIn = obj.returnPricedItinerary.originDestinationOptions[1].originDateTime;
        //                 vm.returnBookingModel.checkOut = obj.returnPricedItinerary.originDestinationOptions[1].destinationDateTime;
        //                 vm.returnBookingModel.noOfTransit = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments.length;
        //                 vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
        //                 vm.returnBookingModel.airline = obj.returnGroupItem.airline;
        //                 vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
        //                 vm.returnBookingModel.originLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].originLocationCode;
        //                 vm.returnBookingModel.destinationLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].destinationLocationCode;
        //                 vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[1].journeyDuration;
        //                 vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
        //                 vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName;
        //                 vm.returnBookingModel.flightIdx = 2;
        //                 vm.returnBookingModel.searchType = vm.searchOptions.searchType;
        //                 vm.returnBookingModel.booking = {};
        //                 vm.returnBookingModel.travelerInfo = obj.travelerInfo;
        //                 vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
        //                 vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments;
        //                 vm.returnBookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
        //             }
        //
        //         } else {
        //             vm.searchOptions.dtype = 'domestic';
        //
        //             // Convert for view details -- DEPART
        //             // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
        //             vm.bookingModel.checkIn = obj.departPricedItinerary.originDestinationOptions[0].originDateTime;
        //             vm.bookingModel.checkOut = obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime;
        //             vm.bookingModel.noOfTransit = 1;
        //             vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
        //             vm.bookingModel.airline = obj.departGroupItem.airline;
        //             vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
        //             vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
        //             vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
        //             vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
        //             vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
        //             vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
        //             vm.bookingModel.flightIdx = 1;
        //             vm.bookingModel.searchType = vm.searchOptions.searchType;
        //             vm.bookingModel.booking = {};
        //             vm.bookingModel.travelerInfo = obj.travelerInfo;
        //             vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
        //             vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
        //             vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
        //
        //             // Convert for view details -- RETURN
        //             // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
        //             if (obj.returnPricedItinerary && obj.returnGroupItem) {
        //                 vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
        //                 vm.returnBookingModel.checkIn = obj.returnPricedItinerary.originDestinationOptions[0].originDateTime;
        //                 vm.returnBookingModel.checkOut = obj.returnPricedItinerary.originDestinationOptions[0].destinationDateTime;
        //                 vm.returnBookingModel.noOfTransit = 1;
        //                 vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
        //                 vm.returnBookingModel.airline = obj.returnGroupItem.airline;
        //                 vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
        //                 vm.returnBookingModel.originLocationCode = obj.returnGroupItem.originLocationCode;
        //                 vm.returnBookingModel.destinationLocationCode = obj.returnGroupItem.destinationLocationCode;
        //                 vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[0].journeyDuration;
        //                 vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
        //                 vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
        //                 vm.returnBookingModel.flightIdx = 2;
        //                 vm.returnBookingModel.searchType = vm.searchOptions.searchType;
        //                 vm.returnBookingModel.booking = {};
        //                 vm.returnBookingModel.travelerInfo = obj.travelerInfo;
        //                 vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
        //                 vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments;
        //                 vm.returnBookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;
        //             }
        //         }
        //
        //         // bind to view
        //         vm.orgBookingModel = obj;
        //         // }, function(result) {
        //         //     vm.productBooking = {};
        //         //     $log.log("++ vm.productBooking failed ++ ");
        //         // });
        //     } else {
        //         $log.log('++++ Booking Not FOUND - GOTO - flight');
        //         $state.go('flight-search-home');
        //     }
        // }, function error(result) {
        //     $log.log('flight-search');
        //     $state.go('flight-search', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult
        //         , "params": Base64.encodeJson(vm.searchOptions)});
        // });
        // $log.log('+++++ END vm.bkgroup = "');


        // if (vm.profileBooking) {
        //     vm.flightModel = vm.profileBooking;
        // } else {
        //     if (vm.searchOptions.dtype == 'international') {
        //         // Convert for view details -- DEPART
        //         vm.flightModel = {};
        //         vm.flightModel.bookingNumber = vm.bookingModel.bookingNumber;
        //         vm.flightModel.checkIn = vm.bookingModel.departPricedItinerary.originDestinationOptions[0].originDateTime;
        //         vm.flightModel.checkOut = vm.bookingModel.departPricedItinerary.originDestinationOptions[0].destinationDateTime;
        //         vm.flightModel.noOfTransit = vm.bookingModel.departPricedItinerary.originDestinationOptions[0].flightSegments.length;
        //         vm.flightModel.supplierName = vm.bookingModel.departGroupItem.airline;
        //         vm.flightModel.carrierNo = vm.bookingModel.departGroupItem.fightNo;
        //         vm.flightModel.originLocationCode = vm.bookingModel.departGroupItem.originLocationCode;
        //         vm.flightModel.destinationLocationCode = vm.bookingModel.departGroupItem.destinationLocationCode;
        //         vm.flightModel.duration = vm.bookingModel.departPricedItinerary.originDestinationOptions[0].journeyDuration;
        //         vm.flightModel.supplierCode = vm.bookingModel.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
        //         vm.flightModel.booking = {};
        //
        //     } else {
        //         // Convert for view details -- DEPART
        //         vm.flightModel = {};
        //         vm.flightModel.bookingNumber = vm.bookingModel.bookingNumber;
        //         vm.flightModel.checkIn = vm.bookingModel.departPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime;
        //         vm.flightModel.checkOut = vm.bookingModel.departPricedItinerary.originDestinationOptions[0].flightSegments[0].arrivalDateTime;
        //         vm.flightModel.noOfTransit = 1;
        //         vm.flightModel.supplierName = vm.bookingModel.departGroupItem.airline;
        //         vm.flightModel.carrierNo = vm.bookingModel.departGroupItem.fightNo;
        //         vm.flightModel.originLocationCode = vm.bookingModel.departGroupItem.originLocationCode;
        //         vm.flightModel.destinationLocationCode = vm.bookingModel.departGroupItem.destinationLocationCode;
        //         vm.flightModel.duration = DateUtils.timeDiff(vm.flightModel.checkIn, vm.flightModel.checkOut);
        //         vm.flightModel.supplierCode = vm.bookingModel.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
        //         vm.flightModel.booking = {};
        //
        //         // Convert for view details -- RETURN
        //         // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
        //         // if (vm.searchOptions ) {
        //         //     vm.returnBookingModel.checkIn = new Date(obj.returnPricedItinerary.originDestinationOptions[0].originDateTime*1000);
        //         //     vm.returnBookingModel.checkOut = new Date(obj.returnPricedItinerary.originDestinationOptions[0].destinationDateTime*1000);
        //         //     vm.returnBookingModel.noOfTransit = 1;
        //         //     vm.returnBookingModel.supplierName = obj.returnGroupItem.airline;
        //         //     vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
        //         //     vm.returnBookingModel.originLocationCode = obj.returnGroupItem.originLocationCode;
        //         //     vm.returnBookingModel.destinationLocationCode = obj.returnGroupItem.destinationLocationCode;
        //         //     vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[0].journeyDuration;
        //         //     vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
        //         //     vm.returnBookingModel.booking = {};
        //         // }
        //     }
        // }

        //vm.bookingModel.curStep = 3;

        vm.doConfirm = function() {
            //TODO - why dont have booking_number???
            // TAN - TODO
            // if($ctrl.paymentModel.isMobileApp && $ctrl.paymentModel.isMobileApp == true) {
            //     $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);
            // TODO
            // Step 1 - get booking detail
            // Step 2 - redirect URL http://mobiapp/x/y/z
            //     $state.go('booking-mobile-result');
            // } else {
            // $state.go('booking-result');
            // }
            $state.go('booking-result');
        };

        vm.doBack = function() {
            //TODO - why dont have booking_number???
            $state.go('booking-confirm');
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightBookingPaymentController', FlightBookingPaymentController);

    FlightBookingPaymentController.$inject = ['$window', '$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$interval', '$uibModal', 'Principal', 'Flight', 'Hotel', 'DataService', 'CustomerService', 'DialogService', 'ValidationUtils', 'FlightUtils', 'Base64', '$cookies', '$filter', '$sce', 'gtdFormPayment3D', 'PricingUtils', 'AuthServerProvider'];

    function FlightBookingPaymentController($window, $log, $rootScope, $scope, $state, $stateParams, $timeout, $interval, $uibModal, Principal, Flight, Hotel, DataService, CustomerService, DialogService, ValidationUtils, FlightUtils, Base64, $cookies, $filter, $sce, gtdFormPayment3D, PricingUtils, AuthServerProvider) {
        var vm = this;

        vm.departFlightModel = DataService.getDepartFlight();
        vm.returnFlightModel = DataService.getReturnFlight();

        vm.paymentModel = {};
        vm.bjson = {};
        vm.bjson.bookingInfo = {};

        $log.log('booking payment - $stateParams - booking number:' + $stateParams.booking_number);

        /**
         *
         * @param _booking_number_param
         * @private
         */
        vm._loadBookingInfo = function(_booking_number_param) {
            CustomerService.getBookingByNumber(_booking_number_param).then(function(result) {

                vm.bjson = result;
                $log.log("++ vm.bjson ++ ");
                $log.log(vm.bjson);

                var oldVm = FlightUtils.convertBookingToVM(result);
                if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                    // Check status
                    $log.log('vm.orgBookingModel=');
                    $log.log(oldVm.orgBookingModel);

                    var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                    var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                    var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                    var supplierBookingStatus = oldVm.orgBookingModel.bookingInfo.supplierBookingStatus;
                    $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);

                    if (bookingStatus == 'PENDING') {
                        $log.log('GOTO - flight-search');
                        $state.go('flight-search', {
                            "searchOptions": vm.searchOptions,
                            "searchResult": vm.searchResult,
                            "params": Base64.encodeJson(vm.searchOptions)
                        });

                    } else if (bookingStatus == 'BOOKED') {
                        if (paymentStatus == 'PENDING' || paymentStatus == 'FAILED') {
                            // ok
                            $log.log('VIEW - booking-payment');
                        } else {
                            $log.log('GOTO - booking-result');
                            $state.go('booking-result/:booking_number/:is_mobile/:params', {
                                "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber),
                                "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : ''
                            });
                        }
                    } else {
                        $log.log('GOTO - booking-result');
                        $state.go('booking-result/:booking_number/:is_mobile/:params', {
                            "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber),
                            "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : ''
                        });
                    }

                    vm.bookingModel = oldVm.orgBookingModel;
                    vm.searchOptions = oldVm.searchOptions;
                    vm.bookingModel.curStep = 3;

                    // BACK 2U
                    DataService.setBookingModel(vm.bookingModel);
                    DataService.setSearchOption(vm.searchOptions);

                    $timeout(function() {
                        $rootScope.$broadcast("gtd-load-booking-completed", null);
                    }, 1000);

                    vm.profileBooking = {};
                    vm.profileBooking = vm.bookingModel;


                    $scope.start();
                } else {
                    $log.log('++++ Booking Not FOUND - GOTO - flight');
                    $state.go('flight-search-home');
                }
            }, function error(result) {
                $log.log('GOTO - flight-search');
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            });
        };


        /**
         * Process main logic
         */
        if ($stateParams.booking_number) {
            //++++ initial parameter
            var _booking_number_param = Base64.decodeString($stateParams.booking_number);
            //---

            $log.log("flight.booking.payment - LOADING - _booking_number_param: " + _booking_number_param);
            vm._loadBookingInfo(_booking_number_param);

        } else {
            $log.log('++++ NO Booking Number - GOTO - flight');
            $state.go('flight-search-home');
        }

        /**
         * NAM.HUYNHPHUONG - Mobile payment
         */
        vm.paymentModel.isMobileApp = false;
        if ($stateParams.is_mobile) {
            //++++ initial parameter
            if ($stateParams.is_mobile === 'mobile') {
                var _is_mobile = true;
                $log.log("_is_mobile = " + _is_mobile);
                vm.paymentModel.isMobileApp = _is_mobile;
            }

            if ($stateParams.payment_method) {
                //++++ initial parameter
                var _payment_method = $stateParams.payment_method;
                $log.log("_payment_method = " + _payment_method);
                vm.paymentModel.paymentOption = _payment_method;
            }
        }


        //+++ handle authentication event
        $rootScope.$on('authenticationSuccess', function() {
            var isBookingConfirmStage = $state.is('booking-payment/:booking_number/:params');
            $log.log("flight.booking.payment - IS booking-payment/:booking_number/:params: " + isBookingConfirmStage);

            var _bookingNumber = DataService.getBookingModel().bookingNumber;

            if (isBookingConfirmStage && _bookingNumber) {
                $log.log("flight.booking.payment - authenticationSuccess --- Checking.... ");

                //step 1:
                $log.log("flight.booking.payment - CHANGE BOOKING OWNER - vm.bookingModel.bookingNumber: " + _bookingNumber);
                Flight.changeDraftBookingOwner(_bookingNumber).then(function(result) {
                    $log.log("flight.booking.payment - changeDraftBookingOwner result: " + result);

                    //step 2:
                    $log.log("flight.booking.payment - RELOAD - vm.bookingModel.bookingNumber: " + _bookingNumber);
                    vm._loadBookingInfo(_bookingNumber);

                }, function error(result) {
                    $log.log('GOTO - flight-search');
                    $state.go('flight-search', {
                        "searchOptions": vm.searchOptions,
                        "searchResult": vm.searchResult,
                        "params": Base64.encodeJson(vm.searchOptions)
                    });
                });
            }
        });
        //---

        vm.departFlightModel = DataService.getDepartFlight();
        vm.returnFlightModel = DataService.getReturnFlight();
        // vm.paymentModel = DataService.getPaymentModel();

        vm.profileBooking = {};
        vm.profileBooking = vm.bookingModel;

        /**
         * reset voucher event
         */
        $scope.$on('event-payment-voucher-reset', function(event, item) {
            vm.bookingModel.voucher = {};
        });

        /**
         * Handler IssueTicket from Popup payment for ATM_DEBIT
         */
        $scope.$on('IssueTicket', function(event, item) {
            //+++ show waiting message
            vm.openLoading();
            //---

            Flight.orderTickets(vm.bookingModel)
                .then(function(result1) {
                    $log.log("Get Flight.orderTickets()");
                    $log.log(result1);

                    vm.paymentModel.payFailed = !result1.success;
                    DataService.setPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    if (vm.paymentModel.isMobileApp) {
                        CustomerService.getFinalBookingByNumber(DataService.getBookingModel().bookingNumber).then(function(result) {
                            var oldVm = FlightUtils.convertBookingToVM(result);
                            if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                                var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                                var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                                var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                                $state.go('mobile-booking-result?:booking_status&:payment_status&:issue_status', {
                                    'booking_status': bookingStatus,
                                    'payment_status': paymentStatus,
                                    'issue_status': issueStatus
                                });
                            }
                        });
                    }

                    // Go to
                    $state.go('booking-result/:booking_number/:is_mobile/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                        "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : '',
                        "params": ''
                        // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                    });
                }, function error(result1) {
                    // Go to
                    // $state.go('hotel-booking-result');
                    $log.log("error orderTickets");
                    //$log.log(JSON.stringify(result1));
                    $log.log(result1);

                    // DialogService.openHttpAlertDilalog(result1);
                    vm.paymentModel.payFailed = true;
                    DataService.setPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    //$state.go('booking-result');
                    $state.go('booking-result/:booking_number/:is_mobile/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                        "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : '',
                        "params": ''
                        // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                    });
                });
        });

        /**
         *
         */
        $scope.$on('DoPaymentWith3DAuthConfirmation', function(event, item) {
            $log.log("DoPaymentWith3DAuth - " + item);
            vm.paymentModel.paToken = item;

            vm.doPayment();
        });

        /**
         * Process Redeem --> Payment and issue ticket
         */
        vm.doConfirm = function() {
            DataService.setPaymentModel(vm.paymentModel);
            // Do redeem
            // Check need to do redeem
            if (vm.bookingModel.voucher) {
                $log.log('vm.bookingModel.voucher.voucherValid = ' + vm.bookingModel.voucher.voucherValid);
            }

            //send event before revalidate voucher
            $rootScope.$broadcast("event-payment-voucher-pre-send-data", null);

            if (vm.bookingModel.voucher && vm.bookingModel.voucher.voucherValid) {
                $log.log("Payment::doConfirm - process redeem booking...");
                Flight.redeemVoucher(vm.bookingModel).then(function success(result) {
                    if (result.redeemValid && result.success) {
                        $log.log('Payment::doConfirm - result.redeemValid = ' + result.redeemValid + ", result.success = " + result.success);
                        vm.doPayment();
                    } else {
                        $log.log("Payment::doConfirm - payment voucher redeem invalid...");
                        $rootScope.$broadcast("event-payment-voucher-redeem-invalid", result);
                    }
                }, function error(result) {
                    $log.log("Payment::doConfirm - payment voucher redeem error...");
                    $rootScope.$broadcast("event-payment-voucher-redeem-invalid", result);
                });
            } else if (vm.paymentModel.promotions && vm.paymentModel.promotions !== null) {
                if ((typeof vm.paymentModel.cardModel.chosenCardNumber !== "undefined") && vm.paymentModel.cardModel.chosenCardNumber !== null && vm.paymentModel.cardModel.chosenCardNumber !== '' && vm.paymentModel.cardModel.chosenCardNumber !== "-1" && vm.paymentModel.cardModel.chosenCardNumber !== -1) {
                    var s = (vm.paymentModel.cardModel.chosenCardNumber).slice(0, 7).toUpperCase();
                    if (s === "XXXX-XX") {
                        var errorLog = {
                            status: 406,
                            data: {
                                message: $filter('translate')('flight.booking.payment.addnewCard')
                            }
                        }
                        DialogService.openHttpAlertDilalog(errorLog);
                        vm.paymentModel.cardModel.chosenCardNumber = -1;
                        return;
                    }
                    vm.paymentModel.cardModel.cardNumber = vm.paymentModel.cardModel.chosenCardNumber;
                }
                Flight.redeemPromo(vm.paymentModel, vm.bookingModel).then(function success(result) {
                    if (result.errorCode === "PC1000" || result.errorCode === "PC1100" && result.success) {
                        $log.log('Payment::doConfirm - result.redeemValid = ' + result.redeemValid + ", result.success = " + result.success);
                        vm.doPayment();
                    } else {
                        var errorLog = {};
                        if (result.errorCode === 'PC1002') { //no active
                            Flight.gPaymentPromotion(vm.bookingModel.supplierType, "PUBLISHING", 0, 20).then(function(result_n) {
                                if (result_n.content) {
                                    vm.paymentModel.paymentPromo = result_n.content;
                                }
                            });
                        }
                        if (result.errorCode === 'PC1003') {
                            errorLog = {
                                status: result.errorCode,
                                data: {
                                    message: $filter('translate')('flight.booking.payment.wrongCard')
                                }
                            }
                            vm.paymentModel.cardModel.cardNumber = '';
                            vm.paymentModel.cardModel.chosenCardNumber = -1;
                        }
                        if (result.errorCode === 'PC406') {
                            errorLog = {
                                status: result.errorCode,
                                data: {
                                    message: 'Số vé khuyến mãi trong ngày đã hết, quý khách vui lòng thực hiện giao dịch sau.'
                                }
                            }
                        }
                        if (result.errorCode === 'PC407') {
                            errorLog = {
                                status: result.errorCode,
                                data: {
                                    message: 'Vui lòng đăng nhập để được hưởng ưu đãi.'
                                }
                            }
                        }
                        if (result.errorCode === 'PC408') {
                            errorLog = {
                                status: result.errorCode,
                                data: {
                                    message: 'Số vé khuyến mãi trong ngày đã hết, quý khách vui lòng thực hiện giao dịch sau.'
                                }
                            }
                        }
                        if (result.errorCode === 'PC1010') {
                            errorLog = {
                                status: result.errorCode,
                                data: {
                                    message: $filter('translate')('flight.booking.payment.money') + ' ' + $filter('number')(vm.paymentModel.promotions.lowerPrice) + ' ' + $filter('translate')('flight.booking.payment.money2')
                                }
                            }
                        }
                        if (result.errorCode === 'PC1408') {
                            errorLog = {
                                status: result.errorCode,
                                data: {
                                    message: $filter('translate')('flight.booking.payment.anotherCard')
                                }
                            }
                        }
                        if (result.errorCode === 'PC1406') {
                            errorLog = {
                                status: result.errorCode,
                                data: {
                                    message: $filter('translate')('flight.booking.payment.anotherCard')
                                }
                            }
                        }
                        if (result.errorCode === 'PC1004') {
                            errorLog = {
                                status: result.errors[0].message,
                                data: {
                                    message: $filter('translate')('flight.booking.payment.time') + ' ' + vm.paymentModel.promotions.name + ' ' + $filter('translate')('flight.booking.payment.time2') + ' ' + vm.paymentModel.promotions.startTime + ' ' + $filter('translate')('flight.booking.payment.to') + ' ' + vm.paymentModel.promotions.endTime
                                }
                            }
                        }
                        if (result.errorCode === 'PC1011') {
                            errorLog = {
                                status: result.errors[0].message,
                                data: {
                                    message: $filter('translate')('flight.booking.payment.finish')
                                }
                            }
                        }
                        DialogService.openHttpAlertDilalog(errorLog);
                    }
                }, function error(result) {
                    $log.log("Payment::doConfirm - payment promo redeem error...");
                    DialogService.openHttpAlertDilalog(result);
                });
            } else {
                $log.log("Payment::doConfirm - process payment...");
                vm.doPayment();
            }
        };

        /**
         * Do payment for ticket Later, Credit, Balance, NganLuong
         */
        vm.doPayment = function() {
            // Try to payment booking
            if (vm.paymentModel.paymentOption === 'ATM_DEBIT') {
                Flight.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    // alert(JSON.stringify(result));

                    if (result.hasPaymentAuth && result.paymentAuthUrl) {
                        $log.log(result.paymentAuthUrl);
                        $window.open(result.paymentAuthUrl, '_top');
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            }
            if (vm.paymentModel.paymentOption === 'VIETTELPAY') {
                Flight.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    $log.log('result_vtpayment');
                    $log.log(result);
                    if (result.hasPaymentAuth && result.paymentAuthUrl) {
                        $log.log(result.paymentAuthUrl);
                        $window.open(result.paymentAuthUrl, '_top');
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            }
            // Try to payment booking VNPAY
            if (vm.paymentModel.paymentOption === 'VNPAYQR') {
                Flight.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    vnpay.open({
                        width: 900,
                        height: 800,
                        url: result.paymentAuthUrl
                    });
                });
            }

            if (vm.paymentModel.paymentOption === 'MOMO') {
                Flight.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    $log.log("MOMO call payment");
                    $log.log(result);
                    if (result.errors && result.errors.length > 0 && result.errors[0].code && result.errors[0].code == '-4000') {
                        DialogService.openHttpAlertMessage($filter('translate')('flight.booking.payment.momoLimitAmountTitle'), $filter('translate')('flight.booking.payment.momoLimitAmount'));
                    } else {
                        $window.open(result.paymentAuthUrl, '_top');
                    }
                });
            }

            if (vm.paymentModel.paymentOption === 'PAYOO') {
                Flight.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    $log.log("PAYOO call payment");
                    $log.log(result);
                    if (result.errors && result.errors.length > 0 && result.errors[0].code && result.errors[0].code == '-4000') {
                        DialogService.openHttpAlertMessage($filter('translate')('flight.booking.payment.momoLimitAmountTitle'), $filter('translate')('flight.booking.payment.momoLimitAmount'));
                    } else {
                        vm.openPayoo(result.returnUrlPayoo, vm.paymentModel.isMobileApp);
                    }
                });
            }

            if (vm.paymentModel.paymentOption !== 'VNPAYQR' && vm.paymentModel.paymentOption !== 'ATM_DEBIT' &&
                vm.paymentModel.paymentOption !== 'VIETTELPAY' && vm.paymentModel.paymentOption !== 'MOMO' &&
                vm.paymentModel.paymentOption !== 'PAYOO' && vm.paymentModel.paymentOption !== 'BALANCE' &&
                vm.paymentModel.paymentOption !== 'ZALO') {
                vm.openLoading();
                Flight.paymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson)
                    .then(function(result) {

                        $rootScope.$broadcast("event-flight-load-completed", null);

                        $log.log("Payment::doConfirm - Get Flight.paymentBooking()");
                        $log.log(result);

                        // if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.id) {
                        //     delete vm.paymentModel.cardModel.id;
                        // }
                        // if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.chosenCardNumber) {
                        //     delete vm.paymentModel.cardModel.chosenCardNumber;
                        // }

                        // vm.saveCardReq = false;
                        // if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.checked) {
                        //     vm.saveCardReq = vm.paymentModel.cardModel.checked;
                        //     delete vm.paymentModel.cardModel.checked;
                        // }

                        // var data = {
                        //     "bookingPaymentType" : {
                        //         bookingNumber: vm.bookingModel.bookingNumber,
                        //         paymentType: vm.paymentModel.paymentOption
                        //     },
                        //     "payByCreditCardReq" : {
                        //         bookingNumber: vm.bookingModel.bookingNumber,
                        //         bookingCode: vm.bjson.bookingInfo.bookingCode,
                        //         amount: PricingUtils.getTotalPricing(vm.bjson),
                        //         card: vm.paymentModel.cardModel,
                        //         paToken: vm.paymentModel.paToken,
                        //         saveCardReq: vm.saveCardReq,
                        //         ibeSessionId : AuthServerProvider.getToken()
                        //     }
                        // };

                        if (result.hasPaymentAuth && result.paymentAuthUrl) {
                            $log.log(result.paymentAuthUrl);
                            vm.open3DAuth(
                                result.paymentAuthUrl, result.paReq, result.md, result.termUrl
                            );
                        } else {
                            // Try to order - tickets
                            if (vm.paymentModel.paymentOption === 'CREDIT') {
                                // Try to save credit card for auth customer
                                if (Principal.isAuthenticated()) {
                                    if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.cardId == -1 && vm.paymentModel.cardModel.checked) {

                                        CustomerService.createCreditCards(vm.paymentModel.cardModel).then(function success(result) {
                                            //$state.go('user-profile-card');
                                            $log.log("success createCreditCards");
                                        }, function error(result) {
                                            //DialogService.openHttpAlertDilalog(result);
                                            $log.log("error createCreditCards");
                                            //$log.log(JSON.stringify(result));
                                            $log.log(result);
                                        });
                                        $log.log('huyxx2');
                                        $log.log(result);
                                    }
                                }

                                //process payment
                                $rootScope.$broadcast("IssueTicket", null);
                            } else if (vm.paymentModel.paymentOption === 'BALANCE') {
                                var totalfare;
                                if (vm.profileBooking.voucher.discountAmount) {
                                    totalfare = $filter('number')((vm.bookingModel.bookingInfo.totalFare) - (vm.profileBooking.voucher.discountAmount));
                                } else {
                                    totalfare = $filter('number')(vm.bookingModel.bookingInfo.totalFare);
                                }

                                var message = {};
                                message.title = $filter('translate')('flight.booking.payment.conf');
                                message.message = $filter('translate')('flight.booking.payment.paymentBalance.popupPaymentBalance') + '<br>' +
                                    '<b>' + vm.bookingModel.bookingInfo.supplierName +
                                    ' - ' + $filter('translate')('flight.booking.payment.paymentBalance.code') + ' ' + vm.bookingModel.bookingInfo.airline + vm.bookingModel.bookingInfo.carrierNo + ' - ' +
                                    $filter('translate')('flight.booking.payment.paymentBalance.totalAmount') + ': ' + totalfare + ' VND?' + '</b>';
                                var dialogBalance = DialogService.DialogBalance(message);
                                dialogBalance.result.then(function(result) {
                                    // Try to save credit card for auth customer
                                    if (Principal.isAuthenticated()) {
                                        if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.cardId == -1 && vm.paymentModel.cardModel.checked) {

                                            CustomerService.createCreditCards(vm.paymentModel.cardModel).then(function success(result) {
                                                $log.log("success createCreditCards");
                                            }, function error(result) {
                                                $log.log("error createCreditCards");
                                                $log.log(result);
                                            });
                                        }
                                    }

                                    //process payment
                                    $rootScope.$broadcast("IssueTicket", null);
                                }, function(cancel) {});
                            } else {

                                vm.paymentModel.payFailed = !result.success;
                                DataService.setPaymentModel(vm.paymentModel);
                                // $state.go('booking-result', {"profileBooking": vm.bookingModel});
                                $state.go('booking-result/:booking_number/:is_mobile/:params', {
                                    "profileBooking": vm.bookingModel,
                                    "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                                    "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : '',
                                    "params": ''
                                    // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                                });
                            }

                            //reset payment token
                            vm.paymentModel.paToken = null;
                        }

                        // Go to
                        //$state.go('hotel-booking-result');
                    }, function error(result) {

                        $rootScope.$broadcast("event-flight-load-completed", null);

                        // Go to
                        // $state.go('hotel-booking-result');
                        $log.log("error paymentBooking");
                        //$log.log(JSON.stringify(result));
                        $log.log(result);

                        // DialogService.openHttpAlertDilalog(result);
                        vm.paymentModel.payFailed = true;
                        DataService.setPaymentModel(vm.paymentModel);

                        //$state.go('booking-result');
                        // $state.go('booking-result', {"profileBooking": vm.bookingModel});
                        $state.go('booking-result/:booking_number/:is_mobile/:params', {
                            "profileBooking": vm.bookingModel,
                            "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                            "is_mobile": vm.paymentModel.isMobileApp ? 'mobile' : '',
                            "params": ''
                            // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                        });
                    });
            }
        };

        /**
         * Define dialog instances
         */

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        var modalAtmInstance = null;
        var resetAtmModal = function() {
            modalAtmInstance = null;
        };

        var modal3DAuthInstance = null;
        var reset3DAuthModal = function() {
            modal3DAuthInstance = null;
        };

        /**
         * Open payment dialog for DEBIT ATM option
         *
         * @param url
         */
        vm.open = function(url, isMobileApp) {
            $scope.payooUrl = url;
            var classModal = isMobileApp ? 'modal-fullscreen' : 'modal-window-extension';
            if (modalAtmInstance !== null) return;
            modalAtmInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.external.html',
                controller: 'FlightPaymentExternalController',
                controllerAs: 'vm',
                windowClass: classModal,
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    idOption: function() {
                        return 'other';
                    },
                    isMobile: function() {
                        return isMobileApp;
                    }
                }
            });
            modalAtmInstance.result.then(
                resetAtmModal,
                resetAtmModal
            );
        };

        /**
         * Open 3D Authentication for CREDIT payment option
         *
         * @param url
         * @param paReq
         * @param md
         * @param termUrl
         */
        vm.openVT = function(url, isMobileApp) {

            var classModal = isMobileApp ? 'modal-fullscreen viettelPayModal' : 'modal-window-extension viettelPayModal';
            if (modalAtmInstance !== null) return;
            modalAtmInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.external.html',
                controller: 'FlightPaymentExternalController',
                controllerAs: 'vm',
                windowClass: classModal,
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    idOption: function() {
                        return 'viettelPay';
                    },
                    booking_number: function() {
                        return $stateParams.booking_number;
                    },
                    isMobile: function() {
                        return isMobileApp;
                    }
                }
            });
            modalAtmInstance.result.then(
                resetAtmModal,
                resetAtmModal
            );
        };
        vm.openMomo = function(url, isMobileApp) {

            var classModal = isMobileApp ? 'modal-fullscreen MomoModal' : 'modal-window-extension MomoModal';
            if (modalAtmInstance !== null) return;
            modalAtmInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.external.html',
                controller: 'FlightPaymentExternalController',
                controllerAs: 'vm',
                windowClass: classModal,
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    idOption: function() {
                        return 'momo';
                    },
                    booking_number: function() {
                        return $stateParams.booking_number;
                    },
                    isMobile: function() {
                        return isMobileApp;
                    }
                }
            });
            modalAtmInstance.result.then(
                resetAtmModal,
                resetAtmModal
            );
        };

        /**
         * Open 3D Authentication for CREDIT payment option
         *
         * @param url
         * @param paReq
         * @param md
         * @param termUrl
         */
        vm.open3DAuth = function(url, paReq, md, termUrl) {
            var classModal = 'modal-window-extension open3DAuth';
            if (modal3DAuthInstance !== null) return;
            var givenUrl = $sce.trustAsResourceUrl(url);

            gtdFormPayment3D.redirectPayment3D(givenUrl, paReq, md, termUrl);
        };


        vm.openPayoo = function(url, isMobileApp) {

            var classModal = isMobileApp ? 'modal-fullscreen' : 'modal-window-extension';
            if (modalAtmInstance !== null) return;
            modalAtmInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/dialogs/payoo-popup.html',
                controller: 'FlightPaymentExternalController',
                controllerAs: 'vm',
                windowClass: classModal,
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('payment');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    idOption: function() {
                        return 'payoo';
                    },
                    booking_number: function() {},
                    isMobile: function() {
                        // return isMobileApp;
                    }
                }
            });
            modalAtmInstance.result.then(
                resetAtmModal,
                resetAtmModal
            );
        };
        /**
         * Open loading dialog for waiting info
         */
        vm.openLoading = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/flight.loading.html',
                controller: 'FlightLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        vm.doBack = function() {
            //TODO - why dont have booking_number???
            $state.go('booking-confirm');
        };

        /** BEGIN CHECK TIMEOUT **/
        var promise;

        vm.checkTimeOut = function() {
            /* check for enter direct link */
            vm.timeout = !ValidationUtils.checkBookingTimeout(DataService.getBookingModel(), DataService.getPaymentModel(), /** ignore true **/ true);
            if (vm.timeout) return;
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // Reset New Transaction Time
            // DataService.setNewStartTransactionTime();

            // store the interval promise
            promise = $interval(vm.checkTimeOut, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        // $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });
        /** END CHECK TIMEOUT **/
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightBookingInfoController', FlightBookingInfoController);

    FlightBookingInfoController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$interval', 'Flight', 'DataService', 'Principal', 'ValidationUtils', 'Base64', 'CustomerService', 'FlightUtils', '$cookies', '$uibModalStack'];

    function FlightBookingInfoController($log, $rootScope, $scope, $state, $stateParams, $timeout, $interval, Flight, DataService, Principal, ValidationUtils, Base64, CustomerService, FlightUtils, $cookies, $uibModalStack) {
        var vm = this;

        // Merchant will be redirect to detail page.
        // Note: Alternative flow.
        vm.merchantList = ['VIETTEL', 'TIKI', 'TRUEMONEY', 'FASTGO'];

        // Get current merchant.
        vm.currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;

        $log.log('booking info - $stateParams - booking number:' + $stateParams.booking_number);

        vm.departFlightModel = DataService.getDepartFlight();
        vm.returnFlightModel = DataService.getReturnFlight();
        vm.paymentModel = DataService.getPaymentModel();

        //+++ initial bookingModel
        vm.bookingModel = {
            voucher: {},
            departGroupItem: {},
            departPricedItinerary: {},
            departItinTotalFare: {},
            returnGroupItem: {},
            returnPricedItinerary: {},
            returnItinTotalFare: {}
        };
        //---
        //update default phonecode 11/2/2019
        vm.bookingModel.curStep = 1;
        vm.bookingModel.biMobileCode = '84';
        vm.bookingModel.tPCPhoneCode = '84';

        /**
         *
         * @param _booking_number_param
         * @private
         */
        vm._loadBookingInfo = function(_booking_number_param) {
            CustomerService.getBookingByNumber(_booking_number_param).then(function(result) {
                // $log.log("FlightBookingInfoController::getBookingByNumber() - result: " + JSON.stringify(result));

                var oldVm = FlightUtils.convertBookingToVM(result);

                // $log.log("FlightBookingInfoController::getBookingByNumber() - oldVm: " + JSON.stringify(oldVm));


                if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                    // Check status
                    // $log.log('vm.orgBookingModel=');
                    // $log.log(oldVm.orgBookingModel);

                    var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                    var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                    var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                    var supplierBookingStatus = oldVm.orgBookingModel.bookingInfo.supplierBookingStatus;


                    $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);

                    if (bookingStatus == 'PENDING') {
                        // ok
                        $log.log('VIEW - Booking Info');
                    } else if (bookingStatus == 'BOOKED') {
                        if (paymentStatus == 'PENDING' || paymentStatus == 'FAILED') {

                            if (vm.merchantList.indexOf(vm.currentMerchant) > -1) {
                                var bookingNumber = Base64.encodeString(result.bookingInfo.bookingNumber);
                                $state.go('user-profile-booking-air/:booking_number/:mode', {
                                    "booking_number": bookingNumber,
                                    "mode": 'view'
                                });
                                return;
                            } else {
                                $log.log('GOTO - booking-payment');
                                $state.go('booking-info/:booking_number/:params', {
                                    "searchOptions": vm.searchOptions,
                                    "searchResult": vm.searchResult,
                                    "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber),
                                    "params": ''
                                });
                            }

                            // $log.log('GOTO - booking-payment');
                            // $state.go('booking-payment/:booking_number/:params', {
                            //     "searchOptions": vm.searchOptions
                            //     , "searchResult": vm.searchResult
                            //     , "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber)
                            //     , "params": ''
                            // });
                        } else {
                            $log.log('GOTO - booking-result');
                            $state.go('booking-result/:booking_number/:params', {
                                "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber)
                            });
                        }
                    } else {
                        $log.log('GOTO - booking-result');
                        $state.go('booking-result/:booking_number/:params', {
                            "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber)
                        });
                    }

                    if (DataService.getBookingModel() && DataService.getBookingModel().bookingNumber) {
                        $log.log('get booking from data-service');
                        vm.bookingModel = DataService.getBookingModel();

                        // update default phonecode 11/2/2019
                        vm.bookingModel.curStep = 1;
                        vm.bookingModel.biMobileCode = '84';
                        vm.bookingModel.tPCPhoneCode = '84';

                        //+++ reset booking_info to display data
                        vm.bookingModel.bookingInfo = {};
                        if (oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                            vm.bookingModel.bookingInfo = oldVm.orgBookingModel.bookingInfo;
                        }
                        //---

                        vm.searchOptions = DataService.getSearchOption();
                    } else {
                        $log.log('get booking from BE');
                        vm.bookingModel = oldVm.orgBookingModel;
                        // update default phonecode 11/2/2019
                        vm.bookingModel.curStep = 1;
                        vm.bookingModel.biMobileCode = '84';
                        vm.bookingModel.tPCPhoneCode = '84';

                        vm.searchOptions = oldVm.searchOptions;
                    }

                    // $log.log("FlightBookingInfoController - vm.bookingModel: " + JSON.stringify(vm.bookingModel));

                    // Get SSR
                    Flight.getTicketSsr(_booking_number_param).then(function success(result) {
                        vm.searchOptions.ssrOfferItemsDepart = result.departSsrOfferItems;
                        vm.searchOptions.ssrOfferItemsReturn = result.returnSsrOfferItems;
                    }, function error(err) {
                        $log.log("getTicketSsr - err: " + err);
                    });


                    // BACK 2U
                    DataService.setBookingModel(vm.bookingModel);
                    DataService.setSearchOption(vm.searchOptions);

                    $timeout(function() {
                        $rootScope.$broadcast("gtd-load-booking-completed", null);
                    }, 1000);


                    $scope.start();
                } else {
                    $log.log('++++ Booking Not FOUND - GOTO - flight');
                    $state.go('flight-search-home');
                }
            }, function error(result) {
                $log.log('GOTO - flight-search');
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            });
        };


        /**
         * Process main logic
         */
        if ($stateParams.booking_number) {
            //++++ initial parameter
            var _booking_number_param = Base64.decodeString($stateParams.booking_number);
            //---
            $log.log("flight.booking.info - LOADING - _booking_number_param: " + _booking_number_param);
            vm._loadBookingInfo(_booking_number_param);

        } else {
            $log.log('++++ NO Booking Number - GOTO - flight');
            $state.go('flight-search-home');
        }

        //+++ handle authentication event
        $rootScope.$on('authenticationSuccess', function() {
            var isBookingInfoStage = $state.is('booking-info/:booking_number/:params');
            $log.log("flight.booking.info - IS booking-info/:booking_number/:params: " + isBookingInfoStage);

            var _bookingNumber = DataService.getBookingModel().bookingNumber;

            if (isBookingInfoStage && _bookingNumber) {
                $log.log("flight.booking.info - authenticationSuccess --- Checking.... ");

                //step 1:
                $log.log("flight.booking.info - CHANGE BOOKING OWNER - vm.bookingModel.bookingNumber: " + _bookingNumber);
                Flight.changeDraftBookingOwner(_bookingNumber).then(function(result) {
                    $log.log("flight.booking.info - changeDraftBookingOwner result: " + result);

                    //step 2:
                    $log.log("flight.booking.info - RELOAD - vm.bookingModel.bookingNumber: " + _bookingNumber);
                    vm._loadBookingInfo(_bookingNumber);

                }, function error(result) {
                    $log.log('GOTO - flight-search');
                    $state.go('flight-search', {
                        "searchOptions": vm.searchOptions,
                        "searchResult": vm.searchResult,
                        "params": Base64.encodeJson(vm.searchOptions)
                    });
                });
            }
        });
        //---

        /**
         *
         * @param bookingForm
         * @returns {boolean}
         */
        vm.doConfirm = function(bookingForm) {
            if (!bookingForm.$valid) {
                angular.element("[name='" + bookingForm.$name + "']").find('.ng-invalid:visible:first').focus();
                return false;
            } else {
                DataService.setBookingModel(vm.bookingModel);

                $log.log('GOTO - booking-confirm');
                $state.go('booking-confirm/:booking_number/:params', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber),
                    "params": ''
                });
                // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
                // $state.go('booking-confirm');
            }
        };


        /**
         *
         * @param step
         */
        vm.doBack = function(step) {
            var searchOptions = vm.searchOptions;
            var departSearchOptions = vm.departSearchOptions;

            if (searchOptions.searchType == 'oneway') {
                step = 1;
            } else {
                step = 2;
            }

            // TODO: remove later, current workaround for IE, force user to research
            $log.log('isIE = ' + ValidationUtils.isIE());
            if (ValidationUtils.isIE()) {
                searchOptions = {};
                step = 1;
            }

            var searchResult;
            $log.log(searchResult);

            // if (searchOptions.dtype == 'domestic') {
            if (step == 1) {
                searchOptions.returnDomestic = false;
                searchResult = DataService.getDepartSearchResult();
            } else if (step == 2) {
                if (searchOptions.dtype != 'international') {
                    searchOptions.returnDomestic = true;
                }

                searchResult = DataService.getReturnSearchResult();
            }

            searchOptions.selectStep = step;
            // search option is now return option -> for domestic need to set searchId back to departSearchId if change depart flight
            if (searchOptions.dtype == 'domestic' && searchOptions.selectStep == 1 && searchOptions.searchType == 'roundtrip') {
                searchOptions.searchId = departSearchOptions.searchId;
            }

            // calculate searchCompleted
            var searchCompleted;
            if (searchResult.groupPricedItineraries) {
                searchCompleted = true;
            } else {
                searchCompleted = false;
            }

            // TODO: remove later, current workaround for IE, force user to research
            $log.log('isIE = ' + ValidationUtils.isIE());
            if (ValidationUtils.isIE()) {
                searchCompleted = false;
                searchResult = {};
            }

            // $state.go('flight-search', {"searchOptions": searchOptions, "searchResult": searchResult});
            $log.log('GOTO - flight-search');

            $state.go('flight-search', {
                "searchOptions": searchOptions,
                "searchResult": searchResult,
                "searchCompleted": searchCompleted,
                "params": Base64.encodeJson(searchOptions)
                // , "params": Base64.encodeJson(vm.searchOptions)
            });

            $timeout(function() {
                // alert("BROADCAST");
                $rootScope.$broadcast("gtd-refresh-adv-search-result", null);
            }, 1000);
        };

        /** BEGIN CHECK TIMEOUT **/
        var promise;

        vm.checkTimeOut = function() {
            /* check for enter direct link */
            vm.timeout = !ValidationUtils.checkBookingTimeout(vm.bookingModel, DataService.getPaymentModel());
            if (vm.timeout) return;
        };
        $rootScope.$on('$stateChangeSuccess', function() {
            $uibModalStack.dismissAll();
        });

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // Reset New Transaction Time
            // DataService.setNewStartTransactionTime();

            // store the interval promise
            promise = $interval(vm.checkTimeOut, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        // $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });
        /** END CHECK TIMEOUT **/

        vm.checkShowBillingInfo = function() {
            if (vm.currentMerchant == "FSOFT") {
                return false;
            }
            return true;
        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightBookingConfirmController', FlightBookingConfirmController);

    FlightBookingConfirmController.$inject = ['$location', '$log', '$uibModal', '$rootScope', '$scope', '$state', '$stateParams', '$q', '$timeout', '$interval', 'Principal', 'Flight', 'DataService', 'CustomerService', 'DialogService', 'ValidationUtils', 'FlightUtils', 'Base64', '$cookies', '$translate', '$window'];

    function FlightBookingConfirmController($location, $log, $uibModal, $rootScope, $scope, $state, $stateParams, $q, $timeout, $interval, Principal, Flight, DataService, CustomerService, DialogService, ValidationUtils, FlightUtils, Base64, $cookies, $translate, $window) {
        var vm = this;

        vm.viettelPayment = viettelPayment;
        vm.externalPayment = externalPayment;
        vm.tikiPayment = tikiPayment;
        vm.fsoftPayment = fsoftPayment;

        // Init liteEmbed Option
        var liteEmbed = false;
        if ($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) {
            liteEmbed = (($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) === 'true');
        }

        // Merchant will be redirect to detail page.
        // Note: Alternative flow.
        vm.merchantList = ['VIETTEL', 'TIKI', 'FSOFT', 'TRUEMONEY', 'FASTGO'];

        // Get current merchant.
        vm.currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;

        $log.log('booking confirm - $stateParams - booking number:' + $stateParams.booking_number);

        /**
         *
         * @param _booking_number_param
         * @private
         */
        vm._loadBookingInfo = function(_booking_number_param) {
            CustomerService.getBookingByNumber(_booking_number_param).then(function(result) {
                var oldVm = FlightUtils.convertBookingToVM(result);
                if (oldVm && oldVm.orgBookingModel && oldVm.orgBookingModel.bookingInfo) {
                    // Check status
                    $log.log('vm.orgBookingModel=');
                    $log.log(oldVm.orgBookingModel);

                    var bookingStatus = oldVm.orgBookingModel.bookingInfo.status;
                    var paymentStatus = oldVm.orgBookingModel.bookingInfo.paymentStatus;
                    var issueStatus = oldVm.orgBookingModel.bookingInfo.issuedStatus;
                    var supplierBookingStatus = oldVm.orgBookingModel.bookingInfo.supplierBookingStatus;

                    $log.log('bookingStatus=' + bookingStatus + ", paymentStatus = " + paymentStatus + ", issuedStatus = " + issueStatus + ", supplierBookingStatus = " + supplierBookingStatus);

                    if (bookingStatus == 'PENDING') {
                        var dbm = DataService.getBookingModel();
                        if (dbm.contacts != null && dbm.contacts.length > 0) {
                            // ok
                            $log.log('VIEW - booking-confirm');
                        } else {
                            $log.log('GOTO - booking-info');

                            $state.go('booking-info/:booking_number/:params', {
                                "searchOptions": vm.searchOptions,
                                "searchResult": vm.searchResult,
                                "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber),
                                "params": ''
                            });
                            // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
                        }

                    } else if (bookingStatus == 'BOOKED') {
                        if (paymentStatus == 'PENDING' || paymentStatus == 'FAILED') {
                            // Redirect to detail page
                            if (vm.merchantList.indexOf(vm.currentMerchant) > -1) {
                                var bookingNumber = Base64.encodeString(result.bookingInfo.bookingNumber);
                                $state.go('user-profile-booking-air/:booking_number/:mode', {
                                    "booking_number": bookingNumber,
                                    "mode": 'view'
                                });
                                return;
                            } else {
                                $log.log('GOTO - booking-payment');
                                $state.go('booking-payment/:booking_number/:params', {
                                    "searchOptions": vm.searchOptions,
                                    "searchResult": vm.searchResult,
                                    "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber),
                                    "params": ''
                                });
                            }
                        } else {
                            $log.log('GOTO - booking-result');
                            $state.go('booking-result/:booking_number/:params', {
                                "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber)
                            });
                        }
                    } else {
                        $log.log('GOTO - booking-result');
                        $state.go('booking-result/:booking_number/:params', {
                            "booking_number": Base64.encodeString(oldVm.orgBookingModel.bookingNumber)
                        });
                    }

                    var cookieVL = $cookies.get('aff_id');
                    if (cookieVL == "accesstrade") {
                        // TODO - update booking tags
                        Flight.updateBookingTags(oldVm.orgBookingModel.bookingInfo.id, cookieVL);
                    }

                    $timeout(function() {
                        $rootScope.$broadcast("gtd-load-booking-completed", null);
                    }, 1000);

                    vm.bookingModel = DataService.getBookingModel();
                    vm.searchOptions = DataService.getSearchOption();
                    vm.bookingModel.curStep = 2;

                    vm.airline = {
                        term_condition_url: "",
                        airline_name: "",
                        show_airline: true
                    };
                    switch (vm.bookingModel.departGroupItem.airline) {
                        case "BL":
                            vm.airline.term_condition_url = "https://www.jetstar.com/vn/vi/terms-and-conditions";
                            vm.airline.airline_name = "Jetstar Pacific";
                            break;
                        case "VN":
                            vm.airline.term_condition_url = "https://www.vietnamairlines.com/vn/vi/terms-and-conditions/";
                            vm.airline.airline_name = "VietNam Airlines";
                            break;
                        case "VJ":
                            vm.language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');
                            if (vm.language == 'vi') {
                                vm.airline.term_condition_url = "https://www.vietjetair.com/Sites/Web/vi-VN/News/thong-tin-chuyen-bay/619/dieu-le-van-chuyen";
                                vm.airline.airline_name = "Vietjet Air";
                            }
                            if (vm.language == 'en') {
                                vm.airline.term_condition_url = "https://www.vietjetair.com/Sites/Web/en-US/News/flight-information/645/terms-and-conditions";
                                vm.airline.airline_name = "Vietjet Air";
                            }
                            break;
                        case "QH":
                            vm.airline.term_condition_url = "https://www.bambooairways.com/vi/dieu-kien-gia-ve-bamboo-airways/";
                            vm.airline.airline_name = "Bamboo Airways";
                            break;
                        default:
                            vm.airline.show_airline = false;
                            break;
                    }
                    // BACK 2U
                    // DataService.setBookingModel(vm.bookingModel);
                    // DataService.setSearchOption(vm.searchOptions);

                    $scope.start();
                } else {
                    $log.log('++++ Booking Not FOUND - GOTO - flight');
                    $state.go('flight-search-home');
                }
            }, function error(result) {
                $log.log('flight-search');
                $state.go('flight-search', {
                    "searchOptions": vm.searchOptions,
                    "searchResult": vm.searchResult,
                    "params": Base64.encodeJson(vm.searchOptions)
                });
            });
        };

        /**
         * Process main logic
         */
        if ($stateParams.booking_number) {
            //++++ initial parameter
            var _booking_number_param = Base64.decodeString($stateParams.booking_number);
            //---
            $log.log("flight.booking.confirm - LOADING - _booking_number_param: " + _booking_number_param);
            vm._loadBookingInfo(_booking_number_param);

        } else {
            $log.log('++++ NO Booking Number - GOTO - flight');
            $state.go('flight-search-home');
        }

        //+++ handle authentication event
        $rootScope.$on('authenticationSuccess', function() {
            var isBookingConfirmStage = $state.is('booking-confirm/:booking_number/:params');
            $log.log("flight.booking.info - IS booking-confirm/:booking_number/:params: " + isBookingConfirmStage);

            var _bookingNumber = DataService.getBookingModel().bookingNumber;

            if (isBookingConfirmStage && _bookingNumber) {
                $log.log("flight.booking.confirm - authenticationSuccess --- Checking.... ");

                //step 1:
                $log.log("flight.booking.confirm - CHANGE BOOKING OWNER - vm.bookingModel.bookingNumber: " + _bookingNumber);
                Flight.changeDraftBookingOwner(_bookingNumber).then(function(result) {
                    $log.log("flight.booking.confirm - changeDraftBookingOwner result: " + result);

                    //step 2:
                    $log.log("flight.booking.confirm - RELOAD - vm.bookingModel.bookingNumber: " + _bookingNumber);
                    vm._loadBookingInfo(_bookingNumber);

                }, function error(result) {
                    $log.log('GOTO - flight-search');
                    $state.go('flight-search', {
                        "searchOptions": vm.searchOptions,
                        "searchResult": vm.searchResult,
                        "params": Base64.encodeJson(vm.searchOptions)
                    });
                });
            }
        });


        //---

        vm.departFlightModel = DataService.getDepartFlight();
        vm.returnFlightModel = DataService.getReturnFlight();
        vm.paymentModel = DataService.getPaymentModel();

        /**
         * confirm to hold booking
         */


        vm.doConfirm = function() {
            if (!vm.checkedRuleVJ) {
                $log.log("vm.airline")
                $log.log(vm.airline)
                DialogService.openAlertDialog({
                    "title": "Thông báo",
                    "message": "Quý khách vui lòng đọc và xác nhận Đồng ý với điều kiện giá vé & điều lệ vận chuyển đối với các chuyến bay " + vm.airline.airline_name
                });
                return false;
            }

            // var ck_merchant = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");
            //
            // // $window.parent.postMessage("Hello", "https://davidwalsh.name");
            // console.log("FSOFT" + ck_merchant);
            // switch (ck_merchant) {
            //     case 'FSOFT':
            //         DialogService.openAlertDialog({
            //             "title": "Thông báo",
            //             "message": "Quý khách vui lòng đọc và xác nhận Đồng ý với điều kiện giá vé & điều lệ vận chuyển đối với các chuyến bay " + vm.airline.airline_name
            //         });
            //         return false;
            //         break;
            //     default:
            //         // TODO: Implement redirect to unknown merchant.
            //         break;
            // }

            // Show Dialogs
            vm.open();



            if (Principal.isAuthenticated()) {
                // Sync to CustomerTravellers
                CustomerService.addCustomerTravellers(vm.bookingModel).then(function(result) {
                    $log.log("Get addCustomerTravellers from customer.service");
                    $log.log(result);

                    //DialogService.openHttpAlertDilalog(result);
                }, function error(result) {
                    // DialogService.openHttpAlertDilalog(result);
                });
            }

            function passedOTP(result) {
                // Show Dialogs
                vm.closeLoading();
                // $rootScope.$broadcast("event-flight-load-completed", null);

                if (DialogService.isResponseSuccess(result)) {
                    vm.bookingModel.code = result;
                    DataService.setBookingModel(vm.bookingModel);

                    CustomerService.getBookingByNumber(_booking_number_param).then(function(bookingResult) {

                        if (vm.currentMerchant && vm.currentMerchant === 'FSOFT') {
                            var data = {};
                            data.orderId = bookingResult.bookingInfo.bookingNumber;
                            data.roundInfo = [];

                            var roundInfoData = {};
                            roundInfoData.routeType = bookingResult.bookingInfo.roundType;
                            roundInfoData.conformance = "";
                            roundInfoData.explanation = "";
                            data.roundInfo.push(roundInfoData);

                            data.roundInfo = roundInfoData;
                            data.reserveInfo = false;

                            $window.parent.postMessage(data, '*');
                        }

                        var bookingStatus = bookingResult.bookingInfo.status;
                        if ("BOOKED" === bookingStatus) {
                            if ((vm.currentMerchant && vm.currentMerchant === 'FASTGO') || liteEmbed === true) {
                                $log.log('GOTO - booking-payment');
                                $state.go('booking-payment/:booking_number/:params', {
                                    "searchOptions": vm.searchOptions,
                                    "searchResult": vm.searchResult,
                                    "booking_number": Base64.encodeString(bookingResult.bookingNumber),
                                    "params": ''
                                });
                            } else {
                                Flight.externalPayment(bookingResult.bookingNumber);
                            }
                        } else {
                            $state.go('booking-result/:booking_number/:params', {
                                "searchOptions": vm.searchOptions,
                                "searchResult": vm.searchResult,
                                "booking_number": Base64.encodeString(bookingResult.bookingNumber),
                                "params": ''
                            });
                        }
                    });

                    return;
                } else {
                    // Flight.externalPayment(vm.bookingModel.bookingNumber);
                    $state.go('booking-result/:booking_number/:params', {
                        "searchOptions": vm.searchOptions,
                        "searchResult": vm.searchResult,
                        "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                        "params": ''
                    });
                    return;
                }
            }

            function verifyPhoneNumber(result) {
                if (result.errors && result.errors.length > 0 && result.errors[0].code === "403") {
                    DialogService.openAlertDialog({
                        "title": "KHÔNG THỰC HIỆN ĐẶT CHỔ",
                        "message": result.errors[0].message
                    });
                }
                if (result.otpServiceRes && result.otpServiceRes.notFound && result.otpServiceRes.notFound) {
                    //phone number is not verified
                    vm.language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');
                    var otpModalInstance = $uibModal.open({
                        animation: true,
                        backdrop: true,
                        templateUrl: 'app/dialogs/otp.popup.html',
                        controller: 'FlightPaymentOTPController',
                        controllerAs: 'vm',
                        windowClass: "popupOtpModal",
                        resolve: {
                            translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                                $translatePartialLoader.addPart('flight');
                                return $translate.refresh();
                            }],
                            bookingModel: function() {
                                return vm.bookingModel;
                            },
                            searchOptions: function() {
                                return vm.searchOptions;
                            },
                            searchResult: function() {
                                return vm.searchResult;
                            },
                            bookingRes: function() {
                                return result;
                            },
                            Flight: function() {
                                return Flight;
                            },
                            language: function() {
                                return vm.language;
                            }
                        }
                    });

                    otpModalInstance.result.then(function(success) {
                        if (success) {
                            passedOTP(result);
                        }

                    }, function(verificationCode) {
                        console.log(verificationCode);
                        // if (verificationCode.length >= 0) {
                        //     Flight.otpService(vm.bookingModel, vm.paymentModel, null, verificationCode).then(function (result) {});
                        // }
                    });
                } else {
                    passedOTP(result);
                }
            }

            // Try to create booking travellers
            if (vm.searchOptions.searchType == 'oneway') {
                Flight.addTicketTravellers(vm.searchOptions, vm.bookingModel)
                    .then(function(result) {
                        $log.log("Get Flight.addTicketTravellers");
                        $log.log(result);
                        vm.closeLoading();
                        verifyPhoneNumber(result);
                        // $rootScope.$broadcast("event-flight-load-completed", null);

                        // if (DialogService.isResponseSuccess(result)) {
                        //     vm.bookingModel.code = result;
                        //     DataService.setBookingModel(vm.bookingModel);

                        //     CustomerService.getBookingByNumber(_booking_number_param).then(function (bookingResult) {

                        //         if(vm.currentMerchant && vm.currentMerchant === 'FSOFT')
                        //         {
                        //             var data = {};
                        //             data.orderId = bookingResult.bookingInfo.bookingNumber;
                        //             data.roundInfo = [];

                        //             var roundInfoData = {};
                        //             roundInfoData.routeType = bookingResult.bookingInfo.roundType;
                        //             roundInfoData.conformance = "";
                        //             roundInfoData.explanation = "";
                        //             data.roundInfo.push(roundInfoData);

                        //             data.roundInfo = roundInfoData;
                        //             data.reserveInfo = false;

                        //             $window.parent.postMessage(data,'*');
                        //         }

                        //         var bookingStatus = bookingResult.bookingInfo.status;
                        //         if ("BOOKED" === bookingStatus) {
                        //             Flight.externalPayment(bookingResult.bookingNumber);
                        //         } else {
                        //             $state.go('booking-result/:booking_number/:params', {
                        //                 "searchOptions": vm.searchOptions
                        //                 , "searchResult": vm.searchResult
                        //                 , "booking_number": Base64.encodeString(bookingResult.bookingNumber)
                        //                 , "params": ''
                        //             });
                        //         }
                        //     });

                        //     return;
                        // } else {
                        //     // Flight.externalPayment(vm.bookingModel.bookingNumber);
                        //     $state.go('booking-result/:booking_number/:params', {
                        //         "searchOptions": vm.searchOptions, "searchResult": vm.searchResult,
                        //         "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber)
                        //         , "params": ''
                        //     });
                        //     return;
                        // }
                    }, function error(result) {
                        vm.closeLoading();
                        // Flight.externalPayment(vm.bookingModel.bookingNumber);
                        $state.go('booking-result/:booking_number/:params', {
                            "searchOptions": vm.searchOptions,
                            "searchResult": vm.searchResult,
                            "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                            "params": ''
                        });
                        return;
                    });
            } else {

                Flight.addTicketTravellers(vm.departSearchOptions, vm.bookingModel).then(function(result) {
                    $log.log("Get addTicketTravellers from flight.service");
                    $log.log(result);
                    verifyPhoneNumber(result);
                    // $rootScope.$broadcast("event-flight-load-completed", null);

                    // if (DialogService.isResponseSuccess(result)) {
                    //     vm.bookingModel.code = result;
                    //     DataService.setBookingModel(vm.bookingModel);

                    //     CustomerService.getBookingByNumber(_booking_number_param).then(function (bookingResult) {
                    //         if(vm.currentMerchant && vm.currentMerchant === 'FSOFT'){
                    //             var data = {};
                    //             data.orderId = bookingResult.bookingInfo.bookingNumber;
                    //             data.roundInfo = [];

                    //             var roundInfoData = {};
                    //             roundInfoData.routeType = bookingResult.bookingInfo.roundType;
                    //             roundInfoData.conformance = "";
                    //             roundInfoData.explanation = "";
                    //             data.roundInfo.push(roundInfoData);

                    //             data.roundInfo = roundInfoData;
                    //             data.reserveInfo = false;

                    //             $window.parent.postMessage(data,'*');
                    //         }
                    //         var bookingStatus = bookingResult.bookingInfo.status;
                    //         if ("BOOKED" === bookingStatus) {
                    //             Flight.externalPayment(bookingResult.bookingNumber);
                    //         } else {
                    //             $state.go('booking-result/:booking_number/:params', {
                    //                 "searchOptions": vm.searchOptions
                    //                 , "searchResult": vm.searchResult
                    //                 , "booking_number": Base64.encodeString(bookingResult.bookingNumber)
                    //                 , "params": ''
                    //             });
                    //         }
                    //     });
                    //     return;
                    // } else {
                    //     // DialogService.openHttpAlertDilalog(result, true);
                    //     $state.go('booking-result/:booking_number/:params', {
                    //         "searchOptions": vm.searchOptions, "searchResult": vm.searchResult,
                    //         "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber)
                    //         , "params": ''
                    //     });
                    //     // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
                    // }
                }, function error(result) {

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    // DialogService.openHttpAlertDilalog(result, true);
                    // $state.go('booking-result');
                    $state.go('booking-result/:booking_number/:params', {
                        "searchOptions": vm.searchOptions,
                        "searchResult": vm.searchResult,
                        "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                        "params": ''
                    });
                    // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
                });
            }
        };

        /**
         * go back to booking-info
         */
        vm.doBack = function() {
            $state.go('booking-info/:booking_number/:params', {
                "searchOptions": vm.searchOptions,
                "searchResult": vm.searchResult,
                "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                "params": ''
            });
            // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
            // $state.go('booking-info');
        };

        function externalPayment(type, payload) {
            switch (type) {
                case "TIKI":
                    vm.tikiPayment(payload.bookingNumber);
                    break;
                case "VIETTEL":
                    vm.viettelPayment(payload.bookingNumber);
                    break;
                case "FSOFT":
                    vm.fsoftPayment(payload.bookingNumber);
                    break;
                default:
                    break;
            }

        }

        function fsoftPayment(bookingNumber) {

            return;
        }

        function tikiPayment(bookingNumber) {

            var customerID = $cookies.get('msisdn') || localStorage.getItem('msisdn');
            // var customerID = 100090562;

            Flight.createOrderTiki(bookingNumber, customerID).then(function(response) {
                $window.location.href = response.redirect_url;

            }, function error(response) {
                $log.log('errorCallback Create Tiki order');
                // $log.log("response = " + JSON.stringify(response));
            });
            return;
        }

        function viettelPayment(bookingNumber) {

            // alert("Implement viettel");

            Flight.getViettelPaymentURL(bookingNumber).then(function(response) {
                $window.location.href = response;

            }, function error(response) {
                $log.log('errorCallback Create viettel order');
                // $log.log("response = " + JSON.stringify(response));
            });
            return;
        }


        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        vm.closeLoading = function() {
            if (modalInstance === null) return;
            modalInstance.close();
        };

        vm.open = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/flight.loading.html',
                controller: 'FlightLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        /** BEGIN CHECK TIMEOUT **/
        var promise;

        vm.checkTimeOut = function() {
            /* check for enter direct link */
            vm.timeout = !ValidationUtils.checkBookingTimeout(DataService.getBookingModel(), DataService.getPaymentModel());
            if (vm.timeout) return;
        };

        // starts the interval
        $scope.start = function() {
            // stops any running interval to avoid two intervals running at the same time
            $scope.stop();

            // Reset New Transaction Time
            // DataService.setNewStartTransactionTime();

            // store the interval promise
            promise = $interval(vm.checkTimeOut, 1000);
        };

        // stops the interval
        $scope.stop = function() {
            $interval.cancel(promise);
        };

        // starting the interval by default
        // $scope.start();

        // stops the interval when the scope is destroyed,
        // this usually happens when a route is changed and
        // the ItemsController $scope gets destroyed. The
        // destruction of the ItemsController scope does not
        // guarantee the stopping of any intervals, you must
        // be responsible of stopping it when the scope is
        // is destroyed.
        $scope.$on('$destroy', function() {
            $scope.stop();
        });
        /** END CHECK TIMEOUT **/

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('BookingPaymentExternalController', BookingPaymentExternalController);

    BookingPaymentExternalController.$inject = ['$log', '$state', 'Base64', 'Flight'];

    function BookingPaymentExternalController($log, $state, Base64, Flight) {

        var vm = this;

        vm.parram = $state.params;
        vm.bookingNumber = vm.parram.bookingNumber;
        vm.merchant = vm.parram.merchant;
        vm.backUrl = vm.parram.backUrl;
        vm.data = vm.parram.data;
        vm.key = vm.parram.key;
        vm.agent_site = vm.parram.agent_site;

        // Controller methods
        vm.initController = initController;

        vm.initController();

        function initController() {
            Flight.lienVietPayment(vm.data, vm.key, vm.agent_site).then(
                function(response) {
                    // TODO: Handle redirect to result paage with back button.
                    // /products/external-final-booking-detail?booking_number:partner_id

                    if (response.success) {
                        $state.go('external-booking-detail', {
                            "booking_number": vm.bookingNumber,
                            "partner_id": 'LIENVIETBANK',
                            "back_url": response.result.replace(/['"]+/g, '')
                        });
                    } else {
                        $state.go('external-booking-detail', {
                            "booking_number": vm.bookingNumber,
                            "partner_id": 'LIENVIETBANK',
                            "back_url": response.result.replace(/['"]+/g, ''),
                            "error_code": response.textMessage
                        });
                    }

                },
                function(error) {

                }
            );
        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('entity', {
            abstract: true,
            parent: 'app'
        });
    }
})();

/***
GLobal Directives
***/

// Route State Load Spinner(used on page or content load)
angular.module('B2B2CGatewayApp').directive('ngSpinnerBar', ['$rootScope', '$state',
    function($rootScope, $state) {
        return {
            link: function(scope, element, attrs) {
                // by defult hide the spinner bar
                element.addClass('hide'); // hide spinner bar by default

                // display the spinner bar whenever the route changes(the content part started loading)
                $rootScope.$on('$stateChangeStart', function() {
                    element.removeClass('hide'); // show spinner bar
                    Layout.closeMainMenu();
                });

                // hide the spinner bar on rounte change success(after the content loaded)
                $rootScope.$on('$stateChangeSuccess', function() {
                    element.addClass('hide'); // hide spinner bar
                    $('body').removeClass('page-on-load'); // remove page loading indicator
                    Layout.setAngularJsMainMenuActiveLink('match', null, $state); // activate selected link in the sidebar menu

                    // auto scorll to page top
                    setTimeout(function() {
                        App.scrollTop(); // scroll to the top on content load
                        if ('parentIFrame' in window) {
                            window.parentIFrame.scrollTo(0, 0);
                        }
                    }, $rootScope.settings.layout.pageAutoScrollOnLoad);
                });

                // handle errors
                $rootScope.$on('$stateNotFound', function() {
                    element.addClass('hide'); // hide spinner bar
                });

                // handle errors
                $rootScope.$on('$stateChangeError', function() {
                    element.addClass('hide'); // hide spinner bar
                });
            }
        };
    }
]);

// Handle global LINK click
angular.module('B2B2CGatewayApp').directive('a',
    function() {
        return {
            restrict: 'E',
            link: function(scope, elem, attrs) {
                if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                    elem.on('click', function(e) {
                        e.preventDefault(); // prevent link click for above criteria
                    });
                }
            }
        };
    });

// Handle Dropdown Hover Plugin Integration
angular.module('B2B2CGatewayApp').directive('dropdownMenuHover', function() {
    return {
        link: function(scope, elem) {
            elem.dropdownHover();
        }
    };
});

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('TimeoutDialogController', TimeoutDialogController);

    TimeoutDialogController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModalInstance', 'error', 'DataService'];

    function TimeoutDialogController($log, $rootScope, $scope, $state, $timeout, $uibModalInstance, error, DataService) {
        var vm = this;

        vm.error = error;

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
            // $state.go('flight-search-home');

            // $state.go('flight-search', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult});

            var searchOptions = DataService.getSavedSearchOption();
            // $state.go('flight-search', {'init': true, reload: true, "searchOptions": searchOptions});
            $state.go('flight-search', {
                "searchOptions": searchOptions
            }, {
                reload: true
            });

            $timeout(function() {
                $rootScope.$broadcast("gtd-reinit-search", null);
            }, 1000);

        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('FlightPaymentOTPController', FlightPaymentOTPController);

    FlightPaymentOTPController.$inject = ['$log', '$rootScope', '$scope', '$window', '$interval', '$state', '$timeout', '$sce', 'Auth', '$uibModalInstance', 'bookingModel', 'bookingRes', 'Flight', 'language', '$translate', 'searchResult', 'searchOptions', 'Base64'];

    function FlightPaymentOTPController($log, $rootScope, $scope, $window, $interval, $state, $timeout, $sce, Auth, $uibModalInstance, bookingModel, bookingRes, Flight, language, $translate, searchResult, searchOptions, Base64) {
        var $ctrl = this;
        $scope.otpCode = '';
        $scope.checking = false;
        $scope.verificationCode = '';
        $scope.phoneNumber = '';
        $scope.timeOut;
        $scope.showTimeOut = false;
        $scope.showDiv = true;
        $scope.alerts = [];
        $scope.expDate;
        $scope.doBack = function() {
            $log.log('klasdjkjsada');
            $state.go('booking-info/:booking_number/:params', {
                "searchOptions": searchOptions,
                "searchResult": searchResult,
                "booking_number": Base64.encodeString(bookingModel.bookingNumber),
                "params": ''
            });
            // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))});
            // $state.go('booking-info');
        };
        $scope.getOTP = function() {
            if ($scope.checking) return;
            $scope.checking = true;
            var otpRequest = {
                lang: language.toUpperCase(),
            }
            Flight.flightBookingOTPService(bookingModel, otpRequest).then(function(result) {
                var messageLimit = $translate.storage().get('NG_TRANSLATE_LANG_KEY') == 'vi' ? 'Quá nhiều mã xác thực đã gửi vào số điện thoại này hôm nay.' : 'This phone number have received too many OTP codes, please use another one.';
                var sendOTPError = $translate.storage().get('NG_TRANSLATE_LANG_KEY') == 'vi' ? 'Gửi OTP không thành công.' : 'Unable to send OTP code, please try again.';
                if (result.otpServiceRes) {
                    if (result.otpServiceRes.success) {
                        $scope.verificationCode = result.otpServiceRes.verificationCode;
                        $scope.startCountDown(result.otpServiceRes.lifeTimeInMin);
                        $scope.expDate = result.otpServiceRes.expDate;
                        $scope.showTimeOut = true;
                        $scope.phoneNumber = result.otpServiceRes.phoneNumber;
                    } else {
                        if (result.otpServiceRes.fullQuota !== null && result.otpServiceRes.fullQuota) {
                            $scope.showDiv = false;
                            $scope.addAlert(messageLimit, "noValidPhone");
                            $timeout(function() {
                                $ctrl.ok(false);
                            }, 10000);
                        } else {
                            $scope.showDiv = false;
                            $scope.addAlert(sendOTPError, "noValidPhone");
                            $timeout(function() {
                                $ctrl.ok(false);
                            }, 10000);
                        }
                    }
                } else {
                    $scope.showDiv = false;
                    $scope.addAlert(sendOTPError, "noValidPhone");
                    $timeout(function() {
                        $ctrl.ok(false);
                    }, 5000);
                }
            });

            $scope.checking = false;
        };

        $scope.startCountDown = function(timeInMin) {
            var time = (timeInMin * 60);
            $interval(function() {
                time--;
                $scope.timeOut = time;
                if ($scope.timeOut === 0) {
                    $scope.showDiv = false;
                    var messageExpired = $translate.storage().get('NG_TRANSLATE_LANG_KEY') == 'vi' ? 'Mã xác thực đã hết hạn' : 'TThe OTP code has expired';
                    $scope.addAlert(messageExpired, "danger");
                    var otpRequest = {
                        otpCode: null,
                        verificationCode: $scope.verificationCode
                    };
                    Flight.flightBookingOTPService(bookingModel, otpRequest).then(function(result) {
                        $timeout(function() {
                            $ctrl.ok(false);
                        }, 10000);
                    });
                }
            }, 1000, 0);
        };


        $scope.verify = function() {
            if ($scope.checking) return;
            $('.errorMessageOtp').hide();
            $scope.checking = true;
            var otpCodeTemp = "";
            $('.otpVal').each(function() {
                otpCodeTemp = otpCodeTemp + $(this).val();
            });
            $scope.otpCode = otpCodeTemp;
            if ($scope.otpCode !== '') {
                var otpRequest = {
                    otpCode: $scope.otpCode,
                    verificationCode: $scope.verificationCode
                };
                Flight.flightBookingOTPService(bookingModel, otpRequest).then(function(result) {
                    if (result.otpServiceRes.success) {
                        $ctrl.ok(true);
                    } else {
                        var messageCorrect = $translate.storage().get('NG_TRANSLATE_LANG_KEY') == 'vi' ? 'Mã xác thực không đúng!' : 'OTP code is not correct!';
                        var messageLimit = $translate.storage().get('NG_TRANSLATE_LANG_KEY') == 'vi' ? 'Đã hết lượt nhập mã xác thực' : 'The OTP code has ended';
                        var messageExpired = $translate.storage().get('NG_TRANSLATE_LANG_KEY') == 'vi' ? 'Mã xác thực đã hết hạn' : 'TThe OTP code has expired';
                        $scope.verificationCode = result.otpServiceRes.verificationCode;
                        if (result.otpServiceRes.matched !== null && !result.otpServiceRes.matched) {
                            $scope.addAlert(messageCorrect, "danger");
                        }
                        if (result.otpServiceRes.outOfSlot !== null && result.otpServiceRes.outOfSlot) {
                            $scope.showDiv = false;
                            $scope.showTimeOut = false;
                            $scope.addAlert(messageLimit, "danger");
                            $timeout(function() {
                                $ctrl.ok(false);
                            }, 10000);
                        }
                        if (result.otpServiceRes.expired !== null && result.otpServiceRes.expired) {
                            $scope.showDiv = false;
                            $scope.addAlert(messageExpired, "danger");
                            $scope.showTimeOut = false;
                            $timeout(function() {
                                $ctrl.ok(false);
                            }, 10000);
                        }
                    }
                });
            } else {
                $('.errorMessageOtp').show();
            }
            $scope.checking = false;
        };

        $ctrl.ok = function(success) {
            $uibModalInstance.close(success);
        };

        // $ctrl.dismiss = function () {
        //     if ($scope.verificationCode.length == 0) return;
        //     var otpRequest = {
        //         otpCode: null,
        //         verificationCode: $scope.verificationCode,
        //     }
        //     Flight.otpService(bookingModel, otpRequest).then(function (result) {
        //     });
        //     $uibModalInstance.dismiss($scope.verificationCode);
        // };



        $scope.addAlert = function(msg, danger) {
            $scope.alerts.push({
                type: danger,
                msg: msg
            });
        };

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };
        $scope.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();



(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('DialogService', DialogService);

    DialogService.$inject = ['$log', '$uibModal', '$translate'];

    function DialogService($log, $uibModal, $translate) {
        var service = {
            openAlertDialog: openAlertDialog,
            openHttpAlertDilalog: openHttpAlertDilalog,
            openB2B2CDialog: openB2B2CDialog,
            isResponseSuccess: isResponseSuccess,
            openNoActionDialog: openNoActionDialog
        };

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        return service;

        /**
         *
         * @param error format
         * {
         *  title : "Title"
         *  message : "Message"
         * }
         */
        function openAlertDialog(error) {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'app/dialogs/alert.dialog.html',
                controller: 'AlertDialogController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('login');
                        return $translate.refresh();
                    }],
                    error: function() {
                        return error;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        }

        function openHttpAlertDilalog(httpResponse, backToSearch) {
            var message = 'Hệ thống chưa xử lý được yêu cầu của Quý khách. Mời quý khách gửi lại yêu cầu.';

            //alert(httpResponse.status + ":" + httpResponse.success);

            if (httpResponse.success) {
                return false;
            } else {
                //TODO: process HTTP response
                if (httpResponse.status) {
                    switch (httpResponse.status) {
                        // connection refused, server not reachable
                        case 0:
                            message = 'Server not reachable';
                            break;

                        case 400:
                            message = 'Bad request';
                            break;

                        case 404:
                            message = 'Not found';
                        case 200:
                            message = httpResponse.textMessage;
                        default:
                            if (httpResponse.data && httpResponse.data.message) {
                                message = httpResponse.data.message;
                            } else {
                                // message = '';
                            }
                    }
                }

                message = 'Hệ thống chưa xử lý được yêu cầu của Quý khách. Mời quý khách gửi lại yêu cầu.';

                if (httpResponse && httpResponse.errors) {
                    angular.forEach(httpResponse.errors, function(item) {
                        if (item.code == '24' && item.message == 'SENDER_MOBILE_INCORRECT') {
                            message = 'Bạn phải nhập số điện thoại nội địa để thanh toán.';
                        } else if (item.code == '6_PAYER_CHECK_ENROLLMENT_ERROR') {
                            message = 'Không thực hiện tạo thẻ được, mời bạn kiểm tra lại thông tin thẻ.';
                        }
                    });
                }

                var error = {
                    "title": "Thông Báo",
                    "message": message
                };

                if (backToSearch) {
                    error = {
                        "title": "Thông Báo",
                        "message": 'Hệ thống chưa xử lý được yêu cầu của Quý khách. Quý khách vui lòng tiến hành tìm kiếm lại chuyến bay và đặt lại vé.'
                    };
                }

                if (modalInstance !== null) return;

                if (backToSearch) {
                    modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'app/dialogs/timeout.dialog.html',
                        controller: 'TimeoutDialogController',
                        controllerAs: 'vm',
                        resolve: {
                            translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                                $translatePartialLoader.addPart('login');
                                return $translate.refresh();
                            }],
                            error: function() {
                                return error;
                            }
                        }
                    });
                } else {
                    modalInstance = $uibModal.open({
                        animation: true,
                        // templateUrl: 'app/dialogs/alert.dialog.html',
                        // controller: 'TimeoutDialogController',
                        templateUrl: 'app/dialogs/alert.dialog.html',
                        controller: 'AlertDialogController',
                        controllerAs: 'vm',
                        resolve: {
                            translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                                $translatePartialLoader.addPart('login');
                                return $translate.refresh();
                            }],
                            error: function() {
                                return error;
                            }
                        }
                    });
                }

                modalInstance.result.then(
                    resetModal,
                    resetModal
                );

                return true;
            }
        }

        function openNoActionDialog(error) {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'app/dialogs/merchant.alert.dialog.html',
                controller: 'AlertDialogController',
                controllerAs: 'vm',
                backdrop: 'static',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('login');
                        return $translate.refresh();
                    }],
                    error: function() {
                        return error;
                    }
                }
            });

            modalInstance.result.then(
                resetModal,
                resetModal
            );
        }

        /**
         *
         * @param error format
         * {
         *  title : "Title"
         *  message : "Message"
         *  redirectUrl : "URL"
         * }
         */
        function openB2B2CDialog(error) {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/dialogs/b2b2c.dialog.html',
                controller: 'B2B2CDialogController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }],
                    error: function() {
                        return error;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );

            return true;
        }

        function isResponseSuccess(httpResponse) {
            if (httpResponse.success) {
                return true;
            } else {
                return false;
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('B2B2CDialogController', B2B2CDialogController);

    B2B2CDialogController.$inject = ['$log', '$window', '$rootScope', '$scope', '$state', '$timeout', '$uibModalInstance', 'error'];

    function B2B2CDialogController($log, $window, $rootScope, $scope, $state, $timeout, $uibModalInstance, error) {
        var vm = this;

        vm.error = error;

        vm.cancel = function() {
            if (error !== null && error.redirectUrl != null) {
                try {
                    $window.location.href = error.redirectUrl;
                } catch (err) {
                    $log.log("B2B2CDialogController - " + err);
                }
            }

            $uibModalInstance.dismiss('cancel');
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('AlertDialogController', AlertDialogController);

    AlertDialogController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModalInstance', 'error', 'MerchantService'];

    function AlertDialogController($log, $rootScope, $scope, $state, $timeout, $uibModalInstance, error, MerchantService) {
        var vm = this;

        vm.error = error;

        MerchantService.scrollToTopIframe();

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('B2B2CGatewayApp')
        .factory('ThemeCfg', ThemeCfg);

    ThemeCfg.$inject = [];

    function ThemeCfg() {
        return {
            TIKI: false,
            SENDO: false,
            LIENVIETBANK: false,
            SEABANK: false,
            FSOFT: false,
            LOOPBACK: false,
            TRUEMONEY: false,
            VTCPAY: false,
            SMARTPAY: false,
            APEX: false
        };
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdVnPhone', gtdVnPhone);

    gtdVnPhone.$inject = ['$log', '$timeout'];

    function gtdVnPhone($log, $timeout) {

        // function gtdVnPhone() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, element, attr, ctrl) {

                var MIN_LENGTH = 10;
                var MAX_LENGTH = 14;
                var PHONE_NUMBER_LENGTH = 7;
                var COUNTRY_PREFIXES = ['0084', '084', '84'];
                var MOBILE_THREE_DIGIT_PREFIXES = ['090', '091', '092', '093', '094', '095', '096', '097', '098', '099'];
                var MOBILE_FOUR_DIGIT_PREFIXES = ['0120', '0121', '0122', '0123', '0124', '0125', '0126', '0127', '0128', '0129', '0162', '0163', '0164', '0165', '0166', '0167', '0168', '0169', '0186', '0188', '0199'];
                var REDUDANT_CHARS = ['\\(', '\\)', '\\-', '\\.', '\\s', '\+'];
                var REDUDANT_REGEX = new RegExp("[" + (REDUDANT_CHARS.join('')) + "]", 'g');
                var NON_DIGIT_REGEX = /\D/;
                var COUNTRY_CODE_REGEX = new RegExp("^(" + (COUNTRY_PREFIXES.join('|')) + ")");
                var FAILURE_RETURN = false;
                // var FAILURE_RETURN_LENGTH = 'ERR_LENGTH';
                // var FAILURE_RETURN_NON_DIGIT = 'ERR_NON_DIGIT';
                // var FAILURE_RETURN_MOBILE_PREFIX = 'ERR_PROVIDER';
                // var FAILURE_RETURN_NUMBER_LENGTH = 'ERR_NUMBER_LENGTH';

                var FAILURE_RETURN_LENGTH = 'NOT_VN_PHONE';
                var FAILURE_RETURN_NON_DIGIT = 'NOT_VN_PHONE';
                var FAILURE_RETURN_MOBILE_PREFIX = 'NOT_VN_PHONE';
                var FAILURE_RETURN_NUMBER_LENGTH = 'NOT_VN_PHONE';

                function validatePhone(ngModelValue) {

                    var originalPhoneNumber = ngModelValue;
                    if (originalPhoneNumber) {
                        var mobileOnly = true;

                        var length, mobilePrefixLength, phone, ref, ref1;
                        if (mobileOnly == null) {
                            mobileOnly = true;
                        }
                        phone = originalPhoneNumber;
                        phone = phone.replace(REDUDANT_REGEX, '');
                        length = phone.length;
                        if (!((MIN_LENGTH <= length && length <= MAX_LENGTH))) {
                            ctrl.$setValidity('phoneValidator', false);
                            return FAILURE_RETURN_LENGTH;
                        }
                        if (NON_DIGIT_REGEX.test(phone)) {
                            ctrl.$setValidity('phoneValidator', false);
                            return FAILURE_RETURN_NON_DIGIT;
                        }
                        phone = phone.replace(COUNTRY_CODE_REGEX, '');
                        if (phone[0] !== '0') {
                            phone = '0' + phone;
                        }
                        length = phone.length;

                        var refPhone4 = phone.slice(0, 4);
                        var refPhone3 = phone.slice(0, 3);

                        angular.forEach(MOBILE_FOUR_DIGIT_PREFIXES, function(code) {
                            if (code == refPhone4) {
                                mobilePrefixLength = 4;
                            }
                        });

                        if (!mobilePrefixLength) {
                            angular.forEach(MOBILE_THREE_DIGIT_PREFIXES, function(code) {
                                if (code == refPhone3) {
                                    mobilePrefixLength = 3;
                                }
                            });
                        }

                        if (!mobilePrefixLength) {
                            mobilePrefixLength = 0;
                        }

                        if (mobilePrefixLength === 0) {
                            ctrl.$setValidity('phoneValidator', false);
                            return FAILURE_RETURN_MOBILE_PREFIX;
                        }
                        if (length - mobilePrefixLength !== PHONE_NUMBER_LENGTH) {
                            ctrl.$setValidity('phoneValidator', false);
                            return FAILURE_RETURN_NUMBER_LENGTH;
                        }

                        ctrl.$setValidity('phoneValidator', true);
                        return phone;
                    } else {
                        ctrl.$setValidity('phoneValidator', true);
                        return originalPhoneNumber;
                    }


                }

                // we need to add our customValidator function to an array of other(build-in or custom) functions
                // I have not notice any performance issues, but it would be worth investigating how much
                // effect does this have on the performance of the app
                ctrl.$parsers.push(validatePhone);
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdPhone', gtdPhone);

    gtdPhone.$inject = ['$log', '$timeout'];

    function gtdPhone($log, $timeout) {

        // function gtdPhone() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, element, attr, ctrl) {

                var FAILURE_NOT_VALID_PHONE = 'NOT_VALID_PHONE';

                function validatePhone(ngModelValue) {

                    var originalPhoneNumber = ngModelValue;

                    var valid = true;
                    var length = 0;
                    if (originalPhoneNumber) {
                        valid = /^[-\s\.0-9]+$/.test(originalPhoneNumber);
                        length = originalPhoneNumber.length;
                    }

                    if (valid && length >= 9 && length <= 11) {
                        ctrl.$setValidity('phoneValidator', true);
                    } else {
                        ctrl.$setValidity('phoneValidator', false);
                    }

                    return originalPhoneNumber;
                }

                // we need to add our customValidator function to an array of other(build-in or custom) functions
                // I have not notice any performance issues, but it would be worth investigating how much
                // effect does this have on the performance of the app
                ctrl.$parsers.push(validatePhone);
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdNoNumber', gtdNoNumber);

    gtdNoNumber.$inject = ['$log', '$timeout'];

    function gtdNoNumber($log, $timeout) {

        return {
            require: 'ngModel',
            restrict: 'A',
            link: function(scope, element, attrs, modelCtrl) {
                modelCtrl.$validators.noNumber = function noNumber(modelValue, viewValue) {

                    var orgEmail = modelValue || viewValue;

                    if (orgEmail) {
                        var valid = /^([^0-9]*)$/.test(orgEmail);
                        return valid;

                    } else {
                        return (true);
                    }


                };
            }
        };
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdEmail', gtdEmail);

    gtdEmail.$inject = ['$log', '$timeout'];

    function gtdEmail($log, $timeout) {

        // function gtdEmail() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, element, attr, ctrl) {

                var FAILURE_NOT_VALID_PHONE = 'NOT_VALID_EMAIL';

                function validateEmail(ngModelValue) {

                    var orgEmail = ngModelValue;

                    if (orgEmail) {
                        // var valid = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/.test(orgEmail);
                        var valid = /^[a-zA-Z0-9][a-zA-Z0-9-_\.]+@([a-zA-Z]|[a-zA-Z0-9]?[a-zA-Z0-9-]+[a-zA-Z0-9])\.[a-zA-Z0-9]{2,10}(?:\.[a-zA-Z]{2,10})?$/.test(orgEmail);
                        if (valid) {
                            ctrl.$setValidity('emailValidator', true);
                        } else {
                            ctrl.$setValidity('emailValidator', false);
                        }
                    } else {
                        ctrl.$setValidity('emailValidator', true);
                    }

                    return orgEmail;
                }

                // we need to add our customValidator function to an array of other(build-in or custom) functions
                // I have not notice any performance issues, but it would be worth investigating how much
                // effect does this have on the performance of the app
                ctrl.$parsers.push(validateEmail);
            }
        };
    }
})();

(function() {
    /*jshint bitwise: false*/
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('ValidationUtils', ValidationUtils);

    ValidationUtils.$inject = ['$log', '$uibModal', '$translate', '$state', 'DataService', 'TRANS_TIME_OUT', 'DialogService', 'GlobalSrv'];

    function ValidationUtils($log, $uibModal, $translate, $state, DataService, TRANS_TIME_OUT, DialogService, GlobalSrv) {

        var service = {
            checkSearchTimeout: checkSearchTimeout,
            checkBookingTimeout: checkBookingTimeout

                ,
            validateFlightSearch: validateFlightSearch

                ,
            isMobileDevice: isMobileDevice,
            isIE: isIE
        };

        var modalInstance = null;

        var resetModal = function() {
            modalInstance = null;
        };

        var toSearch = function() {
            resetModal();
            $state.go('flight-search');
        };

        return service;


        function isMobileDevice() {
            var isMobile = false; //initiate as false
            // device detection
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||
                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) isMobile = true;

            return isMobile;
        }

        function isIE() {
            // var isIE = false; //initiate as false

            var userAgent = navigator.userAgent;
            return userAgent.indexOf("MSIE ") > -1 || userAgent.indexOf("Trident/") > -1 || userAgent.indexOf("Edge/") > -1;

            // $log.log('iversion = ' + v);
            // return isIE;
        }

        /** Below is a function that will return a numerical value of which Internet Explorer the user is on. If on Microsoft Edge it returns the number 12.
         * https://stackoverflow.com/questions/31757852/how-can-i-detect-internet-explorer-ie-and-microsoft-edge-using-javascript/32107845
         * **/
        function Check_Version() {
            var rv = -1; // Return value assumes failure.

            if (navigator.appName == 'Microsoft Internet Explorer') {

                var ua = navigator.userAgent,
                    re = new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})");

                if (re.exec(ua) !== null) {
                    rv = parseFloat(RegExp.$1);
                }
            } else if (navigator.appName == "Netscape") {
                /// in IE 11 the navigator.appVersion says 'trident'
                /// in Edge the navigator.appVersion does not say trident
                if (navigator.appVersion.indexOf('Trident') === -1) rv = 12;
                else rv = 11;
            }

            return rv;
        }




        function checkBookingTimeout(bookingModel, paymentModel, ignoreTimeout) {
            // ignoreTimeout: true -> ignore timeout check, only check for dirty link

            var message = 'Thông tin booking đã bị thay đổi. Quý khách vui lòng tiến hành tìm kiếm lại chuyến bay và đặt lại vé.';

            var duration = moment.duration(moment(new Date()).diff(moment(DataService.getStartTransactionTime())));
            var minutes = duration.asMinutes();

            if (bookingModel && bookingModel.bookingNumber && ((minutes < TRANS_TIME_OUT) || ignoreTimeout)) {
                return true;
            } else {

                var error = {
                    "title": "Trang hết hiệu lực",
                    "message": message
                };

                if (modalInstance !== null) return;
                modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/dialogs/timeout.dialog.html',
                    controller: 'TimeoutDialogController',
                    controllerAs: 'vm',
                    resolve: {
                        translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                            $translatePartialLoader.addPart('login');
                            return $translate.refresh();
                        }],
                        error: function() {
                            return error;
                        }
                    }
                });
                modalInstance.result.then(
                    resetModal,
                    resetModal
                );

                return false;
            }
        }

        function checkSearchTimeout(searchOptions, searchResult) {
            var message = 'Giá các chuyến bay thường xuyên thay đổi. Quý khách vui lòng load lại trang để chắc chắn rằng giá bạn đang thấy là mới nhất.';

            var duration = moment.duration(moment(new Date()).diff(moment(DataService.getStartTransactionTime())));
            var minutes = duration.asMinutes();

            if (searchOptions && searchOptions.searchType && minutes < TRANS_TIME_OUT) {
                return true;
            } else {

                var error = {
                    "title": "Trang hết hiệu lực",
                    "message": message
                };

                if (modalInstance !== null) return;
                modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/dialogs/timeout.dialog.html',
                    controller: 'TimeoutDialogController',
                    controllerAs: 'vm',
                    resolve: {
                        translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                            $translatePartialLoader.addPart('login');
                            return $translate.refresh();
                        }],
                        error: function() {
                            return error;
                        }
                    }
                });
                modalInstance.result.then(
                    resetModal,
                    resetModal
                );

                return false;
            }
        }

        function validateFlightSearch(searchOptions) {
            // VALIDATION
            if (searchOptions.searchType == 'roundtrip') {
                if (moment(searchOptions.departureDate, 'DD-MM-YYYY').diff(moment(searchOptions.returnDate, 'DD-MM-YYYY')) > 0) {
                    DialogService.openAlertDialog({
                        "title": "Error",
                        "message": "Ngày Đến phải sau Ngày Khởi Hành."
                    });
                    return false;
                }
            }
            if (searchOptions.toAirPort == searchOptions.fromAirPort) {
                DialogService.openAlertDialog({
                    "title": "Error",
                    "message": "Điểm Khởi Hành và Điểm Đến phải khác nhau."
                });
                return false;
            }

            // validate passenger quantity
            var passengerValid = false;
            $log.log("searchOptions.adultNo=" + searchOptions.adultNo);
            $log.log("searchOptions.childrenNo=" + searchOptions.childrenNo);
            $log.log("searchOptions.newBornNo=" + searchOptions.newBornNo);
            if (parseInt(searchOptions.adultNo) == 1) {
                if (parseInt(searchOptions.childrenNo) <= 4 && parseInt(searchOptions.newBornNo) <= parseInt(searchOptions.adultNo)) {
                    passengerValid = true;
                }
            } else if (parseInt(searchOptions.adultNo) <= 9) {
                if ((parseInt(searchOptions.childrenNo) + parseInt(searchOptions.adultNo) <= 9) && (parseInt(searchOptions.newBornNo) <= parseInt(searchOptions.adultNo))) {
                    passengerValid = true;
                }
            }
            if (!passengerValid) {
                DialogService.openAlertDialog({
                    "title": "Error",
                    "message": "Số hành khách không thoả mãn qui định đặt vé!"
                });
                return false;
            }

            // validate airports
            var vnAirports = GlobalSrv.getVnAirports();
            var destMatch = false;
            var orgMatch = false;

            angular.forEach(vnAirports, function(item) {
                if (searchOptions.toAirPort == item.code) {
                    destMatch = true;
                }
            });

            angular.forEach(vnAirports, function(item) {
                if (searchOptions.fromAirPort == item.code) {
                    orgMatch = true;
                }
            });

            if (searchOptions.dtype == 'international') {
                if (destMatch && orgMatch) {
                    DialogService.openAlertDialog({
                        "title": "Error",
                        "message": "Bạn phải nhập điểm khởi hành hoặc điểm đến quốc tế."
                    });
                    return false;
                }
            }


            // OK
            return true;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('words', words);

    words.$inject = ['$log'];

    function words($log) {
        return wordsFilter;

        function wordsFilter(input, words) {
            if (isNaN(words)) {
                return input;
            }
            if (words <= 0) {
                return '';
            }
            if (input) {
                var inputWords = input.split(/\s+/);
                if (inputWords.length > words) {
                    input = inputWords.slice(0, words).join(' ') + '...';
                }
            }
            return input;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('characters', characters);

    characters.$inject = ['$log'];

    function characters($log) {
        return charactersFilter;

        function charactersFilter(input, chars, breakOnWord) {
            if (isNaN(chars)) {
                return input;
            }
            if (chars <= 0) {
                return '';
            }
            if (input && input.length > chars) {
                input = input.substring(0, chars);

                if (!breakOnWord) {
                    var lastspace = input.lastIndexOf(' ');
                    // Get last space
                    if (lastspace !== -1) {
                        input = input.substr(0, lastspace);
                    }
                } else {
                    while (input.charAt(input.length - 1) === ' ') {
                        input = input.substr(0, input.length - 1);
                    }
                }
                return input + '...';
            }
            return input;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('jhSortBy', jhSortBy);

    jhSortBy.$inject = ['$log'];

    function jhSortBy($log) {
        var directive = {
            restrict: 'A',
            scope: false,
            require: '^jhSort',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs, parentCtrl) {
            element.bind('click', function() {
                parentCtrl.sort(attrs.jhSortBy);
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('jhSort', jhSort);

    jhSort.$inject = ['$log'];

    function jhSort($log) {
        var directive = {
            restrict: 'A',
            scope: {
                predicate: '=jhSort',
                ascending: '=',
                callback: '&'
            },
            controller: SortController,
            controllerAs: 'vm',
            bindToController: true
        };

        return directive;
    }

    SortController.$inject = ['$scope', '$element'];

    function SortController($scope, $element) {
        var vm = this;

        vm.applyClass = applyClass;
        vm.resetClasses = resetClasses;
        vm.sort = sort;
        vm.triggerApply = triggerApply;

        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);
        vm.triggerApply();

        function applyClass(element) {
            var thisIcon = element.find('span.glyphicon'),
                sortIcon = 'glyphicon-sort',
                sortAsc = 'glyphicon-sort-by-attributes',
                sortDesc = 'glyphicon-sort-by-attributes-alt',
                remove = sortIcon + ' ' + sortDesc,
                add = sortAsc;
            if (!vm.ascending) {
                remove = sortIcon + ' ' + sortAsc;
                add = sortDesc;
            }
            vm.resetClasses();
            thisIcon.removeClass(remove);
            thisIcon.addClass(add);
        }

        function resetClasses() {
            var allThIcons = $element.find('span.glyphicon'),
                sortIcon = 'glyphicon-sort',
                sortAsc = 'glyphicon-sort-by-attributes',
                sortDesc = 'glyphicon-sort-by-attributes-alt';
            allThIcons.removeClass(sortAsc + ' ' + sortDesc);
            allThIcons.addClass(sortIcon);
        }

        function sort(field) {
            if (field !== vm.predicate) {
                vm.ascending = true;
            } else {
                vm.ascending = !vm.ascending;
            }
            vm.predicate = field;
            $scope.$apply();
            vm.callback();
        }

        function triggerApply(values) {
            vm.resetClasses();
            if (values && values[0] !== '_score') {
                vm.applyClass($element.find('th[jh-sort-by=\'' + values[0] + '\']'));
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('RequestUtils', RequestUtils);

    RequestUtils.$inject = ['$log', '$filter', '$httpParamSerializer'];

    function RequestUtils($log, $filter, $httpParamSerializer) {

        var service = {
            buildUrl: buildUrl
        };

        return service;

        function buildUrl(baseUrl, params) {
            return baseUrl + "?" + $httpParamSerializer(params);
        }

    }

})();

(function() {
    /*jshint bitwise: false*/
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('PricingUtils', PricingUtils);

    PricingUtils.$inject = ['$log', '$filter'];

    function PricingUtils($log, $filter) {

        var service = {
            getTotalPricing: getTotalPricing,
            getHotelTotalPricing: getHotelTotalPricing
        };

        return service;

        function getTotalPricing(booking) {
            var price = 0;

            if (booking) {
                angular.forEach(booking.groupPricedItineraries, function(group) {
                    price += group.pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                });
            }

            return price;
        }

        function getHotelTotalPricing(booking) {
            var price = 0;

            $log.log('PricingUtils.getHotelTotalPricing: bookingModel=');
            $log.log(booking);

            if (booking) {
                // price = booking.bookingInfo.displayPriceInfo.totalFare;

                price = $filter('bookingPriceInfo')(booking, 'total_price');
            }

            return price;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('ParseLinks', ParseLinks);

    ParseLinks.$inject = ['$log'];

    function ParseLinks($log) {

        var service = {
            parse: parse
        };

        return service;

        function parse(header) {
            if (header && header.length === 0) {
                throw new Error('input must not be of zero length');
            }
            if (header && header.length > 0) {
                // Split parts by comma
                var parts = header.split(',');
                var links = {};
                // Parse each part into a named link
                angular.forEach(parts, function(p) {
                    var section = p.split('>;');
                    if (section.length !== 2) {
                        throw new Error('section could not be split on ">;"');
                    }
                    var url = section[0].replace(/<(.*)/, '$1').trim();
                    var queryString = {};
                    url.replace(
                        new RegExp('([^?=&]+)(=([^&]*))?', 'g'),
                        function($0, $1, $2, $3) {
                            queryString[$1] = $3;
                        }
                    );
                    var page = queryString.page;
                    if (angular.isString(page)) {
                        page = parseInt(page);
                    }
                    var name = section[1].replace(/rel="(.*)"/, '$1').trim();
                    links[name] = page;
                });
                return links;
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('PaginationUtil', PaginationUtil);

    PaginationUtil.$inject = ['$log'];

    function PaginationUtil($log) {

        var service = {
            parseAscending: parseAscending,
            parsePage: parsePage,
            parsePredicate: parsePredicate,
            isLastPage: isLastPage
        };

        return service;

        function parseAscending(sort) {
            var sortArray = sort.split(',');
            if (sortArray.length > 1) {
                return sort.split(',').slice(-1)[0] === 'asc';
            } else {
                // default to true if no sort defined
                return true;
            }
        }

        // query params are strings, and need to be parsed
        function parsePage(page) {
            return parseInt(page);
        }

        // sort can be in the format `id,asc` or `id`
        function parsePredicate(sort) {
            var sortArray = sort.split(',');
            if (sortArray.length > 1) {
                sortArray.pop();
            }
            return sortArray.join(',');
        }

        function isLastPage(pageInfo) {
            $log.log(pageInfo.pageNumber + ":" + (pageInfo.nextPageNumber));
            return pageInfo.nextPageNumber == -1;
        }
    }
})();

(function() {
    'use strict';

    var jhiItemCount = {
        template: '<div class="info" data-translate="global.item-count" ' +
            'translate-value-first="{{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}}" ' +
            'translate-value-second="{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}}" ' +
            'translate-value-total="{{$ctrl.queryCount}}">' +
            'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +
            '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +
            'of {{$ctrl.queryCount}} items.' +
            '</div>',
        bindings: {
            page: '<',
            queryCount: '<total',
            itemsPerPage: '<'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('jhiItemCount', jhiItemCount);
})();

(function() {
    /*jshint bitwise: false*/
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('FlightUtils', FlightUtils);

    FlightUtils.$inject = ['$log', '$uibModal', '$translate', '$state', 'DataService', 'TRANS_TIME_OUT', 'DialogService', 'GlobalSrv'];

    function FlightUtils($log, $uibModal, $translate, $state, DataService, TRANS_TIME_OUT, DialogService, GlobalSrv) {

        var service = {
            convertBookingToVM: convertBookingToVM
        };

        return service;


        function convertBookingToVM(result) {

            var vm = {};
            vm.returnBookingModel = {};
            vm.searchOptions = {};

            if (result && result.bookingInfo) {
                vm.bjson = result;

                vm.bookingModel = result.bookingInfo;

                var obj = result;

                // Process contacts view
                var contactInfos = [];
                if (obj.bookingInfo && obj.bookingInfo.contactInfos) {
                    angular.forEach(obj.bookingInfo.contactInfos, function(value, key) {
                        var c = value;

                        contactInfos.push({
                            "ciGender": c.gender,
                            "ciEmail": c.email,
                            "ciName": c.surName,
                            "ciFName": c.firstName,
                            "ciMobileCode": c.phoneCode1,
                            "ciMobile": c.phoneNumber1
                        });
                    });
                }

                obj.contacts = contactInfos;

                // Process customer view
                var customerInfos = [];
                if (obj.travelerInfo && obj.travelerInfo.airTravelers) {
                    angular.forEach(obj.travelerInfo.airTravelers, function(value, key) {
                        var c = value;

                        // var cardType;
                        // var cardNumber;
                        // if (c.memberCards && c.memberCards[0]) {
                        //     cardType = c.memberCards[0].cardType;
                        //     cardNumber = c.memberCards[0].cardNumber;
                        // }

                        var customer = {
                            /* passport info */
                            "cuPp": "Passport",
                            "cuId": c.passport.passportNumber,
                            "cuExpiredDate": c.passport.expiryDate,
                            "cuNationality": c.passport.country,
                            /* passenger info */
                            "type": c.passengerType,
                            "cuName": c.passengerName.firstName,
                            "cuFamilyName": c.passengerName.lastName,
                            "cuGender": c.passengerName.title,
                            //"cuDob": new Date(c.dateOfBirth * 1000),
                            "cuDob": c.dateOfBirth,
                            "cuCardType": c.frequentFlyerType,
                            "cuCardNo": c.frequentFlyerNumber,
                            "ssrRequest": c.specialServiceRequest
                        };

                        if (c.specialServiceRequest && c.specialServiceRequest.ssrItems) {
                            customer.departServiceRequests = [];
                            customer.returnServiceRequests = [];

                            angular.forEach(c.specialServiceRequest.ssrItems, function(ssr) {
                                if (ssr.direction == 'DEPARTURE') {
                                    var tmp = ssr;
                                    customer.departServiceRequests.push(tmp);
                                } else if (ssr.direction == 'RETURN') {
                                    var tmp = ssr;
                                    customer.returnServiceRequests.push(tmp);
                                }
                            });
                        }


                        customerInfos.push(customer);

                    });
                }

                obj.customers = customerInfos;

                // Process tax view
                obj.biCompany = vm.bookingModel.taxCompanyName;
                obj.biMst = vm.bookingModel.taxNumber;
                obj.biMobile = vm.bookingModel.taxAddress2;
                obj.biAddress = vm.bookingModel.taxAddress1;

                // process payment view
                obj.departPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];
                obj.departGroupItem = obj.groupPricedItineraries[0];

                vm.searchOptions.searchType = 'oneway';

                if ((obj.groupPricedItineraries && obj.groupPricedItineraries[1])) {
                    obj.returnGroupItem = obj.groupPricedItineraries[1];
                    obj.returnPricedItinerary = obj.groupPricedItineraries[1].pricedItineraries[0];

                    vm.searchOptions.searchType = 'roundtrip';
                } else if (obj.groupPricedItineraries[0].pricedItineraries[0].directionInd == 'RETURN') {
                    obj.returnGroupItem = obj.groupPricedItineraries[0];
                    obj.returnPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];

                    vm.searchOptions.searchType = 'roundtrip';
                }

                // Process flight view
                if (obj.departGroupItem.flightType == 'INTERNATIONAL') {
                    vm.searchOptions.dtype = 'international';
                    //vm.bookingModel.dtype = 'international';

                    // Convert for view details -- DEPART
                    vm.flightModel = {};
                    vm.bookingModel.checkIn = new Date(obj.departPricedItinerary.originDestinationOptions[0].originDateTime);
                    vm.bookingModel.checkOut = new Date(obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime);
                    vm.bookingModel.noOfTransit = obj.departPricedItinerary.originDestinationOptions[0].flightSegments.length;
                    vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                    vm.bookingModel.airline = obj.departGroupItem.airline;
                    vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                    vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                    vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                    vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                    vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                    vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                    vm.bookingModel.flightIdx = 1;
                    vm.bookingModel.searchType = vm.searchOptions.searchType;
                    vm.bookingModel.booking = {};
                    vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                    vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
                    // vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;


                    // Convert for view details -- RETURN
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    if (obj.returnPricedItinerary && obj.returnGroupItem) {
                        vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                        vm.returnBookingModel.checkIn = new Date(obj.returnPricedItinerary.originDestinationOptions[1].originDateTime);
                        vm.returnBookingModel.checkOut = new Date(obj.returnPricedItinerary.originDestinationOptions[1].destinationDateTime);
                        vm.returnBookingModel.noOfTransit = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments.length;
                        vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                        vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                        vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                        vm.returnBookingModel.originLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].originLocationCode;
                        vm.returnBookingModel.destinationLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].destinationLocationCode;
                        vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[1].journeyDuration;
                        vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName;
                        vm.returnBookingModel.flightIdx = 2;
                        vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                        vm.returnBookingModel.booking = {};
                        vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                        vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments;
                        vm.returnBookingModel.passengerNameRecords = vm.bookingModel.passengerNameRecords;
                    }

                } else {
                    vm.searchOptions.dtype = 'domestic';

                    // Convert for view details -- DEPART
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    vm.bookingModel.checkIn = new Date(obj.departPricedItinerary.originDestinationOptions[0].originDateTime);
                    vm.bookingModel.checkOut = new Date(obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime);
                    vm.bookingModel.noOfTransit = 1;
                    vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                    vm.bookingModel.airline = obj.departGroupItem.airline;
                    vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                    vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                    vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                    vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                    vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                    vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                    vm.bookingModel.flightIdx = 1;
                    vm.bookingModel.searchType = vm.searchOptions.searchType;
                    vm.bookingModel.booking = {};
                    vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                    vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;

                    // Convert for view details -- RETURN
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    if (obj.returnPricedItinerary && obj.returnGroupItem) {
                        vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                        vm.returnBookingModel.checkIn = new Date(obj.returnPricedItinerary.originDestinationOptions[0].originDateTime);
                        vm.returnBookingModel.checkOut = new Date(obj.returnPricedItinerary.originDestinationOptions[0].destinationDateTime);
                        vm.returnBookingModel.noOfTransit = 1;
                        vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                        vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                        vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                        vm.returnBookingModel.originLocationCode = obj.returnGroupItem.originLocationCode;
                        vm.returnBookingModel.destinationLocationCode = obj.returnGroupItem.destinationLocationCode;
                        vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[0].journeyDuration;
                        vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                        vm.returnBookingModel.flightIdx = 2;
                        vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                        vm.returnBookingModel.booking = {};
                        vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                        vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments;
                        vm.returnBookingModel.passengerNameRecords = vm.bookingModel.passengerNameRecords;
                    }
                }

                // bind to view
                vm.orgBookingModel = obj;

                /* +++ 05Nov2017-Tung: add pricing for summary */
                var departItinTotalFare = vm.orgBookingModel.departPricedItinerary.airItineraryPricingInfo.itinTotalFare;
                var returnItinTotalFare = {};

                if (vm.orgBookingModel.returnPricedItinerary && vm.orgBookingModel.returnPricedItinerary.airItineraryPricingInfo) {
                    returnItinTotalFare = vm.orgBookingModel.returnPricedItinerary.airItineraryPricingInfo.itinTotalFare;
                }
                vm.orgBookingModel.departItinTotalFare = departItinTotalFare;
                vm.orgBookingModel.returnItinTotalFare = returnItinTotalFare;
                vm.orgBookingModel.isPerBookingType = vm.bjson.isPerBookingType;
                /* --- 05Nov2017-Tung */

                return vm;
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('DateUtils', DateUtils);

    DateUtils.$inject = ['$log', '$filter'];

    function DateUtils($log, $filter) {

        var service = {
            convertDateTimeFromServer: convertDateTimeFromServer,
            convertLocalDateFromServer: convertLocalDateFromServer,
            convertLocalDateToServer: convertLocalDateToServer,

            convertZoneDateToServer: convertZoneDateToServer,
            convertZoneDateFromServer: convertZoneDateFromServer,

            dateformat: dateformat,
            getDayAgo: getDayAgo,

            getDayAgoInDefaultFormat: getDayAgoInDefaultFormat,
            getDayAgoFromBaseInDefaultFormat: getDayAgoFromBaseInDefaultFormat,

            getYearAgoFromBasePlusDaysInDefaultFormat: getYearAgoFromBasePlusDaysInDefaultFormat,
            getYearAgoFromBaseMinusDaysInDefaultFormat: getYearAgoFromBaseMinusDaysInDefaultFormat,
            getYearAgoInDefaultFormat: getYearAgoInDefaultFormat,
            getYearAgoFromBaseInDefaultFormat: getYearAgoFromBaseInDefaultFormat,

            getMonthAgoFromBaseInDefaultFormat: getMonthAgoFromBaseInDefaultFormat,
            getMonthAgoFromBasePlusDaysInDefaultFormat: getMonthAgoFromBasePlusDaysInDefaultFormat,

            timeDiff: timeDiff
        };

        return service;

        function convertDateTimeFromServer(date) {
            if (date) {
                return new Date(date);
            } else {
                return null;
            }
        }

        function convertLocalDateFromServer(date) {
            if (date) {
                var dateString = date.split('-');
                return new Date(dateString[0], dateString[1] - 1, dateString[2]);
            }
            return null;
        }

        function convertLocalDateToServer(date) {
            if (date) {
                return $filter('date')(date, 'yyyy-MM-dd');
            } else {
                return null;
            }
        }

        // IN USED
        function convertZoneDateToServer(date) {
            return moment(date, 'DD-MM-YYYY').format('YYYY-MM-DD') + "T00:00:00.000Z";
        }

        function convertZoneDateFromServer(date) {
            return moment(date).format('DD-MM-YYYY');
        }

        function dateformat() {
            return 'yyyy-MM-dd';
        }

        function timeDiff(fromDate, toDate) {
            var fr = new Date(fromDate);
            var to = new Date(toDate);
            return to - fr;
        }

        function getDayAgo(b) {
            var a = new Date();
            a.setDate(a.getDate() - b);
            return a;
        }

        function getDayAgoFromBase(from, b) {
            var fsmoment = moment.utc(from);
            return fsmoment.subtract(b, 'days');
        }

        function getDayAgoInDefaultFormat(b) {
            return moment(getDayAgo(b)).format('YYYY-MM-DD');
        }

        function getDayAgoFromBaseInDefaultFormat(fromDate, b) {
            return getDayAgoFromBase(fromDate, b).format('YYYY-MM-DD');
        }

        function getYearAgoInDefaultFormat(b) {
            var fsmoment = moment.utc(new Date());
            if (b >= 0) {
                return moment(fsmoment.subtract(b, "years")).format('YYYY-MM-DD');
            } else {
                return moment(fsmoment.add(-b, "years")).format('YYYY-MM-DD');
            }

        }

        function getYearAgoFromBaseInDefaultFormat(fromDate, b) {
            var fsmoment = moment.utc(fromDate);
            if (b >= 0) {
                return moment(fsmoment.subtract(b, "years")).format('YYYY-MM-DD');
            } else {
                return moment(fsmoment.add(-b, "years")).format('YYYY-MM-DD');
            }
        }

        function getMonthAgoFromBaseInDefaultFormat(fromDate, b) {
            var fsmoment = moment.utc(fromDate);
            if (b >= 0) {
                return moment(fsmoment.subtract(b, "months")).format('YYYY-MM-DD');
            } else {
                return moment(fsmoment.add(-b, "months")).format('YYYY-MM-DD');
            }
        }

        function getYearAgoFromBasePlusDaysInDefaultFormat(fromDate, b, deltaDays) {
            var fsmoment = moment.utc(fromDate);
            if (b >= 0) {
                return moment(fsmoment.subtract(b, "years").add(deltaDays, 'days')).format('YYYY-MM-DD');
            } else {
                return moment(fsmoment.add(-b, "years").add(deltaDays, 'days')).format('YYYY-MM-DD');
            }
        }

        function getYearAgoFromBaseMinusDaysInDefaultFormat(fromDate, b, deltaDays) {
            var fsmoment = moment.utc(fromDate);
            if (b >= 0) {
                return moment(fsmoment.subtract(b, "years").subtract(deltaDays, 'days')).format('YYYY-MM-DD');
            } else {
                return moment(fsmoment.add(-b, "years").subtract(deltaDays, 'days')).format('YYYY-MM-DD');
            }
        }

        function getMonthAgoFromBasePlusDaysInDefaultFormat(fromDate, b, deltaDays) {
            var fsmoment = moment.utc(fromDate);
            if (b >= 0) {
                return moment(fsmoment.subtract(b, "months").add(deltaDays, 'days')).format('YYYY-MM-DD');
            } else {
                return moment(fsmoment.add(-b, "months").add(deltaDays, 'days')).format('YYYY-MM-DD');
            }
        }

    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('DataUtils', DataUtils);

    DataUtils.$inject = ['$log', '$window', 'AuthServerProvider'];

    function DataUtils($log, $window, AuthServerProvider) {

        var service = {
            abbreviate: abbreviate,
            byteSize: byteSize,
            openFile: openFile,
            toBase64: toBase64,
            ibeOpenWindow: ibeOpenWindow
        };

        return service;

        function abbreviate(text) {
            if (!angular.isString(text)) {
                return '';
            }
            if (text.length < 30) {
                return text;
            }
            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';
        }

        function byteSize(base64String) {
            if (!angular.isString(base64String)) {
                return '';
            }

            function endsWith(suffix, str) {
                return str.indexOf(suffix, str.length - suffix.length) !== -1;
            }

            function paddingSize(base64String) {
                if (endsWith('==', base64String)) {
                    return 2;
                }
                if (endsWith('=', base64String)) {
                    return 1;
                }
                return 0;
            }

            function size(base64String) {
                return base64String.length / 4 * 3 - paddingSize(base64String);
            }

            function formatAsBytes(size) {
                return size.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' bytes';
            }

            return formatAsBytes(size(base64String));
        }

        /**
         *
         * @param type
         * @param data
         */
        function openFile(type, data) {
            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');
        }

        /**
         *
         * @param url
         * @param token
         */
        function ibeOpenWindow(url) {
            try {
                var tokenKey = angular.element('#token_key');
                tokenKey[0].value = AuthServerProvider.getToken();;

                var form = angular.element('#newibe_open_window_form');
                form[0].action = url;

                form[0].submit();
            } catch (e) {
                $log.log("-----ibeOpenWindow=" + e);
            }
        }

        /**
         *
         * @param file
         * @param cb
         */
        function toBase64(file, cb) {
            var fileReader = new FileReader();
            fileReader.readAsDataURL(file);
            fileReader.onload = function(e) {
                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);
                cb(base64Data);
            };
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('capitalize', capitalize);

    capitalize.$inject = ['$log'];

    function capitalize($log) {
        return capitalizeFilter;

        function capitalizeFilter(input) {
            // if (input) {
            //     input = input.toLowerCase();
            //     input = input.substring(0, 1).toUpperCase() + input.substring(1);
            // }
            // return input;
            return (input) ? input.split(' ').map(function(wrd) {
                return wrd.charAt(0).toUpperCase() + wrd.substr(1).toLowerCase();
            }).join(' ') : '';

        }
    }
})();

(function() {
    /*jshint bitwise: false*/
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('Base64', Base64);

    Base64.$inject = ['$log'];

    function Base64($log) {
        var keyStr = 'ABCDEFGHIJKLMNOP' +
            'QRSTUVWXYZabcdef' +
            'ghijklmnopqrstuv' +
            'wxyz0123456789+/' +
            '=';

        var service = {
            decode: decode,
            decodeJson: decodeJson,
            decodeString: decodeString,
            encode: encode,
            encodeJson: encodeJson,
            encodeString: encodeString
        };

        return service;

        /**
         *
         * @param str
         * @returns {string}
         */
        function encode(str) {
            return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
                function toSolidBytes(match, p1) {
                    return String.fromCharCode('0x' + p1);
                }));
        }

        /**
         *
         * @param objJson
         * @returns {string}
         */
        function encodeJson(objJson) {
            try {
                return encode(JSON.stringify(objJson));
            } catch (err) {
                $log.log("encodeJson - err: " + err);
            }
            return "";
        }

        /**
         *
         * @param str
         * @returns {string}
         */
        function encodeString(str) {
            try {
                return encode(str);
            } catch (err) {
                $log.log("encodeString - err: " + err);
            }
            return "";
        }

        /**
         *
         * @param str
         * @returns {string}
         */
        function decode(str) {
            // Going backwards: from bytestream, to percent-encoding, to original string.
            return decodeURIComponent(atob(str).split('').map(function(c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));
        }

        /**
         *
         * @param base64Json
         * @returns {*}
         */
        function decodeJson(base64Json) {
            try {
                return JSON.parse(decode(base64Json));
            } catch (err) {
                $log.log("decodeJson - err: " + err);
            }
            return {};
        }

        /**
         *
         * @param base64String
         * @returns {string}
         */
        function decodeString(base64String) {
            try {
                return decode(base64String);
            } catch (err) {
                $log.log("decodeString - err: " + err);
            }
            return "";
        }
    }
})();

(function() {
    'use strict';

    gtdProfileUserInfoController.$inject = ['$log', '$scope', '$cookies', '$uibModal', 'MetaData', 'GlobalSrv', 'DialogService', 'LIMIT_WIDTH', 'LIMIT_HEIGHT'];

    function gtdProfileUserInfoController($log, $scope, $cookies, $uibModal, MetaData, GlobalSrv, DialogService, LIMIT_WIDTH, LIMIT_HEIGHT) {
        var ctrl = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        $log.log("$ctrl.profileModel.mode=" + ctrl.profileModel.mode);
        $log.log("$ctrl.profileModel.socialUser=" + ctrl.profileModel.socialUser);

        ctrl.allCountries = GlobalSrv.getAllCountries();
        ctrl.allLookups = GlobalSrv.getAllLookups();

        ctrl.titleLookups = [];

        if (ctrl.allCountries == [] || ctrl.allCountries.length == 0) {
            MetaData.getCountries().then(function success(result) {
                ctrl.allCountries = result;
            });
        }

        if (ctrl.allLookups == [] || ctrl.allLookups.length == 0) {
            MetaData.searchLookups('', '', true).then(function success(result) {
                ctrl.allLookups = result;
            });
        }

        // 219-VY scroll
        $("#button").click(function() {
            $('html, body').animate({
                scrollTop: $("#action-bar-mobile").offset().top
            }, 1000);
        });

        MetaData.searchLookups('ota_customer', 'passenger_gender').then(function success(result) {
            ctrl.titleLookups = [];

            angular.forEach(result, function(item) {
                // $log.log(item.lookupValue);
                if (!(ctrl.profileModel.type == 'traveller')) {
                    if (item.lookupValue == 'MALE' || item.lookupValue == 'FEMALE') {
                        ctrl.titleLookups.push(item);
                    }
                } else {
                    ctrl.titleLookups.push(item);
                }

            });

        });

        ctrl.edit = function() {
            ctrl.profileModel.mode = 'edit';
        };
        ctrl.validAvatar = 0;

        ctrl.selectImage = function() {
            var select = document.getElementById('fileAvatar');
            select.click();
        };

        ctrl.setAvatar = function($file) {
            var reader = new FileReader();
            reader.onload = ctrl.imageIsLoaded;
            reader.readAsDataURL($file);

        };
        ctrl.imageIsLoaded = function(e) {
            $scope.$apply(function() {
                var img = new Image();
                img.src = (e.target.result);
                if (!ctrl.profileModel.avatar) {
                    ctrl.profileModel.avatar = {
                        avatarImage: "",
                        avatarImageContentType: "",
                        profileId: ctrl.shortProfile.id,
                        inUsed: true
                    };
                }
                img.onload = function() {
                    if (this.width > LIMIT_WIDTH) {
                        var imgNew = imageToDataUri(this, LIMIT_WIDTH, LIMIT_HEIGHT).split("data:image/png;base64,")[1];
                        $scope.$apply(function() {
                            ctrl.profileModel.avatar.avatarImage = imgNew;
                            ctrl.profileModel.avatar.avatarImageContentType = "image/png";
                            ctrl.profileModel.avatar.profileId = ctrl.shortProfile.id;
                            ctrl.profileModel.avatar.inUsed = true;

                        });
                    }
                };
            });
        };

        function imageToDataUri(img, width, height) {

            // create an off-screen canvas
            var canvas = document.createElement('canvas'),
                ctx = canvas.getContext('2d');

            // set its dimension to target size
            canvas.width = width;
            canvas.height = height;

            // draw source image into the off-screen canvas:
            ctx.drawImage(img, 0, 0, width, height);

            // encode image to data-uri with base64 version of compressed image
            return canvas.toDataURL();
        }

        ctrl.addPhoneNumber = function() {
            if (ctrl.profileModel.phoneNumbers.length >= 5) {
                var error = {
                    "title": "Error",
                    "message": "Bạn không được nhập quá 5 số điện thoại!"
                };
                DialogService.openAlertDialog(error);
                return;
            } else {
                ctrl.profileModel.phoneNumbers.push({
                    text: ''
                });
            }
        };

        ctrl.removePhoneNumber = function(index) {
            ctrl.profileModel.phoneNumbers.splice(index, 1);
        };

        ctrl.changePass = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/account/password/password.dialog.html',
                controller: 'PasswordDialogController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

    }

    var gtdProfileUserInfo = {
        require: {
            form: '^^form'
        },
        templateUrl: 'app/components/profile/profile-user-info.html',
        controller: gtdProfileUserInfoController,
        bindings: {
            profileModel: '=',
            shortProfile: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdProfileUserInfo', gtdProfileUserInfo);

})();

(function() {
    'use strict';

    gtdProfileMenuController.$inject = ['$log', '$scope', '$state', 'Principal', 'MetaData'];

    function gtdProfileMenuController($log, $scope, $state, Principal, MetaData) {
        var ctrl = this;

        ctrl.$state = $state;

        $log.log("++++++ gtdProfileMenuController - profileModel");
        //$log.log("data=" + JSON.stringify(ctrl.profileModel));
        $log.log("data=" + ctrl.profileModel);

        Principal.identity().then(function(user) {
            ctrl.identity = user;
            // do something with data only inside this inner function
            //$log.log("+++++ gtdProfileMenuController - vm.identity = " + JSON.stringify(user));
            $log.log("+++++ gtdProfileMenuController - vm.identity = " + user);
        });

        ctrl.initControl = function() {
            // Init tabs
            $('.nav-tabs a').click(function(e) {
                e.preventDefault();
                $(this).tab('show');
            });
        };

        ctrl.initControl();

    }

    var gtdProfileMenu = {
        templateUrl: 'app/components/profile/profile-menu.html',
        controller: gtdProfileMenuController,
        bindings: {
            profileModel: '='
        },
        resolve: {
            translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                $translatePartialLoader.addPart('global');
                return $translate.refresh();
            }]
        }
    };



    angular
        .module('B2B2CGatewayApp')
        .component('gtdProfileMenu', gtdProfileMenu);

})();

(function() {
    'use strict';

    gtdProfileInvoiceInfoController.$inject = ['$log', '$scope', 'MetaData'];

    function gtdProfileInvoiceInfoController($log, $scope, MetaData) {
        var ctrl = this;

        ctrl.edit = function() {
            ctrl.profileModel.mode = 'edit';
        };
    }

    var gtdProfileInvoiceInfo = {
        require: {
            form: '^^form'
        },
        templateUrl: 'app/components/profile/profile-invoice-info.html',
        controller: gtdProfileInvoiceInfoController,
        bindings: {
            profileModel: '=',
            shortProfile: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdProfileInvoiceInfo', gtdProfileInvoiceInfo);

})();

(function() {
    'use strict';

    gtdProfileDocInfoController.$inject = ['$log', '$scope', 'MetaData', 'GlobalSrv', 'DialogService', '$uibModal'];

    function gtdProfileDocInfoController($log, $scope, MetaData, GlobalSrv, DialogService, $uibModal) {
        var ctrl = this;

        ctrl.cardTypeLookups = [];
        ctrl.passportTypeLookups = [];

        ctrl.allCountries = GlobalSrv.getAllCountries();

        MetaData.searchLookups('air_member_card', '').then(function success(result) {
            ctrl.cardTypeLookups = result;
        });

        MetaData.searchLookups('ota_customer', 'passport_type').then(function success(result) {
            ctrl.passportTypeLookups = [];

            angular.forEach(result, function(item) {
                if (item.lookupValue == 'PP') {
                    ctrl.passportTypeLookups.push(item);
                }
            });
        });

        ctrl.edit = function() {
            ctrl.profileModel.mode = 'edit';
        };

        ctrl.addMoreCard = function(item) {

            ctrl.profileModel.editMemberCards.push({
                "cardType": '',
                "cardNumber": ''
            });

            return;

        };

        ctrl.removeCard = function(item) {

            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                backdrop: 'static',
                templateUrl: 'app/account/profile/profile.membercard.delete.html',
                controller: 'ProfileMemberCardDeleteController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }],
                    profileModel: function() {
                        return ctrl.profileModel;
                    },
                    item: function() {
                        return item;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );

        };

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.removeEditMemberCards = function(index) {
            ctrl.profileModel.editMemberCards.splice(index, 1);
        };
    }

    var gtdProfileDocInfo = {
        require: {
            form: '^^form'
        },
        templateUrl: 'app/components/profile/profile-doc-info.html',
        controller: gtdProfileDocInfoController,
        bindings: {
            profileModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdProfileDocInfo', gtdProfileDocInfo);

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('LoginService', LoginService);

    LoginService.$inject = ['$log', '$uibModal', 'AuthServerProvider', 'Principal', '$rootScope'];

    function LoginService($log, $uibModal, AuthServerProvider, Principal, $rootScope) {
        var service = {
            open: open
        };

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        return service;

        function openModal() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'app/components/login/login.html',
                controller: 'LoginController',
                windowClass: 'login-modal-window',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('login');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        }

        function open() {
            var token = AuthServerProvider.getToken();
            $log.log(token);
            if (token) {
                // AuthServerProvider.loginWithToken(token, false).then(function () {
                Principal.identity(true).then(function() {
                    var isAuthenticated = Principal.isAuthenticated();
                    if (isAuthenticated) {
                        $rootScope.$broadcast('authenticationSuccess');
                    } else {
                        openModal();
                    }
                });
                // });
            } else {
                openModal();
            }

        }


    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('LoginController', LoginController);

    LoginController.$inject = ['$log', '$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance', 'RegisterService'];

    function LoginController($log, $rootScope, $state, $timeout, Auth, $uibModalInstance, RegisterService) {
        var vm = this;

        vm.authenticationError = false;
        vm.cancel = cancel;
        vm.credentials = {};
        vm.login = login;
        vm.password = null;
        vm.register = register;
        vm.rememberMe = true;
        vm.requestResetPassword = requestResetPassword;
        vm.username = null;
        vm.language = "vi";
        vm.parent = $uibModalInstance;
        $timeout(function() {
            angular.element('#username').focus();
        });

        function cancel() {
            vm.credentials = {
                username: null,
                password: null,
                rememberMe: true
            };
            vm.authenticationError = false;
            $uibModalInstance.dismiss('cancel');
        }

        function login(event) {
            event.preventDefault();
            Auth.login({
                username: vm.username,
                password: vm.password,
                rememberMe: vm.rememberMe
            }).then(function() {
                vm.authenticationError = false;
                $uibModalInstance.close();
                if ($state.current.name === 'register' || $state.current.name === 'activate' ||
                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {
                    $state.go('home');
                }

                $rootScope.$broadcast('authenticationSuccess');

                // previousState was set in the authExpiredInterceptor before being redirected to login modal.
                // since login is successful, go to stored previousState and clear previousState
                if (Auth.getPreviousState()) {
                    var previousState = Auth.getPreviousState();
                    Auth.resetPreviousState();
                    $state.go(previousState.name, previousState.params);
                }
            }).catch(function() {
                vm.authenticationError = true;
            });
        }

        function register() {
            $uibModalInstance.dismiss('cancel');
            // $state.go('register');
            RegisterService.open();
        }

        function requestResetPassword() {
            $uibModalInstance.dismiss('cancel');
            $state.go('requestReset');
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('OtaLanguageService', OtaLanguageService);

    OtaLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];

    function OtaLanguageService($q, $http, $translate, LANGUAGES) {
        var service = {
            getAll: getAll,
            getCurrent: getCurrent
        };

        return service;

        function getAll() {
            var deferred = $q.defer();
            deferred.resolve(LANGUAGES);
            return deferred.promise;
        }

        function getCurrent() {
            var deferred = $q.defer();
            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');

            deferred.resolve(language);

            return deferred.promise;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('findLanguageFromKey', findLanguageFromKey)
        .filter('findLanguageRtlFromKey', findLanguageRtlFromKey);

    var languages = {
        'en': {
            name: 'English'
        },
        'vi': {
            name: 'Tiếng Việt'
        }
        // jhipster-needle-i18n-language-key-pipe - JHipster will add/remove languages in this object
    };

    function findLanguageFromKey() {
        return findLanguageFromKeyFilter;

        function findLanguageFromKeyFilter(lang) {
            return languages[lang].name;
        }
    }

    function findLanguageRtlFromKey() {
        return findLanguageRtlFromKeyFilter;

        function findLanguageRtlFromKeyFilter(lang) {
            return languages[lang].rtl;
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('OtaLanguageController', OtaLanguageController);

    OtaLanguageController.$inject = ['$translate', 'OtaLanguageService', 'tmhDynamicLocale'];

    function OtaLanguageController($translate, OtaLanguageService, tmhDynamicLocale) {
        var vm = this;

        vm.changeLanguage = changeLanguage;
        vm.languages = null;

        OtaLanguageService.getAll().then(function(languages) {
            vm.languages = languages;
        });

        function changeLanguage(languageKey) {
            $translate.use(languageKey);
            tmhDynamicLocale.set(languageKey);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')

        /*
         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
         They are written in English to avoid character encoding issues (not a perfect solution)
         */
        .constant('LANGUAGES', [
            'vi',
            'en'
            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array
        ]);
})();

(function() {
    'use strict';

    gtdHotelSearchResultCell2Controller.$inject = ['$log', '$scope', '$state', '$uibModal', 'MetaData', 'Hotel', 'DataService'];

    function gtdHotelSearchResultCell2Controller($log, $scope, $state, $uibModal, MetaData, Hotel, DataService) {
        var ctrl = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.bookingClicked = function(item) {
            // ctrl.currentItem = item;
            DataService.setSelectedHotel(item);

            $state.go('hotel-detail');
        };

        ctrl.openFullMap = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/components/hotel/hotel-detail-map-full.html',
                controller: 'HotelDetailMapFullController',
                controllerAs: 'vm',
                windowClass: 'hotel-detail-map-full-window',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

    }

    var gtdHotelSearchResultCell2 = {
        templateUrl: 'app/components/hotel/hotel-search-result-cell-2.html',
        controller: gtdHotelSearchResultCell2Controller,
        bindings: {
            searchResult: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelSearchResultCell2', gtdHotelSearchResultCell2);

})();

(function() {
    'use strict';

    gtdHotelSearchResultCellController.$inject = [
        '$log', '$scope', '$state', '$uibModal',
        'MetaData', 'HotelUtils', 'Hotel', 'DataService', 'GlobalSrv', 'DialogService', 'Base64', 'GtdHotelService',
        '$window'
    ];

    function gtdHotelSearchResultCellController(
        $log, $scope, $state, $uibModal,
        MetaData, HotelUtils, Hotel, DataService, GlobalSrv, DialogService, Base64, GtdHotelService,
        $window
    ) {
        var ctrl = this;
        ctrl.resetModal = resetModal;

        ctrl.modalInstance = null;

        function resetModal() {
            ctrl.modalInstance = null;
        }

        ctrl.openMapPlaceAround = openMapPlaceAround;

        HotelUtils.getFacilities(ctrl.item);
        localStorage.setItem('ctrl.item.supplierSessionId', ctrl.item.supplierSessionId);
        if (ctrl.item && ctrl.item.products[0] && ctrl.item.products[0].promo && ctrl.item.products[0].promoDescription) {
            ctrl.item.products[0].promoPercen = ctrl.item.products[0].promoDescription.match(new RegExp("\\d+%", 'g'));
        }


        ctrl.getFacility = function(fac) {
            return HotelUtils.getFacilityClass(fac);
        };

        ctrl.bookingClicked = function(item) {
            GtdHotelService.goToDetail(item);

        };

        function openMapPlaceAround() {
            if (ctrl.modalInstance !== null) return;
            DataService.setHotelSearchOptions(ctrl.searchOptions);
            ctrl.modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/components/hotel/hotel-place-around.html',
                controller: 'HotelPlaceAroundController',
                controllerAs: 'vm',
                windowClass: 'hotel-detail-map-full-window',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        return $translate.refresh();
                    }],
                    selectedHotel: function() {
                        return ctrl.item;
                    }
                }
            });
            ctrl.modalInstance.result.then(
                ctrl.resetModal,
                ctrl.resetModal
            );
        }
    }

    var gtdHotelSearchResultCell = {
        templateUrl: 'app/components/hotel/hotel-search-result-cell.html',
        controller: gtdHotelSearchResultCellController,
        bindings: {
            item: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelSearchResultCell', gtdHotelSearchResultCell);

})();

(function() {
    'use strict';

    gtdHotelSearchResultController.$inject = [
        '$uibModal', '$rootScope', 'GtdHotelService', 'HOTEL_STATES'
    ];

    function gtdHotelSearchResultController(
        $uibModal, $rootScope, GtdHotelService, HOTEL_STATES
    ) {
        var ctrl = this;
        ctrl.hotelStates = GtdHotelService.getStates();
        ctrl.selectedDestination = GtdHotelService.getSelectedDestination();

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.searchOptions = GtdHotelService.getSearchOptions();

        ctrl.paxSummary = GtdHotelService.getPaxSummary();

        angular.forEach(ctrl.searchResult.hotels, function(item) {
            if (item.hotelMeta) {
                item.hotelContent = item.hotelMeta;
            }
        });

        ctrl.listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
            if (!newValue) {
                return;
            }
            switch (newValue.state) {
                case ctrl.hotelStates.HOTEL_ADVANCE_SEARCH_CHANGED:
                    ctrl.searchOptions = GtdHotelService.getSearchOptions();
                    break;
                default:
                    break;
            }
        });

        ctrl.openFullMap = function() {
            if (modalInstance !== null) return;

            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/components/hotel/hotel-detail-map-full.html',
                controller: 'HotelDetailMapFullController',
                controllerAs: 'vm',
                windowClass: 'hotel-detail-map-full-window',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        return $translate.refresh();
                    }],
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

    }

    var gtdHotelSearchResult = {
        templateUrl: 'app/components/hotel/hotel-search-result.html',
        controller: gtdHotelSearchResultController,
        bindings: {
            searchResult: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelSearchResult', gtdHotelSearchResult);

})();

(function() {
    'use strict';

    gtdHotelSearchHeaderController.$inject = ['$log', '$scope', '$uibModal', '$attrs', 'MetaData', 'Hotel', 'DialogService', 'DataService', 'GlobalSrv', '$timeout', 'DEFAULT_PAGE_SIZE', 'HotelUtils'];

    function gtdHotelSearchHeaderController($log, $scope, $uibModal, $attrs, MetaData, Hotel, DialogService, DataService, GlobalSrv, $timeout, DEFAULT_PAGE_SIZE, HotelUtils) {
        var ctrl = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        if (!ctrl.searchOptions) {
            ctrl.searchOptions = {};
            // Default init
            ctrl.searchOptions.size = DEFAULT_PAGE_SIZE; //15
            ctrl.searchOptions.page = 0;
            ctrl.searchOptions.adultNo = 1;
            // ctrl.searchOptions.checkindate = moment(new Date()).format('MM/DD/YYYY');
            // ctrl.searchOptions.checkoutdate = moment(new Date()).format('MM/DD/YYYY');
            ctrl.searchOptions.pax = [{
                adultNo: 2,
                childrenNo: 0,
                paxDetails: []
            }];
        }

        ctrl.getAdultNumberFromSo = function getAdultNumberFromSo() {
            return HotelUtils.getAdultNumberFromSo(ctrl.searchOptions);
        };

        ctrl.getChildrenNumberFromSo = function getAdultNumberFromSo() {
            return HotelUtils.getChildrenNumberFromSo(ctrl.searchOptions);
        };


        var modalChooseRoomInstance = null;
        var resetModalChooseRoom = function() {
            modalChooseRoomInstance = null;
        };
        ctrl.openChooseRoomDetail = function() {
            if (modalChooseRoomInstance !== null) return;
            modalChooseRoomInstance = $uibModal.open({
                animation: true,
                backdrop: true,
                templateUrl: 'app/hotels/hotel.chooseroom.html',
                controller: 'HotelChooseroomController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    searchOptions: function() {
                        return ctrl.searchOptions;
                    }
                }
            });
            modalChooseRoomInstance.result.then(
                resetModalChooseRoom,
                resetModalChooseRoom
            );
        };

        ctrl.searchDestinations = function(val) {
            return Hotel.searchHotelMetaData(val);
            // return MetaData.searchDestinations(val);
        };

        ctrl.formatLabel = function(model) {
            // Hotel.searchHotelMetaData(model).then(function () {
            //     var airports = GlobalSrv.getLocalDestinations();
            //
            //     for (var idx in airports) {
            //
            //         if (airports[idx].code == model) {
            //             // $log.log(airports[idx].code + ":" + model + ":" + (airports[idx].code == model));
            //             return airports[idx].name;
            //         }
            //     }
            //
            //     return model;
            // });

            // $log.log("formatLabel:" + model);

            var destinations = GlobalSrv.getLocalDestinations();

            for (var idx in destinations) {

                if (destinations[idx].code == model) {
                    // $log.log(airports[idx].code + ":" + model + ":" + (airports[idx].code == model));
                    $log.log('destination = ');
                    $log.log(destinations[idx]);
                    ctrl.searchOptions.destinationType = destinations[idx].type;
                    ctrl.searchOptions.destinationName = destinations[idx].name.split(",")[0];
                    return destinations[idx].name;
                }
            }

            return model;
        };

        ctrl.doSearchImpl = function() {
            // VALIDATION
            if (moment(ctrl.searchOptions.checkindate, 'DD-MM-YYYY').diff(moment(ctrl.searchOptions.checkoutdate, 'DD-MM-YYYY')) > 0) {
                DialogService.openAlertDialog({
                    "title": "Error",
                    "message": "Ngày Trả Phòng phải sau Ngày Nhận Phòng"
                });
                return;
            }

            ctrl.searchOptions.page = 0;
            ctrl.searchOptions.size = DEFAULT_PAGE_SIZE; //15

            // Show Dialogs:
            this.open();

            $log.log("HotelHeaderDirectiveDoSearch: Search Options");
            $log.log(ctrl.searchOptions);

            DataService.setHotelSavedSearchOption(jQuery.extend({}, ctrl.searchOptions));

            var myDataPromise = Hotel.searchHotel(ctrl.searchOptions);
            myDataPromise.then(function(result) {
                ctrl.searchResult = result;

                ctrl.searchOptions.searchId = result.searchId;

                $log.log("Get result from hotel.search.service");
                // $log.log("ctrl.searchResult = " + JSON.stringify(ctrl.searchResult));

                // Do get advance filter options
                Hotel.getAdvanceFilterOptions(ctrl.searchOptions).then(function(result) {
                    ctrl.searchOptions.advanceFilterOptions = result;

                    DataService.setHotelSearchResult(ctrl.searchResult);
                    DataService.setHotelSearchOptions(ctrl.searchOptions);

                    ctrl.doSearch({
                        $searchResult: ctrl.searchResult,
                        $searchOptions: ctrl.searchOptions
                    });
                });

            }, function error(result) {
                DialogService.openHttpAlertDilalog(result);
            });

        };

        ctrl.initControl = function() {};

        ctrl.open = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/hotels/search/hotel.search.loading.html',
                controller: 'HotelSearchLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    searchOptions: function() {
                        return ctrl.searchOptions;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        ctrl.$postLink = function() {
            $timeout(function() {
                ctrl.initControl();
            }, 0);

            if (ctrl.init && !ctrl.searchCompleted) {
                $log.log('+++++++++++++++ SEARCH AGAIN ++++++++++++++++');
                $log.log('ctrl.init:' + ctrl.init + ", ctrl.searchCompleted:" + ctrl.searchCompleted);

                ctrl.doSearchImpl();

                $timeout(function() {
                    ctrl.searchCompleted = true;
                    // $rootScope.$broadcast("gtd-flight-search-header-serch-completed", null);
                }, 100);


            }
        };

        $scope.$on('gtd-hotel-reinit-search', function() {
            $log.log('gtd-hotel-reinit-search');
            ctrl.doSearchImpl();
        });

    }

    var gtdHotelSearchHeader = {
        templateUrl: 'app/components/hotel/hotel-search-header.html',
        controller: gtdHotelSearchHeaderController,
        bindings: {
            init: '=',
            searchCompleted: '=',
            doSearch: '&',
            searchResult: '=?searchResult',
            searchOptions: '=?searchOptions'
        }
    };

    // angular
    //     .module('B2B2CGatewayApp')
    //     .component('gtdHotelSearchHeader', gtdHotelSearchHeader);

})();

(function() {
    'use strict';

    var gtdHotelSearchFooter = {
        templateUrl: 'app/components/hotel/hotel-search-footer.html',
        controller: gtdHotelSearchFooterController
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelSearchFooter', gtdHotelSearchFooter);

    gtdHotelSearchFooterController.$inject = ['$log', '$scope', 'Hotel'];

    function gtdHotelSearchFooterController($log, $scope, Hotel) {
        var ctrl = this;

        ctrl.popularPlaces = Hotel.getPopularPlaces();
        ctrl.popularHotels = Hotel.getPopularHotels();
        ctrl.popularHotels = Hotel.getPopularHotels();

        // vm.alerts = AlertService.get();
        $scope.$on('$destroy', function() {
            ctrl.popularPlaces = [];
            ctrl.popularHotels = [];
            ctrl.popularHotels = [];
        });
    }
})();

(function() {
    'use strict';

    gtdHotelSearchDatePaginatorController.$inject = ['$log', '$scope', 'MetaData', 'Hotel'];

    function gtdHotelSearchDatePaginatorController($log, $scope, MetaData, Hotel) {
        var ctrl = this;

        var slideOpts = {
            "slidesToShow": 5,
            "slidesToScroll": 2,
            infinite: false,
            responsive: [{
                    breakpoint: 1024,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                    }
                },
                {
                    breakpoint: 600,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            ]
        };

        $scope.$on('ngRepeatDateOptionsFinished', function() {
            // alert('on ngRepeatDateOptionsFinished');
            ctrl.initControl();
        });

        $scope.$on('gtd-hotel-search-date-paginator-init', function() {
            // alert('on gtd-hotel-search-date-paginator-init');
            ctrl.dateCarouselArrays = Hotel.getDateAvailableOptions();
            //ctrl.initControl();
        });

        ctrl.initControl = function() {
            // alert('reinit');
            $('.hotel-search-paginator').slick('unslick'); /* ONLY remove the classes and handlers added on initialize */
            $('.my-slide').remove(); /* Remove current slides elements, in case that you want to show   new slides. */
            $('.hotel-search-paginator').slick(slideOpts); /* Initialize the slick again */
        };

        $('.hotel-search-paginator').slick(slideOpts);

    }

    var gtdHotelSearchDatePaginator = {
        templateUrl: 'app/components/hotel/hotel-search-date-paginator.html',
        controller: gtdHotelSearchDatePaginatorController,
        bindings: {
            searchResult: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelSearchDatePaginator', gtdHotelSearchDatePaginator);

})();

(function() {
    'use strict';
    gtdHotelSearchAdvController.$inject = [
        '$scope', '$rootScope',
        'HOTEL_STATES',
        'GtdHotelService', 'MetaData'
    ];

    function gtdHotelSearchAdvController(
        $scope, $rootScope,
        HOTEL_STATES,
        GtdHotelService, MetaData) {
        var ctrl = this;

        ctrl.enableReset = false;

        ctrl.hotelPriceArrays = [];
        ctrl.hotelRatingArrays = [];
        ctrl.hotelName = "";
        ctrl.sort = "";

        ctrl.init = init;
        ctrl.advanceSearch = advanceSearch;
        ctrl.resetFilter = resetFilter;
        ctrl.resetClick = resetClick;
        ctrl.filterByName = filterByName;
        ctrl.filterByStar = filterByStar;
        ctrl.filterByPrice = filterByPrice;

        ctrl.hotelStates = GtdHotelService.getStates();

        ctrl.init();

        function init() {
            ctrl.hotelPriceArrays = MetaData.getPriceOptions();
            ctrl.hotelRatingArrays = MetaData.getStarRatingOptions();
            var pagination = GtdHotelService.getPagination();
            ctrl.sort = pagination.sort;

            $scope.$watch(
                function() {
                    return ctrl.sort;
                },
                function name(newVal, oldVal) {
                    if (newVal !== oldVal) {
                        ctrl.advanceSearch();
                    }
                }
            );

            ctrl.listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
                if (!newValue) {
                    return;
                }
                switch (newValue.state) {
                    case ctrl.hotelStates.HOTEL_ADVANCE_SEARCH_CHANGED:
                        ctrl.resetFilter();
                        break;
                    default:
                        break;
                }
            });
        }

        function filterByName() {
            // if (ctrl.hotelName.trim() === "") {
            //     return;
            // }
            advanceSearch();
        }

        function filterByStar() {
            advanceSearch();
        }

        function filterByPrice() {
            advanceSearch();
        }

        function enableResetButton() {
            ctrl.enableReset = true;
        }

        function disableResetButton() {
            ctrl.enableReset = false;
        }

        function advanceSearch() {

            GtdHotelService.resetPage();

            GtdHotelService.updateFilterAdvanceName(ctrl.hotelName);

            var prices = [];
            ctrl.hotelPriceArrays.forEach(function(price) {
                if (price.checked) {
                    prices.push(price.from + ":" + price.to);
                }
            });
            GtdHotelService.updateFilterAdcancePrices(prices);

            var ratings = [];
            ctrl.hotelRatingArrays.forEach(function(rating) {
                if (rating.checked) {
                    ratings.push(rating.text);
                    if (rating.text >= 1) {
                        ratings.push(JSON.stringify(rating.text - 0.5));
                    }
                }
            });
            GtdHotelService.updateFilterAdcanceStarts(ratings);
            GtdHotelService.changeSort(ctrl.sort);

            if (ratings.length === 0 && prices.length === 0 && ctrl.hotelName.trim() === "") {
                disableResetButton();
            } else {
                enableResetButton();
            }

            GtdHotelService.smartSearch();
        }

        function resetFilter() {

            ctrl.hotelPriceArrays.forEach(function(price) {
                price.checked = false;
            });

            ctrl.hotelRatingArrays.forEach(function(rating) {
                rating.checked = false;
            });

            ctrl.hotelName = "";
            ctrl.sort = null;
        }

        function resetClick() {
            ctrl.enableReset = false;
            ctrl.resetFilter();
            ctrl.advanceSearch();
        }
    }

    var gtdHotelSearchAdv = {
        templateUrl: 'app/components/hotel/hotel-search-adv.html',
        controller: gtdHotelSearchAdvController,
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelSearchAdv', gtdHotelSearchAdv);

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelPlaceAroundController', HotelPlaceAroundController);

    HotelPlaceAroundController.$inject = [
        '$timeout', 'UIService',
        'Auth', '$uibModalInstance', 'DataService', 'Hotel', 'DialogService', 'Base64', 'GtdHotelService', 'selectedHotel'
    ];

    function HotelPlaceAroundController(
        $timeout, UIService,
        Auth, $uibModalInstance, DataService, Hotel, DialogService, Base64, GtdHotelService, selectedHotel) {

        var RESTAURANT_FILTER = 'Quán bar';

        var vm = this;
        vm.map;
        vm.service;
        vm.makerDict = {};
        vm.restaurantsLst = [];
        vm.storesLst = [];
        vm.resultlst = [];
        vm.displayDetail = false;

        vm.filterOptions = {
            restaurant: 'Restaurant',
            coffee: 'Coffee',
            bar: 'Bar',
            groceries: 'Groceries'
        };

        vm.timer;

        vm.selectedPlace = {};
        vm.selectedPlaceImage = "";

        vm.initMap = initMap;
        vm.intMapInforWindow = intMapInforWindow;
        vm.onInit = onInit;
        vm.openMapInfoWindow = openMapInfoWindow;
        vm.closeMapInfoWindow = closeMapInfoWindow;
        vm.startMarkerBounce = startMarkerBounce;
        vm.endMarkerBounce = endMarkerBounce;
        vm.onHoverHotelItem = onHoverHotelItem;
        vm.outHoverHotelItem = outHoverHotelItem;
        vm.calDistance = calDistance;
        vm.closeDetail = closeDetail;
        vm.onClickHotelItem = onClickHotelItem;
        vm.filterNearBy = filterNearBy;
        vm.clearMarkers = clearMarkers;
        vm.markerClick = markerClick;


        // Default show nothing

        vm.cancel = function() {
            UIService.showBodyScroll();
            $uibModalInstance.dismiss('cancel');
        };

        vm.close = function() {
            $('#hotel_template_click').hide();
        };

        $uibModalInstance.opened.then(function() {
            $timeout(function() {
                vm.onInit();
                vm.initMap();
            }, 0);
        });

        function onInit() {
            UIService.hideBodyScroll();
            vm.intMapInforWindow();
        }

        function intMapInforWindow() {
            vm.mouseoverInfoWindow = new google.maps.InfoWindow();
        }

        function initMap() {
            vm.makerDict = {}; //reset
            vm.hotelPosition = new google.maps.LatLng(selectedHotel.hotelMeta.latitude, selectedHotel.hotelMeta.longitude);

            // MAP
            vm.map = new google.maps.Map(
                document.getElementById('gmap-full-zone'), {
                    center: vm.hotelPosition,
                    zoom: 15,
                    gestureHandling: 'greedy',
                    zoomControl: false,
                    mapTypeControl: false,
                    scaleControl: false,
                    streetViewControl: false,
                    rotateControl: false,
                    fullscreenControl: true
                });

            var marker = new google.maps.Marker({
                map: vm.map,
                icon: {
                    url: '/content/images/gtd-marker.svg',
                    scaledSize: new google.maps.Size(32 * 1.5, 45 * 1.5)
                },
                optimized: false,
                title: selectedHotel.hotelMeta.name,
                position: {
                    lat: selectedHotel.hotelMeta.latitude,
                    lng: selectedHotel.hotelMeta.longitude
                }
            });
            marker.setAnimation(google.maps.Animation.BOUNCE);

            vm.directionsService = new google.maps.DirectionsService;
            vm.directionsDisplay = new google.maps.DirectionsRenderer;
            vm.directionsDisplay.setMap(vm.map);

            // var myoverlay = new google.maps.OverlayView();
            // myoverlay.draw = function () {
            //     myoverlay.getPanes().markerLayer.id = 'markerLayer';
            // };
            // myoverlay.setMap(vm.map);

            vm.filterNearBy(vm.filterOptions.restaurant);

        }

        function calculateAndDisplayRoute(start, end) {
            vm.directionsService.route({
                origin: start,
                destination: end,
                travelMode: 'DRIVING'
            }, function(response, status) {
                if (status === 'OK') {
                    vm.directionsDisplay.setDirections(response);
                    vm.selectedItemDistance = response.routes[0].legs[0].distance.text;
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        function filterNearBy(keyword) {
            var filterRequest = {
                location: vm.hotelPosition,
                radius: '500',
                query: keyword
            };

            vm.selectedType = keyword;

            vm.service = new google.maps.places.PlacesService(vm.map);
            vm.service.textSearch(filterRequest, callbackFilterResult);
        }

        function callbackFilterResult(results, status) {
            $timeout(function() {
                vm.resultlst = results;
                console.log("RESULT");
                console.log(vm.resultlst);
            }, 0);
            vm.clearMarkers();
            createMarkers(results, vm.selectedType);
        }

        function clearMarkers() {
            Object.keys(vm.makerDict).forEach(function(key) {
                vm.makerDict[key].setMap(null);
                delete vm.makerDict[key];
            });
        }

        function callback(results, status, type) {
            if (status == google.maps.places.PlacesServiceStatus.OK) {
                switch (type) {
                    case 'store':
                        $timeout(function() {
                            vm.storesLst = results;
                            console.log("STORE");
                            console.log(vm.storesLst);
                        }, 0);

                        break;
                    case RESTAURANT_FILTER:
                        $timeout(function() {
                            vm.restaurantsLst = results;
                            console.log("RESTAURANT");
                            console.log(vm.restaurantsLst);
                        }, 0);

                        break;
                    default:
                        break;
                }
                createMarkers(results);
            }
        }

        function callbackStore(results, status) {
            callback(results, status, 'store');
        }

        function callbackRestaurant(results, status) {
            callback(results, status, RESTAURANT_FILTER);
        }

        function createMarkers(places, type) {
            var bounds = new google.maps.LatLngBounds();
            // var placesList = document.getElementById('places');

            var iconUrl = null;

            switch (type) {
                case vm.filterOptions.bar:
                    iconUrl = '/content/images/marker-maps-gtd-bar.svg';
                    break;
                case vm.filterOptions.restaurant:
                    iconUrl = '/content/images/marker-maps-gtd-restaurant.svg';
                    break;
                case vm.filterOptions.coffee:
                    iconUrl = '/content/images/marker-maps-gtd-coffee.svg';
                    break;
                case vm.filterOptions.groceries:
                    iconUrl = '/content/images/marker-maps-shop.svg';
                    break;
                default:
                    iconUrl = null;
                    break;
            }

            for (var i = 0, place; place = places[i]; i++) {
                var image = {
                    url: iconUrl ? iconUrl : place.icon,
                    scaledSize: new google.maps.Size(40, 40),
                };

                // if (vm.makerDict[place.place_id]) {
                //     continue;
                // }

                var marker = new google.maps.Marker({
                    map: vm.map,
                    icon: image,
                    title: place.name,
                    position: place.geometry.location,
                    optimized: false,
                    place_id: place.place_id
                });

                vm.makerDict[place.place_id] = marker;

                // google.maps.event.addListener(vm.makerDict[place.place_id], 'click', function () {

                // });
                google.maps.event.addListener(marker, 'click', handleMarkerClick.bind(undefined, marker, i));


                // marker.addListener('click', function () {

                // });


                bounds.extend(place.geometry.location);
            }
            vm.map.fitBounds(bounds);

        }

        function handleMarkerClick(marker, index) {
            vm.markerClick(marker.place_id);
        }

        function openMapInfoWindow(marker) {
            var template = $('#hotel_template_hover').html();
            vm.mouseoverInfoWindow.setContent(template);
            vm.mouseoverInfoWindow.open(vm.map, marker);
        }

        function closeMapInfoWindow() {
            vm.mouseoverInfoWindow.close();
        }

        function endMarkerBounce(marker) {
            marker.setAnimation(null);
        }

        function startMarkerBounce(marker) {
            marker.setAnimation(google.maps.Animation.BOUNCE);
        }

        function onHoverHotelItem(item, type) {
            vm.startMarkerBounce(vm.makerDict[item.place_id]);
        }

        function markerClick(id) {
            $timeout(function() {
                var index = vm.resultlst.findIndex(function(item) {
                    return item.place_id === id;
                });
                onClickHotelItem(vm.resultlst[index], vm.selectedType);
            }, 0);
        }

        function onClickHotelItem(item, type) {
            vm.displayDetail = false;
            $timeout.cancel(vm.timer);
            vm.timer = $timeout(function() {
                vm.selectedPlaceType = type;
                vm.displayDetail = true;
                vm.selectedPlace = item;
                vm.selectedPlaceImage = item.photos[0].getUrl();
                calculateAndDisplayRoute(vm.hotelPosition, vm.selectedPlace.geometry.location);
            }, 500);


        }

        function outHoverHotelItem(item) {
            vm.endMarkerBounce(vm.makerDict[item.place_id]);
        }

        function closeDetail() {
            vm.displayDetail = false;
            vm.selectedPlace = null;
        }


        var rad = function(x) {
            return x * Math.PI / 180;
        };

        var getDistance = function(p1, p2) {
            var R = 6378137; // Earth’s mean radius in meter
            var dLat = rad(p2.lat() - p1.lat());
            var dLong = rad(p2.lng() - p1.lng());
            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *
                Math.sin(dLong / 2) * Math.sin(dLong / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c;
            return d / 1000; // returns the distance in kilo-meter
        };

        function calDistance() {
            return getDistance(vm.hotelPosition, vm.selectedPlace.geometry.location);
        }

    }
})();

(function() {
    'use strict';

    gtdHotelPaginationComponent.$inject = [
        '$log', '$rootScope', '$scope',
        'GtdHotelService',
        'HOTEL_STATES'
    ];

    function gtdHotelPaginationComponent(
        $log, $rootScope, $scope,
        GtdHotelService,
        HOTEL_STATES) {

        var vm = this;
        vm.getNumber = getNumber;
        vm.changePage = changePage;
        vm.toLast = toLast;
        vm.toFirst = toFirst;
        vm.nextPage = nextPage;
        vm.previousPage = previousPage;

        vm.disableNext = false;
        vm.disablePrevious = false;
        vm.siblingPage = -1;
        vm.currentpage = -1;

        vm.currentPagination = GtdHotelService.getPagination();

        vm.hotelStates = GtdHotelService.getStates();

        vm.listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
            if (!newValue) {
                return;
            }
            switch (newValue.state) {
                case vm.hotelStates.PAGEABLE_CHANGED:
                    vm.currentPagination = newValue.payload;
                    break;
                default:
                    break;
            }
        });

        $scope.$on('$viewContentLoaded', function(event) {
            // code that will be executed ... 
            // every time this view is loaded


        });

        this.$onInit = function() {
            updatePagination(vm.currentPagination.page);
            $log.debug("gtdHotelPaginationComponent Init");
        };

        this.$onDestroy = function() {
            $log.debug("gtdHotelPaginationComponent Destroy");
            vm.listener = null;
        };

        function getNumber() {
            return Array.apply(null, {
                length: vm.currentPagination.totalPages
            }).map(Number.call, Number);
        }

        function changePage(pageMum) {
            GtdHotelService.chageSmartSearchPage(pageMum);
            GtdHotelService.smartSearch();
        }

        function updatePagination(pageMum) {
            vm.currentpage = pageMum;

            if (pageMum === 0) {
                vm.disablePrevious = true;
            } else {
                vm.siblingPage = pageMum - 1;
                vm.disablePrevious = false;
            }

            if (pageMum === vm.currentPagination.totalPages - 1) {
                vm.disableNext = true;
            } else {
                vm.disableNext = false;
            }
        }

        function toFirst() {
            GtdHotelService.chageSmartSearchPage(0);
            GtdHotelService.smartSearch();
        }

        function toLast() {
            GtdHotelService.chageSmartSearchPage(vm.currentPagination.totalPages - 1);
            GtdHotelService.smartSearch();
        }

        function nextPage() {
            GtdHotelService.chageSmartSearchPage(vm.currentPagination.page + 1);
            GtdHotelService.smartSearch();
        }

        function previousPage() {
            GtdHotelService.chageSmartSearchPage(vm.currentPagination.page - 1);
            GtdHotelService.smartSearch();
        }

    }

    var gtdHotelPagination = {
        templateUrl: 'app/components/hotel/hotel-pagination.component.html',
        controller: gtdHotelPaginationComponent,
        controllerAs: 'vm'
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelPagination', gtdHotelPagination);

})();

(function() {
    'use strict';

    gtdHotelInfoController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdHotelInfoController($log, $scope, MetaData, Flight) {
        var ctrl = this;
    }

    var gtdHotelInfo = {
        templateUrl: 'app/components/hotel/hotel-info.html',
        controller: gtdHotelInfoController,
        bindings: {
            selectedHotel: '=',
            selectedHotelRoom: '=',
            selectedHotelProduct: '=',
            bookingModel: '=',
            jsonmodel: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelInfo', gtdHotelInfo);

})();

(function() {
    'use strict';

    gtdHotelDetailViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdHotelDetailViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;
    }

    var gtdHotelDetailView = {
        templateUrl: 'app/components/hotel/hotel-detail-view.html',
        controller: gtdHotelDetailViewController,
        bindings: {
            hotelModel: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailView', gtdHotelDetailView);

})();

(function() {
    'use strict';

    gtdHotelDetailSimillarController.$inject = ['$log', '$scope', 'MetaData', 'Hotel'];

    function gtdHotelDetailSimillarController($log, $scope, MetaData, Hotel) {
        var ctrl = this;

    }

    var gtdHotelDetailSimillar = {
        templateUrl: 'app/components/hotel/hotel-detail-simillar.html',
        controller: gtdHotelDetailSimillarController,
        bindings: {
            hotelModel: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailSimillar', gtdHotelDetailSimillar);

})();

(function() {
    'use strict';

    gtdHotelDetailRoomController.$inject = [
        '$log', '$scope', '$uibModal', '$state', '$stateParams', '$filter', '$compile',
        'Hotel', 'DataService', 'DialogService', 'Base64', 'HotelUtils'
    ];

    function gtdHotelDetailRoomController(
        $log, $scope, $uibModal, $state, $stateParams, $filter, $compile,
        Hotel, DataService, DialogService, Base64, HotelUtils) {
        var ctrl = this;
        ctrl.showTooltipAllowHold = showTooltipAllowHold;
        ctrl.showSurchargesTooltip = showSurchargesTooltip;

        ctrl.tooltipSurcharge;
        ctrl.tooltipInstanceAllowHold;


        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.searchResult = DataService.getHotelSearchResult();
        ctrl.searchOptions = DataService.getHotelSearchOptions();

        ctrl.getFacility = function(add) {
            var fac = HotelUtils.getFacilityText(add);
            return HotelUtils.getFacilityClass(fac);
        };

        function showTooltipAllowHold(feature, index) {
            if (!ctrl.tooltipInstanceAllowHold) {
                ctrl.tooltipInstanceAllowHold = tippy(".hotel-tippy-allow-hold", {
                    animation: 'scale',
                    theme: 'hotel',
                    arrow: true
                });
            }

            var message = "";
            if (!feature.allowHold) {
                message = $filter('translate')('hotel.search.result.non-refundable');
            } else {
                message = $filter('translate')('hotel.search.result.refundable');
                message = message.replace('{rate}', feature.listDeadline ? feature.listDeadline[0].ratio * 100 : "100");
            }

            ctrl.tooltipInstanceAllowHold[index].setContent(message);
        }

        function showSurchargesTooltip(surcharges, index) {
            ctrl.surcharges = surcharges;
            var template = '<div>';
            var firstDate = surcharges[0].date;
            surcharges.forEach(function(item) {
                if (item.id === 'base_rate' || item.date !== firstDate) {
                    return;
                }
                template += '<div class="row" style="margin:7px; width:300px">' +
                    '<div class="col-xs-7 text-left"><strong>' + $filter('translate')('hotel.search.surcharges.' + item.id) + '</strong></div>' +
                    '<div class="col-xs-5">' + $filter('number')(item.amount) + ' VNĐ</div>' +
                    '</div>';
                var span = document.createElement('span');
                span.innerHTML = item.description + ' ' + item.amount;
            });
            var compiled = $compile(template)(ctrl);
            // console.log(compiled[0].innerHTML);

            if (!ctrl.tooltipSurcharge) {
                ctrl.tooltipSurcharge = tippy(".hotel-surcharge-tippy", {
                    animation: 'scale',
                    theme: 'hotel',
                    arrow: true,
                    interactive: true,
                    placement: 'left'
                });
            }
            ctrl.tooltipSurcharge[index].setContent(compiled[0].innerHTML);

        }

        ctrl.bookingClicked = function(feature, room) {
            if (!feature.quantityAvaliable || feature.quantityAvaliable <= 0) return;
            var hotelSearchOptions = DataService.getHotelSearchOptions();
            DataService.setSelectedHotelProduct(feature);
            DataService.setSelectedHotelRoom(room);

            Hotel.createDraftBooking(hotelSearchOptions, ctrl.hotelModel, feature, room)
                .then(function(result) {
                    $log.log("Get createDraftBooking from hotel.service");
                    $log.log(result);

                    if (DialogService.isResponseSuccess(result)) {
                        DataService.setHotelBookingModel(result.bookingCode);
                        // Go to
                        // $state.go('hotel-booking');
                        $state.go('hotel-booking/:booking_number/:params', {
                            "booking_number": Base64.encodeString(result.bookingCode.bookingNumber),
                            "params": "",
                            'hotelId': $stateParams.hotel_id
                        });
                        //$state.go('hotel-booking', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult});
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            // $state.go('hotel-booking');
        };

        ctrl.openFullHotelImages = function(feature) {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/components/hotel/hotel-detail-image-full.html',
                controller: 'HotelDetailImageFullController',
                controllerAs: 'vm',
                windowClass: 'hotel-detail-image-full-window',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        return $translate.refresh();
                    }],
                    hotelModel: function() {
                        return ctrl.hotelModel;
                    },
                    productModel: function() {
                        return feature;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

    }

    var gtdHotelDetailRoom = {
        templateUrl: 'app/components/hotel/hotel-detail-room.html',
        controller: gtdHotelDetailRoomController,
        bindings: {
            hotelModel: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailRoom', gtdHotelDetailRoom);

})();

(function() {
    'use strict';

    gtdHotelDetailRecentController.$inject = ['$log', '$scope', 'MetaData', 'GlobalSrv', 'Hotel'];

    function gtdHotelDetailRecentController($log, $scope, MetaData, GlobalSrv, Hotel) {
        var ctrl = this;

        ctrl.recentHotels = GlobalSrv.getRecentViewHotels();

    }

    var gtdHotelDetailRecent = {
        templateUrl: 'app/components/hotel/hotel-detail-recent.html',
        controller: gtdHotelDetailRecentController,
        bindings: {
            hotelModel: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailRecent', gtdHotelDetailRecent);

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelDetailMapFullController', HotelDetailMapFullController);

    HotelDetailMapFullController.$inject = [
        '$log', '$rootScope', '$scope', '$state', '$timeout', '$compile', 'UIService',
        'Auth', '$uibModalInstance', 'DataService', 'Hotel', 'DialogService', 'Base64', 'GtdHotelService',
        'SEARCH_BY_HOTEL_NAME', 'HOTEL_STATES', 'GlobalSrv', '$window', '$translate'
    ];

    function HotelDetailMapFullController(
        $log, $rootScope, $scope, $state, $timeout, $compile, UIService,
        Auth, $uibModalInstance, DataService, Hotel, DialogService, Base64, GtdHotelService,
        SEARCH_BY_HOTEL_NAME, HOTEL_STATES, GlobalSrv, $window, $translate) {

        var vm = this;

        vm.makerDict = {};

        vm.changeLanguage = changeLanguage;
        vm.initMap = initMap;
        vm.intMapInforWindow = intMapInforWindow;
        vm.onInit = onInit;
        vm.openMapInfoWindow = openMapInfoWindow;
        vm.closeMapInfoWindow = closeMapInfoWindow;
        vm.startMarkerBounce = startMarkerBounce;
        vm.endMarkerBounce = endMarkerBounce;
        vm.onHoverHotelItem = onHoverHotelItem;
        vm.outHoverHotelItem = outHoverHotelItem;

        // Default show nothing
        vm.displayState = null;

        vm.hotelStates = GtdHotelService.getStates();

        vm.onInit();

        function changeLanguage() {
            $translate.use(vm.language);
            tmhDynamicLocale.set(vm.language);
        };
        vm.cancel = function() {
            UIService.showBodyScroll();
            vm.listener();
            $uibModalInstance.dismiss('cancel');
        };

        vm.close = function() {
            $('#hotel_template_click').hide();
        };


        function onInit() {
            UIService.hideBodyScroll();
            vm.intMapInforWindow();

            GtdHotelService.smartSearch();

            vm.listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
                if (!newValue) {
                    return;
                }
                switch (newValue.state) {
                    case vm.hotelStates.SHOW_LOADING:
                    case vm.hotelStates.SEARCH_ERROR:
                    case vm.hotelStates.HIDE_LOADING:
                        vm.displayState = newValue.state;
                        break;
                    case vm.hotelStates.FINISH_SEARCH:
                        vm.displayState = newValue.state;
                        vm.hotels = newValue.payload.hotels;
                        vm.initMap();
                        break;
                    case vm.hotelStates.CHANGE_SEARCH_FILTER:
                        vm.searchOptions = newValue.payload;
                        // vm.updatePaxDisplay();
                        break;
                    default:
                        break;
                }
            });
        }

        function intMapInforWindow() {
            vm.mouseoverInfoWindow = new google.maps.InfoWindow();
        }

        function openMapInfoWindow(marker) {
            $scope.hotelModel = marker.meta;
            $scope.$apply();
            var template = $('#hotel_template_hover').html();
            vm.mouseoverInfoWindow.setContent(template);
            vm.mouseoverInfoWindow.open(vm.map, marker);
        }

        function closeMapInfoWindow() {
            vm.mouseoverInfoWindow.close();
        }

        vm.clickedContent = function(hotel) {
            var content = document.createElement('div');
            content.innerHTML = $('#hotel_template_click').html();

            if (hotel.products && hotel.products.length > 0 && hotel.products[0].rooms && hotel.products[0].rooms[0]) {
                var button = content.appendChild(document.createElement('input'));
                button.type = 'button';
                button.value = 'Chọn phòng';
                button.className = 'booking-text gtd-btn-medium pull-right';
                button.style = "float: left !important";
                google.maps.event.addDomListener(button, 'click', function() {
                    vm.bookingClicked(hotel);
                    vm.cancel();
                });
            }
            return content;
        };
        vm.clickIdx = 0;

        function initMap() {

            vm.selectedhotel = vm.hotels[0];
            vm.selectedhoteldetail = vm.hotels[0];
            vm.makerDict = {}; //reset

            // MAP
            vm.map = new google.maps.Map(
                document.getElementById('gmap-full-zone'), {
                    gestureHandling: 'greedy',
                    zoomControl: false,
                    mapTypeControl: false,
                    scaleControl: false,
                    streetViewControl: false,
                    rotateControl: false,
                    fullscreenControl: true
                });

            var bounds = new google.maps.LatLngBounds();

            angular.forEach(vm.hotels, function(hotel) {

                if (hotel.hotelMeta && hotel.hotelMeta.latitude && hotel.hotelMeta.longitude) {

                    var marker = new google.maps.Marker({
                        map: vm.map,
                        position: {
                            lat: hotel.hotelMeta.latitude,
                            lng: hotel.hotelMeta.longitude
                        },
                        title: hotel.hotelMeta.name,
                        meta: hotel,
                        icon: {
                            url: '/content/images/gtd-marker.svg',
                            scaledSize: new google.maps.Size(32, 45)
                        }
                    });

                    marker.addListener('mouseover', function() {
                        vm.openMapInfoWindow(marker);
                    });

                    marker.addListener('mouseout', function() {
                        vm.closeMapInfoWindow();
                    });

                    marker.addListener('click', function() {
                        GtdHotelService.goToDetail(hotel);
                    });

                    bounds.extend(marker.getPosition());
                    vm.makerDict[hotel.id] = marker;
                }

            });

            vm.map.fitBounds(bounds);



            // var pyrmont = new google.maps.LatLng(vm.hotels[0].hotelMeta.latitude, vm.hotels[0].hotelMeta.longitude);
            // map = new google.maps.Map(document.getElementById('gmap-full-zone'), {
            //     center: pyrmont,
            //     zoom: 15
            // });
            // var request = {
            //     location: pyrmont,
            //     radius: '500',
            //     type: ['restaurant']
            // };

            // service = new google.maps.places.PlacesService(map);
            // service.nearbySearch(request, callback);

        }

        function callback(results, status) {
            if (status == google.maps.places.PlacesServiceStatus.OK) {
                for (var i = 0; i < results.length; i++) {
                    var place = results[i];
                    console.log(results[i]);
                    createMarkers(results[i])
                }

                createMarkers(results);
            }
        }

        function createMarkers(places) {
            var bounds = new google.maps.LatLngBounds();
            // var placesList = document.getElementById('places');

            for (var i = 0, place; place = places[i]; i++) {
                var image = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                var marker = new google.maps.Marker({
                    map: map,
                    icon: image,
                    title: place.name,
                    position: place.geometry.location
                });

                // var li = document.createElement('li');
                // li.textContent = place.name;
                // placesList.appendChild(li);

                bounds.extend(place.geometry.location);
            }
            map.fitBounds(bounds);
        }

        function endMarkerBounce(marker) {
            marker.setAnimation(null);
            var pinIcon = new google.maps.MarkerImage(
                "/content/images/gtd-marker.svg",
                null, /* size is determined at runtime */
                null, /* origin is 0,0 */
                null, /* anchor is bottom center of the scaled image */
                new google.maps.Size(32, 45)
            );
            marker.setIcon(pinIcon);
        }

        function startMarkerBounce(marker) {
            marker.setAnimation(google.maps.Animation.BOUNCE);
            var pinIcon = new google.maps.MarkerImage(
                "/content/images/gtd-marker.svg",
                null, /* size is determined at runtime */
                null, /* origin is 0,0 */
                null, /* anchor is bottom center of the scaled image */
                new google.maps.Size(40, 55)
            );
            marker.setIcon(pinIcon);
        }


        function onHoverHotelItem(item) {
            vm.startMarkerBounce(vm.makerDict[item.id]);

        }

        function outHoverHotelItem(item) {
            vm.endMarkerBounce(vm.makerDict[item.id]);
        }


        vm.bookingClicked = function(item) {
            GtdHotelService.goToDetail(item);
        };

    }
})();

(function() {
    'use strict';

    gtdHotelDetailInfoController.$inject = ['$log', '$scope', 'MetaData', 'Hotel'];

    function gtdHotelDetailInfoController($log, $scope, MetaData, Hotel) {
        var ctrl = this;

    }

    var gtdHotelDetailInfo = {
        templateUrl: 'app/components/hotel/hotel-detail-info.html',
        controller: gtdHotelDetailInfoController,
        bindings: {
            hotelModel: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailInfo', gtdHotelDetailInfo);

})();



(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('HotelDetailImageFullController', HotelDetailImageFullController);

    HotelDetailImageFullController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', 'Auth', '$uibModalInstance', 'hotelModel', 'productModel', 'UIService'];

    function HotelDetailImageFullController($log, $rootScope, $scope, $state, $timeout, Auth, $uibModalInstance, hotelModel, productModel, UIService) {
        var vm = this;

        $log.log('hotel=');
        $log.log(hotelModel);
        $log.log('product=');
        $log.log(productModel);

        vm.hotelModel = hotelModel;
        vm.productModel = productModel;

        // foreach vm.productModel.images as img 
        angular.forEach(vm.productModel.images, function(item, index) {
            if (vm.productModel.supplierType == "E") {
                var dot = item.lastIndexOf('.');
                var dotNext = item.substring(dot);
                var strImages = item.substring(0, dot - 1);
                vm.productModel.images[index] = strImages + 'z' + dotNext;
            }
        });

        vm.cancel = function() {
            UIService.showBodyScroll();
            $uibModalInstance.dismiss('cancel');
        };

        vm.initMap = function() {

            // Image Viewer
            // $('#lightSlider').lightSlider({
            //     gallery: true,
            //     item: 1,
            //     loop: true,
            //     autoWidth: false,
            //     slideMargin: 0,
            //     thumbItem: 5
            // });
        };

        $uibModalInstance.opened.then(function() {
            $timeout(function() {
                vm.initMap();
            }, 0);
            UIService.hideBodyScroll();
        });

    }
})();

(function() {
    'use strict';

    gtdHotelDetailImageController.$inject = ['$log', '$scope', '$timeout', '$uibModal', 'MetaData', 'Hotel'];

    function gtdHotelDetailImageController($log, $scope, $timeout, $uibModal, MetaData, Hotel) {
        var ctrl = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.currentImage;

        ctrl.changeImage = changeImage;
        ctrl.toggleShowMoreImage = toggleShowMoreImage;


        $scope.$on('gtd-load-details-completed', function() {

            ctrl.hotelModel.hotelImages.forEach(function(image) {
                ctrl.swiper.appendSlide('<div class="swiper-slide">' +
                    '<img data-src="' + image.orginal + '" class="swiper-lazy">' +
                    '<div class="swiper-lazy-preloader swiper-lazy-preloader-white"></div>' +
                    '</div>');
            });

            ctrl.changeImage(1);


            // MAP
            // console.log(ctrl.hotelModel);

            // if (ctrl.hotelModel && ctrl.hotelModel.hotelMeta && ctrl.hotelModel.hotelMeta.latitude && ctrl.hotelModel.hotelMeta.longitude) {
            //     var mapMarker = function () {
            //         var map = new GMaps({
            //             div: '#gmap_zone',
            //             lat: ctrl.hotelModel.hotelMeta.latitude,
            //             lng: ctrl.hotelModel.hotelMeta.longitude
            //         });

            //         var mouseoverInfoWindow = new google.maps.InfoWindow();
            //         mouseoverInfoWindow.setContent($('#hotel_template_hover').html());

            //         $log.log("+++ Add Marker: Hotel: " + ctrl.hotelModel.hotelMeta.name
            //             + ", latitude: " + ctrl.hotelModel.hotelMeta.latitude
            //             + ", longitude: " + ctrl.hotelModel.hotelMeta.longitude);

            //         var marker = map.addMarker({
            //             lat: ctrl.hotelModel.hotelMeta.latitude,
            //             lng: ctrl.hotelModel.hotelMeta.longitude,
            //             title: ctrl.hotelModel.hotelMeta.name,
            //             icon: {
            //                 url: '/content/images/map-marker.png'
            //             },
            //             // infoWindow: {
            //             //     content: content
            //             //     // content: i
            //             // },
            //             mouseover: function (e) {
            //                 mouseoverInfoWindow.open(this.map, this);
            //             },
            //             mouseout: function () {
            //                 //mouseoverInfoWindow.close();
            //             },
            //             click: function () {
            //                 //mouseoverInfoWindow.close();
            //                 ctrl.openFullMap();
            //             }
            //         });

            //         mouseoverInfoWindow.open(map, marker);

            //         map.setZoom(15);
            //     };
            //     mapMarker();
            // }

        });

        function changeImage(index) {
            ctrl.swiper.slideTo(index);
            ctrl.currentImage = index;
        }

        ctrl.limitImage = 10;
        ctrl.isShowingMoreImage = false;

        function toggleShowMoreImage() {
            ctrl.isShowingMoreImage = !ctrl.isShowingMoreImage;
            if (ctrl.isShowingMoreImage) {
                ctrl.limitImage = ctrl.hotelModel.hotelImages.length;
            } else {
                ctrl.limitImage = 10;
            }
        }



        this.$postLink = function() {

            ctrl.swiper = new Swiper('.swiper-container', {
                // Enable lazy loading
                lazy: true,
                loop: true,
                // autoplay: {
                //     delay: 2500,
                //     disableOnInteraction: false,
                // },
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                    dynamicBullets: true,
                },
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
            });

            ctrl.swiper.on('transitionEnd', function() {
                $timeout(
                    function() {
                        ctrl.currentImage = ctrl.swiper.activeIndex;

                    }, 0
                );
            });
        };

        ctrl.openFullMap = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/components/hotel/hotel-detail-map-full.html',
                controller: 'HotelDetailMapFullController',
                controllerAs: 'vm',
                windowClass: 'hotel-detail-map-full-window',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        return $translate.refresh();
                    }],
                    selectedhotel: this.hotelModel
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };
    }

    var gtdHotelDetailImage = {
        templateUrl: 'app/components/hotel/hotel-detail-image.html',
        controller: gtdHotelDetailImageController,
        bindings: {
            hotelModel: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailImage', gtdHotelDetailImage);

})();

(function() {
    'use strict';

    gtdHotelDetailHeaderController.$inject = [
        '$log', '$scope', '$state', '$uibModal',
        'MetaData', 'HotelUtils', 'Hotel', 'DataService', 'DialogService', 'Base64'
    ];

    function gtdHotelDetailHeaderController(
        $log, $scope, $state, $uibModal,
        MetaData, HotelUtils, Hotel, DataService, DialogService, Base64) {
        var ctrl = this;

        ctrl.modalInstance = null;
        ctrl.resetModal = resetModal;
        ctrl.openMapPlaceAround = openMapPlaceAround;
        ctrl.openShareModal = openShareModal;
        ctrl.copyStringToClipboard = copyStringToClipboard;

        // ctrl.bookingClicked = function(feature, room) {

        //$state.go('hotel-booking');
        // };

        ctrl.getFacility = function(fac) {
            return HotelUtils.getFacilityClass(fac);
        };

        ctrl.goToReserve = function() {
            // $('html, body').animate({
            //     scrollTop: $(".hotel-detail-change-wrapper").offset().top
            // }, 1000);

            var buffer = 0;

            if ($(window).width() >= 991) {
                buffer = 200;
            }

            $('html, body').animate({
                scrollTop: $("#hotel-detail-zone").offset().top - buffer
            }, 1000);
        };

        ctrl.bookingClicked = function(feature, room) {
            var hotelSearchOptions = DataService.getHotelSearchOptions();
            DataService.setSelectedHotelProduct(feature);
            DataService.setSelectedHotelRoom(room);

            Hotel.createDraftBooking(hotelSearchOptions, ctrl.hotelModel, feature, room)
                .then(function(result) {
                    $log.log("Get createDraftBooking from hotel.service");
                    $log.log(result);

                    if (DialogService.isResponseSuccess(result)) {
                        DataService.setHotelBookingModel(result.bookingCode);

                        // Go to
                        $state.go('hotel-booking/:booking_number/:params', {
                            "booking_number": Base64.encodeString(result.bookingCode.bookingNumber),
                            "params": ''
                        });

                        //$state.go('hotel-booking', {"searchOptions": vm.searchOptions, "searchResult": vm.searchResult});
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            // $state.go('hotel-booking');
        };

        function resetModal() {
            ctrl.modalInstance = null;
        }

        function openMapPlaceAround() {
            if (ctrl.modalInstance !== null) return;
            DataService.setHotelSearchOptions(ctrl.searchOptions);
            ctrl.modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/components/hotel/hotel-place-around.html',
                controller: 'HotelPlaceAroundController',
                controllerAs: 'vm',
                windowClass: 'hotel-detail-map-full-window',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        return $translate.refresh();
                    }],
                    selectedHotel: function() {
                        return ctrl.hotelModel;
                    }
                }
            });
            ctrl.modalInstance.result.then(
                ctrl.resetModal,
                ctrl.resetModal
            );
        }

        function copyStringToClipboard() {
            // Create new element
            var el = document.createElement('textarea');
            // Set value (string to be copied)
            $(el).val(ctrl.shareUrl);
            // Set non-editable to avoid focus and move outside of view
            el.setAttribute('readonly', '');
            el.style = {
                position: 'absolute',
                left: '-9999px'
            };
            document.body.appendChild(el);
            // Select text inside element
            el.select();
            // Copy text to clipboard
            document.execCommand('copy');
            // Remove temporary element
            document.body.removeChild(el);
        }

        function openShareModal() {
            ctrl.shareUrl = window.location.href,
                $('#modal-share').modal();
        }

    }

    var gtdHotelDetailHeader = {
        templateUrl: 'app/components/hotel/hotel-detail-header.html',
        controller: gtdHotelDetailHeaderController,
        bindings: {
            hotelModel: '=',
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailHeader', gtdHotelDetailHeader);

})();

(function() {
    'use strict';

    gtdHotelDetailChangeController.$inject = [
        '$rootScope', '$state',
        'MetaData', 'GtdHotelService', 'DialogService', 'Base64',
        'HOTEL_STATES'
    ];

    function gtdHotelDetailChangeController(
        $rootScope, $state,
        MetaData, GtdHotelService, DialogService, Base64,
        HOTEL_STATES) {
        var ctrl = this;
        ctrl.initControl = initControl;
        ctrl.openChooseRoomDetail = openChooseRoomDetail;
        ctrl.hotelStates = GtdHotelService.getStates();
        ctrl.initControl();

        function initControl() {
            ctrl.searchOptions = GtdHotelService.getSearchOptions();
            ctrl.paxDetail = GtdHotelService.getPaxSummary();

            var listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
                if (!newValue) {
                    return;
                }
                switch (newValue.state) {
                    case ctrl.hotelStates.CHANGE_SEARCH_FILTER:
                        ctrl.searchOptions = newValue.payload;
                        ctrl.paxDetail = GtdHotelService.getPaxSummary();
                        break;
                    default:
                        break;
                }
            });
        }

        function openChooseRoomDetail() {
            GtdHotelService.openModalUpdateRoomDetail();
        }

        ctrl.doSearchImpl = function() {
            // VALIDATION
            if (moment(ctrl.searchOptions.hotelSearchFilter.checkindate, 'DD-MM-YYYY').diff(moment(ctrl.searchOptions.hotelSearchFilter.checkout_date, 'DD-MM-YYYY')) > 0) {
                DialogService.openAlertDialog({
                    "title": "Error",
                    "message": "Ngày Trả Phòng phải sau Ngày Nhận Phòng"
                });
                return;
            }
            GtdHotelService.updateSearchOptions(ctrl.searchOptions);
            var retrievedsupplierSessionId = localStorage.getItem('ctrl.item.supplierSessionId');
            GtdHotelService.checkHotelAvailability({
                "id": ctrl.hotelId,
                "supplierSessionId": retrievedsupplierSessionId
            });
            // GtdHotelService.checkHotelAvailability({"id": ctrl.hotelId});


        };
    }

    var gtdHotelDetailChange = {
        templateUrl: 'app/components/hotel/hotel-detail-change.html',
        controller: gtdHotelDetailChangeController,
        controllerAs: '$ctrl',
        bindings: {
            hotelId: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelDetailChange', gtdHotelDetailChange);

})();

(function() {
    /*jshint bitwise: false*/
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('HotelUtils', HotelUtils);

    HotelUtils.$inject = ['$log', '$uibModal', '$translate', '$state', 'DataService', 'TRANS_TIME_OUT', 'DialogService', 'GlobalSrv', 'FREE_WIFI_IDS', 'FREE_PARKING_IDS', 'HAS_SWIMMING_POOL_IDS', 'FREE_GYM', 'FREE_BREAKFAST', 'FREE_BREAKFAST_TEXT', 'FREE_PARKING_TEXT', 'FREE_WIFI_TEXT', 'FREE_DRINK_TEXT', 'FREE_BREAKFAST_TEXT_KEY', 'FREE_PARKING_TEXT_KEY', 'FREE_WIFI_TEXT_KEY', 'FREE_DRINK_TEXT_KEY'];

    function HotelUtils($log, $uibModal, $translate, $state, DataService, TRANS_TIME_OUT, DialogService, GlobalSrv, FREE_WIFI_IDS, FREE_PARKING_IDS, HAS_SWIMMING_POOL_IDS, FREE_GYM, FREE_BREAKFAST, FREE_BREAKFAST_TEXT, FREE_PARKING_TEXT, FREE_WIFI_TEXT, FREE_DRINK_TEXT, FREE_BREAKFAST_TEXT_KEY, FREE_PARKING_TEXT_KEY, FREE_WIFI_TEXT_KEY, FREE_DRINK_TEXT_KEY) {

        var service = {
            getFacilityClass: getFacilityClass,
            getFacilityText: getFacilityText,
            getFacilities: getFacilities,

            getAdultNumberFromSo: getAdultNumberFromSo,
            getChildrenNumberFromSo: getChildrenNumberFromSo
        };

        return service;

        function getFacilityClass(facility) {
            if (facility == 'wifi') {
                return "fa-wifi";
            } else if (facility == 'bar') {
                return "fa-glass";
            } else if (facility == 'breakfast') {
                return "fa-coffee";
            } else if (facility == 'car') {
                return "fa-car";
            } else if (facility == 'pool') {
                return "fa-swimming-pool";
            }
            return facility;
        }

        function getFacilities(item) {
            if (!item) return;
            item.displayAmentities = [];
            item.selectedAmentities = [];
            if (item.hotelMeta.amentities) {
                var i = 0;
                item.hotelMeta.amentities.forEach(function(aItem) {
                    if (FREE_WIFI_IDS.indexOf(aItem.id) !== -1 && item.displayAmentities.indexOf('wifi') == -1) {
                        item.displayAmentities[i] = 'wifi';
                        item.selectedAmentities[i] = aItem.name;
                        i++;
                    }
                    if (FREE_PARKING_IDS.indexOf(aItem.id) !== -1 && item.displayAmentities.indexOf('car') == -1) {
                        item.displayAmentities[i] = 'car';
                        item.selectedAmentities[i] = aItem.name;
                        i++;
                    }
                    if (HAS_SWIMMING_POOL_IDS.indexOf(aItem.id) !== -1 && item.displayAmentities.indexOf('pool') == -1) {
                        item.displayAmentities[i] = 'pool';
                        item.selectedAmentities[i] = aItem.name;
                        i++;
                    }
                    if (FREE_GYM.indexOf(aItem.id) !== -1 && item.displayAmentities.indexOf('gym') == -1) {
                        item.displayAmentities[i] = 'gym';
                        item.selectedAmentities[i] = aItem.name;
                        i++;
                    }
                    if (FREE_BREAKFAST.indexOf(aItem.id) !== -1 && item.displayAmentities.indexOf('breakfast') == -1) {
                        item.displayAmentities[i] = 'breakfast';
                        item.selectedAmentities[i] = aItem.name;
                        i++;
                        item.hasBreakfast = true;
                    }
                });
            }
        }

        function getFacilityText(text) {
            if (!text) return;
            if (FREE_DRINK_TEXT.indexOf(text) !== -1) {
                return 'bar';
            }
            if (FREE_BREAKFAST_TEXT.indexOf(text) !== -1) {
                return 'breakfast';
            }
            if (FREE_PARKING_TEXT.indexOf(text) !== -1) {
                return 'car-black';
            }
            if (FREE_WIFI_TEXT.indexOf(text) !== -1) {
                return 'wifi'
            }
            var rs = null;
            FREE_BREAKFAST_TEXT_KEY.forEach(function(item) {
                if (text.toUpperCase().indexOf(item.toUpperCase()) !== -1) {
                    return rs = 'breakfast';
                }
            });

            FREE_DRINK_TEXT_KEY.forEach(function(item) {
                if (text.toUpperCase().indexOf(item.toUpperCase()) !== -1) {
                    return rs = 'bar';
                }
            });
            FREE_PARKING_TEXT_KEY.forEach(function(item) {
                if (text.toUpperCase().indexOf(item.toUpperCase()) !== -1) {
                    return rs = 'car-black';
                }
            });
            FREE_WIFI_TEXT_KEY.forEach(function(item) {
                if (text.toUpperCase().indexOf(item.toUpperCase()) !== -1) {
                    return rs = 'wifi';
                }
            });
            return rs;
        }

        function getAdultNumberFromSo(options) {

            var result = 0;

            angular.forEach(options.pax, function(item) {
                result += parseInt(item.adultNo);
                // result = item.adultNo;
            });

            return result;
        }

        function getChildrenNumberFromSo(options) {
            var result = 0;

            angular.forEach(options.pax, function(item) {
                result += parseInt(item.childrenNo);
                // result = item.childrenNo;
            });

            return result;
        }
    }
})();

(function() {
    'use strict';

    gtdHotelHomeSearchHeaderController.$inject = [
        '$log', '$uibModal', '$state', '$rootScope', '$location',
        'GlobalSrv', 'Hotel', 'DialogService',
        'GtdHotelService',
        'HotelUtils', 'Base64',
        'HOTEL_STATES',
        'MerchantService',
        '$scope',
        '$cookies'
    ];

    function gtdHotelHomeSearchHeaderController(
        $log, $uibModal, $state, $rootScope, $location,
        GlobalSrv, Hotel, DialogService,
        GtdHotelService,
        HotelUtils, Base64,
        HOTEL_STATES,
        MerchantService,
        $scope,
        $cookies
    ) {

        var ctrl = this;

        ctrl.paxDetail = {
            roomQuantity: 0,
            adultQuantity: 0,
            childQuantity: 0
        };

        ctrl.hotelStates = GtdHotelService.getStates();

        ctrl.init = init;
        ctrl.openChooseRoomDetail = openChooseRoomDetail;
        ctrl.onFocusInputName = onFocusInputName;
        ctrl.onBlurInputName = onBlurInputName;

        var listener = $rootScope.$on(HOTEL_STATES, function(event, newValue) {
            if (!newValue) {
                return;
            }
            switch (newValue.state) {
                case ctrl.hotelStates.CHANGE_SEARCH_FILTER:
                    ctrl.searchOptions = newValue.payload;
                    break;
                case ctrl.hotelStates.HOTEL_PAX_CHANGED:
                    ctrl.paxDetail = GtdHotelService.getPaxSummary();
                    ctrl.searchOptions.hotelSearchBody = newValue.payload;
                default:
                    break;
            }
        });
        var merchant_code = '',
            msisdn = '';
        if ($location.search().merchant_code) {
            var expireDate = new Date();
            expireDate.setDate(expireDate.getDate() + 30);
            merchant_code = String($location.search().merchant_code).toUpperCase();
            $scope.merchant_code = merchant_code;
            localStorage.setItem('merchant_code', merchant_code);
            $cookies.put('merchant_code', merchant_code, {
                'expires': expireDate
            });
            if ($location.search().msisdn) {
                msisdn = $location.search().msisdn;
                $scope.msisdn = $location.search().msisdn;
                $cookies.put('msisdn', msisdn, {
                    'expires': expireDate
                });
                localStorage.setItem('msisdn', msisdn);
            }
        }
        ctrl.isSignleLayout = MerchantService.isSingleLayout();
        ctrl.flight_tab_url = 'flight';
        ctrl.hotel_tab_url = 'hotel';
        merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");
        if (merchant_code) {
            ctrl.flight_tab_url += '?merchant_code=' + merchant_code;
            ctrl.hotel_tab_url += '?merchant_code=' + merchant_code;
            ctrl.merchant_code = merchant_code;
        }
        msisdn = $cookies.get("msisdn") || localStorage.getItem("msisdn");
        if (msisdn) {
            ctrl.flight_tab_url += '&msisdn=' + msisdn;
            ctrl.hotel_tab_url += '&msisdn=' + msisdn;
        }

        ctrl.init();

        function init() {
            ctrl.searchOptions = GtdHotelService.getSearchOptions();
            ctrl.paxDetail = GtdHotelService.getPaxSummary();
        }

        function openChooseRoomDetail() {
            GtdHotelService.openModalUpdateRoomDetail();
        }

        ctrl.searchDestinations = function(val) {
            return Hotel.searchHotelMetaData(val);
        };

        function onFocusInputName() {
            ctrl.previousHotelCode = ctrl.searchOptions.hotelSearchFilter.hotel_code;
            ctrl.searchOptions.hotelSearchFilter.hotel_code = "";
        }

        function onBlurInputName() {
            if (ctrl.searchOptions.hotelSearchFilter.hotel_code === "" && ctrl.searchOptions.hotelSearchFilter.hotel_code.trim() === "") {
                ctrl.searchOptions.hotelSearchFilter.hotel_code = ctrl.previousHotelCode;
            }
        }

        ctrl.formatLabel = function(model) {
            var destinations = GtdHotelService.getSelectedDestination();

            if (destinations && destinations.code === model) {
                return destinations.name;
            }
            return model;
        };

        ctrl.typeAHeadOnSelect = function($item, $model, $label, $event) {
            GtdHotelService.updateSelectedDestination($item);
        };

        ctrl.doSearchImpl = function() {
            // VALIDATION
            if (moment(ctrl.searchOptions.hotelSearchFilter.checkin_date, 'DD-MM-YYYY').diff(moment(ctrl.searchOptions.hotelSearchFilter.checkout_date, 'DD-MM-YYYY')) > 0) {
                DialogService.openAlertDialog({
                    "title": "Error",
                    "message": "Ngày Trả Phòng phải sau Ngày Nhận Phòng"
                });
                return;
            }

            if (!GtdHotelService.validateDateRange(ctrl.searchOptions.hotelSearchFilter.checkin_date, ctrl.searchOptions.hotelSearchFilter.checkout_date)) {
                DialogService.openAlertDialog({
                    "title": "Error",
                    "message": "Ngày Trả Phòng và Ngày Nhận Phòng không quá 30 ngày"
                });
                return;
            }

            GtdHotelService.updateSearchOptions(ctrl.searchOptions);
            if ($state.current.name !== 'hotel-search') {
                GtdHotelService.backToResult();
            } else {
                GtdHotelService.search();
            }

        };
    }

    var gtdHotelHomeSearchHeader = {
        templateUrl: 'app/components/hotel/home/hotel-home-search-header.html',
        controller: gtdHotelHomeSearchHeaderController
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelHomeSearchHeader', gtdHotelHomeSearchHeader);

    var gtdHotelSearchHeader = {
        templateUrl: 'app/components/hotel/hotel-search-header.html',
        controller: gtdHotelHomeSearchHeaderController
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelSearchHeader', gtdHotelSearchHeader);

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('showValidation', showValidation);

    function showValidation() {
        var directive = {
            restrict: 'A',
            require: 'form',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs, formCtrl) {
            element.find('.form-group').each(function() {
                var $formGroup = angular.element(this);
                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');

                if ($inputs.length > 0) {
                    $inputs.each(function() {
                        var $input = angular.element(this);
                        var inputName = $input.attr('name');
                        scope.$watch(function() {
                            return formCtrl[inputName] && formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;
                        }, function(isInvalid) {
                            $formGroup.toggleClass('has-error', isInvalid);
                        });
                    });
                }
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .constant('paginationConstants', {
            'itemsPerPage': 20
        });
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('minbytes', minbytes);

    function minbytes() {
        var directive = {
            restrict: 'A',
            require: '?ngModel',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs, ngModel) {
            if (!ngModel) {
                return;
            }

            ngModel.$validators.minbytes = function(modelValue) {
                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;
            };
        }

        function endsWith(suffix, str) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }

        function paddingSize(base64String) {
            if (endsWith('==', base64String)) {
                return 2;
            }
            if (endsWith('=', base64String)) {
                return 1;
            }
            return 0;
        }

        function numberOfBytes(base64String) {
            return base64String.length / 4 * 3 - paddingSize(base64String);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('maxbytes', maxbytes);

    function maxbytes() {
        var directive = {
            restrict: 'A',
            require: '?ngModel',
            link: linkFunc
        };

        return directive;

        function linkFunc(scope, element, attrs, ngModel) {
            if (!ngModel) {
                return;
            }

            ngModel.$validators.maxbytes = function(modelValue) {
                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;
            };
        }

        function endsWith(suffix, str) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }

        function paddingSize(base64String) {
            if (endsWith('==', base64String)) {
                return 2;
            }
            if (endsWith('=', base64String)) {
                return 1;
            }
            return 0;
        }

        function numberOfBytes(base64String) {
            return base64String.length / 4 * 3 - paddingSize(base64String);
        }
    }

})();

(function() {
    'use strict';

    gtdFlightHomeSearchHeaderController.$inject = ['$log', '$scope', '$q', '$uibModal', '$attrs', 'GlobalSrv', 'MetaData', 'DataService', 'DialogService', 'Flight', '$timeout', 'ValidationUtils', 'DEFAULT_PAGE_SIZE', 'DEFAULT_DATE_FORMAT', 'DEFAULT_MOMENT_DATE_FORMAT', '$location', '$cookies', 'MerchantService'];

    function gtdFlightHomeSearchHeaderController($log, $scope, $q, $uibModal, $attrs, GlobalSrv, MetaData, DataService, DialogService, Flight, $timeout, ValidationUtils, DEFAULT_PAGE_SIZE, DEFAULT_DATE_FORMAT, DEFAULT_MOMENT_DATE_FORMAT, $location, $cookies, MerchantService) {
        var ctrl = this;

        ctrl.iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

        // init liteEmbed Option
        ctrl.liteEmbed = false;
        if ($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) {
            ctrl.liteEmbed = (($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) === 'true');
        }

        // Reset New Transaction Time
        DataService.setNewStartTransactionTime();
        var merchant_code = '',
            msisdn = '';
        if ($location.search().merchant_code) {
            var expireDate = new Date();
            expireDate.setDate(expireDate.getDate() + 30);
            merchant_code = String($location.search().merchant_code).toUpperCase();
            $scope.merchant_code = merchant_code;
            localStorage.setItem('merchant_code', merchant_code);
            $cookies.put('merchant_code', merchant_code, {
                'expires': expireDate
            });
            if ($location.search().msisdn) {
                msisdn = $location.search().msisdn;
                $scope.msisdn = $location.search().msisdn;
                $cookies.put('msisdn', msisdn, {
                    'expires': expireDate
                });
                localStorage.setItem('msisdn', msisdn);
            }
        }
        ctrl.isSignleLayout = MerchantService.isSingleLayout();

        ctrl.flight_tab_url = 'flight';
        ctrl.hotel_tab_url = 'hotel';
        merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");
        if (merchant_code) {
            ctrl.flight_tab_url += '?merchant_code=' + merchant_code;
            ctrl.hotel_tab_url += '?merchant_code=' + merchant_code;
            ctrl.merchant_code = merchant_code;
        }
        msisdn = $cookies.get("msisdn") || localStorage.getItem("msisdn");
        if (msisdn) {
            ctrl.flight_tab_url += '&msisdn=' + msisdn;
            ctrl.hotel_tab_url += '&msisdn=' + msisdn;
        }

        ctrl.checkShowInternationalFlight = function() {
            if (merchant_code == 'FSOFT') return false;
            return true;
        }

        ctrl.adultQtt = [];
        ctrl.childQtt = [];
        ctrl.infantQtt = [];
        for (var i = 1; i <= 9; i++) {
            ctrl.adultQtt.push(i);
        }
        $log.log(ctrl.searchOptions.searchType)
        $log.log("ctrl.searchOptions.searchType")

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.airlineDataSource = [];

        ctrl.domesticAirlines = {
            "VIETJET": false,
            "VNA": false,
            "JETSTAR": false,
            "BAMBOO": false,
        };

        var toggleProcessing = false;
        ctrl.switchTypeAhead = function() {
            if (toggleProcessing) {
                return;
            } else {
                toggleProcessing = true;
                var toVal = ctrl.searchOptions.toAirPort;
                var fromVal = ctrl.searchOptions.fromAirPort;


                ctrl.searchOptions.fromAirPort = toVal;
                $timeout(function() {
                    ctrl.searchOptions.toAirPort = fromVal;
                    $timeout(function() {
                        toggleProcessing = false;
                    }, 100);
                }, 100);
            }

        };

        ctrl.switchDtype = function() {
            if (ctrl.searchOptions.dtype == 'domestic') {
                ctrl.searchOptions.searchType = "oneway";
            } else {
                ctrl.searchOptions.searchType = "roundtrip";
            }
            $log.log("ctrl.searchOptions.searchType")
            $log.log(ctrl.searchOptions.searchType)
            ctrl.searchOptions.fromAirPort = '';
            ctrl.searchOptions.toAirPort = '';
        };

        ctrl.searchAirports = function(val, type) {
            if (ctrl.searchOptions.dtype == 'domestic') {
                return MetaData.searchAirportsLocal('VN');
            } else {
                return MetaData.searchAirportsWithout(val, ctrl.searchOptions, type);
            }
        };

        ctrl.formatLabel = function(model) {
            var airports = GlobalSrv.getLocalAirports();

            for (var idx in airports) {
                if (airports[idx].code == model) {
                    return airports[idx].city + ' (' + airports[idx].code + ')' + ', ' + airports[idx].country;
                }
            }

            return model;
        };

        ctrl.doSearchImpl = function() {

            // Validate search criteria
            if (!ValidationUtils.validateFlightSearch(ctrl.searchOptions)) {
                return;
            }

            // DO SEARCH

            var searchType = ctrl.searchOptions.searchType;

            var searchSpecialType = ctrl.getSearchSpecialType();

            ctrl.searchOptions.searchSpecialType = searchSpecialType;
            ctrl.searchOptions.selectStep = 1;
            ctrl.searchOptions.returnDomestic = false;

            //+++ TungNQ-17Sept17: reset temp cache of search option
            ctrl.searchOptions.departureItinerary = {};
            ctrl.searchOptions.returnSearchId = null;
            ctrl.searchOptions.searchId = null;
            ctrl.searchOptions.ssrOfferItemsDepart = [];
            ctrl.searchOptions.ssrOfferItemsReturn = [];
            //---

            // Show Dialogs:
            this.open();

            DataService.setSearchOption(ctrl.searchOptions);
            DataService.setSearchResult(ctrl.searchResult);

            DataService.setSavedSearchOption(jQuery.extend({}, ctrl.searchOptions));
            var departSearchOptions = jQuery.extend({}, ctrl.searchOptions);
            var departSearchResult = jQuery.extend({}, ctrl.searchResult);

            departSearchOptions.departureDate = ctrl.searchOptions.departureDate;

            // nam.huynhphuong GPM-233
            if (ctrl.searchOptions.dtype != 'international') {
                departSearchOptions.suppliers = ctrl.searchOptions.selectAirlines;
                $log.log("departSearchOptions.suppliers = " + departSearchOptions.suppliers);
            }

            departSearchOptions.fromAirPort = ctrl.searchOptions.fromAirPort;
            departSearchOptions.toAirPort = ctrl.searchOptions.toAirPort;

            if (departSearchOptions.dtype == 'international') {
                var myDataPromise = Flight.searchFlightInternational(departSearchOptions);
                myDataPromise.then(function(result) {
                    ctrl.searchResult = result;
                    departSearchResult = result;

                    ctrl.searchOptions.searchId = result.searchId;
                    departSearchOptions.searchId = result.searchId;

                    // Do get advance filter options
                    Flight.getAdvanceFilterOptions(ctrl.searchOptions).then(function(result) {
                        DataService.setAdvanceSearchFilterOptions(result);
                        ctrl.searchOptions.advanceFilterOptions = result;
                        departSearchOptions.advanceFilterOptions = result;

                        DataService.setDepartSearchResult(departSearchResult);
                        DataService.setDepartSearchOption(departSearchOptions);

                        var returnSearchOptions = jQuery.extend({}, departSearchResult);
                        var returnSearchResult = jQuery.extend({}, departSearchOptions);

                        DataService.setReturnSearchResult(returnSearchOptions);
                        DataService.setReturnSearchOption(returnSearchResult);

                        ctrl.doSearch({
                            $searchResult: ctrl.searchResult,
                            $searchOptions: ctrl.searchOptions
                        });
                    });

                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            } else {
                var myDataPromise = Flight.searchFlight(departSearchOptions);
                myDataPromise.then(function(result) {
                    ctrl.searchResult = result;
                    departSearchResult = result;

                    ctrl.searchOptions.searchId = result.searchId;
                    ctrl.searchOptions.returnSearchId = result.returnSearchId;
                    departSearchOptions.searchId = result.searchId;

                    // Do get advance filter options
                    Flight.getAdvanceFilterOptions(ctrl.searchOptions).then(function(result) {
                        DataService.setAdvanceSearchFilterOptions(result);
                        ctrl.searchOptions.advanceFilterOptions = result;
                        departSearchOptions.advanceFilterOptions = result;

                        DataService.setDepartSearchResult(departSearchResult);
                        DataService.setDepartSearchOption(departSearchOptions);

                        ctrl.doSearch({
                            $searchResult: ctrl.searchResult,
                            $searchOptions: ctrl.searchOptions
                        });
                    });

                    // Setup Search Return trip
                    if (ctrl.searchOptions.searchType == 'roundtrip') {
                        var returnSearchOptions = jQuery.extend({}, ctrl.searchOptions);
                        var returnSearchResult = jQuery.extend({}, ctrl.searchResult);

                        returnSearchOptions.departureDate = ctrl.searchOptions.returnDate;
                        returnSearchOptions.returnDate = ctrl.searchOptions.returnDate;
                        returnSearchOptions.fromAirPort = ctrl.searchOptions.toAirPort;
                        returnSearchOptions.toAirPort = ctrl.searchOptions.fromAirPort;
                        returnSearchOptions.searchId = result.returnSearchId;

                        DataService.setReturnSearchOption(returnSearchOptions);

                    }


                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });

            }
        };

        ctrl.initControl = function() {
            $timeout(function() {
                $('#fromAirPort').trigger('change');
                $('#toAirPort').trigger('change');

                $('#fAdtQttIdx').trigger('change');
                $timeout(function() {
                    $('#fChdQttIdx').trigger('change');
                }, 100);
            }, 1000);
        };

        ctrl.open = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/search/flight.search.loading.html',
                controller: 'FlightSearchLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    searchOptions: function() {
                        return ctrl.searchOptions;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        ctrl.getSearchSpecialType = function() {
            var searchdirectiontype = 'oneway';

            var searchType = ctrl.searchOptions.searchType;
            var dtype = ctrl.searchOptions.dtype;

            if (ctrl.searchOptions.searchType != 'roundtrip') {
                return 'oneway';
            } else {
                return dtype;
            }
        };

        ctrl.$postLink = function() {
            $timeout(function() {
                ctrl.initControl();
            }, 0);
        };
        // improve
        ctrl.clickAirline1 = '0';
        ctrl.searchOptions.selectAirlines = [];
        $scope.selectAirline = function(value) {
            if (ctrl.clickAirline1 === '0') {
                ctrl.searchOptions.selectAirlines = ['BL', 'VJ', 'VN', 'QH'];
            }
            if ($('.select-airlines .' + value + ' .itemAirline').is(':checked')) {
                if (ctrl.searchOptions.selectAirlines.indexOf(value) == -1) {
                    ctrl.searchOptions.selectAirlines.push(value);
                }
            } else {
                var indexAl = ctrl.searchOptions.selectAirlines.indexOf(value);
                ctrl.searchOptions.selectAirlines.splice(indexAl, 1);
            }
            ctrl.clickAirline1 = '1';
        }
    }

    var gtdFlightHomeSearchHeader = {
        templateUrl: 'app/components/flight/home/flight-home-search-header.html',
        controller: gtdFlightHomeSearchHeaderController,
        bindings: {
            searchType: '=',
            doSearch: '&',
            searchResult: '=?searchResult',
            searchOptions: '=?searchOptions'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightHomeSearchHeader', gtdFlightHomeSearchHeader);

})();

(function() {
    'use strict';

    gtdFsoftFlightSearchResultController.$inject = ['$location', '$cookies', '$log', '$rootScope', '$scope', '$uibModal', '$timeout', '$anchorScroll', 'MetaData', 'DataService', 'Flight', 'PaginationUtil', 'DialogService', 'IBE_KEYS', '$window', 'MerchantService'];

    function gtdFsoftFlightSearchResultController($location, $cookies, $log, $rootScope, $scope, $uibModal, $timeout, $anchorScroll, MetaData, DataService, Flight, PaginationUtil, DialogService, IBE_KEYS, $window, MerchantService) {
        var ctrl = this;
        ctrl.merchantCode = MerchantService.getMerchant();
        $scope.ibeKeys = IBE_KEYS;
        ctrl.chieuBay = 0;
        ctrl.filterAirline = filterAirline;
        ctrl.filterFlight = filterFlight;
        ctrl.filterpricedItineraries = filterpricedItineraries;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.airlineIdx = 1;
        ctrl.busy = false;

        ctrl.showCarousel = true;

        ctrl.searchOptions.departureDateDir = 'desc';
        ctrl.searchOptions.arrivalDateDir = 'desc';
        ctrl.searchOptions.durationDir = 'desc';
        ctrl.searchOptions.priceDir = 'asc';

        var RoleLevel = +ctrl.searchOptions.RoleLevel;
        var NCRange = +ctrl.searchOptions.NCRange;

        // INIT BACK
        ctrl.returnSearchOptions = DataService.getReturnSearchOption();
        ctrl.returnSearchResult = DataService.getReturnSearchResult();
        ctrl.departSearchOptions = DataService.getDepartSearchOption();
        ctrl.departSearchResult = DataService.getDepartSearchResult();
        ctrl.departPricedItinerary = DataService.getDepartPricedItinerary();
        ctrl.departGroupItem = DataService.getDepartGroupItem();
        ctrl.orgDepartPricedItinerary = DataService.getOrgDepartPricedItinerary();
        ctrl.orgDepartGroupItem = DataService.getOrgDepartGroupItem();

        ctrl.slickConfig = {
            enabled: true,
            //initialSlide: 1,
            slidesToShow: 4,
            slidesToScroll: 1,
            prevArrow: "<button type='button' class='slick-prev pull-left'><i class='fa fa-angle-left' aria-hidden='true'></i></button>",
            nextArrow: "<button type='button' class='slick-next pull-right'><i class='fa fa-angle-right' aria-hidden='true'></i></button>",
            infinite: false,
            method: {},
            event: {
                init: function(event, slick) {
                    //slick.slickGoTo(0); // slide to correct index when init
                }
            }
        };

        if (!ctrl.searchOptions.selectStep) {
            ctrl.searchOptions.selectStep = 1;
        }

        // function filterAirlineFollowFosft() {
        //     if (RoleLevel == 1 && NCRange > 0) {
        //         var airSupplier = [];
        //         var classCarouse = [];
        //         var min = 0;
        //         angular.forEach(ctrl.airlineCarouselArrays, function (item) {
        //             if (item.id == "VN" || item.id == "VJ" || item.id == "0V" ) {
        //                 if(min == 0 || parseFloat(item.price) < min) {
        //                     min = parseFloat(item.price);
        //                 }                        
        //             }

        //         });
        //         angular.forEach(ctrl.airlineCarouselArrays, function (item) {
        //             if (item.id == "VN" || item.id == "VJ" || item.id == "0V" ) {
        //                 if(min == 0 || parseFloat(item.price) <= (min + min * NCRange /100 )) {
        //                     airSupplier.push(item);
        //                 }                        
        //             }

        //         });
        //         angular.forEach(ctrl.classCarouselArrays, function (item) {
        //             if (item.id == "economy" || item.id == "promo") {
        //                 classCarouse.push(item);
        //             }

        //         });
        //         ctrl.airlineCarouselArrays = airSupplier;
        //         ctrl.classCarouselArrays = classCarouse;
        //     }
        //     if (RoleLevel == 2) {
        //         var airSupplier = [];
        //         var classCarouse = [];
        //         angular.forEach(ctrl.airlineCarouselArrays, function (item) {
        //             if (item.id == "VN" || item.id == "VJ" || item.id == "0V" ) {
        //                 airSupplier.push(item);
        //             }

        //         });
        //         angular.forEach(ctrl.classCarouselArrays, function (item) {
        //             if (item.id == "economy" || item.id == "promo") {
        //                 classCarouse.push(item);
        //             }

        //         });
        //         ctrl.airlineCarouselArrays = airSupplier;
        //         ctrl.classCarouselArrays = classCarouse;
        //     }
        //     if (RoleLevel == 1 && NCRange == 0) {
        //         var airSupplier = [];
        //         angular.forEach(ctrl.airlineCarouselArrays, function (item) {
        //             if (item.id == "VN"||item.id == "0V") {
        //                 airSupplier.push(item);
        //             }

        //         });
        //         ctrl.airlineCarouselArrays = airSupplier;

        //     }
        // }

        $scope.$watch(
            function(scope) {
                return ctrl.searchOptions.advanceFilterOptions;
            },
            function(newValue, oldValue) {
                ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();
                // filterAirlineFollowFosft();
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    //Tan fix thay đổi hành trình (GPM-275)
                    if (ctrl.searchOptions.selectAirlines && ctrl.searchOptions.selectAirlines.indexOf(item.id) != -1) {
                        item.checked = true;
                    }
                });
                $timeout(
                    ctrl.initControl(),
                    1000
                );
            }
        );

        $scope.$watch(
            function(scope) {
                return ctrl.searchResult;
            },
            function(newValue, oldValue) {

                /** tricky here: oldValue === newValue is when object is init again **/
                if (oldValue === newValue || oldValue.searchId != newValue.searchId) {
                    $timeout(function() {
                        // alert("BROADCAST");
                        $rootScope.$broadcast("gtd-refresh-airline-carousel", null);
                    }, 1000);
                }
            }
        );

        ctrl.initControl = function() {
            $log.log('3');
        };

        function checkSearchReturnDomesticCompleted(item, pricedItinerary) {

            var returnSearchResult = {};
            var returnSearchOptions = DataService.getReturnSearchOption();
            var departSearchOptions = DataService.getDepartSearchOption();



            returnSearchOptions.departureItinerary = {
                "airlineCode": item.airline,
                "fareSourceCode": pricedItinerary.airItineraryPricingInfo.fareSourceCode,
                "groupId": item.groupId,
                "searchId": departSearchOptions.searchId,
                "supplierCode": item.airSupplier
            };

            //TODO: check behaviour, if not as expected may need a new variable for this case
            //returnSearchOptions.selectStep = 2;
            returnSearchOptions.returnDomestic = true;

            ctrl.searchOptions.departureItinerary = returnSearchOptions.departureItinerary;
            ctrl.searchOptions.returnDomestic = returnSearchOptions.returnDomestic;
            Flight.searchFlightInCache(returnSearchOptions).then(function(result) {
                returnSearchResult = result;
                returnSearchOptions.searchId = result.searchId;

                Flight.getAdvanceFilterOptions(returnSearchOptions).then(function(result) {
                    DataService.setAdvanceSearchFilterOptions(result);
                    returnSearchOptions.advanceFilterOptions = result;
                    returnSearchOptions.returnSearchCompleted = true;

                    DataService.setReturnSearchResult(returnSearchResult);
                    DataService.setReturnSearchOption(returnSearchOptions);

                    ctrl.searchOptions.advanceFilterOptions = returnSearchOptions.advanceFilterOptions;
                    ctrl.searchOptions.returnSearchCompleted = returnSearchOptions.returnSearchCompleted;

                    /* do something*/
                    ctrl.moveToStep2(item, pricedItinerary);
                }, function error(res) {
                    returnSearchOptions.returnSearchCompleted = true;

                    DataService.setReturnSearchOption(returnSearchOptions);

                    // ctrl.searchOptions = returnSearchOptions;

                    DialogService.openHttpAlertDilalog(result);
                });

            });

        }

        $scope.$on('gtd-refresh-airline-carousel', function() {
            ctrl.refreshCarousel();
        });

        $scope.$on('gtd-search-domestic-return-completed', function() {
            $log.log('On event: gtd-search-domestic-return-completed');
            // if (ctrl.searchOptions.searchSpecialType == 'international' && )
        });


        ctrl.refreshCarousel = function() {
            ctrl.showCarousel = false;

            $timeout(
                function() {
                    // ctrl.searchOptions.advanceFilterOptions = v;
                    $timeout(
                        function() {
                            ctrl.showCarousel = true;

                            $timeout(function() {

                                $('.slick-slider').on('click', '.slick-slide', function(slide, index) {

                                    // $(slide.currentTarget).find('div.airline-code-hid').parent().addClass('active-airline');

                                    var airline = $(slide.currentTarget).find('div.airline-code-hid').html();
                                    $rootScope.$broadcast('gtd-select-airline', airline);
                                });

                            }, 1000);
                        },
                        100
                    );
                },
                100
            );
        };

        ctrl.moveToStep2 = function(item, pricedItinerary) {
            $rootScope.$broadcast('gtd-filter-completed-off', null);

            // move to step 2
            ctrl.currentGroupItem = item;
            ctrl.currentPricedItinerary = pricedItinerary;

            ctrl.searchOptions.searchId = DataService.getReturnSearchOption().searchId;
            ctrl.searchOptions.advanceFilterOptions = DataService.getReturnSearchOption().advanceFilterOptions;
            ctrl.searchResult = DataService.getReturnSearchResult();

            // Set cabin class to null -> Reset all filter
            if (ctrl.searchOptions.advanceFilters) {
                // ctrl.searchOptions.advanceFilters = {};
                ctrl.searchOptions.advanceFilters.stopOptions = [];
                ctrl.searchOptions.advanceFilters.airlineOptions = [];
                ctrl.searchOptions.advanceFilters.cabinClassOptions = [];
                ctrl.searchOptions.advanceFilters.ticketPolicyOptions = [];
                ctrl.searchOptions.advanceFilters.departureDateTimeOptions = [];
                ctrl.searchOptions.advanceFilters.arrivalDateTimeOptions = [];
                ctrl.searchOptions.advanceFilters.departureDateTimeReturnOptions = [];
                ctrl.searchOptions.advanceFilters.arrivalDateTimeReturnOptions = [];
            }

            // SET TO GLOBAL SERVICE
            DataService.setDepartGroupItem(item);
            DataService.setDepartPricedItinerary(pricedItinerary);

            DataService.setOrgDepartGroupItem(item);
            DataService.setOrgDepartPricedItinerary(pricedItinerary);

            ctrl.departGroupItem = item;
            ctrl.departPricedItinerary = pricedItinerary;

            ctrl.orgDepartGroupItem = item;
            ctrl.orgDepartPricedItinerary = pricedItinerary;

            ctrl.returnSearchOptions = DataService.getReturnSearchOption();


            if (ctrl.searchOptions.searchSpecialType == 'international') {
                ctrl.searchOptions.groupId = item.groupId;
                ctrl.searchOptions.minPrice = pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                ctrl.searchOptions.priceItineraryId = pricedItinerary.sequenceNumber;

                // FIX for temporary display
                if (ctrl.searchResult) {
                    ctrl.searchResult.groupPricedItineraries = [];
                }

                var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    // filterByNCRanges(RoleLevel, NCRange, result);

                    var returnSearchResult = result;

                    var rsr = DataService.getReturnSearchResult();
                    rsr.groupPricedItineraries = [];
                    rsr.groupPricedItineraries.push(result.groupPricedItinerary);

                    ctrl.searchResult = rsr;

                    DataService.setReturnSearchResult(rsr);

                });
            }

            ctrl.searchOptions.selectStep = 2;

            $timeout(function() {
                $rootScope.$broadcast('gtd-refresh-adv-search-result', null);
            }, 1000);

            ctrl.refreshCarousel();
            $anchorScroll();
        };

        ctrl.bookingClicked = function(item, pricedItinerary) {
            ctrl.chieuBay = 1;
            // ctrl.filterSearchResult()
            ctrl.currentGroupItem = item;
            ctrl.currentPricedItinerary = pricedItinerary;

            if (ctrl.searchOptions.searchSpecialType == 'oneway'
                // || ctrl.searchOptions.searchSpecialType == 'international'
            ) {
                // SET TO GLOBAL SERVICE
                DataService.setDepartGroupItem(item);
                DataService.setDepartPricedItinerary(pricedItinerary);


                // confirm
                ctrl.confirmBooking();

            } else {
                if (ctrl.searchOptions.searchSpecialType == 'international-fake') {
                    // International Roundtrip
                    // SET TO GLOBAL SERVICE
                    DataService.setDepartGroupItem(item);
                    DataService.setDepartPricedItinerary(pricedItinerary);

                    DataService.setReturnGroupItem(item);
                    DataService.setReturnPricedItinerary(pricedItinerary);

                    // confirm
                    ctrl.confirmBooking();
                } else {
                    // Domestic Roundtrip
                    // alert(ctrl.searchOptions.selectStep);
                    if (ctrl.searchOptions.selectStep == 1) {
                        if (ctrl.searchOptions.searchSpecialType == 'domestic') {
                            // check for completed search
                            checkSearchReturnDomesticCompleted(item, pricedItinerary);
                        } else {
                            ctrl.moveToStep2(item, pricedItinerary);
                        }

                    } else {
                        var returnGroupItem = item;
                        var returnPricedItinerary = pricedItinerary;

                        if (ctrl.searchOptions.searchSpecialType == 'international') {
                            returnGroupItem = jQuery.extend({}, item);
                            returnPricedItinerary = jQuery.extend({}, pricedItinerary);

                            // swap
                            returnGroupItem.originLocationCode = item.destinationLocationCode;
                            returnGroupItem.originLocationName = item.destinationLocationName;
                            returnGroupItem.originCity = item.destinationCity;
                            returnGroupItem.departureDateTime = item.arrivalDateTime;

                            returnGroupItem.destinationLocationCode = item.originLocationCode;
                            returnGroupItem.destinationLocationName = item.originLocationName;
                            returnGroupItem.destinationCity = item.originCity;
                            returnGroupItem.arrivalDateTime = item.departureDateTime;

                        }

                        // SET TO GLOBAL SERVICE
                        DataService.setReturnGroupItem(returnGroupItem);
                        DataService.setReturnPricedItinerary(returnPricedItinerary);

                        if (ctrl.searchOptions.searchSpecialType == 'international') {
                            DataService.setDepartPricedItinerary(returnPricedItinerary);
                        }

                        ctrl.returnGroupItem = returnGroupItem;
                        ctrl.returnPricedItinerary = returnPricedItinerary;

                        // confimm
                        ctrl.confirmBooking();
                    }
                }


            }
        };

        var changeFlightInProgress = false;
        ctrl.changeFlight = function() {
            if (changeFlightInProgress) {
                return;
            } else {
                changeFlightInProgress = true;
                $timeout(function() {

                    $rootScope.$broadcast('gtd-filter-completed-off', null);

                    // Move back to page search depart
                    ctrl.searchOptions.selectStep = 1;
                    ctrl.searchOptions.returnDomestic = false;
                    ctrl.searchOptions.advanceFilterOptions = DataService.getDepartSearchOption().advanceFilterOptions;

                    ctrl.searchOptions.searchId = DataService.getDepartSearchOption().searchId;
                    ctrl.searchResult = DataService.getDepartSearchResult();

                    DataService.setAdvanceSearchFilterOptions(ctrl.searchOptions.advanceFilterOptions);

                    ctrl.refreshCarousel();

                    $timeout(function() {
                        ctrl.filterCompleted = false;
                        // $rootScope.$broadcast('gtd-filter-completed-off', null);
                        $rootScope.$broadcast('gtd-search-completed-on', null);

                        $timeout(function() {
                            $rootScope.$broadcast('gtd-refresh-adv-search-result', null);

                            changeFlightInProgress = false;
                        }, 100);

                    }, 1000);

                    $anchorScroll();
                }, 1000);
            }

        };

        ctrl.confirmBooking = function() {
            if (modalInstance !== null) return;

            var templateUrl = 'app/flights/search/flight.search.confirmbooking.html';
            if (ctrl.searchOptions.dtype == 'international') {
                templateUrl = 'app/flights/search/flight.search.confirmbooking.international.html';
            }

            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: templateUrl,
                controller: 'FlightSearchConfirmBookingController',
                controllerAs: 'vm',
                windowClass: "tiki-hidden-modal",
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    searchOptions: function() {
                        return ctrl.searchOptions;
                    },
                    currentGroupItem: function() {
                        return ctrl.currentGroupItem;
                    },
                    currentPricedItinerary: function() {
                        return ctrl.currentPricedItinerary;
                    }
                }
            });


            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        ctrl.nextPage = function() {

            if (ctrl.busy || (ctrl.searchOptions.dtype == 'international' && ctrl.searchOptions.selectStep == 2)) {
                return;
            }

            if (PaginationUtil.isLastPage(ctrl.searchResult.page)) {
                return;
            }

            ctrl.busy = true;

            // Increase page
            ctrl.searchOptions.page++;

            var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
            myDataPromise.then(function(result) {

                // filterByNCRange(RoleLevel, NCRange, result);

                angular.forEach(result.groupPricedItineraries, function(item) {
                    ctrl.searchResult.groupPricedItineraries.push(item);
                });

                ctrl.searchResult.page = result.page;

                ctrl.busy = false;
            });
        };

        ctrl.setSort = function(property, direction) {
            ctrl.searchOptions.sortField = property;
            if (property == 'departureDate') {
                if (ctrl.searchOptions.departureDateDir == 'asc') {
                    ctrl.searchOptions.departureDateDir = 'desc';
                } else {
                    ctrl.searchOptions.departureDateDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.departureDateDir;
            } else if (property == 'arrivalDate') {
                if (ctrl.searchOptions.arrivalDateDir == 'asc') {
                    ctrl.searchOptions.arrivalDateDir = 'desc';
                } else {
                    ctrl.searchOptions.arrivalDateDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.arrivalDateDir;
            } else if (property == 'duration') {
                if (ctrl.searchOptions.durationDir == 'asc') {
                    ctrl.searchOptions.durationDir = 'desc';
                } else {
                    ctrl.searchOptions.durationDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.durationDir;
            } else if (property == 'price') {
                if (ctrl.searchOptions.priceDir == 'asc') {
                    ctrl.searchOptions.priceDir = 'desc';
                } else {
                    ctrl.searchOptions.priceDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.priceDir;
            }
        };
        ctrl.showSFlight = function(event) {
            $(event.target).toggleClass('clicked');
            $(event.target).parent().find('.list-search-item').slideToggle(0);
        };

        ctrl.sort = function() {

            if (ctrl.searchOptions.dtype == 'international' && ctrl.searchOptions.selectStep == 2) {
                // Reset page
                ctrl.searchOptions.page = 0;

                var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    // filterByNCRange(RoleLevel, NCRange, result);
                    var returnSearchResult = result;

                    var rsr = DataService.getReturnSearchResult();
                    rsr.groupPricedItineraries = [];
                    rsr.groupPricedItineraries.push(result.groupPricedItinerary);

                    ctrl.searchResult = rsr;

                    DataService.setReturnSearchResult(rsr);
                });

                return;
            } else {
                // Reset page
                ctrl.searchOptions.page = 0;
                var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
                myDataPromise.then(function(result) {

                    // filterByNCRange(RoleLevel, NCRange, result);

                    ctrl.searchResult = result;
                    ctrl.searchResult.page = result.page;
                    ctrl.searchOptions.searchId = result.searchId;

                    ctrl.busy = false;
                });
            }

        };


        function filterByNCRange(role, range, data) {
            if (data && data.page && data.page.totalElements > 0) {
                var tempTicketsData = data.groupPricedItineraries;
                var filterResult = [];
                if (role == 1 && range > 0) {
                    var min = 0;
                    if (ctrl.airlineCarouselArrays.length == 1) {
                        min = parseFloat(ctrl.airlineCarouselArrays[0].price);
                    } else {
                        angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                            if (item.id == "VJ" || item.id == "VN" || item.id == "0V") {
                                if (parseFloat(item.price) != 0 && parseFloat(item.price) < min)
                                    min = parseFloat(item.price);
                            }
                        });
                    }

                    var max = min + (min * range / 100);
                    angular.forEach(ctrl.airlineCarouselArrays, function(item, index) {
                        if (parseFloat(item.price) > max) {
                            ctrl.airlineCarouselArrays.splice(index, 1);
                        }
                    });
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var price = tempTicketsData[i].pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                        if (price <= max) {
                            if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                                filterResult.push(tempTicketsData[i]);
                            }
                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 2) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 1 && range == 0) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var airSupplier = tempTicketsData[i].airSupplier;
                        if (airSupplier == "VN" || airSupplier == "0V") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }
            }
        }

        ctrl.loadMore = function($event, groupItem) {
            if (ctrl.busy) {
                return;
            }
            ctrl.busy = true;
            ctrl.searchOptions.groupId = groupItem.groupId;
            ctrl.searchOptions.loadMore = true;


            var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
            myDataPromise.then(function(result) {

                // reset
                ctrl.searchOptions.loadMore = false;

                angular.element($event.target).closest('.search-result-item').find('.list-search-item.multiple').addClass('showed');
                ctrl.busy = false;
            }, function(result) {
                ctrl.searchOptions.loadMore = false;
            });

        };

        ctrl.loadLess = function($event, groupItem) {
            ctrl.searchOptions.groupId = groupItem.groupId;
            groupItem.pricedItineraries = [groupItem.pricedItineraries[0]];
            angular.element($event.target).closest('.search-result-item').find('.list-search-item.multiple').removeClass('showed');
        };

        $(document).ready(function() {
            $timeout(
                ctrl.initControl(),
                1000
            );
        });

        function filterAirline(data) {
            if (RoleLevel == 1 && NCRange > 0) {
                var minPrice = 0;
                if (data && data.length > 0) {
                    minPrice = parseFloat(ctrl.airlineCarouselArrays[0].price);
                }
                var airSupplier = [];
                angular.forEach(data, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        if (minPrice == 0 || item.price <= (minPrice + minPrice * NCRange / 100)) {
                            airSupplier.push(item)
                        }
                    }
                });
                return airSupplier;
                // ctrl.airlineCarouselArrays = airSupplier;
            }
            if (RoleLevel == 2) {
                var airSupplier = [];
                angular.forEach(data, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                return airSupplier;
                // ctrl.airlineCarouselArrays = airSupplier;
            }
            if (RoleLevel == 1 && NCRange == 0) {
                var airSupplier = [];
                angular.forEach(data, function(item) {
                    if (item.id == "VN" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                return airSupplier;
                // ctrl.airlineCarouselArrays = airSupplier;

            }
            return data;
        }

        function filterFlight(data) {
            var filterResult = [];
            if (data && data.length > 0) {
                var tempTicketsData = data;
                if (RoleLevel == 1 && NCRange > 0) {
                    var min = 0;
                    if (ctrl.airlineCarouselArrays.length > 0) {
                        min = parseFloat(ctrl.airlineCarouselArrays[0].price);
                    }
                    angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                        if (item.id == "VJ" || item.id == "VN" || item.id == "0V") {
                            if (min == 0 || (parseFloat(item.price) != 0 && parseFloat(item.price) < min))
                                min = parseFloat(item.price);
                        }
                    });

                    var max = min + (min * NCRange / 100);
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var price = tempTicketsData[i].pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                        if (price <= max) {
                            if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                                filterResult.push(tempTicketsData[i]);
                            }
                        }
                    }

                    return filterResult;
                    // data.groupPricedItineraries = filterResult;
                }
                if (RoleLevel == 2) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    return filterResult;
                    // data.groupPricedItineraries = filterResult;
                }
                if (RoleLevel == 1 && NCRange == 0) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var airSupplier = tempTicketsData[i].airSupplier;
                        if (airSupplier == "VN" || airSupplier == "0V") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    return filterResult;
                    // data.groupPricedItineraries = filterResult;
                }
            }
            return filterResult;
        }

        function filterpricedItineraries(data) {
            return data;
        }

    }

    var gtdFsoftFlightSearchResult = {
        templateUrl: 'app/components/flight/fsoft-flight-search-result.html',
        controller: gtdFsoftFlightSearchResultController,
        bindings: {
            searchResult: '=',
            searchOptions: '=',
            filterCompleted: '=',
            searchCompleted: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFsoftFlightSearchResult', gtdFsoftFlightSearchResult);

})();

(function() {
    'use strict';

    gtdFsoftFlightSearchAdvController.$inject = ['$localStorage', '$location', '$cookies', '$log', '$scope', '$timeout', '$rootScope', 'MetaData', 'Flight', 'DataService', 'IBE_KEYS', 'ValidationUtils', 'ThemeCfg', 'TEMPLATE_URL', 'MerchantService'];

    function gtdFsoftFlightSearchAdvController($localStorage, $location, $cookies, $log, $scope, $timeout, $rootScope, MetaData, Flight, DataService, IBE_KEYS, ValidationUtils, ThemeCfg, TEMPLATE_URL, MerchantService) {
        var ctrl = this;
        ctrl.chieuBay = 0;
        $scope.ibeKeys = IBE_KEYS;
        var merchantCode = MerchantService.getMerchant();
        var RoleLevel = +ctrl.searchOptions.RoleLevel;
        var NCRange = +ctrl.searchOptions.NCRange;
        ctrl.filterClass = filterClass;
        ctrl.filterAirline = filterAirline;

        ctrl.loadMore = false;
        ctrl.showAdv = true;

        ctrl.isMobile = ValidationUtils.isMobileDevice();
        ctrl.class_single_web = '';
        if (merchantCode) {
            ctrl.class_single_web += merchantCode;
            if (!ThemeCfg[merchantCode])
                ctrl.enable_template = true;
            else
                ctrl.enable_template = false;

        }


        ctrl.init = function() {
            if (ctrl.searchOptions.class == 'E' || ctrl.searchOptions.class == 'B') {
                if (ctrl.searchOptions.class == 'E')
                    ctrl.searchOptions.className = 'economy';

                if (ctrl.searchOptions.class == 'B')
                    ctrl.searchOptions.className = 'business';

                GetClass(ctrl.searchResult.groupPricedItineraries)

                if (!ctrl.airlineCarouselArrays)
                    ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();

                // filterAirlineFollowFosft();

                angular.forEach(ctrl.classCarouselArrays, function(item) {
                    if (item.id == ctrl.searchOptions.className) {
                        item.checked = true;
                    }
                    item.checked = true;
                });


                // Set Sort conditions
                ctrl.searchOptions.sortField = 'price';
                ctrl.searchOptions.sortDir = 'asc';


                ctrl.doFilter();

                ctrl.needSetupClass = true;
            }
        };


        $scope.$on('gtd-refresh-adv-search-result', function() {
            ctrl.resetFilter();
        });

        //Tan improve 19/02/2019
        function GetClass(items) {
            angular.forEach(items, function(item) {
                if (item.airSupplier == 'MF') {
                    ctrl.classCarouselArrays = Flight.getClassInterAvailableOptions();
                    return true;
                } else {
                    ctrl.classCarouselArrays = Flight.getClassAvailableOptions();
                }
            });
        }

        $scope.$watch(function(scope) {
                return ctrl.searchOptions.selectStep;
            },
            function(newValue, oldValue) {
                if (ctrl.searchOptions.selectStep == 2) {
                    angular.forEach(ctrl.classCarouselArrays, function(item) {
                        item.checked = false;
                    });
                } else {
                    angular.forEach(ctrl.classCarouselArrays, function(item) {
                        if (item.id == ctrl.searchOptions.className) {
                            item.checked = true;
                        }
                    });
                }
            }
        );
        // function filterAirlineFollowFosft() {
        //     var RoleLevel = +ctrl.searchOptions.RoleLevel;
        //     var NCRange = +ctrl.searchOptions.NCRange;
        //     if (RoleLevel == 1 && NCRange > 0) {
        //         var airSupplier = [];
        //         var classCarouse = [];
        //         angular.forEach(ctrl.airlineCarouselArrays, function (item) {
        //             if (item.id == "VN" || item.id == "VJ" || item.id == "0V" ) {
        //                 airSupplier.push(item);
        //             }

        //         });
        //         angular.forEach(ctrl.classCarouselArrays, function (item) {
        //             if (item.id == "economy" || item.id == "promo") {
        //                 classCarouse.push(item);
        //             }

        //         });
        //         ctrl.airlineCarouselArrays = airSupplier;
        //         ctrl.classCarouselArrays = classCarouse;
        //     }
        //     if (RoleLevel == 2) {
        //         var airSupplier = [];
        //         var classCarouse = [];
        //         angular.forEach(ctrl.airlineCarouselArrays, function (item) {
        //             if (item.id == "VN" || item.id == "VJ" || item.id == "0V" ) {
        //                 airSupplier.push(item);
        //             }

        //         });
        //         angular.forEach(ctrl.classCarouselArrays, function (item) {
        //             if (item.id == "economy" || item.id == "promo") {
        //                 classCarouse.push(item);
        //             }

        //         });
        //         ctrl.airlineCarouselArrays = airSupplier;
        //         ctrl.classCarouselArrays = classCarouse;
        //     }
        //     if (RoleLevel == 1 && NCRange == 0) {
        //         var airSupplier = [];
        //         angular.forEach(ctrl.airlineCarouselArrays, function (item) {
        //             if (item.id == "VN"||item.id == "0V") {
        //                 airSupplier.push(item);
        //             }

        //         });
        //         ctrl.airlineCarouselArrays = airSupplier;

        //     }
        // }

        $scope.$watch(function(scope) {
                return ctrl.searchOptions.advanceFilterOptions;
            },
            function(newValue, oldValue) {
                ctrl.transitCarouselArrays = Flight.getTransitAvailableOptions();

                ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();

                // filterAirlineFollowFosft();

                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (ctrl.searchOptions.selectAirlines && ctrl.searchOptions.selectAirlines.indexOf(item.id) != -1) {
                        item.checked = true;
                    }
                });


                ctrl.fromTimeCarouselArrays = Flight.getTimeAvailableOptions();
                ctrl.toTimeCarouselArrays = Flight.getTimeAvailableOptions();

                ctrl.fromTimeReturnCarouselArrays = Flight.getTimeAvailableOptions();
                ctrl.toTimeReturnCarouselArrays = Flight.getTimeAvailableOptions();

                ctrl.policyArrays = Flight.getTicketPolicyOptions();

                ctrl.setupAdvFilter();
            }
        );

        $scope.$on('gtd-select-airline', function(event, data) {
            ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();
            // filterAirlineFollowFosft();

            angular.forEach(ctrl.airlineCarouselArrays, function(item) {

                if (item.id == data.trim()) {
                    item.checked = true;
                }
            });

            // Set Sort conditions
            ctrl.searchOptions.sortField = 'departureDate';
            ctrl.searchOptions.sortDir = 'asc';

            ctrl.doFilter();
        });

        ctrl.resetFilter = function() {
            angular.forEach(ctrl.transitCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.classCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.fromTimeCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.toTimeCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.fromTimeReturnCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.toTimeReturnCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.policyArrays, function(item) {
                item.checked = false;
            });

            ctrl.doFilter();
        };

        ctrl.setupAdvFilter = function() {
            var transitOpts = [];
            var airlineOpts = [];
            var classOpts = [];
            var fromTimeOpts = [];
            var toTimeOpts = [];

            var fromTimeReturnOpts = [];
            var toTimeReturnOpts = [];

            var policyOpts = [];

            angular.forEach(ctrl.transitCarouselArrays, function(item) {
                if (item.checked == true) {
                    transitOpts.push(item.id);
                }
            });

            angular.forEach(ctrl.fromTimeCarouselArrays, function(item) {
                if (item.checked == true) {
                    fromTimeOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.toTimeCarouselArrays, function(item) {
                if (item.checked == true) {
                    toTimeOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.fromTimeReturnCarouselArrays, function(item) {
                if (item.checked == true) {
                    fromTimeReturnOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.toTimeReturnCarouselArrays, function(item) {
                if (item.checked == true) {
                    toTimeReturnOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                if (item.checked == true) {
                    airlineOpts.push(item.id);
                }
            });

            angular.forEach(ctrl.classCarouselArrays, function(item) {
                if (item.checked == true) {
                    classOpts.push(item.id);
                }
            });

            angular.forEach(ctrl.policyArrays, function(item) {
                if (item.checked == true) {
                    policyOpts.push(item.id);
                }
            });

            ctrl.searchOptions.advanceFilters = {
                "stopOptions": transitOpts,
                "airlineOptions": airlineOpts,
                "cabinClassOptions": classOpts,
                "ticketPolicyOptions": policyOpts,
                "departureDateTimeOptions": fromTimeOpts,
                "arrivalDateTimeOptions": toTimeOpts,
                "departureDateTimeReturnOptions": fromTimeReturnOpts,
                "arrivalDateTimeReturnOptions": toTimeReturnOpts,
                "flightType": ctrl.searchOptions.dtype
            };
        };

        function filterByNCRange(role, range, data) {
            if (data && data.page && data.page.totalElements > 0) {
                var tempTicketsData = data.groupPricedItineraries;
                var filterResult = [];

                if (role == 1 && range > 0) {
                    var min = 0;

                    if (ctrl.airlineCarouselArrays.length == 1) {
                        min = parseFloat(ctrl.airlineCarouselArrays[0].price);
                    } else {
                        angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                            if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                                if (min == 0 || parseFloat(item.price) < min) {
                                    min = parseFloat(item.price);
                                }
                            }
                        });
                    }
                    var max = min + (min * range / 100);

                    angular.forEach(ctrl.airlineCarouselArrays, function(item, index) {
                        if (parseFloat(item.price) > max) {
                            ctrl.airlineCarouselArrays.splice(index, 1);
                        }
                    });
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var price = tempTicketsData[i].pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                        if (price <= max) {
                            if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                                filterResult.push(tempTicketsData[i]);
                            }

                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 2) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 1 && range == 0) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var airSupplier = tempTicketsData[i].airSupplier;
                        if (airSupplier == "VN") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }

            }
        }

        ctrl.doFilter = function() {
            $('.formFilter').removeClass('show');
            $('.sm-form-filter').hide();
            ctrl.filterCompleted = false;
            $rootScope.$broadcast('gtd-filter-completed-off', null);

            $rootScope.$broadcast('gtd-adv-do-filter', null);

            if (!ctrl.searchCompleted) {
                return;
            }

            ctrl.setupAdvFilter();


            if (ctrl.searchOptions.dtype == 'international' && ctrl.searchOptions.selectStep == 2) {
                // Reset page
                ctrl.searchOptions.page = 0;


                var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    var returnSearchResult = result;

                    var rsr = DataService.getReturnSearchResult();
                    // TODO implement for FSoft
                    rsr.groupPricedItineraries = [];

                    // check NCRangeFsoft
                    // filterByNCRange1(RoleLevel, NCRange, result);

                    rsr.groupPricedItineraries.push(result.groupPricedItinerary);
                    rsr.page = result.page;

                    ctrl.searchResult = rsr;

                    DataService.setReturnSearchResult(rsr);

                    $timeout(function() {
                        ctrl.filterCompleted = true;
                        $rootScope.$broadcast('gtd-filter-completed-on', null);
                        // alert("BROADCAST");
                        // $rootScope.$broadcast("gtd-refresh-airline-carousel", null);
                    }, 1000);
                });

                return;
            } else {
                // Reset page
                ctrl.searchOptions.page = 0;
                var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    // TODO implement for FSoft

                    // filterByNCRange1(RoleLevel, NCRange, result);

                    ctrl.searchResult = result;
                    ctrl.searchResult.page = result.page;

                    if (result.searchId) {
                        ctrl.searchOptions.searchId = result.searchId;
                    }

                    ctrl.busy = false;

                    $timeout(function() {
                        ctrl.filterCompleted = true;
                        $rootScope.$broadcast('gtd-filter-completed-on', null);
                    }, 1000);
                });
            }

        };

        ctrl.init();

        function filterClass(data) {
            if (RoleLevel == 1 && NCRange > 0) {
                var classCarouse = [];

                angular.forEach(data, function(item) {
                    if (item.id == "economy" || item.id == "promo") {
                        classCarouse.push(item);
                    }

                });
                return classCarouse;
                // ctrl.classCarouselArrays = classCarouse;
            }
            if (RoleLevel == 2) {
                var classCarouse = [];
                angular.forEach(data, function(item) {
                    if (item.id == "economy" || item.id == "promo") {
                        classCarouse.push(item);
                    }

                });
                return classCarouse;
                // ctrl.classCarouselArrays = classCarouse;
            }
            if (RoleLevel == 1 && NCRange == 0) {
                return ctrl.classCarouselArrays;
            }
            return ctrl.classCarouselArrays;
        }

        function filterAirline(data) {
            if (RoleLevel == 1 && NCRange > 0) {
                var minPrice = 0;
                if (data && data.length > 0) {
                    minPrice = parseFloat(ctrl.airlineCarouselArrays[0].price);
                }
                var airSupplier = [];
                angular.forEach(data, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        if (minPrice == 0 || item.price <= (minPrice + minPrice * NCRange / 100)) {
                            airSupplier.push(item)
                        }
                    }
                });
                return airSupplier;
                // ctrl.airlineCarouselArrays = airSupplier;
            }
            if (RoleLevel == 2) {
                var airSupplier = [];
                angular.forEach(data, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                return airSupplier;
                // ctrl.airlineCarouselArrays = airSupplier;
            }
            if (RoleLevel == 1 && NCRange == 0) {
                var airSupplier = [];
                angular.forEach(data, function(item) {
                    if (item.id == "VN" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                return airSupplier;
                // ctrl.airlineCarouselArrays = airSupplier;

            }
            return data;
        }
    }

    var gtdFsoftFlightSearchAdv = {
        templateUrl: 'app/components/flight/fsoft-flight-search-adv.html',
        controller: gtdFsoftFlightSearchAdvController,
        bindings: {
            searchResult: '=',
            searchOptions: '=',
            filterCompleted: '=',
            searchCompleted: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFsoftFlightSearchAdv', gtdFsoftFlightSearchAdv);
})();

(function() {
    'use strict';

    gtdFlightSearchResultController.$inject = ['$location', '$cookies', '$log', '$rootScope', '$scope', '$uibModal', '$timeout', '$anchorScroll', 'MetaData', 'DataService', 'Flight', 'PaginationUtil', 'DialogService', 'IBE_KEYS', '$window'];

    function gtdFlightSearchResultController($location, $cookies, $log, $rootScope, $scope, $uibModal, $timeout, $anchorScroll, MetaData, DataService, Flight, PaginationUtil, DialogService, IBE_KEYS, $window) {
        var ctrl = this;
        ctrl.merchantCode = $location.search().merchant_code;
        if (!ctrl.merchantCode) ctrl.merchantCode = $cookies.get('merchant_code') || localStorage.getItem("merchant_code");
        $scope.ibeKeys = IBE_KEYS;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        ctrl.airlineIdx = 1;
        ctrl.busy = false;

        ctrl.showCarousel = true;

        ctrl.searchOptions.departureDateDir = 'desc';
        ctrl.searchOptions.arrivalDateDir = 'desc';
        ctrl.searchOptions.durationDir = 'desc';
        ctrl.searchOptions.priceDir = 'asc';

        // INIT BACK
        ctrl.returnSearchOptions = DataService.getReturnSearchOption();
        ctrl.returnSearchResult = DataService.getReturnSearchResult();
        ctrl.departSearchOptions = DataService.getDepartSearchOption();
        ctrl.departSearchResult = DataService.getDepartSearchResult();
        ctrl.departPricedItinerary = DataService.getDepartPricedItinerary();
        ctrl.departGroupItem = DataService.getDepartGroupItem();
        ctrl.orgDepartPricedItinerary = DataService.getOrgDepartPricedItinerary();
        ctrl.orgDepartGroupItem = DataService.getOrgDepartGroupItem();


        ctrl.slickConfig = {
            enabled: true,
            //initialSlide: 1,
            slidesToShow: 4,
            slidesToScroll: 1,
            prevArrow: "<button type='button' class='slick-prev pull-left'><i class='fa fa-angle-left' aria-hidden='true'></i></button>",
            nextArrow: "<button type='button' class='slick-next pull-right'><i class='fa fa-angle-right' aria-hidden='true'></i></button>",
            infinite: false,
            method: {},
            event: {
                init: function(event, slick) {
                    //slick.slickGoTo(0); // slide to correct index when init
                }
            }
        };

        if (!ctrl.searchOptions.selectStep) {
            ctrl.searchOptions.selectStep = 1;
        }

        // ctrl.initController = initController;


        // ctrl.initController();

        // if(ctrl.searchOptions.dtype == 'domestic') {
        //     //tien.tan - 28-12-2018 - thay doi hanh trinh (GPM-275)
        //     //ctrl.searchOptions.advanceFilters.airlineOptions = ctrl.searchOptions.selectAirlines;
        //     if(ctrl.searchOptions.advanceFilters) {
        //         //ctrl.searchOptions.advanceFilters.airlineOptions = ctrl.searchOptions.selectAirlines;
        //         ctrl.searchOptions.advanceFilters.airlineOptions.selectAirlines = ctrl.searchOptions;
        //     }
        //     var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
        //     myDataPromise.then(function(result) {
        //         ctrl.searchResult = result;
        //         ctrl.searchResult.page = result.page;
        //         if (result.searchId) {
        //             ctrl.searchOptions.searchId = result.searchId;
        //         }
        //         $timeout(function () {
        //             ctrl.filterCompleted = true;
        //             $rootScope.$broadcast('gtd-filter-completed-on', null);

        //             angular.forEach(ctrl.airlineCarouselArrays, function(item) {
        //             	if(ctrl.searchOptions.selectAirlines && ctrl.searchOptions.selectAirlines.indexOf(item.id) != -1) {
        //             		item.checked = true;
        //                 } else {
        //                 	item.checked = false;
        //                 }

        //             });

        //         }, 1000);
        //     });
        // }

        // function initController() {
        //                 //tien.tan - 28-12-2018 - thay doi hanh trinh (GPM-275)
        //     //ctrl.searchOptions.advanceFilters.airlineOptions = ctrl.searchOptions.selectAirlines;
        //     if(ctrl.searchOptions.advanceFilters) {
        //         //ctrl.searchOptions.advanceFilters.airlineOptions = ctrl.searchOptions.selectAirlines;
        //         ctrl.searchOptions.advanceFilters.airlineOptions.selectAirlines = ctrl.searchOptions;
        //     }
        //     var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
        //     myDataPromise.then(function(result) {
        //         ctrl.searchResult = result;
        //
        //         ctrl.searchResult.page = result.page;
        //         if (result.searchId) {
        //             ctrl.searchOptions.searchId = result.searchId;
        //         }
        //         $timeout(function () {
        //             ctrl.filterCompleted = true;
        //             $rootScope.$broadcast('gtd-filter-completed-on', null);
        //
        //             angular.forEach(ctrl.airlineCarouselArrays, function(item) {
        //             	if(ctrl.searchOptions.selectAirlines && ctrl.searchOptions.selectAirlines.indexOf(item.id) != -1) {
        //             		item.checked = true;
        //                 } else {
        //                 	item.checked = false;
        //                 }
        //
        //             });
        //
        //         }, 1000);
        //     });
        // }
        function filterAirlineFollowFosft() {
            var RoleLevel = ctrl.searchOptions.RoleLevel;
            var NCRange = ctrl.searchOptions.NCRange;
            if (RoleLevel == 1 && NCRange > 0) {
                var airSupplier = [];
                var classCarouse = [];
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                angular.forEach(ctrl.classCarouselArrays, function(item) {
                    if (item.id == "economy" || item.id == "promo") {
                        classCarouse.push(item);
                    }

                });
                ctrl.airlineCarouselArrays = airSupplier;
                ctrl.classCarouselArrays = classCarouse;
            }
            if (RoleLevel == 2) {
                var airSupplier = [];
                var classCarouse = [];
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                angular.forEach(ctrl.classCarouselArrays, function(item) {
                    if (item.id == "economy" || item.id == "promo") {
                        classCarouse.push(item);
                    }

                });
                ctrl.airlineCarouselArrays = airSupplier;
                ctrl.classCarouselArrays = classCarouse;
            }
            if (RoleLevel == 1 && NCRange == 0) {
                var airSupplier = [];
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (item.id == "VN" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                ctrl.airlineCarouselArrays = airSupplier;

            }
        }

        $scope.$watch(
            function(scope) {
                return ctrl.searchOptions.advanceFilterOptions;
            },
            function(newValue, oldValue) {
                //ctrl.searchOptions.advanceFilters.airlineOptions
                ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();
                if (ctrl.merchantCode && ctrl.merchantCode == 'FSOFT') {
                    filterAirlineFollowFosft();
                }
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    //Tan fix thay đổi hành trình (GPM-275)
                    if (ctrl.searchOptions.selectAirlines && ctrl.searchOptions.selectAirlines.indexOf(item.id) != -1) {
                        $log.log("101Danhnc" + item.id);
                        item.checked = true;
                    }
                });
                $timeout(
                    ctrl.initControl(),
                    1000
                );
            }
        );

        $scope.$watch(
            function(scope) {
                return ctrl.searchResult;
            },
            function(newValue, oldValue) {

                $log.log('ICOMEHERE searchResult for carousel change');
                $log.log(oldValue);
                $log.log(newValue);
                /** tricky here: oldValue === newValue is when object is init again **/
                if (oldValue === newValue || oldValue.searchId != newValue.searchId) {
                    $log.log('REFRESH CAROUSEL ++++++++ ');
                    $timeout(function() {
                        // alert("BROADCAST");
                        $rootScope.$broadcast("gtd-refresh-airline-carousel", null);
                    }, 1000);
                }
            }
        );

        ctrl.initControl = function() {
            $log.log('3');
        };

        function checkSearchReturnDomesticCompleted(item, pricedItinerary) {

            var returnSearchResult = {};
            var returnSearchOptions = DataService.getReturnSearchOption();
            var departSearchOptions = DataService.getDepartSearchOption();

            returnSearchOptions.departureItinerary = {
                "airlineCode": item.airline,
                "fareSourceCode": pricedItinerary.airItineraryPricingInfo.fareSourceCode,
                "groupId": item.groupId,
                "searchId": departSearchOptions.searchId,
                "supplierCode": item.airSupplier
            };

            //TODO: check behaviour, if not as expected may need a new variable for this case
            //returnSearchOptions.selectStep = 2;
            returnSearchOptions.returnDomestic = true;

            ctrl.searchOptions.departureItinerary = returnSearchOptions.departureItinerary;
            ctrl.searchOptions.returnDomestic = returnSearchOptions.returnDomestic;

            Flight.searchFlightInCache(returnSearchOptions).then(function(result) {
                returnSearchResult = result;
                returnSearchOptions.searchId = result.searchId;

                Flight.getAdvanceFilterOptions(returnSearchOptions).then(function(result) {
                    DataService.setAdvanceSearchFilterOptions(result);
                    returnSearchOptions.advanceFilterOptions = result;
                    returnSearchOptions.returnSearchCompleted = true;

                    DataService.setReturnSearchResult(returnSearchResult);
                    DataService.setReturnSearchOption(returnSearchOptions);

                    ctrl.searchOptions.advanceFilterOptions = returnSearchOptions.advanceFilterOptions;
                    ctrl.searchOptions.returnSearchCompleted = returnSearchOptions.returnSearchCompleted;

                    /* do something*/
                    ctrl.moveToStep2(item, pricedItinerary);
                }, function error(res) {
                    returnSearchOptions.returnSearchCompleted = true;

                    DataService.setReturnSearchOption(returnSearchOptions);

                    // ctrl.searchOptions = returnSearchOptions;

                    DialogService.openHttpAlertDilalog(result);
                });

            });

        }

        $scope.$on('gtd-refresh-airline-carousel', function() {
            $log.log('On event: gtd-refresh-airline-carousel');
            ctrl.refreshCarousel();
        });

        $scope.$on('gtd-search-domestic-return-completed', function() {
            $log.log('On event: gtd-search-domestic-return-completed');
            // if (ctrl.searchOptions.searchSpecialType == 'international' && )
        });


        ctrl.refreshCarousel = function() {
            ctrl.showCarousel = false;

            $timeout(
                function() {
                    // ctrl.searchOptions.advanceFilterOptions = v;
                    $timeout(
                        function() {
                            $log.log("Refresh carousel: ctrl.airlineCarouselArrays = ");
                            $log.log(ctrl.airlineCarouselArrays);
                            ctrl.showCarousel = true;

                            $timeout(function() {

                                $('.slick-slider').on('click', '.slick-slide', function(slide, index) {

                                    // $(slide.currentTarget).find('div.airline-code-hid').parent().addClass('active-airline');

                                    var airline = $(slide.currentTarget).find('div.airline-code-hid').html();
                                    $rootScope.$broadcast('gtd-select-airline', airline);
                                });

                            }, 1000);
                        },
                        100
                    );
                },
                100
            );
        };

        ctrl.moveToStep2 = function(item, pricedItinerary) {
            // $log.log(item);
            // $log.log(pricedItinerary);
            $rootScope.$broadcast('gtd-filter-completed-off', null);

            // move to step 2
            ctrl.currentGroupItem = item;
            ctrl.currentPricedItinerary = pricedItinerary;

            ctrl.searchOptions.searchId = DataService.getReturnSearchOption().searchId;
            ctrl.searchOptions.advanceFilterOptions = DataService.getReturnSearchOption().advanceFilterOptions;
            ctrl.searchResult = DataService.getReturnSearchResult();

            // Set cabin class to null -> Reset all filter
            if (ctrl.searchOptions.advanceFilters) {
                // ctrl.searchOptions.advanceFilters = {};
                ctrl.searchOptions.advanceFilters.stopOptions = [];
                ctrl.searchOptions.advanceFilters.airlineOptions = [];
                ctrl.searchOptions.advanceFilters.cabinClassOptions = [];
                ctrl.searchOptions.advanceFilters.ticketPolicyOptions = [];
                ctrl.searchOptions.advanceFilters.departureDateTimeOptions = [];
                ctrl.searchOptions.advanceFilters.arrivalDateTimeOptions = [];
                ctrl.searchOptions.advanceFilters.departureDateTimeReturnOptions = [];
                ctrl.searchOptions.advanceFilters.arrivalDateTimeReturnOptions = [];
            }


            // SET TO GLOBAL SERVICE
            DataService.setDepartGroupItem(item);
            DataService.setDepartPricedItinerary(pricedItinerary);

            DataService.setOrgDepartGroupItem(item);
            DataService.setOrgDepartPricedItinerary(pricedItinerary);

            ctrl.departGroupItem = item;
            ctrl.departPricedItinerary = pricedItinerary;

            ctrl.orgDepartGroupItem = item;
            ctrl.orgDepartPricedItinerary = pricedItinerary;

            ctrl.returnSearchOptions = DataService.getReturnSearchOption();

            $log.log('moveToStep2 - searchOptions.searchSpecialType=' + ctrl.searchOptions.searchSpecialType);

            if (ctrl.searchOptions.searchSpecialType == 'international') {
                ctrl.searchOptions.groupId = item.groupId;
                ctrl.searchOptions.minPrice = pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                ctrl.searchOptions.priceItineraryId = pricedItinerary.sequenceNumber;

                // FIX for temporary display
                if (ctrl.searchResult) {
                    ctrl.searchResult.groupPricedItineraries = [];
                }

                $log.log('moveToStep2 - Flight.searchGroupDetail...');

                var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    if (ctrl.merchantCode && ctrl.merchantCode == 'FSOFT') {
                        var RoleLevel = ctrl.searchOptions.RoleLevel;
                        var NCRange = ctrl.searchOptions.NCRange;
                        filterByNCRange(RoleLevel, NCRange, result);
                    }
                    var returnSearchResult = result;
                    $log.log(returnSearchResult);

                    var rsr = DataService.getReturnSearchResult();
                    rsr.groupPricedItineraries = [];
                    rsr.groupPricedItineraries.push(result.groupPricedItinerary);

                    ctrl.searchResult = rsr;

                    DataService.setReturnSearchResult(rsr);

                });
            }

            ctrl.searchOptions.selectStep = 2;

            $timeout(function() {
                $rootScope.$broadcast('gtd-refresh-adv-search-result', null);
            }, 1000);

            ctrl.refreshCarousel();
            $anchorScroll();
        };

        ctrl.bookingClicked = function(item, pricedItinerary) {

            ctrl.currentGroupItem = item;
            ctrl.currentPricedItinerary = pricedItinerary;

            if (ctrl.searchOptions.searchSpecialType == 'oneway'
                // || ctrl.searchOptions.searchSpecialType == 'international'
            ) {
                // SET TO GLOBAL SERVICE
                DataService.setDepartGroupItem(item);
                DataService.setDepartPricedItinerary(pricedItinerary);


                // confirm
                ctrl.confirmBooking();

            } else {
                if (ctrl.searchOptions.searchSpecialType == 'international-fake') {
                    // International Roundtrip
                    // SET TO GLOBAL SERVICE
                    DataService.setDepartGroupItem(item);
                    DataService.setDepartPricedItinerary(pricedItinerary);

                    DataService.setReturnGroupItem(item);
                    DataService.setReturnPricedItinerary(pricedItinerary);

                    // confirm
                    ctrl.confirmBooking();
                } else {
                    // Domestic Roundtrip
                    // alert(ctrl.searchOptions.selectStep);
                    if (ctrl.searchOptions.selectStep == 1) {
                        if (ctrl.searchOptions.searchSpecialType == 'domestic') {
                            // check for completed search
                            checkSearchReturnDomesticCompleted(item, pricedItinerary);
                        } else {
                            ctrl.moveToStep2(item, pricedItinerary);
                        }

                    } else {
                        var returnGroupItem = item;
                        var returnPricedItinerary = pricedItinerary;

                        if (ctrl.searchOptions.searchSpecialType == 'international') {
                            returnGroupItem = jQuery.extend({}, item);
                            returnPricedItinerary = jQuery.extend({}, pricedItinerary);

                            // swap
                            returnGroupItem.originLocationCode = item.destinationLocationCode;
                            returnGroupItem.originLocationName = item.destinationLocationName;
                            returnGroupItem.originCity = item.destinationCity;
                            returnGroupItem.departureDateTime = item.arrivalDateTime;

                            returnGroupItem.destinationLocationCode = item.originLocationCode;
                            returnGroupItem.destinationLocationName = item.originLocationName;
                            returnGroupItem.destinationCity = item.originCity;
                            returnGroupItem.arrivalDateTime = item.departureDateTime;

                        }

                        // SET TO GLOBAL SERVICE
                        DataService.setReturnGroupItem(returnGroupItem);
                        DataService.setReturnPricedItinerary(returnPricedItinerary);

                        if (ctrl.searchOptions.searchSpecialType == 'international') {
                            DataService.setDepartPricedItinerary(returnPricedItinerary);
                        }

                        ctrl.returnGroupItem = returnGroupItem;
                        ctrl.returnPricedItinerary = returnPricedItinerary;

                        // confimm
                        ctrl.confirmBooking();
                    }
                }


            }
        };

        var changeFlightInProgress = false;
        ctrl.changeFlight = function() {
            if (changeFlightInProgress) {
                return;
            } else {
                changeFlightInProgress = true;
                $timeout(function() {

                    $rootScope.$broadcast('gtd-filter-completed-off', null);

                    // Move back to page search depart
                    ctrl.searchOptions.selectStep = 1;
                    ctrl.searchOptions.returnDomestic = false;
                    ctrl.searchOptions.advanceFilterOptions = DataService.getDepartSearchOption().advanceFilterOptions;

                    ctrl.searchOptions.searchId = DataService.getDepartSearchOption().searchId;
                    ctrl.searchResult = DataService.getDepartSearchResult();

                    $log.log('DataService.getDepartSearchResult() = ');
                    $log.log(ctrl.searchResult);

                    DataService.setAdvanceSearchFilterOptions(ctrl.searchOptions.advanceFilterOptions);

                    ctrl.refreshCarousel();

                    $timeout(function() {
                        ctrl.filterCompleted = false;
                        // $rootScope.$broadcast('gtd-filter-completed-off', null);
                        $rootScope.$broadcast('gtd-search-completed-on', null);

                        $timeout(function() {
                            $rootScope.$broadcast('gtd-refresh-adv-search-result', null);

                            changeFlightInProgress = false;
                        }, 100);

                    }, 1000);

                    $anchorScroll();
                }, 1000);
            }

        };

        ctrl.confirmBooking = function() {
            if (modalInstance !== null) return;

            var templateUrl = 'app/flights/search/flight.search.confirmbooking.html';
            if (ctrl.searchOptions.dtype == 'international') {
                templateUrl = 'app/flights/search/flight.search.confirmbooking.international.html';
            }

            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: templateUrl,
                controller: 'FlightSearchConfirmBookingController',
                controllerAs: 'vm',
                windowClass: "hidden-modal",
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    searchOptions: function() {
                        return ctrl.searchOptions;
                    },
                    currentGroupItem: function() {
                        return ctrl.currentGroupItem;
                    },
                    currentPricedItinerary: function() {
                        return ctrl.currentPricedItinerary;
                    }
                }
            });


            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        ctrl.nextPage = function() {

            $log.log('Go to Next Page: ');

            if (ctrl.busy || (ctrl.searchOptions.dtype == 'international' && ctrl.searchOptions.selectStep == 2)) {
                return;
            }

            if (PaginationUtil.isLastPage(ctrl.searchResult.page)) {
                return;
            }

            ctrl.busy = true;

            // Increase page
            ctrl.searchOptions.page++;

            var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
            myDataPromise.then(function(result) {
                if (ctrl.merchantCode && ctrl.merchantCode == 'FSOFT') {
                    var RoleLevel = ctrl.searchOptions.RoleLevel;
                    var NCRange = ctrl.searchOptions.NCRange;
                    filterByNCRange(RoleLevel, NCRange, result);
                }
                angular.forEach(result.groupPricedItineraries, function(item) {
                    ctrl.searchResult.groupPricedItineraries.push(item);
                });

                ctrl.searchResult.page = result.page;

                $log.log("Get result from flight.search.service");
                $log.log(ctrl.searchResult);

                ctrl.busy = false;
            });
        };

        ctrl.setSort = function(property, direction) {
            ctrl.searchOptions.sortField = property;
            if (property == 'departureDate') {
                if (ctrl.searchOptions.departureDateDir == 'asc') {
                    ctrl.searchOptions.departureDateDir = 'desc';
                } else {
                    ctrl.searchOptions.departureDateDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.departureDateDir;
            } else if (property == 'arrivalDate') {
                if (ctrl.searchOptions.arrivalDateDir == 'asc') {
                    ctrl.searchOptions.arrivalDateDir = 'desc';
                } else {
                    ctrl.searchOptions.arrivalDateDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.arrivalDateDir;
            } else if (property == 'duration') {
                if (ctrl.searchOptions.durationDir == 'asc') {
                    ctrl.searchOptions.durationDir = 'desc';
                } else {
                    ctrl.searchOptions.durationDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.durationDir;
            } else if (property == 'price') {
                if (ctrl.searchOptions.priceDir == 'asc') {
                    ctrl.searchOptions.priceDir = 'desc';
                } else {
                    ctrl.searchOptions.priceDir = 'asc';
                }
                ctrl.searchOptions.sortDir = ctrl.searchOptions.priceDir;
            }
        };
        ctrl.showSFlight = function(event) {
            $(event.target).toggleClass('clicked');
            $(event.target).parent().find('.list-search-item').slideToggle(0);
        };

        ctrl.sort = function() {
            $log.log('sort - searchOptions.searchSpecialType=' + ctrl.searchOptions.searchSpecialType);

            if (ctrl.searchOptions.dtype == 'international' && ctrl.searchOptions.selectStep == 2) {
                // Reset page
                ctrl.searchOptions.page = 0;

                $log.log('sort - Flight.searchGroupDetail...');

                var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    if (ctrl.merchantCode && ctrl.merchantCode == 'FSOFT') {
                        var RoleLevel = ctrl.searchOptions.RoleLevel;
                        var NCRange = ctrl.searchOptions.NCRange;
                        filterByNCRange(RoleLevel, NCRange, result);
                    }
                    var returnSearchResult = result;
                    $log.log(returnSearchResult);

                    var rsr = DataService.getReturnSearchResult();
                    rsr.groupPricedItineraries = [];
                    rsr.groupPricedItineraries.push(result.groupPricedItinerary);

                    ctrl.searchResult = rsr;

                    DataService.setReturnSearchResult(rsr);
                });

                return;
            } else {
                // Reset page
                ctrl.searchOptions.page = 0;
                var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    if (ctrl.merchantCode && ctrl.merchantCode == 'FSOFT') {
                        var RoleLevel = ctrl.searchOptions.RoleLevel;
                        var NCRange = ctrl.searchOptions.NCRange;
                        filterByNCRange(RoleLevel, NCRange, result);
                    }
                    ctrl.searchResult = result;
                    ctrl.searchResult.page = result.page;
                    ctrl.searchOptions.searchId = result.searchId;

                    $log.log("Get result from flight.search.service");
                    $log.log(ctrl.searchResult);

                    ctrl.busy = false;
                });
            }

        };


        function filterByNCRange(role, range, data) {

            if (data && data.page && data.page.totalElements > 0) {
                var tempTicketsData = data.groupPricedItineraries;
                var filterResult = [];

                if (role == 1 && range > 0) {
                    var min = 0;
                    if (ctrl.airlineCarouselArrays.length == 1) {
                        min = parseFloat(ctrl.airlineCarouselArrays[0].price);
                    } else {
                        angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                            if (item.id == "VJ") {
                                min = parseFloat(item.price);
                            }
                        });
                    }
                    var max = min + (min * range) / 100;
                    angular.forEach(ctrl.airlineCarouselArrays, function(item, index) {
                        if (parseFloat(item.price) > max) {
                            ctrl.airlineCarouselArrays.splice(index, 1);
                        }
                    });
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var price = tempTicketsData[i].pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                        if (price <= max) {
                            if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                                filterResult.push(tempTicketsData[i]);
                            }

                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 2) {
                    if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                        filterResult.push(tempTicketsData[i]);
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 1 && range == 0) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var airSupplier = tempTicketsData[i].airSupplier;
                        if (airSupplier == "VN" || airSupplier == "0V") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }

            }
        }


        function checkByNCRange(role, range, item) {
            if (role == 1 && range > 0) {
                var min = 0;
                if (ctrl.airlineCarouselArrays.length == 1) {
                    min = parseFloat(ctrl.airlineCarouselArrays[0].price);
                } else {
                    angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                        if (item.id == "VJ") {
                            min = parseFloat(item.price);
                        }
                    });
                }

                var max = min + (min * range) / 100;
                var price = item.airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                if (price <= max) {
                    return true;
                } else {
                    return false;
                }
            }
            if (role == 2) {
                return true;
            }
            if (role == 1 && range == 0) {
                return true;
            }

        }

        ctrl.loadMore = function($event, groupItem) {
            if (ctrl.busy) {
                return;
            }
            $log.log('groupItem: ');
            $log.log(groupItem);
            ctrl.busy = true;
            ctrl.searchOptions.groupId = groupItem.groupId;
            ctrl.searchOptions.loadMore = true;

            $log.log('loadMore - searchOptions.searchSpecialType=' + ctrl.searchOptions.searchSpecialType + ' - Flight.searchGroupDetail...');

            var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
            myDataPromise.then(function(result) {

                // reset
                ctrl.searchOptions.loadMore = false;

                angular.forEach(result.groupPricedItinerary.pricedItineraries, function(item) {
                    if (item.sequenceNumber != groupItem.pricedItineraries[0].sequenceNumber) {
                        if (ctrl.merchantCode && ctrl.merchantCode == 'FSOFT') {
                            var ok = checkByNCRange(ctrl.searchOptions.RoleLevel, ctrl.searchOptions.NCRange, item);
                            if (ok) {
                                groupItem.pricedItineraries.push(item);
                            }
                        } else {
                            groupItem.pricedItineraries.push(item);
                        }


                    }
                });


                $log.log("Get result from flight.search.service");
                $log.log(ctrl.searchResult);
                angular.element($event.target).closest('.search-result-item').find('.list-search-item.multiple').addClass('showed');
                ctrl.busy = false;
            }, function(result) {
                ctrl.searchOptions.loadMore = false;
            });

        };

        ctrl.loadLess = function($event, groupItem) {
            ctrl.searchOptions.groupId = groupItem.groupId;
            groupItem.pricedItineraries = [groupItem.pricedItineraries[0]];
            angular.element($event.target).closest('.search-result-item').find('.list-search-item.multiple').removeClass('showed');
        };

        $(document).ready(function() {
            // $('.flight-search-airline-paginator').slick(slideOpts);
            $timeout(
                ctrl.initControl(),
                1000
            );
        });

    }

    var gtdFlightSearchResult = {
        templateUrl: 'app/components/flight/flight-search-result.html',
        controller: gtdFlightSearchResultController,
        bindings: {
            searchResult: '=',
            searchOptions: '=',
            filterCompleted: '=',
            searchCompleted: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightSearchResult', gtdFlightSearchResult);

})();

(function() {
    'use strict';

    gtdFlightSearchHeaderController.$inject = ['$log', '$scope', '$rootScope', '$uibModal', '$attrs', 'DataService', 'GlobalSrv', 'MetaData', 'DialogService', 'Flight', '$timeout', 'ValidationUtils', 'DEFAULT_PAGE_SIZE', 'DEFAULT_DATE_FORMAT', 'MerchantService'];

    function gtdFlightSearchHeaderController($log, $scope, $rootScope, $uibModal, $attrs, DataService, GlobalSrv, MetaData, DialogService, Flight, $timeout, ValidationUtils, DEFAULT_PAGE_SIZE, DEFAULT_DATE_FORMAT, MerchantService) {
        var ctrl = this;

        ctrl.iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

        // Reset New Transaction Time
        DataService.setNewStartTransactionTime();

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        if (!ctrl.searchOptions) {
            // Default init
            ctrl.searchOptions = DataService.getSearchOption();

            if (!ctrl.searchOptions.searchType) ctrl.searchOptions.searchType = "oneway"; //roundtrip -- diff with defautl values in Home Search
            if (!ctrl.searchOptions.dtype) ctrl.searchOptions.dtype = "domestic"; //international
            ctrl.searchOptions.size = DEFAULT_PAGE_SIZE; //15
            ctrl.searchOptions.page = 0;
            if (!ctrl.searchOptions.adultNo) ctrl.searchOptions.adultNo = 1;
        }

        ctrl.initControl = function() {

            $timeout(function() {
                $('#fromAirPort').trigger('change');
                $('#toAirPort').trigger('change');

                angular.element($('#adultNo')).triggerHandler('change');
                angular.element($('#childrenNo')).triggerHandler('change');
            }, 1000);


        };


        ctrl.doSearchImpl = function() {
            if ($("#roundtrip").hasClass("selected")) {
                ctrl.searchOptions.searchType = 'roundtrip';
            }
            if ($("#oneway").hasClass("selected")) {
                ctrl.searchOptions.searchType = 'oneway';
            }
            $rootScope.$broadcast("event-close-confirm-booking", null);

            DataService.setNewStartTransactionTime();

            // Validate search criteria
            if (!ValidationUtils.validateFlightSearch(ctrl.searchOptions)) {
                return;
            }
            // DO SEARCH
            ctrl.searchOptions.page = 0;
            ctrl.searchOptions.size = DEFAULT_PAGE_SIZE; //15

            var searchType = ctrl.searchOptions.searchType;

            var searchSpecialType = ctrl.getSearchSpecialType();

            ctrl.searchOptions.searchSpecialType = searchSpecialType;
            ctrl.searchOptions.selectStep = 1;
            ctrl.searchOptions.returnDomestic = false;

            //+++ TungNQ-17Sept17: reset temp cache of search option
            ctrl.searchOptions.departureItinerary = {};
            ctrl.searchOptions.returnSearchId = null;
            ctrl.searchOptions.searchId = null;
            ctrl.searchOptions.ssrOfferItemsDepart = [];
            ctrl.searchOptions.ssrOfferItemsReturn = [];
            ctrl.searchOptions.airLine = [];
            //---

            // Show Dialogs:
            this.open();

            $log.log('$ctrl.searchOptions.toAirPort =' + ctrl.searchOptions.toAirPort);
            $log.log('$ctrl.searchOptions.fromAirPort =' + ctrl.searchOptions.fromAirPort);

            DataService.setSearchOption(ctrl.searchOptions);
            DataService.setSearchResult(ctrl.searchResult);

            DataService.setSavedSearchOption(jQuery.extend({}, ctrl.searchOptions));

            // var departSearchOptions = ctrl.searchOptions;
            // var departSearchResult = ctrl.searchResult;
            var departSearchOptions = jQuery.extend({}, ctrl.searchOptions);
            var departSearchResult = jQuery.extend({}, ctrl.searchResult);

            departSearchOptions.departureDate = ctrl.searchOptions.departureDate;

            /*
            if (ctrl.searchOptions.dtype != 'international') {
                departSearchOptions.returnDate = ctrl.searchOptions.departureDate;
            }
            */

            departSearchOptions.fromAirPort = ctrl.searchOptions.fromAirPort;
            departSearchOptions.toAirPort = ctrl.searchOptions.toAirPort;


            if (departSearchOptions.dtype == 'international') {
                var myDataPromise = Flight.searchFlightInternational(departSearchOptions);
                myDataPromise.then(function(result) {
                    ctrl.searchResult = result;
                    departSearchResult = result;

                    ctrl.searchOptions.searchId = result.searchId;
                    departSearchOptions.searchId = result.searchId;

                    $log.log("Get result from flight.search.service");
                    // $log.log("ctrl.searchResult = " + JSON.stringify(ctrl.searchResult));

                    // Do get advance filter options
                    Flight.getAdvanceFilterOptions(ctrl.searchOptions).then(function(result) {
                        DataService.setAdvanceSearchFilterOptions(result);
                        ctrl.searchOptions.advanceFilterOptions = result;
                        departSearchOptions.advanceFilterOptions = result;

                        DataService.setDepartSearchResult(departSearchResult);
                        DataService.setDepartSearchOption(departSearchOptions);

                        var returnSearchOptions = jQuery.extend({}, departSearchResult);
                        var returnSearchResult = jQuery.extend({}, departSearchOptions);

                        DataService.setReturnSearchResult(returnSearchOptions);
                        DataService.setReturnSearchOption(returnSearchResult);

                        ctrl.doSearch({
                            $searchResult: ctrl.searchResult,
                            $searchOptions: ctrl.searchOptions
                        });
                    });

                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            } else {
                var merchant = MerchantService.getMerchant();
                if (merchant == 'FSOFT') {
                    departSearchOptions.suppliers = MerchantService.filterArraySupplier();
                }

                var myDataPromise = Flight.searchFlight(departSearchOptions);
                myDataPromise.then(function(result) {
                    ctrl.searchResult = result;
                    departSearchResult = result;

                    ctrl.searchOptions.searchId = result.searchId;
                    ctrl.searchOptions.returnSearchId = result.returnSearchId;
                    departSearchOptions.searchId = result.searchId;

                    $log.log("Get result from flight.search.service");
                    // $log.log("ctrl.searchResult = " + JSON.stringify(ctrl.searchResult));

                    // Do get advance filter options
                    Flight.getAdvanceFilterOptions(ctrl.searchOptions).then(function(result) {
                        DataService.setAdvanceSearchFilterOptions(result);
                        ctrl.searchOptions.advanceFilterOptions = result;
                        departSearchOptions.advanceFilterOptions = result;

                        DataService.setDepartSearchResult(departSearchResult);
                        DataService.setDepartSearchOption(departSearchOptions);

                        ctrl.doSearch({
                            $searchResult: ctrl.searchResult,
                            $searchOptions: ctrl.searchOptions
                        });
                    });

                    // Setup Search Return trip
                    if (ctrl.searchOptions.searchType == 'roundtrip') {
                        var returnSearchOptions = jQuery.extend({}, ctrl.searchOptions);
                        var returnSearchResult = jQuery.extend({}, ctrl.searchResult);
                        // var returnSearchOptions = ctrl.searchOptions;
                        // var returnSearchResult = ctrl.searchResult;

                        returnSearchOptions.departureDate = ctrl.searchOptions.returnDate;
                        returnSearchOptions.returnDate = ctrl.searchOptions.returnDate;
                        returnSearchOptions.fromAirPort = ctrl.searchOptions.toAirPort;
                        returnSearchOptions.toAirPort = ctrl.searchOptions.fromAirPort;
                        returnSearchOptions.searchId = result.returnSearchId;

                        DataService.setReturnSearchOption(returnSearchOptions);

                    }

                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            }


        };

        ctrl.open = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/search/flight.search.loading.html',
                controller: 'FlightSearchLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    searchOptions: function() {
                        return ctrl.searchOptions;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        ctrl.getSearchSpecialType = function() {
            // oneway, domestic, international
            var searchdirectiontype = 'oneway';

            var searchType = ctrl.searchOptions.searchType;
            var dtype = ctrl.searchOptions.dtype;

            if (ctrl.searchOptions.searchType != 'roundtrip') {
                return 'oneway';
            } else {
                return dtype;
            }

        };

        var toggleProcessing = false;
        ctrl.switchTypeAhead = function() {

            if (toggleProcessing) {
                return;
            } else {
                toggleProcessing = true;
                var toVal = ctrl.searchOptions.toAirPort;
                var fromVal = ctrl.searchOptions.fromAirPort;


                ctrl.searchOptions.fromAirPort = toVal;
                $timeout(function() {
                    ctrl.searchOptions.toAirPort = fromVal;
                    $timeout(function() {
                        toggleProcessing = false;
                    }, 100);
                }, 100);
            }
        };

        ctrl.searchAirports = function(val, type) {
            // return MetaData.searchAirportsWithout(val, ctrl.searchOptions, type);
            if (ctrl.searchOptions.dtype == 'domestic') {
                return MetaData.searchAirportsLocal('VN');
            } else {
                return MetaData.searchAirportsWithout(val, ctrl.searchOptions, type);
            }
        };

        ctrl.formatLabel = function(model) {
            var airports = GlobalSrv.getLocalAirports();

            for (var idx in airports) {
                if (airports[idx].code == model) {
                    // return airports[idx].city + ' (' + airports[idx].code + ')';
                    return airports[idx].city + ' (' + airports[idx].code + ')' + ', ' + airports[idx].country;
                }
            }

            return model;
        };

        ctrl.$postLink = function() {
            $timeout(function() {
                ctrl.initControl();
            }, 0);
            if (ctrl.init && !ctrl.searchCompleted) {
                $log.log('+++++++++++++++ SEARCH AGAIN ++++++++++++++++');
                $log.log('ctrl.init:' + ctrl.init + ", ctrl.searchCompleted:" + ctrl.searchCompleted);

                ctrl.doSearchImpl();

                $timeout(function() {
                    ctrl.searchCompleted = true;
                    $rootScope.$broadcast("gtd-flight-search-header-serch-completed", null);
                }, 100);


            }
        };

        $scope.changeSelect = function(value) {
            $('.flight-search-header .selectType').removeClass('selected');
            $('.flight-search-header .select-' + value).addClass('selected');
            // ctrl.searchOptions.searchType = value;

            if (value == 'roundtrip') {
                $('.flight-search-header .itemDatetime').removeClass('disable');
                //ctrl.searchOptions.searchSpecialType = 'domestic';
            } else {
                $('.flight-search-header .itemDatetime').addClass('disable');
            }

        }

        $scope.$on('gtd-reinit-search', function() {
            $log.log('gtd-reinit-search');
            ctrl.doSearchImpl();
        });

    }

    var gtdFlightSearchHeader = {
        templateUrl: 'app/components/flight/flight-search-header.html',
        controller: gtdFlightSearchHeaderController,
        bindings: {
            searchType: '=',
            init: '=',
            searchCompleted: '=',
            doSearch: '&',
            searchResult: '=?searchResult',
            searchOptions: '=?searchOptions'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightSearchHeader', gtdFlightSearchHeader);

})();

(function() {
    'use strict';

    var gtdFlightSearchFooter = {
        templateUrl: 'app/components/flight/flight-search-footer.html',
        controller: gtdFlightSearchFooterController
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightSearchFooter', gtdFlightSearchFooter);

    gtdFlightSearchFooterController.$inject = ['$log', '$scope', 'Flight'];

    function gtdFlightSearchFooterController($log, $scope, Flight) {
        var ctrl = this;

        ctrl.popularPlaces = Flight.getPopularPlaces();
        ctrl.popularFlights = Flight.getPopularFlights();
        ctrl.popularHotels = Flight.getPopularHotels();

        // vm.alerts = AlertService.get();
        $scope.$on('$destroy', function() {
            ctrl.popularPlaces = [];
            ctrl.popularFlights = [];
            ctrl.popularHotels = [];
        });
    }
})();

(function() {
    'use strict';

    gtdFlightSearchDatePaginatorController.$inject = ['$log', '$scope', '$timeout', 'MetaData', 'Flight'];

    function gtdFlightSearchDatePaginatorController($log, $scope, $timeout, MetaData, Flight) {
        var ctrl = this;

        ctrl.activeDateIdx = 1;

        $scope.$watch(function(scope) {
                return ctrl.searchOptions.advanceFilterOptions;
            },
            function(newValue, oldValue) {
                $log.log('1d');
                ctrl.dateCarouselArrays = Flight.getDateAvailableOptions();
            }
        );

    }

    var gtdFlightSearchDatePaginator = {
        templateUrl: 'app/components/flight/flight-search-date-paginator.html',
        controller: gtdFlightSearchDatePaginatorController,
        bindings: {
            searchResult: '=',
            searchOptions: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightSearchDatePaginator', gtdFlightSearchDatePaginator);

})();

(function() {
    'use strict';

    gtdFlightSearchAdvController.$inject = ['$localStorage', '$location', '$cookies', '$log', '$scope', '$timeout', '$rootScope', 'MetaData', 'Flight', 'DataService', 'IBE_KEYS', 'ValidationUtils', 'ThemeCfg', 'TEMPLATE_URL'];

    function gtdFlightSearchAdvController($localStorage, $location, $cookies, $log, $scope, $timeout, $rootScope, MetaData, Flight, DataService, IBE_KEYS, ValidationUtils, ThemeCfg, TEMPLATE_URL) {
        var ctrl = this;
        $scope.ibeKeys = IBE_KEYS;
        var merchantCode = $location.search().merchant_code;
        if (!merchantCode) merchantCode = $cookies.get('merchant_code') || localStorage.getItem("merchant_code");

        ctrl.loadMore = false;
        ctrl.showAdv = true;

        ctrl.isMobile = ValidationUtils.isMobileDevice();
        ctrl.class_single_web = '';
        var merchant_code = $cookies.get("merchant_code") || localStorage.getItem("merchant_code");
        if (merchant_code) {
            ctrl.class_single_web += merchant_code;
            if (!ThemeCfg[merchant_code])
                ctrl.enable_template = true;
            else
                ctrl.enable_template = false;

        }


        ctrl.init = function() {
            if (ctrl.searchOptions.class == 'E' || ctrl.searchOptions.class == 'B') {
                if (ctrl.searchOptions.class == 'E')
                    ctrl.searchOptions.className = 'economy';

                if (ctrl.searchOptions.class == 'B')
                    ctrl.searchOptions.className = 'business';

                if (ctrl.searchResult.groupPricedItineraries[0].airSupplier == 'MF') {
                    ctrl.classCarouselArrays = Flight.getClassInterAvailableOptions();
                } else {
                    ctrl.classCarouselArrays = Flight.getClassAvailableOptions();
                }
                ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();
                if (merchantCode && merchantCode == 'FSOFT') {
                    filterAirlineFollowFosft();
                }

                angular.forEach(ctrl.classCarouselArrays, function(item) {
                    if (item.id == ctrl.searchOptions.className) {
                        item.checked = true;
                    }
                    item.checked = true;
                });


                // Set Sort conditions
                ctrl.searchOptions.sortField = 'price';
                ctrl.searchOptions.sortDir = 'asc';


                ctrl.doFilter();

                ctrl.needSetupClass = true;
            }
        };


        $scope.$on('gtd-refresh-adv-search-result', function() {
            ctrl.resetFilter();
        });

        $scope.$watch(function(scope) {
                return ctrl.searchOptions.selectStep;
            },
            function(newValue, oldValue) {
                if (ctrl.searchOptions.selectStep == 2) {
                    angular.forEach(ctrl.classCarouselArrays, function(item) {
                        item.checked = false;
                    });
                } else {
                    angular.forEach(ctrl.classCarouselArrays, function(item) {
                        if (item.id == ctrl.searchOptions.className) {
                            item.checked = true;
                        }
                    });
                }
            }
        );

        function filterAirlineFollowFosft() {
            var RoleLevel = ctrl.searchOptions.RoleLevel;
            var NCRange = ctrl.searchOptions.NCRange;
            if (RoleLevel == 1 && NCRange > 0) {
                var airSupplier = [];
                var classCarouse = [];
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                angular.forEach(ctrl.classCarouselArrays, function(item) {
                    if (item.id == "economy" || item.id == "promo") {
                        classCarouse.push(item);
                    }

                });
                ctrl.airlineCarouselArrays = airSupplier;
                ctrl.classCarouselArrays = classCarouse;
            }
            if (RoleLevel == 2) {
                var airSupplier = [];
                var classCarouse = [];
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (item.id == "VN" || item.id == "VJ" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                angular.forEach(ctrl.classCarouselArrays, function(item) {
                    if (item.id == "economy" || item.id == "promo") {
                        classCarouse.push(item);
                    }

                });
                ctrl.airlineCarouselArrays = airSupplier;
                ctrl.classCarouselArrays = classCarouse;
            }
            if (RoleLevel == 1 && NCRange == 0) {
                var airSupplier = [];
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (item.id == "VN" || item.id == "0V") {
                        airSupplier.push(item);
                    }

                });
                ctrl.airlineCarouselArrays = airSupplier;

            }
        }

        //Tan improve 19/02/2019
        function GetClass(items) {
            angular.forEach(items, function(item) {
                if (item.airSupplier == 'MF') {
                    ctrl.classCarouselArrays = Flight.getClassInterAvailableOptions();
                    return true;
                } else {
                    ctrl.classCarouselArrays = Flight.getClassAvailableOptions();
                }
            });
        }

        $scope.$watch(function(scope) {
                return ctrl.searchOptions.advanceFilterOptions;
            },
            function(newValue, oldValue) {
                ctrl.transitCarouselArrays = Flight.getTransitAvailableOptions();
                ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();
                if (ctrl.needSetupClass) {
                    ctrl.needSetupClass = false;
                } else {
                    GetClass(ctrl.searchResult.groupPricedItineraries);
                }
                if (merchantCode && merchantCode == 'FSOFT') {
                    filterAirlineFollowFosft();
                }
                angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                    if (ctrl.searchOptions.selectAirlines && ctrl.searchOptions.selectAirlines.indexOf(item.id) != -1) {
                        item.checked = true;
                    }
                    // else{
                    //     item.checked = false;
                    //     ctrl.doSearchImpl();
                    // }
                });


                ctrl.fromTimeCarouselArrays = Flight.getTimeAvailableOptions();
                ctrl.toTimeCarouselArrays = Flight.getTimeAvailableOptions();

                ctrl.fromTimeReturnCarouselArrays = Flight.getTimeAvailableOptions();
                ctrl.toTimeReturnCarouselArrays = Flight.getTimeAvailableOptions();

                ctrl.policyArrays = Flight.getTicketPolicyOptions();
                $log.log("ctrl.fromTimeCarouselArrays");
                $log.log(ctrl.fromTimeCarouselArrays);

                ctrl.setupAdvFilter();
            }
        );

        $scope.$on('gtd-select-airline', function(event, data) {

            ctrl.airlineCarouselArrays = Flight.getAirlineAvailableOptions();
            if (merchantCode && merchantCode == 'FSOFT') {
                filterAirlineFollowFosft();
            }
            angular.forEach(ctrl.airlineCarouselArrays, function(item) {

                if (item.id == data.trim()) {
                    item.checked = true;
                }
            });

            // Set Sort conditions
            ctrl.searchOptions.sortField = 'departureDate';
            ctrl.searchOptions.sortDir = 'asc';

            ctrl.doFilter();
        });

        ctrl.resetFilter = function() {
            angular.forEach(ctrl.transitCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.classCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.fromTimeCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.toTimeCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.fromTimeReturnCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.toTimeReturnCarouselArrays, function(item) {
                item.checked = false;
            });
            angular.forEach(ctrl.policyArrays, function(item) {
                item.checked = false;
            });

            ctrl.doFilter();
        };

        ctrl.setupAdvFilter = function() {
            var transitOpts = [];
            var airlineOpts = [];
            var classOpts = [];
            var fromTimeOpts = [];
            var toTimeOpts = [];

            var fromTimeReturnOpts = [];
            var toTimeReturnOpts = [];

            var policyOpts = [];

            angular.forEach(ctrl.transitCarouselArrays, function(item) {
                if (item.checked == true) {
                    transitOpts.push(item.id);
                }
            });

            angular.forEach(ctrl.fromTimeCarouselArrays, function(item) {
                if (item.checked == true) {
                    fromTimeOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.toTimeCarouselArrays, function(item) {
                if (item.checked == true) {
                    toTimeOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.fromTimeReturnCarouselArrays, function(item) {
                if (item.checked == true) {
                    fromTimeReturnOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.toTimeReturnCarouselArrays, function(item) {
                if (item.checked == true) {
                    toTimeReturnOpts.push(item.val);
                }
            });

            angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                if (item.checked == true) {
                    airlineOpts.push(item.id);
                }
            });

            angular.forEach(ctrl.classCarouselArrays, function(item) {
                if (item.checked == true) {
                    classOpts.push(item.id);
                }
            });

            angular.forEach(ctrl.policyArrays, function(item) {
                if (item.checked == true) {
                    policyOpts.push(item.id);
                }
            });

            ctrl.searchOptions.advanceFilters = {
                "stopOptions": transitOpts,
                "airlineOptions": airlineOpts,
                "cabinClassOptions": classOpts,
                "ticketPolicyOptions": policyOpts,
                "departureDateTimeOptions": fromTimeOpts,
                "arrivalDateTimeOptions": toTimeOpts,
                "departureDateTimeReturnOptions": fromTimeReturnOpts,
                "arrivalDateTimeReturnOptions": toTimeReturnOpts,
                "flightType": ctrl.searchOptions.dtype
            };
        };

        function filterByNCRange(role, range, data) {
            if (data && data.page && data.page.totalElements > 0) {
                var tempTicketsData = data.groupPricedItineraries;
                var filterResult = [];

                if (role == 1 && range > 0) {
                    var min = 0;
                    if (ctrl.airlineCarouselArrays.length == 1) {
                        min = parseFloat(ctrl.airlineCarouselArrays[0].price);
                    } else {
                        angular.forEach(ctrl.airlineCarouselArrays, function(item) {
                            if (item.id == "VJ") {
                                min = parseFloat(item.price);
                            }
                        });
                    }
                    var max = min + (min * range) / 100;
                    angular.forEach(ctrl.airlineCarouselArrays, function(item, index) {
                        if (parseFloat(item.price) > max) {
                            ctrl.airlineCarouselArrays.splice(index, 1);
                        }
                    });
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var price = tempTicketsData[i].pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount;
                        if (price <= max) {
                            if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                                filterResult.push(tempTicketsData[i]);
                            }

                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 2) {
                    if (tempTicketsData[i].airSupplier == "VJ" || tempTicketsData[i].airSupplier == "VN" || tempTicketsData[i].airSupplier == "0V") {
                        filterResult.push(tempTicketsData[i]);
                    }
                    data.groupPricedItineraries = filterResult;
                }
                if (role == 1 && range == 0) {
                    for (var i = 0; i < tempTicketsData.length; i++) {
                        var airSupplier = tempTicketsData[i].airSupplier;
                        if (airSupplier == "VN") {
                            filterResult.push(tempTicketsData[i]);
                        }
                    }
                    data.groupPricedItineraries = filterResult;
                }

            }
        }

        ctrl.doFilter = function() {
            $('.formFilter').removeClass('show');
            $('.sm-form-filter').hide();
            ctrl.filterCompleted = false;
            $rootScope.$broadcast('gtd-filter-completed-off', null);

            $rootScope.$broadcast('gtd-adv-do-filter', null);

            if (!ctrl.searchCompleted) {
                return;
            }

            ctrl.setupAdvFilter();


            if (ctrl.searchOptions.dtype == 'international' && ctrl.searchOptions.selectStep == 2) {
                // Reset page
                ctrl.searchOptions.page = 0;


                var myDataPromise = Flight.searchGroupDetail(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    var returnSearchResult = result;

                    var rsr = DataService.getReturnSearchResult();
                    // TODO implement for FSoft
                    rsr.groupPricedItineraries = [];

                    // check NCRangeFsoft
                    if (merchantCode && merchantCode == 'FSOFT') {
                        var RoleLevel = ctrl.searchOptions.RoleLevel;
                        var NCRange = ctrl.searchOptions.NCRange;
                        filterByNCRange(RoleLevel, NCRange, result);
                    }


                    rsr.groupPricedItineraries.push(result.groupPricedItinerary);
                    rsr.page = result.page;

                    ctrl.searchResult = rsr;

                    DataService.setReturnSearchResult(rsr);

                    $timeout(function() {
                        ctrl.filterCompleted = true;
                        $rootScope.$broadcast('gtd-filter-completed-on', null);
                        // alert("BROADCAST");
                        // $rootScope.$broadcast("gtd-refresh-airline-carousel", null);
                    }, 1000);
                });

                return;
            } else {
                // Reset page
                ctrl.searchOptions.page = 0;
                var myDataPromise = Flight.searchFlightInCache(ctrl.searchOptions);
                myDataPromise.then(function(result) {
                    // TODO implement for FSoft

                    if (merchantCode && merchantCode == 'FSOFT') {
                        var RoleLevel = ctrl.searchOptions.RoleLevel;
                        var NCRange = ctrl.searchOptions.NCRange;
                        filterByNCRange(RoleLevel, NCRange, result);
                    }

                    ctrl.searchResult = result;
                    ctrl.searchResult.page = result.page;

                    if (result.searchId) {
                        ctrl.searchOptions.searchId = result.searchId;
                    }

                    ctrl.busy = false;

                    $timeout(function() {
                        ctrl.filterCompleted = true;
                        $rootScope.$broadcast('gtd-filter-completed-on', null);
                    }, 1000);
                });
            }

        };

        ctrl.init();
    }

    function templateNameByParams(merchant_code, TEMPLATE_URL, type) {
        console.log("TEMPLATE_URL");
        console.log(TEMPLATE_URL[merchant_code]);
        if (!TEMPLATE_URL[merchant_code] || !TEMPLATE_URL[merchant_code][type])
            return TEMPLATE_URL['DEFAULT'][type];
        return TEMPLATE_URL[merchant_code][type];
    }

    var gtdFlightSearchAdv = {
        templateUrl: ['TEMPLATE_URL', function(TEMPLATE_URL) {
            var merchant_code = String(Cookies.get('merchant_code') || localStorage.getItem("merchant_code")).toUpperCase();
            return templateNameByParams(merchant_code, TEMPLATE_URL, 'flight_search_adv');
        }],
        //  'app/components/flight/flight-search-adv.html',
        controller: gtdFlightSearchAdvController,
        bindings: {
            searchResult: '=',
            searchOptions: '=',
            filterCompleted: '=',
            searchCompleted: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightSearchAdv', gtdFlightSearchAdv);

})();

(function() {
    'use strict';

    gtdFlightInfoController.$inject = ['$log', '$scope', 'MetaData', 'Flight', 'IBE_KEYS'];

    function gtdFlightInfoController($log, $scope, MetaData, Flight, IBE_KEYS) {
        var ctrl = this;
        $scope.ibeKeys = IBE_KEYS;
    }

    var gtdFlightInfo = {
        templateUrl: 'app/components/flight/flight-info.html',
        controller: gtdFlightInfoController,
        bindings: {
            flightModel: '=',
            gtdShowHeader: '@',
            gtdShowCustomer: '@'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightInfo', gtdFlightInfo);

})();

(function() {
    'use strict';

    gtdFlightDetailViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight', 'IBE_KEYS'];

    function gtdFlightDetailViewController($log, $scope, MetaData, Flight, IBE_KEYS) {
        var ctrl = this;
        $scope.ibeKeys = IBE_KEYS;
    }

    var gtdFlightDetailView = {
        templateUrl: 'app/components/flight/flight-detail-view.html',
        controller: gtdFlightDetailViewController,
        bindings: {
            flightModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightDetailView', gtdFlightDetailView);

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('unsafe', unsafe);

    unsafe.$inject = ['$log', '$sce'];

    function unsafe($log, $sce) {
        return unsafeFilter;

        function unsafeFilter(val, format) {
            $log.log('++++++++++');
            $log.log(val);
            $log.log($sce.trustAsHtml(val));
            $log.log('++++++++++');
            return $sce.trustAsHtml(val);

        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('unixtime', unixtime);

    function unixtime() {
        return unixtimeFilter;

        function unixtimeFilter(value, format) {
            // var oneSecond = 1000;
            // var oneMinute = oneSecond * 60;
            var sv = '' + value;
            if (sv) {
                if (sv.indexOf('Z') != -1) {
                    return sv;
                } else {
                    return new Date(value * 1000);
                }
            } else {
                return sv;
            }

        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('traveller', traveller);

    traveller.$inject = [];

    function traveller() {
        return travellerFilter;

        function travellerFilter(input, type) {
            if (input) {
                return input.filter(function(item) {
                    if (item.adultType) {
                        return item.adultType == type;
                    } else {
                        if (type == 'ADT') {
                            return item.gender == 'FEMALE' || item.gender == 'MALE';
                        } else {
                            return item.gender == 'BOY' || item.gender == 'GIRL';
                        }
                    }
                });
            }
            return input;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('split', split);

    split.$inject = [];

    function split() {
        return function(input, idx) {
            if (input) {
                var arr = input.split("::");
                return arr[idx];
            } else {
                return input;
            }

        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('makeRange', makeRange);

    function makeRange() {
        return rangeFilter;

        function rangeFilter(input) {
            var lowBound, highBound;
            switch (input.length) {
                case 1:
                    lowBound = 0;
                    highBound = parseInt(input[0]) - 1;
                    break;
                case 2:
                    lowBound = parseInt(input[0]);
                    highBound = parseInt(input[1]);
                    break;
                default:
                    return input;
            }
            var result = [];
            for (var i = lowBound; i <= highBound; i++)
                result.push(i);
            return result;
        }
    }
})();


(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('pax', pax);

    pax.$inject = ['$log', 'GlobalSrv'];

    function pax($log, GlobalSrv) {
        return paxFilter;

        function paxFilter(input, type) {
            var result;

            if (type === 'adult') {
                result = 0;
                angular.forEach(input, function(item) {
                    result += parseInt(item.adultNo);
                });
            } else if (type === 'child') {
                result = 0;
                angular.forEach(input, function(item) {
                    result += item.paxDetails.length;
                });

            } else {
                // default is # of rooms
                result = input.length;
            }

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('momentdate', momentdate);

    momentdate.$inject = ['$log'];

    function momentdate($log) {

        return momentdateFilter;

        function momentdateFilter(input, type, format) {
            var result = input;

            if (input) {
                moment().locale('vi');

                if (format) {
                    if (type == 'date') {
                        // $log.log('date');
                        result = moment.utc(input, format).locale('vi').format("dddd, DD-MM-YYYY");
                    } else if (type == 'hourdate') {
                        // $log.log('hourdate');
                        result = moment.utc(input, format).locale('vi').format("HH:mm, dddd, DD-MM-YYYY");
                    } else if (type == 'hour') {
                        // $log.log('hour');
                        result = moment.utc(input, format).locale('vi').format("HH:mm");
                    } else if (type == 'datehour0') {
                        // $log.log('datehour0');
                        result = moment.utc(input, format).locale('vi').format("DD-MM-YYYY HH:mm");

                        /* Format with Local time */
                    } else if (type == 'localdate') {
                        result = moment.utc(input, format).locale('vi').format("dddd, DD-MM-YYYY");
                    } else if (type == 'localhourdate') {
                        // console.log('hourdate');
                        result = moment(input, format).locale('vi').format("HH:mm, dddd, DD-MM-YYYY");

                    } else {
                        // default
                        // $log.log('default');
                        result = moment.utc(input, format).locale('vi').format("DD-MM-YYYY");
                    }
                } else {
                    if (type == 'load-date') {
                        result = moment.utc(input, 'DD-MM-YYYY').locale('vi').format("dddd, DD-MM");
                    } else if (type == 'date') {
                        // $log.log('date');
                        result = moment.utc(input).locale('vi').format("dddd, DD-MM-YYYY");
                    } else if (type == 'hourdate') {
                        // $log.log('hourdate');
                        result = moment.utc(input).locale('vi').format("HH:mm, dddd, DD-MM-YYYY");
                    } else if (type == 'hour') {
                        // $log.log('hour');
                        result = moment.utc(input).locale('vi').format("HH:mm");
                    } else if (type == 'datehour0') {
                        // $log.log('datehour0');
                        result = moment.utc(input).locale('vi').format("DD-MM-YYYY HH:mm");

                        /* Format with Local time */
                    } else if (type == 'localdate') {
                        result = moment.utc(input).locale('vi').format("dddd, DD-MM-YYYY");
                    } else if (type == 'localhourdate') {
                        // console.log('hourdate');
                        result = moment(input).locale('vi').format("HH:mm, dddd, DD-MM-YYYY");

                    } else {
                        // default
                        // $log.log('default');
                        result = moment.utc(input).locale('vi').format("DD-MM-YYYY");
                    }
                }

            }

            // $log.log(result);
            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('luggageprice', luggageprice);

    luggageprice.$inject = ['$log', 'GlobalSrv'];

    function luggageprice($log, GlobalSrv) {
        return luggagepriceFilter;

        function luggagepriceFilter(input, type) {

            // type: default (all), depart, return

            var result = 0;
            var bookingModel = input;


            if (bookingModel && bookingModel.customers) {

                angular.forEach(bookingModel.customers, function(customer) {
                    if ('depart' == type) {
                        if (customer.departServiceRequests) {
                            angular.forEach(customer.departServiceRequests, function(ssr) {
                                result += ssr.amount;
                            });
                        }

                    } else if ('return' == type) {
                        if (customer.returnServiceRequests) {
                            angular.forEach(customer.returnServiceRequests, function(ssr) {
                                result += ssr.amount;
                            });
                        }

                    } else {
                        if (customer.departServiceRequests) {
                            angular.forEach(customer.departServiceRequests, function(ssr) {
                                result += ssr.amount;
                            });
                        }

                        if (customer.returnServiceRequests) {
                            angular.forEach(customer.returnServiceRequests, function(ssr) {
                                result += ssr.amount;
                            });
                        }

                        // if (customer.serviceRequests) {
                        //     angular.forEach(customer.serviceRequests, function (ssr) {
                        //         result += ssr.amount;
                        //     });
                        // }

                    }
                });

            }

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('lookupt', lookupt);

    lookupt.$inject = ['$log', 'GlobalSrv', 'DataService', '$translate', '$filter'];

    function lookupt($log, GlobalSrv, DataService, $translate, $filter) {
        return lookuptFilter;

        function lookuptFilter(input, domain, obj) {
            var result = input;

            if (!input) {
                return '';
            }

            if (obj) {
                result = $translate.instant($filter('lowercase')(domain + "." + obj + "." + input));
            } else {
                result = $translate.instant($filter('lowercase')(domain + "." + input));
            }


            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('lookups', lookups);

    lookups.$inject = ['$log', 'GlobalSrv', 'DataService'];

    function lookups($log, GlobalSrv, DataService) {
        return lookupsFilter;

        function lookupsFilter(input, type) {
            var result = input;

            var data = GlobalSrv.getAllLookups();
            // $log.log(data.length);

            data.forEach(function(item) {
                // $log.log(item.lookupValue + ":" + input + ":" + item.objectName + ":" +  type);
                if (item.lookupValue == input && item.objectName == type) {
                    result = item.lang;
                    // $log.log("result = " + result);
                }
            });

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('interduration', interduration);

    function interduration() {
        return interdurationFilter;

        function interdurationFilter(flightSegments, format, flightInd) {

            var millseconds = 0;

            for (var i = 0; i < flightSegments.length; i++) {
                if (flightSegments[i].flightDirection == flightInd) {
                    millseconds += flightSegments[i].journeyDuration;
                }
            }

            var oneSecond = 1000;
            var oneMinute = oneSecond * 60;
            var oneHour = oneMinute * 60;
            var oneDay = oneHour * 24;

            var seconds = Math.floor((millseconds % oneMinute) / oneSecond);
            var minutes = Math.floor((millseconds % oneHour) / oneMinute);
            var hours = Math.floor((millseconds % oneDay) / oneHour);
            var days = Math.floor(millseconds / oneDay);

            var timeString = '';

            if (format == 'short') {
                if (days !== 0) {
                    timeString += (days !== 1) ? (days + 'd') : (days + 'd');
                }
                if (hours !== 0) {
                    timeString += (hours !== 1) ? (hours + 'h') : (hours + 'h');
                }
                if (minutes !== 0) {
                    timeString += (minutes !== 1) ? (minutes + 'm') : (minutes + 'm');
                }
                if (seconds !== 0 || millseconds < 1000) {
                    timeString += (seconds !== 1) ? (seconds + 's') : (seconds + 's');
                }

                return timeString;
            } else {
                if (days !== 0) {
                    timeString += (days !== 1) ? (days + ' days ') : (days + ' day ');
                }
                if (hours !== 0) {
                    timeString += (hours !== 1) ? (hours + ' hours ') : (hours + ' hour ');
                }
                if (minutes !== 0) {
                    timeString += (minutes !== 1) ? (minutes + ' minutes ') : (minutes + ' minute ');
                }
                if (seconds !== 0 || millseconds < 1000) {
                    timeString += (seconds !== 1) ? (seconds + ' seconds ') : (seconds + ' second ');
                }

                return timeString;
            }

        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('hotelprice', hotelprice);

    hotelprice.$inject = ['$log', 'GlobalSrv'];

    function hotelprice($log, GlobalSrv) {
        return hotelpriceFilter;

        function hotelpriceFilter(input) {
            var result = 0;
            if (input) {
                result = Math.min.apply(Math, input.map(function(item) {
                    return item.price;
                }));
            }

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('halfRange', halfRange);

    function halfRange() {
        return rangeFilter;

        function rangeFilter(input) {
            var result = [];
            angular.forEach(input, function(item) {
                if (item && item.toString().includes('.5')) {
                    result.push(1);
                }
            });
            return result;
        }
    }
})();

(function() {
    'use strict';

    /* It's not gender filter any more, it used to display I18N of lookup */
    /* Still keeping gender name -> to refactored LATER */

    angular
        .module('B2B2CGatewayApp')
        .filter('gender', gender);

    gender.$inject = ['$log', 'GlobalSrv', 'DataService', 'MetaData', '$translate', '$filter'];

    function gender($log, GlobalSrv, DataService, MetaData, $translate, $filter) {
        return genderFilter;

        function genderFilter(input, type) {
            var result = input;

            var PREFIX = '';

            if (type == 'cabinclass') {
                PREFIX = 'ota_air.cabin_class';
            }

            result = $translate.instant($filter('lowercase')(PREFIX + '.' + input));

            // if (input == 'MALE') result = "Nam";
            // else if (input == 'FEMALE') result = "Nữ";
            // else if (input == 'BOY') result = "Con trai";
            // else if (input == 'GIRL') result = "Con gái";

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('flightdatediff', flightdatediff);

    flightdatediff.$inject = ['$log'];

    function flightdatediff($log) {
        return flightdatediffFilter;

        function flightdatediffFilter(originDestinationOption) {
            var result = '';

            var originDateTime = moment.utc(originDestinationOption.originDateTime.substr(0, 10), 'YYYY-MM-DD');
            var destinationDateTime = moment.utc(originDestinationOption.destinationDateTime.substr(0, 10), 'YYYY-MM-DD');

            var datediff = destinationDateTime.diff(originDateTime, 'days');

            // $log.log(originDateTime + ":" + destinationDateTime + ":" + datediff);

            if (datediff > 0) {
                result = '+' + datediff;
            }

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('duration', duration);

    function duration() {
        return durationFilter;

        function durationFilter(millseconds, format) {
            // var oneSecond = 1000;
            // var oneMinute = oneSecond * 60;
            var oneSecond = 1;
            var oneMinute = oneSecond * 1;
            var oneHour = oneMinute * 60;
            var oneDay = oneHour * 24;

            var seconds = Math.floor((millseconds % oneMinute) / oneSecond);
            var minutes = Math.floor((millseconds % oneHour) / oneMinute);
            var hours = Math.floor((millseconds % oneDay) / oneHour);
            var days = Math.floor(millseconds / oneDay);

            var timeString = '';

            if (format == 'short') {
                if (days !== 0) {
                    timeString += (days !== 1) ? (days + 'd') : (days + 'd');
                }
                if (hours !== 0) {
                    timeString += (hours !== 1) ? (hours + 'h') : (hours + 'h');
                }
                if (minutes !== 0) {
                    timeString += (minutes !== 1) ? (minutes + 'm') : (minutes + 'm');
                }
                // if (seconds !== 0 || millseconds < 1000) {
                //     timeString += (seconds !== 1) ? (seconds + 's') : (seconds + 's');
                // }

                return timeString;
            } else if (format == 'defvn') {
                if (days !== 0) {
                    timeString += (days !== 1) ? (days + 'd') : (days + 'd');
                }
                if (hours !== 0) {
                    timeString += (hours !== 1) ? (hours + 'h') : (hours + 'h');
                }
                if (minutes !== 0) {
                    timeString += (minutes !== 1) ? (minutes + 'm') : (minutes + 'm');
                }
                // if (seconds !== 0 || millseconds < 1000) {
                //     timeString += (seconds !== 1) ? (seconds + ' seconds ') : (seconds + ' second ');
                // }

                return timeString;
            } else {
                if (days !== 0) {
                    timeString += (days !== 1) ? (days + ' ngày ') : (days + ' ngày ');
                }
                if (hours !== 0) {
                    timeString += (hours !== 1) ? (hours + ' giờ ') : (hours + ' giờ ');
                }
                if (minutes !== 0) {
                    timeString += (minutes !== 1) ? (minutes + ' phút ') : (minutes + ' phút ');
                }
                // if (seconds !== 0 || millseconds < 1000) {
                //     timeString += (seconds !== 1) ? (seconds + ' seconds ') : (seconds + ' second ');
                // }

                return timeString;
            }



        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('diffprice', diffprice);

    diffprice.$inject = ['$log', 'GlobalSrv'];

    function diffprice($log, GlobalSrv) {
        return diffpriceFilter;

        function diffpriceFilter(input, base) {
            var result = 0;

            if (!base) {
                base = 0;
            }

            result = input - base;

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('destination', destination);

    destination.$inject = ['$log', 'GlobalSrv'];

    function destination($log, GlobalSrv) {
        return destinationFilter;

        function destinationFilter(input, type) {
            var result = input;

            var data = GlobalSrv.getLocalDestinations();
            data.forEach(function(item) {
                if (item.code == input) {
                    result = item.name;
                }
            });

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('country', country);

    country.$inject = ['$log', 'GlobalSrv', 'DataService'];

    function country($log, GlobalSrv, DataService) {
        return countryFilter;

        function countryFilter(input) {
            var result = input;

            var data = GlobalSrv.getAllCountries();
            data.forEach(function(item) {
                // $log.log(item.code + ":" + input + ":" + (item.code == input));
                if (item.code == input) {
                    result = item.name;
                }
            });

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('cc', cc);

    cc.$inject = ['$log'];

    function cc($log) {
        return ccFilter;

        function ccFilter(input) {
            var result = input;

            var orig = input;
            var edited = orig;
            result = edited.slice(4).replace(/\d/g, 'x') + edited.slice(-4);

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('bookingtoairport', bookingtoairport);

    bookingtoairport.$inject = ['$log'];

    function bookingtoairport($log) {
        return function(input, type) {
            if (input) {
                var arr = input.split("::");
                var fromTo = arr[1];

                var locArr = fromTo.split("-");


                if (type == 'F') {
                    return locArr[0];
                } else if (type == 'T') {
                    return locArr[1];
                }
            }
            return input;


        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('bookingPriceInfo', bookingPriceInfo);

    bookingPriceInfo.$inject = ['$log', 'GlobalSrv'];

    function bookingPriceInfo($log, GlobalSrv) {
        return bookingPriceInfoFilter;

        /**
         *
         * @param input is bookingModel object
         * @param type can be: total_price | total_fare | total_tax | total_netprice | total_service_fee | luggage_price | discount
         * @param route default all | depart | return
         * @returns {number}
         */
        function bookingPriceInfoFilter(input, type, route) {
            var bookingModel = input;

            // $log.log("+++++>>>>> bookingPriceInfoFilter - input:" + input + " - type:" + type + " - route:" + route);
            // $log.log("input = " + JSON.stringify(input));

            if (bookingModel) {
                if (type == 'total_fare') {
                    return calTotalFare(bookingModel);

                } else if (type == 'total_tax') {
                    return calTotalTax(bookingModel);

                } else if (type == 'total_netprice') {
                    return calTotalNetPrice(bookingModel);

                } else if (type == 'total_service_fee') {
                    return calTotalServiceFee(bookingModel);

                } else if (type == 'luggage_price') {
                    return calLuggagePrice(bookingModel, route);

                } else if (type == 'discount') {
                    return calDiscountAmount(bookingModel);

                } else if (type == 'total_price') {
                    return calTotalPrice(bookingModel, route);
                } else if (type == 'meal_price') {
                    return calMealPrice(bookingModel, route);
                }
            }

            return 0;
        }

        /**
         *
         * @param bookingModel
         * @param route all | depart | return
         * @returns {number}
         */
        function calTotalPrice(bookingModel, route) {
            var result = 0;

            result = result + calTotalFare(bookingModel);
            result = result + calTotalTax(bookingModel);
            result = result + calTotalServiceFee(bookingModel);
            result = result + calLuggagePrice(bookingModel, route);
            result = result + calMealPrice(bookingModel, route);
            result = result - calDiscountAmount(bookingModel);

            return result;
        }

        /**
         *
         * @param bookingModel
         * @returns {number}
         */
        function calTotalFare(bookingModel) {
            if (bookingModel && bookingModel.bookingInfo && bookingModel.bookingInfo.displayPriceInfo) {
                return bookingModel.bookingInfo.displayPriceInfo.baseFare;
            }
            return 0;
        }

        /**
         *
         * @param bookingModel
         * @returns {number}
         */
        function calTotalTax(bookingModel) {
            var result = 0;
            if (bookingModel && bookingModel.bookingInfo && bookingModel.bookingInfo.displayPriceInfo) {

                result = result + bookingModel.bookingInfo.displayPriceInfo.serviceTax;

                //+++ disable distribute parent_markup value to Tax
                /*
                result = result + bookingModel.bookingInfo.displayPriceInfo.markupValue;

                result = result - bookingModel.bookingInfo.displayPriceInfo.agencyMarkupValue;
                */
                //---
            }
            return result;
        }

        /**
         *
         * @param bookingModel
         * @returns {number}
         */
        function calTotalNetPrice(bookingModel) {
            var result = 0;

            if (bookingModel && bookingModel.bookingInfo && bookingModel.bookingInfo.displayPriceInfo) {
                result = result + bookingModel.bookingInfo.displayPriceInfo.baseFare;

                result = result + bookingModel.bookingInfo.displayPriceInfo.serviceTax;

                //+++ disable distribute parent_markup value to Tax
                /*
                result = result + bookingModel.bookingInfo.displayPriceInfo.markupValue;

                result = result - bookingModel.bookingInfo.displayPriceInfo.agencyMarkupValue;
                */
                //---
            }

            return result;
        }

        /**
         *
         * @param bookingModel
         * @returns {number}
         */
        function calTotalServiceFee(bookingModel) {
            var result = 0;

            if (bookingModel && bookingModel.bookingInfo && bookingModel.bookingInfo.displayPriceInfo) {
                /*
                result = result + bookingModel.bookingInfo.displayPriceInfo.agencyMarkupValue;
                 */

                result = result + bookingModel.bookingInfo.displayPriceInfo.markupValue;

                result = result + bookingModel.bookingInfo.displayPriceInfo.paymentFee;
            }

            return result;
        }

        /**
         *
         * @param bookingModel
         * @returns {number}
         */
        function calDiscountAmount(bookingModel) {
            var result = 0;
            if (bookingModel) {
                if (bookingModel.voucher && bookingModel.voucher.discountAmount && bookingModel.voucher.discountAmount > 0) {
                    //+++ process for applying voucher
                    result = result + bookingModel.voucher.discountAmount;
                    //---
                } else {
                    if (bookingModel.bookingInfo && bookingModel.bookingInfo.displayPriceInfo) {
                        //+++ process for displaying applied discount info
                        result = result + bookingModel.bookingInfo.displayPriceInfo.discountAmount;
                        //---
                    }
                }
            }

            return result;
        }

        /**
         *
         * @param bookingModel
         * @param route default (all), depart, return
         * @returns {number}
         */
        function calLuggagePrice(bookingModel, route) {
            var result = 0;

            if (bookingModel) {
                if (bookingModel.bookingInfo && bookingModel.bookingInfo.travelerInfos && bookingModel.bookingInfo.travelerInfos.length > 0) {
                    //$log.log("calLuggagePrice -- having travelerInfos....");
                    //++++ process for view detail a booking
                    if ('return' == route || 'depart' == route) {
                        //+++ process traveler_infos
                        var direction = ('return' == route ? 'RETURN' : 'DEPARTURE');

                        angular.forEach(bookingModel.bookingInfo.travelerInfos, function(travelerInfo, key1) {
                            if (travelerInfo.serviceRequests) {
                                //+++ process service_requests
                                angular.forEach(travelerInfo.serviceRequests, function(serviceRequest, key2) {
                                    if (serviceRequest && serviceRequest.ssrAmount && serviceRequest.bookingDirection == direction) {
                                        if (serviceRequest.serviceType == 'BAGGAGE') {
                                            result = result + serviceRequest.ssrAmount;
                                        }
                                    }
                                });
                                //---
                            }
                        });

                        //---
                    } else {
                        //+++ process total_ssr
                        if (bookingModel.bookingInfo && bookingModel.bookingInfo.displayPriceInfo && bookingModel.bookingInfo.displayPriceInfo.totalSsrValue) {
                            angular.forEach(bookingModel.customers, function(customer) {
                                if (customer.departServiceRequests) {
                                    angular.forEach(customer.departServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'BAGGAGE') {
                                            result += ssr.amount;
                                        }
                                    });
                                }
                                if (customer.returnServiceRequests) {
                                    angular.forEach(customer.returnServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'BAGGAGE') {
                                            result += ssr.amount;
                                        }
                                    });
                                }
                            });
                        }
                        //---
                    }
                    //---
                } else {
                    //+++ process for searching and booking process
                    if (bookingModel.customers) {
                        //$log.log("calLuggagePrice -- having customers....");
                        angular.forEach(bookingModel.customers, function(customer) {
                            if ('depart' == route) {
                                if (customer.departServiceRequests) {
                                    angular.forEach(customer.departServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'BAGGAGE') {
                                            result += ssr.amount;
                                        }
                                    });
                                }

                            } else if ('return' == route) {
                                if (customer.returnServiceRequests) {
                                    angular.forEach(customer.returnServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'BAGGAGE') {
                                            result += ssr.amount;
                                        }
                                    });
                                }

                            } else {
                                if (customer.departServiceRequests) {
                                    angular.forEach(customer.departServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'BAGGAGE') {
                                            result += ssr.amount;
                                        }
                                    });
                                }

                                if (customer.returnServiceRequests) {
                                    angular.forEach(customer.returnServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'BAGGAGE') {
                                            result += ssr.amount;
                                        }
                                    });
                                }
                            }
                        });
                    }
                }
            }
            return result;
        }

        function calMealPrice(bookingModel, route) {
            var result = 0;

            if (bookingModel) {
                if (bookingModel.bookingInfo && bookingModel.bookingInfo.travelerInfos && bookingModel.bookingInfo.travelerInfos.length > 0) {
                    //$log.log("calLuggagePrice -- having travelerInfos....");
                    //++++ process for view detail a booking
                    if ('return' == route || 'depart' == route) {
                        //+++ process traveler_infos
                        var direction = ('return' == route ? 'RETURN' : 'DEPARTURE');

                        angular.forEach(bookingModel.bookingInfo.travelerInfos, function(travelerInfo, key1) {
                            if (travelerInfo.serviceRequests) {
                                //+++ process service_requests
                                angular.forEach(travelerInfo.serviceRequests, function(serviceRequest, key2) {

                                    if (serviceRequest && serviceRequest.ssrAmount && serviceRequest.bookingDirection == direction) {
                                        if (serviceRequest.serviceType == 'MEAL') {
                                            result = result + serviceRequest.ssrAmount;
                                        }
                                    }
                                });
                            }
                        });
                    } else {

                        if (bookingModel.bookingInfo && bookingModel.bookingInfo.displayPriceInfo && bookingModel.bookingInfo.displayPriceInfo.totalSsrValue) {
                            angular.forEach(bookingModel.customers, function(customer) {
                                if (customer.departServiceRequests) {
                                    angular.forEach(customer.departServiceRequests, function(ssr) {

                                        if (ssr.serviceType == 'MEAL') {
                                            result += ssr.amount;
                                        }
                                    });
                                }
                                if (customer.returnServiceRequests) {
                                    angular.forEach(customer.returnServiceRequests, function(ssr) {

                                        if (ssr.serviceType == 'MEAL') {
                                            result += ssr.amount;
                                        }
                                    });
                                }
                            });
                        }
                    }
                } else {
                    if (bookingModel.customers) {
                        angular.forEach(bookingModel.customers, function(customer) {
                            if ('depart' == route) {
                                if (customer.departServiceRequests) {
                                    angular.forEach(customer.departServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'MEAL') {
                                            result += ssr.amount;
                                        }
                                    });
                                }

                            } else if ('return' == route) {
                                if (customer.returnServiceRequests) {
                                    angular.forEach(customer.returnServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'MEAL') {
                                            result += ssr.amount;
                                        }
                                    });
                                }

                            } else {
                                if (customer.departServiceRequests) {
                                    angular.forEach(customer.departServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'MEAL') {
                                            result += ssr.amount;
                                        }
                                    });
                                }

                                if (customer.returnServiceRequests) {
                                    angular.forEach(customer.returnServiceRequests, function(ssr) {
                                        if (ssr.serviceType == 'MEAL') {
                                            result += ssr.amount;
                                        }
                                    });
                                }
                            }
                        });
                    }
                }
            }
            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('bookingAirPricedItinerary', bookingAirPricedItinerary);

    bookingAirPricedItinerary.$inject = ['$log', 'GlobalSrv'];

    function bookingAirPricedItinerary($log, GlobalSrv) {
        return bookingAirPricedItineraryFilter;

        /**
         *
         * @param input is pricedItinerary object
         * @param type can be: adult | child | infant
         * @param attr can be:  fare | tax | netprice | quantities
         * @returns {number}
         */
        function bookingAirPricedItineraryFilter(input, type, attr) {
            var result = 0;

            var pricedItinerary = input;
            var fareBreakdown = null;

            // $log.log("+++++>>>>> bookingAirPricedItineraryFilter - input:" + input + " - type:" + type + " - attr:" + attr);

            /*
             * The specifies the ADT-Adult | CHD-Child |  INF-Infant passenger fare breakdown
             */
            if (pricedItinerary && pricedItinerary.airItineraryPricingInfo) {
                if (type == 'adult') {
                    fareBreakdown = pricedItinerary.airItineraryPricingInfo.adultFare;
                } else if (type == 'child') {
                    fareBreakdown = pricedItinerary.airItineraryPricingInfo.childFare;
                } else if (type == 'infant') {
                    fareBreakdown = pricedItinerary.airItineraryPricingInfo.infantFare;
                }
            }

            if (fareBreakdown) {
                var objFare = fareBreakdown.passengerFare;
                var objQuantities = fareBreakdown.passengerTypeQuantities;

                if (attr == 'fare') {
                    result = result + calPassengerFare(objFare);

                    return result;

                } else if (attr == 'tax') {
                    result = result + calPassengerTax(type, objFare, pricedItinerary.displayPriceInfo);

                    return result;

                } else if (attr == 'netprice') {
                    result = result + calPassengerFare(objFare);

                    result = result + calPassengerTax(type, objFare, pricedItinerary.displayPriceInfo);

                    var qtt = calPassengerQuantities(objQuantities);

                    return result * (qtt == 0 ? 1 : qtt);

                } else if (attr == 'quantities') {
                    result = result + calPassengerQuantities(objQuantities);


                    return result;
                }
            }

            return result;
        }

        /**
         *
         * @param passengerFare
         * @returns {number}
         */
        function calPassengerFare(passengerFare) {
            var result = 0;
            var objFare = passengerFare;

            if (objFare && objFare.baseFare && objFare.baseFare.amount) {
                result = result + objFare.baseFare.amount;

            } else if (objFare && objFare.baseFair && objFare.baseFair.amount) {
                //+++ back compliant
                result = result + objFare.baseFair.amount;
                //---
            }
            return result;
        }


        /**
         *
         * @param passengerFare
         * @param displayPriceInfo
         * @returns {number}
         */
        function calPassengerTax(audutType, passengerFare, displayPriceInfo) {
            var result = 0;
            var objFare = passengerFare;

            if (objFare && objFare.serviceTax && objFare.serviceTax.amount) {
                result = result + objFare.serviceTax.amount;
            }

            //+++ disable distribute parent_markup value to Tax
            /*
            if(audutType != 'infant' && displayPriceInfo && displayPriceInfo.additionalTaxPerTraveler) {
                result = result + displayPriceInfo.additionalTaxPerTraveler;
            }
            */
            //---

            return result;
        }

        /**
         *
         * @param quantities
         * @returns {number}
         */
        function calPassengerQuantities(quantities) {
            var result = 0;
            if (quantities && quantities.quantity) {
                result = result + quantities.quantity;
            }
            return result;
        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('airport', airport);

    airport.$inject = ['$log', 'GlobalSrv'];

    function airport($log, GlobalSrv) {
        return airportFilter;

        function airportFilter(input, type) {
            var result = input;

            var data = GlobalSrv.getLocalAirports();
            data.forEach(function(item) {
                if (item.code == input) {
                    if (type == 'city') {
                        result = item.city;
                    } else if (type == 'name') {
                        result = item.name;
                    } else if (type == 'city-code') {
                        result = item.city + ' (' + item.code + ')';
                    } else if (type == 'name-code') {
                        result = item.name + ' (' + item.code + ')';
                    } else {
                        result = item.code;
                    }
                }
            });

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .filter('airline', airline);

    airline.$inject = ['$log', 'GlobalSrv', 'DataService', 'MetaData'];

    function airline($log, GlobalSrv, DataService, MetaData) {
        return airlineFilter;

        function airlineFilter(input, type) {
            var result = input;

            var allAirlines = DataService.getAllAirlines();
            if (allAirlines == null || allAirlines == undefined || allAirlines) {
                MetaData.getAirlines().then(function success() {
                    allAirlines = DataService.getAllAirlines();
                });
            }
            $log.log(allAirlines);

            allAirlines.forEach(function(item) {
                if (item.code == input) {
                    result = item.name;
                }
            });

            return result;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdTypeaheadFocus', gtdTypeaheadFocus);

    gtdTypeaheadFocus.$inject = ['$log', '$timeout'];

    function gtdTypeaheadFocus($log, $timeout) {

        // function gtdTouchSpinner() {
        return {
            require: 'ngModel',
            link: function(scope, element, attr, ctrl) {
                element.bind('click', function() {
                    var vv = ctrl.$viewValue;
                    ctrl.$setViewValue(vv ? vv + ' ' : ' ');
                    $timeout(function() {
                        ctrl.$setViewValue(vv ? vv : '');
                    }, 10);
                });
            }
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdTouchSpinner', gtdTouchSpinner);

    gtdTouchSpinner.$inject = ['$log', '$timeout'];

    function gtdTouchSpinner($log, $timeout) {

        // function gtdTouchSpinner() {
        return {
            restrict: 'A',
            scope: {
                //gtdEmitEvent: '&'
                gtdMin: '=',
                gtdMax: '=?'
            },
            link: function(scope, element, attr) {
                $(element).TouchSpin({
                    verticalbuttons: true,
                    min: attr.gtdMin ? attr.gtdMin : 0,
                    max: attr.gtdMax ? attr.gtdMax : 9
                });
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdSwapTypeAhead', gtdSwapTypeAhead);

    gtdSwapTypeAhead.$inject = ['$log', '$timeout'];

    function gtdSwapTypeAhead($log, $timeout) {

        // function gtdSwapTypeAhead() {
        return {
            restrict: 'A',
            scope: {
                gtdFrom: '=',
                gtdTo: '='
            },
            link: function(scope, element, attr) {
                // $log.log(attr.gtdData);
                // $log.log(scope.gtdData);
                alert(1);
                $(element).click(function() {
                    var fromVal = $("#" + attr.gtdFrom).val();
                    var toVal = $("#" + attr.gtdTo).val();

                    $timeout(function() {
                        $("#" + attr.gtdFrom).val(toVal).trigger('change');
                        $("#" + attr.gtdTo).val(fromVal).trigger('change');

                        alert($("#" + attr.gtdFrom).val() + ":" + $("#" + attr.gtdTo).val());
                    });

                });
                // if (scope.$parent.$last) {
                //     // $timeout(function () {
                //     //     scope.doFinishRenderCallback();
                //     // }, 0);
                //
                //     $timeout(function () {
                //         //alert("emit:" + attr.gtdEmitEvent + ", " + scope.$parent.$last);
                //         scope.$emit(attr.gtdEmitEvent);
                //     }, 0);
                // }
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdSwapSelect2Inter', gtdSwapSelect2Inter);

    gtdSwapSelect2Inter.$inject = ['$log', '$timeout', 'GlobalSrv'];

    function gtdSwapSelect2Inter($log, $timeout, GlobalSrv) {

        // function gtdSwapSelect2Inter() {
        return {
            restrict: 'A',
            scope: {
                gtdFrom: '=',
                gtdTo: '='
            },
            link: function(scope, element, attr) {

                // CHANGE FOR INTERNATIONAL FLIGHT
                $(element).click(function() {
                    var fromVal = $("#" + attr.gtdFrom).val();
                    var toVal = $("#" + attr.gtdTo).val();
                    // alert(fromVal + ":" + toVal);

                    var airports = GlobalSrv.getLocalAirports();
                    var text = "";

                    for (var idx in airports) {
                        if (airports[idx].code == fromVal) {
                            text = airports[idx].city + ' (' + airports[idx].code + ')';
                        }
                    }

                    var $option = $('<option selected>' + text + '</option>').val(fromVal);
                    $("#" + attr.gtdTo).append($option).trigger('change'); // append the option and update Select2

                    for (var idx in airports) {
                        if (airports[idx].code == toVal) {
                            text = airports[idx].city + ' (' + airports[idx].code + ')';
                        }
                    }

                    var $option = $('<option selected>' + text + '</option>').val(toVal);
                    $("#" + attr.gtdFrom).append($option).trigger('change'); // append the option and update Select2

                });

            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdSwapSelect2', gtdSwapSelect2);

    gtdSwapSelect2.$inject = ['$log', '$timeout'];

    function gtdSwapSelect2($log, $timeout) {

        // function gtdSwapSelect2() {
        return {
            restrict: 'A',
            scope: {
                gtdFrom: '=',
                gtdTo: '='
            },
            link: function(scope, element, attr) {

                var toggleProcessing = false;

                $(element).click(function() {
                    $log.log(toggleProcessing);
                    if (toggleProcessing) {
                        $log.log('wait');
                        return;
                    } else {
                        toggleProcessing = true;
                        var fromVal = $("#" + attr.gtdFrom).val();
                        var toVal = $("#" + attr.gtdTo).val();

                        $timeout(function() {

                            $("#" + attr.gtdFrom).val(null).trigger('change');

                            $timeout(function() {
                                $("#" + attr.gtdTo).val(fromVal).trigger('change');

                                $timeout(function() {
                                    $("#" + attr.gtdFrom).val(toVal).trigger('change');

                                    $timeout(function() {
                                        toggleProcessing = false;
                                    }, 100);
                                }, 1);

                            }, 1);


                        }, 1);
                    }



                });

                // if (scope.$parent.$last) {
                //     // $timeout(function () {
                //     //     scope.doFinishRenderCallback();
                //     // }, 0);
                //
                //     $timeout(function () {
                //         //alert("emit:" + attr.gtdEmitEvent + ", " + scope.$parent.$last);
                //         scope.$emit(attr.gtdEmitEvent);
                //     }, 0);
                // }
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdSpinnerPassengerQuantity', gtdSpinnerPassengerQuantity);

    gtdSpinnerPassengerQuantity.$inject = ['$log', '$timeout'];

    function gtdSpinnerPassengerQuantity($log, $timeout) {

        // function gtdSpinnerPassengerQuantity() {
        return {
            restrict: 'A',
            scope: {
                searchOptions: '='
            },
            link: function(scope, element, attr) {

                $('#adultNo').on('change', function() {
                    var dtChd = 9 - parseInt(scope.searchOptions.adultNo);

                    if (parseInt(scope.searchOptions.adultNo) == 1) {
                        dtChd = 4;
                    }

                    // if (dtChd < scope.searchOptions.childrenNo) {
                    //     scope.searchOptions.childrenNo = 0;
                    //     // $('#fChdQttIdx').trigger('change');
                    // }
                    //
                    // if (scope.searchOptions.newBornNo > scope.searchOptions.adultNo) {
                    //     scope.searchOptions.newBornNo = 0;
                    //     // $('#fInfQttIdx').trigger('change');
                    // }

                    $("#childrenNo").trigger("touchspin.updatesettings", {
                        max: dtChd
                    });
                    $("#newBornNo").trigger("touchspin.updatesettings", {
                        max: parseInt(scope.searchOptions.adultNo)
                    });

                });

                $('#childrenNo').on('change', function() {
                    // var dtChd = 9 - parseInt(scope.searchOptions.childrenNo);
                    //
                    // if (parseInt(scope.searchOptions.adultNo) == 1) {
                    //     dtChd = 4;
                    // }
                    //
                    //
                    // $( "#adultNo" ).trigger("touchspin.updatesettings", {max: dtChd});
                    // $( "#newBornNo" ).trigger("touchspin.updatesettings", {max: parseInt(scope.searchOptions.adultNo)});

                });

            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdSelect2', gtdSelect2);

    gtdSelect2.$inject = ['$log', '$timeout', '$parse', 'META_SEARCH_AIRPORT_URL', 'GlobalSrv', 'MetaData'];

    function gtdSelect2($log, $timeout, $parse, META_SEARCH_AIRPORT_URL, GlobalSrv, MetaData) {

        var refreshDataSource = function(scope, id, type, airlineDataSource, value) {

            try {
                $log.log('refresh source - refactor');

                var newOpts = airlineDataSource.slice(0);

                $log.log(newOpts);

                // nam.huynhphuong - fix ISSUE IBE2-502
                /*
                for (var i = newOpts.length - 1; i >= 0; i--) {
                    if (newOpts[i].code == scope.ngModel) {
                        newOpts.splice(i, 1);
                    }
                }
                */
                // end fix

                var data = $("#" + id).val();

                // Check null for IE
                // https://bitbucket.org/kkvsoft/gtd-b2c-gateway/issues/452/tr-n-ie-l-i-kh-ng-t-i-c-s-l-ng-tr-em-s
                if ($('#' + id).data('select2')) {
                    $('#' + id).select2('destroy').empty().select2({
                        data: newOpts,
                        containerCssClass: 'home-select2'

                            // trim
                            ,
                        matcher: function(params, data) {
                            // If there are no search terms, return all of the data
                            if (jQuery.trim(params.term) === '') {
                                return data;
                            }
                            var myTerm = jQuery.trim(params.term);
                            // `params.term` should be the term that is used for searching
                            // `data.text` is the text that is displayed for the data object
                            if (data.text.toLowerCase().indexOf(myTerm.toLowerCase()) > -1) {
                                // You can return modified objects from here
                                // This includes matching the `children` how you want in nested data sets
                                return data;
                            }

                            // Return `null` if the term should not be displayed
                            return null;
                        }

                    });
                }

                var found = false;
                for (var i = newOpts.length - 1; i >= 0; i--) {
                    if (newOpts[i].code == data) {
                        found = true;
                    }
                }
                if (found) {
                    $("#" + id).val(data).trigger('change.select2');
                } else {
                    $("#" + id).val(null).trigger('change.select2');
                }

                scope.$apply();
            } catch (e) {
                $log.log('Handle expected exception');
                $log.log(e);
            }
            // }

        };

        // function gtdSelect2() {
        return {
            restrict: 'A',
            require: 'ngModel',
            scope: {
                gtdData: '=',
                gtdValue: '=',
                ngModel: '=',
                gtdMode: '=',

                gtdSearchOptions: '=',
                gtdDirection: '='
            },
            link: function(scope, element, attr, ngModel) {
                $log.log("ngmodel=" + scope.ngModel + ":" + ":" + scope[attr.ngModel] + ":" + ngModel.$viewValue);

                // alert(scope.gtdMode);
                if (scope.gtdMode == 'domestic') {
                    MetaData.searchAirportsLocal('VN').then(function(result) {
                        $log.log("MetaData.searchAirportsLocal from flight.service");

                        var airlineDataSource = result;

                        if (airlineDataSource) {
                            for (var i = 0; i < airlineDataSource.length; i++) {
                                airlineDataSource[i].id = airlineDataSource[i].code;
                                airlineDataSource[i].text = airlineDataSource[i].city + " (" + airlineDataSource[i].code + ")";
                            }
                        }

                        $(element).select2({
                            data: airlineDataSource,
                            containerCssClass: 'home-select2',
                            placeholder: function() {
                                    $(this).data('placeholder');
                                }

                                // trim
                                ,
                            matcher: function(params, data) {
                                // If there are no search terms, return all of the data
                                if (jQuery.trim(params.term) === '') {
                                    return data;
                                }
                                var myTerm = jQuery.trim(params.term);
                                // `params.term` should be the term that is used for searching
                                // `data.text` is the text that is displayed for the data object
                                if (data.text.toLowerCase().indexOf(myTerm.toLowerCase()) > -1) {
                                    // You can return modified objects from here
                                    // This includes matching the `children` how you want in nested data sets
                                    return data;
                                }

                                // Return `null` if the term should not be displayed
                                return null;
                            }


                            //dropdownCssClass: 'select2-search-width'
                        }).on('change', function() {
                            $log.log(scope.gtdDirection);
                            // $log.log(airlineDataSource);

                            if (scope.gtdDirection == 'FROM') {
                                refreshDataSource(scope, 'toAirPort', 'FROM', airlineDataSource, scope.ngModel);
                            } else if (scope.gtdDirection == 'TO') {
                                refreshDataSource(scope, 'fromAirPort', 'TO', airlineDataSource, scope.ngModel);
                            }
                        });
                        // $log.log(airlineDataSource);
                    });

                }

                $timeout(function() {
                    var airports = GlobalSrv.getLocalAirports();
                    var text = "";
                    for (var idx in airports) {
                        if (airports[idx].code == scope.ngModel) {
                            text = airports[idx].city + ' (' + airports[idx].code + ')';
                        }
                    }


                    var $option = $('<option selected>' + text + '</option>').val(scope.ngModel);
                    $(element).append($option).trigger('change'); // append the option and update Select2
                });



            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdPopoverClick', gtdPopoverClick);

    gtdPopoverClick.$inject = ['$log', '$timeout', '$compile', '$templateCache', '$q', '$http'];

    function gtdPopoverClick($log, $timeout, $compile, $templateCache, $q, $http) {

        var getTemplate = function(templatePath) {
            var def = $q.defer();

            var template = '';

            template = $templateCache.get(templatePath);
            if (typeof template === "undefined") {
                $http.get(templatePath)
                    .success(function(data) {
                        $templateCache.put(templatePath, data);
                        def.resolve(data);
                    });
            } else {
                def.resolve(template);
            }

            return def.promise;
        };

        return {
            restrict: "A",
            scope: {
                argument: '=',
                argument2: '=',
                argument3: '@?',
                argument4: '@?',
                ibeKeys: '=?'
            },
            link: function(scope, element, attrs) {
                getTemplate(attrs.gtdTemplatePath).then(function(popOverContent) {
                    var options = {
                        content: $compile($(popOverContent))(scope),
                        placement: "bottom",
                        html: true,
                        trigger: "click"
                    };
                    $(element).popover(options);
                });
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdPopover', gtdPopover);

    gtdPopover.$inject = ['$log', '$timeout', '$compile', '$templateCache', '$q', '$http'];

    function gtdPopover($log, $timeout, $compile, $templateCache, $q, $http) {
        var getTemplate = function(templatePath) {
            var def = $q.defer();

            var template = '';

            template = $templateCache.get(templatePath);
            if (typeof template === "undefined") {
                $http.get(templatePath)
                    .success(function(data) {
                        $templateCache.put(templatePath, data);
                        def.resolve(data);
                    });
            } else {
                def.resolve(template);
            }

            return def.promise;
        };

        return {
            restrict: "A",
            scope: {
                argument: '=',
                argument2: '=',
                argument3: '@?',
                argument4: '@?',
                ibeKeys: '='
            },
            link: function(scope, element, attrs) {
                getTemplate(attrs.gtdTemplatePath).then(function(popOverContent) {
                    if (!attrs.placement) {
                        attrs.placement = 'bottom';
                    }
                    var options = {
                        content: $compile($(popOverContent))(scope),
                        placement: attrs.placement,
                        html: true,
                        trigger: "focus"
                    };
                    $(element).popover(options);
                });
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdPassengerQuantity', gtdPassengerQuantity);

    gtdPassengerQuantity.$inject = ['$log', '$timeout'];

    function gtdPassengerQuantity($log, $timeout) {

        // function gtdPassengerQuantity() {
        return {
            restrict: 'A',
            scope: {
                //gtdEmitEvent: '&'
                gtdAdultQtt: '=',
                gtdChildQtt: '=',
                gtdInfantQtt: '=',

                gtdCurAdultQtt: '=',
                gtdCurChildQtt: '=',
                gtdCurInfantQtt: '=',

                searchOptions: '=',

                gtdQtt: '='
            },
            link: function(scope, element, attr) {
                var gtdQtt = scope.gtdQtt;

                var gtdAdultQtt = scope.gtdAdultQtt;
                var gtdChildQtt = scope.gtdChildQtt;
                var gtdInfantQtt = scope.gtdInfantQtt;

                var gtdCurAdultQtt = scope.gtdCurAdultQtt;
                var gtdCurChildQtt = scope.gtdCurChildQtt;
                var gtdCurInfantQtt = scope.gtdCurInfantQtt;
                $('.adultSelect .groupSelect .btn-select').on('click', function(evt) {
                    var __this = $(this);
                    var numberAdult = parseInt(__this.parent().find('.numberItem').text());
                    if (numberAdult >= 1 && numberAdult <= 9) {
                        if (__this.hasClass("increase")) {
                            scope.searchOptions.adultNo = numberAdult == 9 ? numberAdult : numberAdult + 1;
                            __this.parent().find('.numberItem').html(scope.searchOptions.adultNo);
                        } else {
                            scope.searchOptions.adultNo = numberAdult == 1 ? numberAdult : numberAdult - 1;
                            __this.parent().find('.numberItem').html(scope.searchOptions.adultNo);
                        }
                        var dtChd = 9 - scope.searchOptions.adultNo;
                        scope.gtdChildQtt = [];
                        scope.gtdInfantQtt = [];
                        if (scope.searchOptions.adultNo == 1) {
                            dtChd = 4;
                        }
                        for (var i = 0; i <= dtChd; i++) {
                            scope.$apply(function() { //code
                                scope.gtdChildQtt.push(i);
                            });
                        }
                        for (var i = 0; i <= scope.searchOptions.adultNo; i++) {
                            scope.$apply(function() { //code
                                scope.gtdInfantQtt.push(i);
                            });
                        }
                        if (dtChd < scope.gtdCurChildQtt) {
                            scope.gtdCurChildQtt = 0;
                            $('#fChdQttIdx').trigger('change');
                        }

                        if (scope.gtdCurInfantQtt > scope.searchOptions.adultNo) {
                            scope.gtdCurInfantQtt = 0;
                            $('#fInfQttIdx').trigger('change');
                        }

                        $('#fChdQttIdx').trigger('change');
                        $('#fInfQttIdx').trigger('change');
                        var selectChild = $('.childrenSelect select option:selected').attr('value');
                        $('.childrenSelect .numberItem').html(selectChild);
                    }
                });

                $('.childrenSelect .groupSelect .btn-select').on('click', function(evt) {
                    var _thisChild = $(this);
                    var numberChild = parseInt(_thisChild.parent().find('.numberItem').text());

                    var minOption = _thisChild.closest('.selectNumber').find('select option:first').val();
                    var maxOption = _thisChild.closest('.selectNumber').find('select option:last').val();
                    if (numberChild >= minOption && numberChild <= maxOption) {
                        if (_thisChild.hasClass("increase")) {
                            scope.searchOptions.childrenNo = numberChild == maxOption ? numberChild : numberChild + 1;
                        } else {
                            scope.searchOptions.childrenNo = numberChild == minOption ? numberChild : numberChild - 1;
                        }
                        _thisChild.parent().find('.numberItem').html(scope.searchOptions.childrenNo);
                        // _thisChild.closest('.selectNumber').find('select option').removeAttr('selected');
                        // _thisChild.closest('.selectNumber').find('select option[value='+scope.searchOptions.childrenNo+']').attr('selected','selected');

                    }
                });
                $('.infSelect .groupSelect .btn-select').on('click', function(evt) {
                    var _thisInf = $(this);
                    var numberInf = parseInt(_thisInf.parent().find('.numberItem').text());

                    var minOption = _thisInf.closest('.selectNumber').find('select option:first').val();
                    var maxOption = _thisInf.closest('.selectNumber').find('select option:last').val();
                    if (numberInf >= minOption && numberInf <= maxOption) {
                        if (_thisInf.hasClass("increase")) {
                            scope.searchOptions.newBornNo = numberInf == maxOption ? numberInf : numberInf + 1;
                        } else {
                            scope.searchOptions.newBornNo = numberInf == minOption ? numberInf : numberInf - 1;
                        }
                        _thisInf.parent().find('.numberItem').html(scope.searchOptions.newBornNo);
                    } else {
                        _thisInf.parent().find('.numberItem').html(maxOption);
                    }
                });

                $('#fAdtQttIdx').on('change', function(evt) {
                    var dtChd = 9 - parseInt(scope.searchOptions.adultNo);

                    scope.gtdChildQtt = [];
                    scope.gtdInfantQtt = [];

                    if (parseInt(scope.searchOptions.adultNo) == 1) {
                        dtChd = 4;
                    }

                    for (var i = 0; i <= dtChd; i++) {
                        scope.$apply(function() { //code
                            scope.gtdChildQtt.push(i);
                        });
                    }
                    for (var i = 0; i <= scope.searchOptions.adultNo; i++) {
                        scope.$apply(function() { //code
                            scope.gtdInfantQtt.push(i);
                        });
                    }

                    if (dtChd < scope.gtdCurChildQtt) {
                        scope.gtdCurChildQtt = 0;
                        $('#fChdQttIdx').trigger('change');
                    }

                    if (scope.gtdCurInfantQtt > scope.searchOptions.adultNo) {
                        scope.gtdCurInfantQtt = 0;
                        $('#fInfQttIdx').trigger('change');
                    }

                    $('#fChdQttIdx').trigger('change');
                    $('#fInfQttIdx').trigger('change');

                });



                $('#fChdQttIdx').on('change', function(evt) {
                    // var dtChd = 9 - parseInt(scope.searchOptions.childrenNo);
                    //
                    // scope.gtdAdultQtt = [];
                    // scope.gtdInfantQtt = [];
                    // for (var i = 1; i <= dtChd; i++) {
                    //     scope.$apply(function(){ //code
                    //         scope.gtdAdultQtt.push(i);
                    //     });
                    //
                    // }
                    // for (var i = 0; i <= scope.searchOptions.adultNo; i++) {
                    //     scope.$apply(function(){ //code
                    //         scope.gtdInfantQtt.push(i);
                    //     });
                    // }
                });
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdNoSpecialChar', gtdNoSpecialChar);

    gtdNoSpecialChar.$inject = ['$log', '$timeout'];

    function gtdNoSpecialChar($log, $timeout) {

        // function gtdNoSpecialChar() {
        return {
            require: 'ngModel',
            scope: {
                gtdCapitalize: '=?'
            },
            restrict: 'A',
            link: function(scope, element, attrs, modelCtrl) {

                // alert(scope.gtdCapitalize);

                modelCtrl.$parsers.push(function(inputValue) {
                    if (inputValue == null)
                        return '';
                    // var cleanInputValue = inputValue.replace(/[^\w\s]/gi, '');
                    var cleanInputValue = latinize(inputValue);
                    cleanInputValue = cleanInputValue.replace(/[^\w\s]/gi, '');

                    if (scope.gtdCapitalize) {
                        cleanInputValue = cleanInputValue.toUpperCase();
                    }

                    if (cleanInputValue != inputValue) {
                        modelCtrl.$setViewValue(cleanInputValue);
                        modelCtrl.$render();
                    }
                    return cleanInputValue;
                });
            }
        };
    }
})();


(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdMaskInput', gtdMaskInput);

    gtdMaskInput.$inject = ['$log', '$timeout'];

    function gtdMaskInput($log, $timeout) {

        // function gtdMaskInput() {
        return {
            require: "ngModel",
            restrict: "AE",
            scope: {
                ngModel: '='
            },
            link: function(scope, elem, attrs) {
                var orig = scope.ngModel;
                var edited = orig;
                scope.ngModel = edited.slice(4).replace(/\d/g, 'x') + edited.slice(-4);

                elem.bind("blur", function() {
                    var temp;
                    orig = elem.val();
                    temp = elem.val();
                    elem.val(temp.slice(4).replace(/\d/g, 'x') + temp.slice(-4));
                });

                elem.bind("focus", function() {
                    elem.val(orig);
                });
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdLightGallery', gtdLightGallery);

    gtdLightGallery.$inject = ['$log', '$timeout'];

    function gtdLightGallery($log, $timeout) {

        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                if (scope.$last) {

                    // ng-repeat is completed
                    element.parent().lightSlider({
                        gallery: true,
                        item: 1,
                        loop: false,
                        autoWidth: false,
                        slideMargin: 0,
                        thumbItem: 5
                    });
                }
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdFinishRenderNgRepeat', gtdFinishRenderNgRepeat);

    gtdFinishRenderNgRepeat.$inject = ['$log', '$timeout'];

    function gtdFinishRenderNgRepeat($log, $timeout) {

        // function gtdFinishRenderNgRepeat() {
        return {
            restrict: 'A',
            scope: {
                gtdEmitEvent: '&'
            },
            link: function(scope, element, attr) {
                if (scope.$parent.$last) {
                    // $timeout(function () {
                    //     scope.doFinishRenderCallback();
                    // }, 0);

                    $timeout(function() {
                        //alert("emit:" + attr.gtdEmitEvent + ", " + scope.$parent.$last);
                        scope.$emit(attr.gtdEmitEvent);
                    }, 0);
                }
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdFareRulesPopover', gtdFareRulesPopover);

    gtdFareRulesPopover.$inject = ['$log', '$timeout', '$compile', '$templateCache', '$q', '$http', 'Flight'];

    function gtdFareRulesPopover($log, $timeout, $compile, $templateCache, $q, $http, Flight) {

        var getTemplate = function(templatePath) {
            var def = $q.defer();

            var template = '';

            template = $templateCache.get(templatePath);
            if (typeof template === "undefined") {
                $http.get(templatePath)
                    .success(function(data) {
                        $templateCache.put(templatePath, data);
                        def.resolve(data);
                    });
            } else {
                def.resolve(template);
            }

            return def.promise;
        };

        return {
            restrict: "A",
            scope: {
                argument: '=?',
                argument2: '=?',
                argument3: '=?',
                argument4: '@?',
                ibeKeys: '=?'
            },
            link: function(scope, element, attrs) {

                scope.init = false;

                $(element).bind('click', function() {

                    if (!scope.init) {

                        scope.init = true;

                        var myDataPromise = Flight.getFareRules(scope.argument, scope.argument2, scope.argument3);
                        myDataPromise.then(function(result) {

                            // $log.log("Get result from loadFareRules");
                            // $log.log(result);
                            scope.argument4 = "";
                            angular.forEach(result.fareRules, function(fareRule) {
                                angular.forEach(fareRule.fareRuleItems, function(fareRuleItem) {
                                    scope.argument4 += ('<strong>' + fareRuleItem.title + '</strong>');
                                    scope.argument4 += ('<p>' + fareRuleItem.detail + '</p>');
                                });
                            });

                            if (scope.argument4 == '') {
                                scope.argument4 = '<b>Điều kiện vé đang được cập nhật</b>';
                            }

                            // getTemplate(attrs.gtdTemplatePath).then(function(popOverContent) {
                            var options = {
                                content: scope.argument4,
                                placement: "bottom",
                                html: true,
                                trigger: "focus"
                            };
                            $(element).popover(options).popover('show');

                            scope.init = true;
                            // });

                        });
                    } else {
                        // $(element).popover('toggle');
                    }

                });

            }
        };
    }
})();

(function() {
    //'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdDualDatePicker', gtdDualDatePicker);

    gtdDualDatePicker.$inject = ['$log', '$timeout', '$parse', 'DEFAULT_SETTING'];

    function gtdDualDatePicker($log, $timeout, $parse, DEFAULT_SETTING) {

        /** BEGIN LUNAR */
        /**
         * Copyright 2004 Ho Ngoc Duc [http://come.to/duc]. All Rights Reserved.<p>
         * Permission to use, copy, modify, and redistribute this software and its
         * documentation for personal, non-commercial use is hereby granted provided that
         * this copyright notice appears in all copies.
         */

        var ABOUT = "\u00C2m l\u1ECBch Vi\u1EC7t Nam - Version 0.8" + "\n\u00A9 2004 H\u1ED3 Ng\u1ECDc \u0110\u1EE9c [http://come.to/duc]";
        var TK19 = new Array(
            0x30baa3, 0x56ab50, 0x422ba0, 0x2cab61, 0x52a370, 0x3c51e8, 0x60d160, 0x4ae4b0, 0x376926, 0x58daa0,
            0x445b50, 0x3116d2, 0x562ae0, 0x3ea2e0, 0x28e2d2, 0x4ec950, 0x38d556, 0x5cb520, 0x46b690, 0x325da4,
            0x5855d0, 0x4225d0, 0x2ca5b3, 0x52a2b0, 0x3da8b7, 0x60a950, 0x4ab4a0, 0x35b2a5, 0x5aad50, 0x4455b0,
            0x302b74, 0x562570, 0x4052f9, 0x6452b0, 0x4e6950, 0x386d56, 0x5e5aa0, 0x46ab50, 0x3256d4, 0x584ae0,
            0x42a570, 0x2d4553, 0x50d2a0, 0x3be8a7, 0x60d550, 0x4a5aa0, 0x34ada5, 0x5a95d0, 0x464ae0, 0x2eaab4,
            0x54a4d0, 0x3ed2b8, 0x64b290, 0x4cb550, 0x385757, 0x5e2da0, 0x4895d0, 0x324d75, 0x5849b0, 0x42a4b0,
            0x2da4b3, 0x506a90, 0x3aad98, 0x606b50, 0x4c2b60, 0x359365, 0x5a9370, 0x464970, 0x306964, 0x52e4a0,
            0x3cea6a, 0x62da90, 0x4e5ad0, 0x392ad6, 0x5e2ae0, 0x4892e0, 0x32cad5, 0x56c950, 0x40d4a0, 0x2bd4a3,
            0x50b690, 0x3a57a7, 0x6055b0, 0x4c25d0, 0x3695b5, 0x5a92b0, 0x44a950, 0x2ed954, 0x54b4a0, 0x3cb550,
            0x286b52, 0x4e55b0, 0x3a2776, 0x5e2570, 0x4852b0, 0x32aaa5, 0x56e950, 0x406aa0, 0x2abaa3, 0x50ab50
        ); /* Years 2000-2099 */

        var TK20 = new Array(
            0x3c4bd8, 0x624ae0, 0x4ca570, 0x3854d5, 0x5cd260, 0x44d950, 0x315554, 0x5656a0, 0x409ad0, 0x2a55d2,
            0x504ae0, 0x3aa5b6, 0x60a4d0, 0x48d250, 0x33d255, 0x58b540, 0x42d6a0, 0x2cada2, 0x5295b0, 0x3f4977,
            0x644970, 0x4ca4b0, 0x36b4b5, 0x5c6a50, 0x466d50, 0x312b54, 0x562b60, 0x409570, 0x2c52f2, 0x504970,
            0x3a6566, 0x5ed4a0, 0x48ea50, 0x336a95, 0x585ad0, 0x442b60, 0x2f86e3, 0x5292e0, 0x3dc8d7, 0x62c950,
            0x4cd4a0, 0x35d8a6, 0x5ab550, 0x4656a0, 0x31a5b4, 0x5625d0, 0x4092d0, 0x2ad2b2, 0x50a950, 0x38b557,
            0x5e6ca0, 0x48b550, 0x355355, 0x584da0, 0x42a5b0, 0x2f4573, 0x5452b0, 0x3ca9a8, 0x60e950, 0x4c6aa0,
            0x36aea6, 0x5aab50, 0x464b60, 0x30aae4, 0x56a570, 0x405260, 0x28f263, 0x4ed940, 0x38db47, 0x5cd6a0,
            0x4896d0, 0x344dd5, 0x5a4ad0, 0x42a4d0, 0x2cd4b4, 0x52b250, 0x3cd558, 0x60b540, 0x4ab5a0, 0x3755a6,
            0x5c95b0, 0x4649b0, 0x30a974, 0x56a4b0, 0x40aa50, 0x29aa52, 0x4e6d20, 0x39ad47, 0x5eab60, 0x489370,
            0x344af5, 0x5a4970, 0x4464b0, 0x2c74a3, 0x50ea50, 0x3d6a58, 0x6256a0, 0x4aaad0, 0x3696d5, 0x5c92e0
        ); /* Years 1900-1999 */

        var TK21 = new Array(
            0x46c960, 0x2ed954, 0x54d4a0, 0x3eda50, 0x2a7552, 0x4e56a0, 0x38a7a7, 0x5ea5d0, 0x4a92b0, 0x32aab5,
            0x58a950, 0x42b4a0, 0x2cbaa4, 0x50ad50, 0x3c55d9, 0x624ba0, 0x4ca5b0, 0x375176, 0x5c5270, 0x466930,
            0x307934, 0x546aa0, 0x3ead50, 0x2a5b52, 0x504b60, 0x38a6e6, 0x5ea4e0, 0x48d260, 0x32ea65, 0x56d520,
            0x40daa0, 0x2d56a3, 0x5256d0, 0x3c4afb, 0x6249d0, 0x4ca4d0, 0x37d0b6, 0x5ab250, 0x44b520, 0x2edd25,
            0x54b5a0, 0x3e55d0, 0x2a55b2, 0x5049b0, 0x3aa577, 0x5ea4b0, 0x48aa50, 0x33b255, 0x586d20, 0x40ad60,
            0x2d4b63, 0x525370, 0x3e49e8, 0x60c970, 0x4c54b0, 0x3768a6, 0x5ada50, 0x445aa0, 0x2fa6a4, 0x54aad0,
            0x4052e0, 0x28d2e3, 0x4ec950, 0x38d557, 0x5ed4a0, 0x46d950, 0x325d55, 0x5856a0, 0x42a6d0, 0x2c55d4,
            0x5252b0, 0x3ca9b8, 0x62a930, 0x4ab490, 0x34b6a6, 0x5aad50, 0x4655a0, 0x2eab64, 0x54a570, 0x4052b0,
            0x2ab173, 0x4e6930, 0x386b37, 0x5e6aa0, 0x48ad50, 0x332ad5, 0x582b60, 0x42a570, 0x2e52e4, 0x50d160,
            0x3ae958, 0x60d520, 0x4ada90, 0x355aa6, 0x5a56d0, 0x462ae0, 0x30a9d4, 0x54a2d0, 0x3ed150, 0x28e952
        ); /* Years 2000-2099 */

        var TK22 = new Array(
            0x4eb520, 0x38d727, 0x5eada0, 0x4a55b0, 0x362db5, 0x5a45b0, 0x44a2b0, 0x2eb2b4, 0x54a950, 0x3cb559,
            0x626b20, 0x4cad50, 0x385766, 0x5c5370, 0x484570, 0x326574, 0x5852b0, 0x406950, 0x2a7953, 0x505aa0,
            0x3baaa7, 0x5ea6d0, 0x4a4ae0, 0x35a2e5, 0x5aa550, 0x42d2a0, 0x2de2a4, 0x52d550, 0x3e5abb, 0x6256a0,
            0x4c96d0, 0x3949b6, 0x5e4ab0, 0x46a8d0, 0x30d4b5, 0x56b290, 0x40b550, 0x2a6d52, 0x504da0, 0x3b9567,
            0x609570, 0x4a49b0, 0x34a975, 0x5a64b0, 0x446a90, 0x2cba94, 0x526b50, 0x3e2b60, 0x28ab61, 0x4c9570,
            0x384ae6, 0x5cd160, 0x46e4a0, 0x2eed25, 0x54da90, 0x405b50, 0x2c36d3, 0x502ae0, 0x3a93d7, 0x6092d0,
            0x4ac950, 0x32d556, 0x58b4a0, 0x42b690, 0x2e5d94, 0x5255b0, 0x3e25fa, 0x6425b0, 0x4e92b0, 0x36aab6,
            0x5c6950, 0x4674a0, 0x31b2a5, 0x54ad50, 0x4055a0, 0x2aab73, 0x522570, 0x3a5377, 0x6052b0, 0x4a6950,
            0x346d56, 0x585aa0, 0x42ab50, 0x2e56d4, 0x544ae0, 0x3ca570, 0x2864d2, 0x4cd260, 0x36eaa6, 0x5ad550,
            0x465aa0, 0x30ada5, 0x5695d0, 0x404ad0, 0x2aa9b3, 0x50a4d0, 0x3ad2b7, 0x5eb250, 0x48b540, 0x33d556
        ); /* Years 2100-2199 */

        var CAN = new Array("Gi\341p", "\u1EA4t", "B\355nh", "\u0110inh", "M\u1EADu", "K\u1EF7", "Canh", "T\342n", "Nh\342m", "Qu\375");
        var CHI = new Array("T\375", "S\u1EEDu", "D\u1EA7n", "M\343o", "Th\354n", "T\u1EF5", "Ng\u1ECD", "M\371i", "Th\342n", "D\u1EADu", "Tu\u1EA5t", "H\u1EE3i");
        var TUAN = new Array("Ch\u1EE7 nh\u1EADt", "Th\u1EE9 hai", "Th\u1EE9 ba", "Th\u1EE9 t\u01B0", "Th\u1EE9 n\u0103m", "Th\u1EE9 s\341u", "Th\u1EE9 b\u1EA3y");
        var GIO_HD = new Array("110100101100", "001101001011", "110011010010", "101100110100", "001011001101", "010010110011");
        var TIETKHI = new Array("Xu\u00E2n ph\u00E2n", "Thanh minh", "C\u1ED1c v\u0169", "L\u1EADp h\u1EA1", "Ti\u1EC3u m\u00E3n", "Mang ch\u1EE7ng",
            "H\u1EA1 ch\u00ED", "Ti\u1EC3u th\u1EED", "\u0110\u1EA1i th\u1EED", "L\u1EADp thu", "X\u1EED th\u1EED", "B\u1EA1ch l\u1ED9",
            "Thu ph\u00E2n", "H\u00E0n l\u1ED9", "S\u01B0\u01A1ng gi\u00E1ng", "L\u1EADp \u0111\u00F4ng", "Ti\u1EC3u tuy\u1EBFt", "\u0110\u1EA1i tuy\u1EBFt",
            "\u0110\u00F4ng ch\u00ED", "Ti\u1EC3u h\u00E0n", "\u0110\u1EA1i h\u00E0n", "L\u1EADp xu\u00E2n", "V\u0169 Th\u1EE7y", "Kinh tr\u1EADp"
        );

        /* Create lunar date object, stores (lunar) date, month, year, leap month indicator, and Julian date number */
        function LunarDate(dd, mm, yy, leap, jd) {
            this.day = dd;
            this.month = mm;
            this.year = yy;
            this.leap = leap;
            this.jd = jd;
        }

        var PI = Math.PI;

        /* Discard the fractional part of a number, e.g., INT(3.2) = 3 */
        function INT(d) {
            return Math.floor(d);
        }

        function jdn(dd, mm, yy) {
            var a = INT((14 - mm) / 12);
            var y = yy + 4800 - a;
            var m = mm + 12 * a - 3;
            var jd = dd + INT((153 * m + 2) / 5) + 365 * y + INT(y / 4) - INT(y / 100) + INT(y / 400) - 32045;
            return jd;
            //return 367*yy - INT(7*(yy+INT((mm+9)/12))/4) - INT(3*(INT((yy+(mm-9)/7)/100)+1)/4) + INT(275*mm/9)+dd+1721029;
        }

        function jdn2date(jd) {
            var Z, A, alpha, B, C, D, E, dd, mm, yyyy, F;
            Z = jd;
            if (Z < 2299161) {
                A = Z;
            } else {
                alpha = INT((Z - 1867216.25) / 36524.25);
                A = Z + 1 + alpha - INT(alpha / 4);
            }
            B = A + 1524;
            C = INT((B - 122.1) / 365.25);
            D = INT(365.25 * C);
            E = INT((B - D) / 30.6001);
            dd = INT(B - D - INT(30.6001 * E));
            if (E < 14) {
                mm = E - 1;
            } else {
                mm = E - 13;
            }
            if (mm < 3) {
                yyyy = C - 4715;
            } else {
                yyyy = C - 4716;
            }
            return new Array(dd, mm, yyyy);
        }

        function decodeLunarYear(yy, k) {
            var monthLengths, regularMonths, offsetOfTet, leapMonth, leapMonthLength, solarNY, currentJD, j, mm;
            var ly = new Array();
            monthLengths = new Array(29, 30);
            regularMonths = new Array(12);
            offsetOfTet = k >> 17;
            leapMonth = k & 0xf;
            leapMonthLength = monthLengths[k >> 16 & 0x1];
            solarNY = jdn(1, 1, yy);
            currentJD = solarNY + offsetOfTet;
            j = k >> 4;
            for (i = 0; i < 12; i++) {
                regularMonths[12 - i - 1] = monthLengths[j & 0x1];
                j >>= 1;
            }
            if (leapMonth == 0) {
                for (mm = 1; mm <= 12; mm++) {
                    ly.push(new LunarDate(1, mm, yy, 0, currentJD));
                    currentJD += regularMonths[mm - 1];
                }
            } else {
                for (mm = 1; mm <= leapMonth; mm++) {
                    ly.push(new LunarDate(1, mm, yy, 0, currentJD));
                    currentJD += regularMonths[mm - 1];
                }
                ly.push(new LunarDate(1, leapMonth, yy, 1, currentJD));
                currentJD += leapMonthLength;
                for (mm = leapMonth + 1; mm <= 12; mm++) {
                    ly.push(new LunarDate(1, mm, yy, 0, currentJD));
                    currentJD += regularMonths[mm - 1];
                }
            }
            return ly;
        }

        function getYearInfo(yyyy) {
            var yearCode;
            if (yyyy < 1900) {
                yearCode = TK19[yyyy - 1800];
            } else if (yyyy < 2000) {
                yearCode = TK20[yyyy - 1900];
            } else if (yyyy < 2100) {
                yearCode = TK21[yyyy - 2000];
            } else {
                yearCode = TK22[yyyy - 2100];
            }
            return decodeLunarYear(yyyy, yearCode);
        }

        var FIRST_DAY = jdn(25, 1, 1800); // Tet am lich 1800
        var LAST_DAY = jdn(31, 12, 2199);

        function findLunarDate(jd, ly) {
            if (jd > LAST_DAY || jd < FIRST_DAY || ly[0].jd > jd) {
                return new LunarDate(0, 0, 0, 0, jd);
            }
            var i = ly.length - 1;
            while (jd < ly[i].jd) {
                i--;
            }
            var off = jd - ly[i].jd;
            ret = new LunarDate(ly[i].day + off, ly[i].month, ly[i].year, ly[i].leap, jd);
            return ret;
        }

        function getLunarDate(dd, mm, yyyy) {
            var ly, jd;
            if (yyyy < 1800 || 2199 < yyyy) {
                //return new LunarDate(0, 0, 0, 0, 0);
            }
            ly = getYearInfo(yyyy);
            jd = jdn(dd, mm, yyyy);
            if (jd < ly[0].jd) {
                ly = getYearInfo(yyyy - 1);
            }
            return findLunarDate(jd, ly);
        }

        /* Compute the longitude of the sun at any time.
         * Parameter: floating number jdn, the number of days since 1/1/4713 BC noon
         * Algorithm from: "Astronomical Algorithms" by Jean Meeus, 1998
         */
        function SunLongitude(jdn) {
            var T, T2, dr, M, L0, DL, lambda, theta, omega;
            T = (jdn - 2451545.0) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
            T2 = T * T;
            dr = PI / 180; // degree to radian
            M = 357.52910 + 35999.05030 * T - 0.0001559 * T2 - 0.00000048 * T * T2; // mean anomaly, degree
            L0 = 280.46645 + 36000.76983 * T + 0.0003032 * T2; // mean longitude, degree
            DL = (1.914600 - 0.004817 * T - 0.000014 * T2) * Math.sin(dr * M);
            DL = DL + (0.019993 - 0.000101 * T) * Math.sin(dr * 2 * M) + 0.000290 * Math.sin(dr * 3 * M);
            theta = L0 + DL; // true longitude, degree
            // obtain apparent longitude by correcting for nutation and aberration
            omega = 125.04 - 1934.136 * T;
            lambda = theta - 0.00569 - 0.00478 * Math.sin(omega * dr);
            // Convert to radians
            lambda = lambda * dr;
            lambda = lambda - PI * 2 * (INT(lambda / (PI * 2))); // Normalize to (0, 2*PI)
            return lambda;
        }

        /* Compute the sun segment at start (00:00) of the day with the given integral Julian day number.
         * The time zone if the time difference between local time and UTC: 7.0 for UTC+7:00.
         * The function returns a number between 0 and 23.
         * From the day after March equinox and the 1st major term after March equinox, 0 is returned.
         * After that, return 1, 2, 3 ...
         */
        function getSunLongitude(dayNumber, timeZone) {
            return INT(SunLongitude(dayNumber - 0.5 - timeZone / 24.0) / PI * 12);
        }

        var today = new Date();
        //var currentLunarYear = getYearInfo(today.getFullYear());
        var currentLunarDate = getLunarDate(today.getDate(), today.getMonth() + 1, today.getFullYear());
        var currentMonth = today.getMonth() + 1;
        var currentYear = today.getFullYear();

        function parseQuery(q) {
            var ret = new Array();
            if (q.length < 2) return ret;
            var s = q.substring(1, q.length);
            var arr = s.split("&");
            var i, j;
            for (i = 0; i < arr.length; i++) {
                var a = arr[i].split("=");
                for (j = 0; j < a.length; j++) {
                    ret.push(a[j]);
                }
            }
            return ret;
        }

        function getSelectedMonth() {
            var query = window.location.search;
            var arr = parseQuery(query);
            var idx;
            for (idx = 0; idx < arr.length; idx++) {
                if (arr[idx] == "mm") {
                    currentMonth = parseInt(arr[idx + 1]);
                } else if (arr[idx] == "yy") {
                    currentYear = parseInt(arr[idx + 1]);
                }
            }
        }

        function getMonth(mm, yy) {
            var ly1, ly2, tet1, jd1, jd2, mm1, yy1, result, i;
            if (mm < 12) {
                mm1 = mm + 1;
                yy1 = yy;
            } else {
                mm1 = 1;
                yy1 = yy + 1;
            }
            jd1 = jdn(1, mm, yy);
            jd2 = jdn(1, mm1, yy1);
            ly1 = getYearInfo(yy);
            //alert('1/'+mm+'/'+yy+' = '+jd1+'; 1/'+mm1+'/'+yy1+' = '+jd2);
            tet1 = ly1[0].jd;
            result = new Array();
            if (tet1 <= jd1) { /* tet(yy) = tet1 < jd1 < jd2 <= 1.1.(yy+1) < tet(yy+1) */
                for (i = jd1; i < jd2; i++) {
                    result.push(findLunarDate(i, ly1));
                }
            } else if (jd1 < tet1 && jd2 < tet1) { /* tet(yy-1) < jd1 < jd2 < tet1 = tet(yy) */
                ly1 = getYearInfo(yy - 1);
                for (i = jd1; i < jd2; i++) {
                    result.push(findLunarDate(i, ly1));
                }
            } else if (jd1 < tet1 && tet1 <= jd2) { /* tet(yy-1) < jd1 < tet1 <= jd2 < tet(yy+1) */
                ly2 = getYearInfo(yy - 1);
                for (i = jd1; i < tet1; i++) {
                    result.push(findLunarDate(i, ly2));
                }
                for (i = tet1; i < jd2; i++) {
                    result.push(findLunarDate(i, ly1));
                }
            }
            return result;
        }

        function getDayName(lunarDate) {
            if (lunarDate.day == 0) {
                return "";
            }
            var cc = getCanChi(lunarDate);
            var s = "Ng\u00E0y " + cc[0] + ", th\341ng " + cc[1] + ", n\u0103m " + cc[2];
            return s;
        }

        function getYearCanChi(year) {
            return CAN[(year + 6) % 10] + " " + CHI[(year + 8) % 12];
        }

        /*
         * Can cua gio Chinh Ty (00:00) cua ngay voi JDN nay
         */
        function getCanHour0(jdn) {
            return CAN[(jdn - 1) * 2 % 10];
        }

        function getCanChi(lunar) {
            var dayName, monthName, yearName;
            dayName = CAN[(lunar.jd + 9) % 10] + " " + CHI[(lunar.jd + 1) % 12];
            monthName = CAN[(lunar.year * 12 + lunar.month + 3) % 10] + " " + CHI[(lunar.month + 1) % 12];
            if (lunar.leap == 1) {
                monthName += " (nhu\u1EADn)";
            }
            yearName = getYearCanChi(lunar.year);
            return new Array(dayName, monthName, yearName);
        }

        function getDayString(lunar, solarDay, solarMonth, solarYear) {
            var s;
            var dayOfWeek = TUAN[(lunar.jd + 1) % 7];
            s = dayOfWeek + " " + solarDay + "/" + solarMonth + "/" + solarYear;
            s += " -+- ";
            s = s + "Ng\u00E0y " + lunar.day + " th\341ng " + lunar.month;
            if (lunar.leap == 1) {
                s = s + " nhu\u1EADn";
            }
            return s;
        }

        function getTodayString() {
            var s = getDayString(currentLunarDate, today.getDate(), today.getMonth() + 1, today.getFullYear());
            s += " n\u0103m " + getYearCanChi(currentLunarDate.year);
            return s;
        }

        function getCurrentTime() {
            today = new Date();
            var Std = today.getHours();
            var Min = today.getMinutes();
            var Sec = today.getSeconds();
            var s1 = ((Std < 10) ? "0" + Std : Std);
            var s2 = ((Min < 10) ? "0" + Min : Min);
            //var s3  = ((Sec < 10) ? "0" + Sec : Sec);
            //return s1 + ":" + s2 + ":" + s3;
            return s1 + ":" + s2;
        }

        function getGioHoangDao(jd) {
            var chiOfDay = (jd + 1) % 12;
            var gioHD = GIO_HD[chiOfDay % 6]; // same values for Ty' (1) and Ngo. (6), for Suu and Mui etc.
            var ret = "";
            var count = 0;
            for (var i = 0; i < 12; i++) {
                if (gioHD.charAt(i) == '1') {
                    ret += CHI[i];
                    ret += ' (' + (i * 2 + 23) % 24 + '-' + (i * 2 + 1) % 24 + ')';
                    if (count++ < 5) ret += ', ';
                    if (count == 3) ret += '\n';
                }
            }
            return ret;
        }

        var DAYNAMES = new Array("CN", "T2", "T3", "T4", "T5", "T6", "T7");
        var PRINT_OPTS = new OutputOptions();
        var FONT_SIZES = new Array("9pt", "13pt", "17pt");
        var TAB_WIDTHS = new Array("180px", "420px", "600px");

        function OutputOptions() {
            this.fontSize = "13pt";
            this.tableWidth = "420px";
        }

        function setOutputSize(size) {
            var idx = 1;
            if (size == "small") {
                idx = 0;
            } else if (size == "big") {
                idx = 2;
            } else {
                idx = 1;
            }
            PRINT_OPTS.fontSize = FONT_SIZES[idx];
            PRINT_OPTS.tableWidth = TAB_WIDTHS[idx];
        }

        function printSelectedMonth() {
            getSelectedMonth();
            return printMonth(currentMonth, currentYear);
        }

        function printMonth(mm, yy) {
            var res = "";
            res += printStyle();
            res += printTable(mm, yy);
            res += printFoot();
            return res;
        }

        function printYear(yy) {
            var yearName = "N&#x103;m " + getYearCanChi(yy) + " " + yy;
            var res = "";
            res += printStyle();
            res += '<table align=center>\n';
            res += ('<tr><td colspan="3" class="tennam" onClick="showYearSelect();">' + yearName + '</td></tr>\n');
            for (var i = 1; i <= 12; i++) {
                if (i % 3 == 1) res += '<tr>\n';
                res += '<td>\n';
                res += printTable(i, yy);
                res += '</td>\n';
                if (i % 3 == 0) res += '</tr>\n';
            }
            res += '<table>\n';
            res += printFoot();
            return res;
        }

        function printSelectedYear() {
            getSelectedMonth();
            return printYear(currentYear);
        }

        function printStyle() {
            var fontSize = PRINT_OPTS.fontSize;
            var res = "";
            res += '<style type="text/css">\n';
            res += '<!--\n';
            //res += '  body {margin:0}\n';
            res += '  .tennam {text-align:center; font-size:150%; line-height:120%; font-weight:bold; color:#000000; background-color: #CCCCCC}\n';
            res += '  .thang {font-size: ' + fontSize + '; padding:1; line-height:100%; font-family:Tahoma,Verdana,Arial; table-layout:fixed}\n';
            res += '  .tenthang {text-align:center; font-size:125%; line-height:100%; font-weight:bold; color:#330033; background-color: #CCFFCC}\n';
            res += '  .navi-l {text-align:center; font-size:75%; line-height:100%; font-family:Verdana,Times New Roman,Arial; font-weight:bold; color:red; background-color: #CCFFCC}\n';
            res += '  .navi-r {text-align:center; font-size:75%; line-height:100%; font-family:Verdana,Arial,Times New Roman; font-weight:bold; color:#330033; background-color: #CCFFCC}\n';
            res += '  .ngaytuan {width:14%; text-align:center; font-size:125%; line-height:100%; color:#330033; background-color: #FFFFCC}\n';
            res += '  .ngaythang {background-color:#FDFDF0}\n';
            res += '  .homnay {background-color:#FFF000}\n';
            res += '  .tet {background-color:#FFCC99}\n';
            res += '  .am {text-align:right;font-size:75%;line-height:100%;color:blue}\n';
            res += '  .am2 {text-align:right;font-size:75%;line-height:100%;color:#004080}\n';
            res += '  .t2t6 {text-align:left;font-size:125%;color:black}\n';
            res += '  .t7 {text-align:left;font-size:125%;line-height:100%;color:green}\n';
            res += '  .cn {text-align:left;font-size:125%;line-height:100%;color:red}\n';
            res += '-->\n';
            res += '</style>\n';
            return res;
        }

        function printTable(mm, yy) {
            var i, j, k, solar, lunar, cellClass, solarClass, lunarClass;
            var currentMonth = getMonth(mm, yy);
            if (currentMonth.length == 0) return;
            var ld1 = currentMonth[0];
            var emptyCells = (ld1.jd + 1) % 7;
            var MonthHead = mm + "/" + yy;
            var LunarHead = getYearCanChi(ld1.year);
            var res = "";
            res += ('<table class="thang" border="2" cellpadding="1" cellspacing="1" width="' + PRINT_OPTS.tableWidth + '">\n');
            res += printHead(mm, yy);
            for (i = 0; i < 6; i++) {
                res += ("<tr>\n");
                for (j = 0; j < 7; j++) {
                    k = 7 * i + j;
                    if (k < emptyCells || k >= emptyCells + currentMonth.length) {
                        res += printEmptyCell();
                    } else {
                        solar = k - emptyCells + 1;
                        ld1 = currentMonth[k - emptyCells];
                        res += printCell(ld1, solar, mm, yy);
                    }
                }
                res += ("</tr>\n");
            }
            res += ('</table>\n');
            return res;
        }

        function getPrevMonthLink(mm, yy) {
            var mm1 = mm > 1 ? mm - 1 : 12;
            var yy1 = mm > 1 ? yy : yy - 1;
            //return '<a href="'+window.location.pathname+'?yy='+yy1+'&mm='+mm1+'"><img src="left1.gif" width=8 height=12 alt="PrevMonth" border=0></a>';
            return '<a href="' + window.location.pathname + '?yy=' + yy1 + '&mm=' + mm1 + '">&lt;</a>';
        }

        function getNextMonthLink(mm, yy) {
            var mm1 = mm < 12 ? mm + 1 : 1;
            var yy1 = mm < 12 ? yy : yy + 1;
            //return '<a href="'+window.location.pathname+'?yy='+yy1+'&mm='+mm1+'"><img src="right1.gif" width=8 height=12 alt="NextMonth" border=0></a>';
            return '<a href="' + window.location.pathname + '?yy=' + yy1 + '&mm=' + mm1 + '">&gt;</a>';
        }

        function getPrevYearLink(mm, yy) {
            //return '<a href="'+window.location.pathname+'?yy='+(yy-1)+'&mm='+mm+'"><img src="left2.gif" width=16 height=12 alt="PrevYear" border=0></a>';
            return '<a href="' + window.location.pathname + '?yy=' + (yy - 1) + '&mm=' + mm + '">&lt;&lt;</a>';
        }

        function getNextYearLink(mm, yy) {
            //return '<a href="'+window.location.pathname+'?yy='+(yy+1)+'&mm='+mm+'"><img src="right2.gif" width=16 height=12 alt="NextYear" border=0></a>';
            return '<a href="' + window.location.pathname + '?yy=' + (yy + 1) + '&mm=' + mm + '">&gt;&gt;</a>';
        }

        function printHead(mm, yy) {
            var res = "";
            var monthName = mm + "/" + yy;
            //res += ('<tr><td colspan="7" class="tenthang" onClick="showMonthSelect();">'+monthName+'</td></tr>\n');
            res += ('<tr><td colspan="2" class="navi-l">' + getPrevYearLink(mm, yy) + ' &nbsp;' + getPrevMonthLink(mm, yy) + '</td>\n');
            //res += ('<td colspan="1" class="navig"><a href="'+getPrevMonthLink(mm, yy)+'"><img src="left1.gif" alt="Prev"></a></td>\n');
            res += ('<td colspan="3" class="tenthang" onClick="showMonthSelect();">' + monthName + '</td>\n');
            //res += ('<td colspan="1" class="navi-r"><a href="'+getNextMonthLink(mm, yy)+'"><img src="right1.gif" alt="Next"></a></td>\n');
            res += ('<td colspan="2" class="navi-r">' + getNextMonthLink(mm, yy) + ' &nbsp;' + getNextYearLink(mm, yy) + '</td></tr>\n');
            //res += ('<tr><td colspan="7" class="tenthang"><a href="'+getNextMonthLink(mm, yy)+'"><img src="right.gif" alt="Next"></a></td></tr>\n');
            res += ('<tr onClick="alertAbout();">\n');
            for (var i = 0; i <= 6; i++) {
                res += ('<td class=ngaytuan>' + DAYNAMES[i] + '</td>\n');
            }
            res += ('<\/tr>\n');
            return res;
        }

        function printEmptyCell() {
            return '<td class=ngaythang><div class=cn>&nbsp;</div> <div class=am>&nbsp;</div></td>\n';
        }

        function printCell(lunarDate, solarDate, solarMonth, solarYear) {
            var cellClass, solarClass, lunarClass, solarColor;
            cellClass = "ngaythang";
            solarClass = "t2t6";
            lunarClass = "am";
            solarColor = "black";
            var dow = (lunarDate.jd + 1) % 7;
            if (dow == 0) {
                solarClass = "cn";
                solarColor = "red";
            } else if (dow == 6) {
                solarClass = "t7";
                solarColor = "green";
            }
            if (solarDate == today.getDate() && solarMonth == today.getMonth() + 1 && solarYear == today.getFullYear()) {
                cellClass = "homnay";
            }
            if (lunarDate.day == 1 && lunarDate.month == 1) {
                cellClass = "tet";
            }
            if (lunarDate.leap == 1) {
                lunarClass = "am2";
            }
            var lunar = lunarDate.day;
            if (solarDate == 1 || lunar == 1) {
                lunar = lunarDate.day + "/" + lunarDate.month;
            }
            var res = "";
            var args = lunarDate.day + "," + lunarDate.month + "," + lunarDate.year + "," + lunarDate.leap;
            args += ("," + lunarDate.jd + "," + solarDate + "," + solarMonth + "," + solarYear);
            res += ('<td class="' + cellClass + '"');
            if (lunarDate != null) res += (' title="' + getDayName(lunarDate) + '" onClick="alertDayInfo(' + args + ');"');
            res += (' <div style=color:' + solarColor + ' class="' + solarClass + '">' + solarDate + '</div> <div class="' + lunarClass + '">' + lunar + '</div></td>\n');
            return res;
        }

        function printFoot() {
            var res = "";
            res += '<script language="JavaScript" src="amlich-hnd.js"></script>\n';
            return res;
        }

        function showMonthSelect() {
            var home = "http://www.informatik.uni-leipzig.de/~duc/amlich/JavaScript/";
            window.open(home, "win2702", "menubar=yes,scrollbars=yes,status=yes,toolbar=yes,resizable=yes,location=yes");
            //window.location = home;
            //alertAbout();
        }

        function showYearSelect() {
            //window.open("selectyear.html", "win2702", "menubar=yes,scrollbars=yes");
            window.print();
        }

        function infoCellSelect(id) {
            if (id == 0) {}
        }

        function alertDayInfo(dd, mm, yy, leap, jd, sday, smonth, syear) {
            var lunar = new LunarDate(dd, mm, yy, leap, jd);
            var s = getDayString(lunar, sday, smonth, syear);
            s += " \u00E2m l\u1ECBch\n";
            s += getDayName(lunar);
            s += "\nGi\u1EDD \u0111\u1EA7u ng\u00E0y: " + getCanHour0(jd) + " " + CHI[0];
            s += "\nTi\u1EBFt: " + TIETKHI[getSunLongitude(jd + 1, 7.0)];
            s += "\nGi\u1EDD ho\u00E0ng \u0111\u1EA1o: " + getGioHoangDao(jd);
            alert(s);
        }

        function alertAbout() {
            alert(ABOUT);
        }

        function showVietCal() {
            window.status = getCurrentTime() + " -+- " + getTodayString();
            window.window.setTimeout("showVietCal()", 5000);
        }

        //showVietCal();
        // alertAbout();
        /** END LUNAR **/

        function addLunarInfo() {

            setTimeout(function() {

                var m, d;

                $.each($(".ui-datepicker-calendar td"), function(index, value) {
                    if ($(this).attr('data-month') && $(this).attr('data-year')) {
                        m = parseInt($(this).attr('data-month')) + 1;
                        y = parseInt($(this).attr('data-year'));
                        return false;
                    }
                });

                $.each($(".ui-datepicker-calendar td"), function(index, value) {

                    var date = $(this).text();
                    var d = parseInt(date);

                    if (/\d/.test(date) && $(this).attr('data-month') && $(this).attr('data-year')) {
                        var mc = parseInt($(this).attr('data-month')) + 1;
                        var yc = parseInt($(this).attr('data-year'));

                        var lunarDate = getLunarDate(d, mc, yc);
                        if (lunarDate.day == 1) {
                            $(this).find("a").attr('data-custom', lunarDate.day + '/' + lunarDate.month);
                            $(this).find("a").addClass('m1al');
                        } else {
                            $(this).find("a").attr('data-custom', lunarDate.day);
                        }
                    } else {
                        var lunarDate = getLunarDate(d, m, y);
                        if (lunarDate.day == 1) {
                            $(this).find("span").attr('data-custom', lunarDate.day + '/' + lunarDate.month);
                        } else {
                            $(this).find("span").attr('data-custom', lunarDate.day);
                        }
                    }

                });


            }, 0);
        }

        // function gtdDualDatePicker() {
        return {
            restrict: 'A',
            require: 'ngModel',
            scope: {
                ngModel: '=',
                startId: '=',
                endId: '=',
                isStart: '=',
                isEnd: '=',
                maxDate: '=?',
                minDate: '=?'
            },
            link: function(scope, element, attr) {

                var xsWidth = DEFAULT_SETTING.SCREEN_XS;
                var bWidth = window.innerWidth;

                var noOfMonth = 2;
                if (bWidth < xsWidth) {
                    noOfMonth = 1;
                }

                if (jQuery().datepicker) {

                    var md = '+365D';
                    var year = new Date().getFullYear() + 1;
                    var mid = 0;
                    // if(attr.minDate) {
                    //     mid = 1;
                    // }

                    if (attr.maxDate) {
                        if (attr.isStart) {
                            md = new Date(year, 11, 30);
                        } else {
                            md = new Date(year, 11, 31);
                        }
                    }

                    if (attr.isStart) {
                        $(element).datepicker({
                            dateFormat: 'dd-mm-yy',

                            monthNames: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
                            monthNamesShort: ["T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "T10", "T11", "T12"],

                            dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                            dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                            dayNames: ["CN", "Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7"],

                            numberOfMonths: noOfMonth,
                            // minDate: mid,
                            minDate: 0,
                            maxDate: md,
                            showButtonPanel: false,
                            allowInputToggle: true,

                            // BEGIN LUNAR
                            // beforeShowDay: function(date) {
                            // addLunarInfo(date);
                            //     return [true, date.getDay() === 5 || date.getDay() === 6 ? "weekend" : "weekday"];
                            // },
                            onChangeMonthYear: addLunarInfo,
                            // END LUNAR

                            //comment the beforeShow handler if you want to see the ugly overlay
                            beforeShow: function() {
                                addLunarInfo();

                                setTimeout(function() {
                                    $('.ui-datepicker').css('z-index', 99999999999999);
                                }, 0);
                            },

                            onSelect: function(dat, inst) {
                                //addLunarInfo();

                                //this.onSelect(dat, inst);
                                $log.log(dat);
                                if (attr.maxDate) {
                                    $('#' + attr.endId).datepicker('option', 'minDate', moment(dat, "DD-MM-YYYY").add(1, 'days').format('DD-MM-YYYY'));
                                } else {
                                    $('#' + attr.endId).datepicker('option', 'minDate', dat);
                                }

                                // $(element).val(dat).trigger('change');
                                $(element).trigger('change');
                                $('#' + attr.endId).trigger('change');
                            }

                        });

                    } else {
                        if (attr.minDate) {
                            // mid = 2;
                        }
                        $(element).datepicker({
                            dateFormat: 'dd-mm-yy',

                            monthNames: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
                            monthNamesShort: ["T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "T10", "T11", "T12"],

                            dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                            dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                            dayNames: ["CN", "Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7"],

                            numberOfMonths: noOfMonth,
                            // minDate: mid,
                            minDate: 0,
                            maxDate: md,
                            showButtonPanel: false,
                            allowInputToggle: true,

                            // BEGIN LUNAR
                            // beforeShowDay: function(date) {
                            //     return [true, date.getDay() === 5 || date.getDay() === 6 ? "weekend" : "weekday"];
                            // },
                            onChangeMonthYear: addLunarInfo,
                            // END LUNAR

                            //comment the beforeShow handler if you want to see the ugly overlay
                            beforeShow: function() {
                                addLunarInfo();
                                setTimeout(function() {
                                    $('.ui-datepicker').css('z-index', 99999999999999);
                                }, 0);
                            }
                        });

                        $timeout(function() {
                            // if(attr.minDate !== 'hotel') {
                            var dat = $('#' + attr.startId).datepicker("getDate");
                            // alert(attr.startId + ":" + JSON.stringify(dat));
                            if (dat) {
                                // alert(dat);
                                if (attr.minDate === 'hotel') {
                                    dat.setDate(dat.getDate() + 1);
                                }
                                $log.log(dat);
                                $(element).datepicker('option', 'minDate', dat);
                                $(element).trigger('change');
                            }
                            // }
                        }, 1000);


                        // $('#' + attr.s).datepicker('option', 'minDate', dat);
                        //
                        // $(element).trigger('change');
                        // $('#' + attr.endId).trigger('change');
                    }

                    // addLunarInfo();

                    if (scope.ngModel) {
                        // $(element).datepicker('setDate', scope.ngModel);
                        // $(element).datepicker('update');
                    }


                }
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdDigitOnly', gtdDigitOnly);

    gtdDigitOnly.$inject = ['$log', '$timeout'];

    function gtdDigitOnly($log, $timeout) {

        // function gtdDigitOnly() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function(scope, element, attrs, modelCtrl) {
                modelCtrl.$parsers.push(function(inputValue) {
                    if (inputValue == undefined) return '';
                    var transformedInput = inputValue.replace(/[^0-9]/g, '');
                    if (transformedInput !== inputValue) {
                        modelCtrl.$setViewValue(transformedInput);
                        modelCtrl.$render();
                    }
                    return transformedInput;
                });
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdDatePicker', gtdDatePicker);

    gtdDatePicker.$inject = ['$log', '$timeout', '$parse'];

    function gtdDatePicker($log, $timeout, $parse) {

        // function gtdDatePicker() {
        return {
            restrict: 'A',
            require: 'ngModel',
            scope: {
                ngModel: '=',
                startId: '=',
                endId: '=',
                isStart: '=',
                isEnd: '=',
                minDt: '@',
                maxDt: '@'
            },
            link: function(scope, element, attr) {
                // if (jQuery().datepicker) {
                if (attr.isStart) {
                    $(element).bootstrapDP({
                        // $('.date-picker').bootstrapDP({
                        rtl: App.isRTL(),
                        orientation: "left",
                        autoclose: true,
                        format: 'dd-mm-yyyy',
                        language: 'vi'
                    }).on('changeDate', function(selected) {
                        $log.log('changeDate');

                        if (selected.date) {
                            var minDate = new Date(selected.date.valueOf());
                            var currentEndValue = $('#' + attr.endId).bootstrapDP('getDate');

                            if (minDate > currentEndValue) {
                                $('#' + attr.endId).bootstrapDP('setDate', null);
                            }
                            $('#' + attr.endId).bootstrapDP('setStartDate', minDate);

                            $(element).trigger('change');
                            $('#' + attr.endId).trigger('change');
                        } else {
                            if (!minDate) {
                                $('#' + attr.endId).bootstrapDP('setStartDate', null);
                            }

                            $(element).trigger('change');
                            $('#' + attr.endId).trigger('change');
                        }

                    }).on('clearDate', function() {
                        $log.log('clearDate');

                        var minDate = $(element).bootstrapDP('getDate');
                        var currentEndValue = $('#' + attr.endId).bootstrapDP('getDate');

                        if (!minDate) {
                            $('#' + attr.endId).bootstrapDP('setStartDate', null);
                        }
                    }).on('change', function() {
                        // $log.log('change');
                        // var minDate = $(element).bootstrapDP('getDate');
                        // var currentEndValue = $('#' + attr.endId).bootstrapDP('getDate');
                        //
                        // // alert(minDate);
                        // if (!minDate) {
                        //     $('#' + attr.endId).bootstrapDP('setStartDate', null);
                        // }
                    });

                    if (scope.ngModel) {
                        $(element).bootstrapDP('setDate', scope.ngModel);
                        $(element).bootstrapDP('update');
                    }
                } else if (attr.minDt) {
                    $(element).bootstrapDP({
                        // $('.date-picker').bootstrapDP({
                        rtl: App.isRTL(),
                        orientation: "left",
                        autoclose: true,
                        startDate: new Date(new Date().getTime() + 1 * 86400000),
                        format: 'dd-mm-yyyy',
                        language: 'vi'
                    });

                    if (scope.ngModel) {
                        $(element).bootstrapDP('setDate', scope.ngModel);
                        $(element).bootstrapDP('update');
                    }
                } else if (attr.maxDt) {
                    $(element).bootstrapDP({
                        // $('.date-picker').bootstrapDP({
                        rtl: App.isRTL(),
                        orientation: "left",
                        autoclose: true,
                        endDate: new Date(new Date().getTime() - 1 * 86400000),
                        format: 'dd-mm-yyyy',
                        language: 'vi'
                    });

                    if (scope.ngModel) {
                        $(element).bootstrapDP('setDate', scope.ngModel);
                        $(element).bootstrapDP('update');
                    }
                } else {
                    $(element).bootstrapDP({
                        // $('.date-picker').bootstrapDP({
                        rtl: App.isRTL(),
                        orientation: "left",
                        autoclose: true,
                        format: 'dd-mm-yyyy',
                        language: 'vi'
                    });

                    if (scope.ngModel) {
                        $(element).bootstrapDP('setDate', scope.ngModel);
                        $(element).bootstrapDP('update');
                    }
                }


                // bootstrapDP
                // $(element).val(scope.ngModel);
                // $(element).datepicker('setUTCDate', scope.ngModel);
                // $(element).datepicker("update", new Date()).trigger('change');
                // $('element').parent().data({date: '2012-08-08'});
                //$(element).datepicker('setDate',new Date());


                // $(element).val('');

                // $(element).setDate(new Date());


                //$('body').removeClass("modal-open"); // fix bug when inline picker is used in modal
                // }
                // if (scope.$parent.$last) {
                //     // $timeout(function () {
                //     //     scope.doFinishRenderCallback();
                //     // }, 0);
                //
                //     $timeout(function () {
                //         //alert("emit:" + attr.gtdEmitEvent + ", " + scope.$parent.$last);
                //         scope.$emit(attr.gtdEmitEvent);
                //     }, 0);
                // }
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdComboDate', gtdComboDate);

    gtdComboDate.$inject = ['$log', '$timeout', '$parse'];

    function gtdComboDate($log, $timeout, $parse) {

        // Define fuction for getting the maximum date for a month.
        function maxDate(month, year) {
            var res = 31;
            if (month != null) {
                if (month == 4 || month == 6 || month == 9 || month == 11) {
                    res = 30;
                }
                if (year != null && month == 2) {
                    res = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) ? 29 : 28;
                }
            }
            return res;
        }

        // Define function for adjust timezone.
        function adjustTimezone(myDate, myTimezone) {
            var offset = isNaN(myTimezone) ? new Date().getTimezoneOffset() : parseFloat(myTimezone) * 60;

            //TPV: use zone 0
            offset = 0;

            return new Date(myDate.getTime() + offset * 60 * 1000);
        }

        // Define function for parse dates.
        function parseDate(myDate, myTimezone) {
            var res = null;
            if (myDate !== undefined && myDate !== null) {
                if (myDate instanceof Date) {
                    res = myDate;
                } else {
                    if (typeof myDate === 'number' || typeof myDate === 'string') {
                        // Parse date.
                        res = new Date(isNaN(myDate) ? myDate : parseInt(myDate, 10));

                        // Adjust timezone.
                        res = adjustTimezone(res, myTimezone);
                    }
                }
            }
            return res;
        }

        // Function to parse an string returning either a number or 'null' (instead of NaN).
        function parseIntStrict(num) {
            return (num !== null && num !== '' && parseInt(num) != NaN) ? parseInt(num) : null;
        }

        // Function to parse a JSON object.
        function parseJsonPlus(jsonObj) {
            var res = null;
            if (jsonObj != null) {
                try {
                    res = JSON.parse(jsonObj);
                } catch (ex) {}
                if (res == null) try {
                    res = JSON.parse(jsonObj.replace(/'/g, '"'));
                } catch (ex) {}
            }
            return res;
        }

        // Create directive.
        return {
            restrict: 'AEC',
            scope: {
                ngModel: '=',
                ngDate: '@',
                ngMinDate: '@',
                ngMaxDate: '@',
                ngMonths: '@',
                ngOrder: '@',
                ngAttrsDate: '@',
                ngAttrsMonth: '@',
                ngAttrsYear: '@',
                ngYearOrder: '@',
                ngTimezone: '@',
                ngPlaceholder: '@',
                ngPlaceholderEnabled: '@',
                ngRequired: '@',

                name: '@',
                index: '='
            },
            require: 'ngModel',
            controller: ['$scope', function($scope) {
                // Initialize model.
                $scope.ngModel = parseDate($scope.ngModel, $scope.ngTimezone);

                // alert('1' + $scope.index);

                // Initialize attributes variables.
                $scope.ngAttrsDate = parseJsonPlus($scope.ngAttrsDate);
                $scope.ngAttrsMonth = parseJsonPlus($scope.ngAttrsMonth);
                $scope.ngAttrsYear = parseJsonPlus($scope.ngAttrsYear);

                // Verify if initial date was defined.
                var initDate = parseDate($scope.ngDate, $scope.ngTimezone);
                if (initDate != null) $scope.ngModel = initDate;

                // Initialize order.
                if (typeof $scope.ngOrder !== 'string') {
                    $scope.ngOrder = 'dmy';
                } else {
                    $scope.ngOrder = $scope.ngOrder.toLowerCase();
                }

                // Initialize minimal and maximum values.
                $scope.minDate = parseDate($scope.ngMinDate, $scope.ngTimezone);
                // alert($scope.ngMinDate + ":" + $scope.minDate);
                if ($scope.minDate == null) {
                    var now = new Date();
                    $scope.minDate = new Date(now.getFullYear() - 100, now.getMonth(), now.getDate(),
                        now.getHours(), now.getMinutes(), now.getSeconds(), now.getMilliseconds());
                }
                $scope.maxDate = parseDate($scope.ngMaxDate, $scope.ngTimezone);
                if ($scope.maxDate == null) {
                    $scope.maxDate = new Date();
                }

                // Verify if selected date is in the valid range.
                // if($scope.ngModel < $scope.minDate) $scope.ngModel = $scope.minDate;
                // if($scope.ngModel > $scope.maxDate) $scope.ngModel = $scope.maxDate;
                //TODO: TPV update here
                if ($scope.ngModel < $scope.minDate || $scope.ngModel > $scope.maxDate) {
                    $scope.ngModel = null;
                    $scope.date = null;
                    $scope.month = null;
                    $scope.year = null;
                }

                // Initialize place holders.
                $scope.placeHolders = null;
                if ($scope.ngPlaceholder !== undefined && $scope.ngPlaceholder !== null && (typeof $scope.ngPlaceholder === 'string' || Array.isArray($scope.ngPlaceholder))) {
                    var holders = typeof $scope.ngPlaceholder === 'string' ? $scope.ngPlaceholder.split(',') : $scope.ngPlaceholder;
                    if (holders.length == 3) {
                        $scope.placeHolders = [];
                        for (var h = 0; h < holders.length; h++) {
                            $scope.placeHolders.push({
                                value: '',
                                name: holders[h],
                                disabled: false
                            });
                        }
                    }
                }

                // Initialize list of years.
                $scope.years = [];
                for (var i = $scope.minDate.getFullYear(); i <= $scope.maxDate.getFullYear(); i++) {
                    $scope.years.push({
                        value: i,
                        name: i
                    });
                }

                // Verify if the order of the years must be reversed.
                if (typeof $scope.ngYearOrder === 'string' && $scope.ngYearOrder.indexOf('des') == 0) {
                    $scope.years.reverse();
                }

                // Prepend the years placeholder
                if ($scope.placeHolders) $scope.years.unshift($scope.placeHolders[0]);

                // Initialize list of months names.
                // var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                var monthNames = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
                if ($scope.ngMonths !== undefined && $scope.ngMonths !== null) {
                    if (typeof $scope.ngMonths === 'string') {
                        var months = $scope.ngMonths.split(',');
                        if (months.length == 12) monthNames = months;
                    }
                    if (Array.isArray($scope.ngMonths) && $scope.ngMonths.length == 12) {
                        monthNames = $scope.ngMonths;
                    }
                }

                // Update list of months.
                $scope.updateMonthList = function(year) {
                    // Parse parameter.
                    year = parseIntStrict(year);

                    // Some months can not be choosed if the year matchs with the year of the minimum or maximum dates.
                    var start = year !== null && year == $scope.minDate.getFullYear() ? $scope.minDate.getMonth() : 0;
                    var end = year !== null && year == $scope.maxDate.getFullYear() ? $scope.maxDate.getMonth() : 11;

                    // Generate list.
                    $scope.months = [];
                    if ($scope.placeHolders) $scope.months.push($scope.placeHolders[1]);
                    for (var i = start; i <= end; i++) {
                        $scope.months.push({
                            value: i,
                            name: monthNames[i]
                        });
                    }
                };

                // Initialize list of days.
                $scope.updateDateList = function(month, year) {
                    // Parse parameters.
                    month = parseIntStrict(month);
                    year = parseIntStrict(year);

                    // Start date is 1, unless the selected month and year matchs the minimum date.
                    var start = 1;
                    if (month !== null && month == $scope.minDate.getMonth() &&
                        year !== null && year == $scope.minDate.getFullYear()) {
                        start = $scope.minDate.getDate();
                    }

                    // End date is 30 or 31 (28 or 29 in February), unless the selected month and year matchs the maximum date.
                    var end = maxDate(month !== null ? (month + 1) : null, year);
                    if (month !== null && month == $scope.maxDate.getMonth() &&
                        year !== null && year == $scope.maxDate.getFullYear()) {
                        end = $scope.maxDate.getDate();
                    }

                    // Generate list.
                    $scope.dates = [];
                    if ($scope.placeHolders) $scope.dates.push($scope.placeHolders[2]);
                    for (var i = start; i <= end; i++) {
                        $scope.dates.push({
                            value: i,
                            name: i
                        });
                    }
                };
            }],
            link: function(scope, element, attrs, ngModelCtrl) {

                // alert('2' + scope.index);

                // Initialize variables.
                var jqLite = angular.element;
                var children = jqLite(element[0]).children();
                var order = scope.ngOrder.split('');

                // Reorder elements.
                for (var i = 0; i < order.length; i++) {
                    if (order[i] == 'd') jqLite(element[0]).append(children[0]);
                    if (order[i] == 'm') jqLite(element[0]).append(children[1]);
                    if (order[i] == 'y') jqLite(element[0]).append(children[2]);
                }

                // Set formatter function.
                ngModelCtrl.$formatters.push(function(modelValue) {
                    var res = {
                        date: null,
                        month: null,
                        year: null
                    };

                    // Verify if model is defined.
                    if (modelValue) {
                        res.date = modelValue.getDate();
                        res.month = modelValue.getMonth();
                        res.year = modelValue.getFullYear();
                    } else {
                        res.date = '';
                        res.month = '';
                        res.year = '';

                        if (scope.placeHolders) {
                            scope.placeHolders[0].disabled = false;
                            scope.placeHolders[1].disabled = false;
                            scope.placeHolders[2].disabled = false;
                        }
                    }

                    //TODO: TPV update here
                    if (modelValue != null && modelValue < scope.minDate || modelValue > scope.maxDate) {
                        res.date = '';
                        res.month = '';
                        res.year = '';

                        if (scope.placeHolders) {
                            scope.placeHolders[0].disabled = false;
                            scope.placeHolders[1].disabled = false;
                            scope.placeHolders[2].disabled = false;
                        }
                    }

                    // Hide or show days and months according to the min and max dates.
                    scope.updateMonthList(res.year);
                    scope.updateDateList(res.month, res.year);
                    return res;
                });

                // Set render function.
                ngModelCtrl.$render = function() {
                    scope.date = ngModelCtrl.$viewValue.date;
                    scope.month = ngModelCtrl.$viewValue.month;
                    scope.year = ngModelCtrl.$viewValue.year;
                };

                // Set watch function.
                scope.$watch('date + "-" + month + "-" + year', function(newValue, oldValue) {
                    if (newValue != oldValue) {
                        ngModelCtrl.$setViewValue({
                            date: scope.date,
                            month: scope.month,
                            year: scope.year
                        });
                    }
                });

                // Override function to check if the value is empty.
                ngModelCtrl.$isEmpty = function(viewValue) {
                    return viewValue.date == null || viewValue.date == '' ||
                        isNaN(parseInt(viewValue.month)) ||
                        viewValue.year == null || viewValue.year == '';
                };

                // Set parser function.
                ngModelCtrl.$parsers.push(function(viewValue) {
                    var res = null;

                    // Check that the three combo boxes have values.
                    if (viewValue.date != null && viewValue.date != '' && !isNaN(parseInt(viewValue.month)) && viewValue.year != null && viewValue.year != '') {
                        var maxDay = maxDate(viewValue.month + 1, viewValue.year);

                        var hours = 0,
                            minutes = 0,
                            seconds = 0,
                            milliseconds = 0;
                        if (scope.ngModel != null) {
                            hours = scope.ngModel.getHours();
                            minutes = scope.ngModel.getMinutes();
                            seconds = scope.ngModel.getSeconds();
                            milliseconds = scope.ngModel.getMilliseconds();
                        }

                        res = new Date(viewValue.year, viewValue.month, viewValue.date > maxDay ? maxDay : viewValue.date, hours, minutes, seconds, milliseconds);

                        // TPV
                        res = new Date(Date.UTC(viewValue.year, viewValue.month, viewValue.date > maxDay ? maxDay : viewValue.date, 0, 0, 0));
                        // res = parseDate(res, 0);
                        $log.log('gtdcombo ngModelCtrl.$parsers res = ------ ');
                        $log.log(res);
                    }

                    // Disable placeholders after selecting a value.
                    if (scope.placeHolders && angular.isUndefined(scope.ngPlaceholderEnabled)) {
                        if (scope.year != '') scope.placeHolders[0].disabled = true;
                        if (scope.month != '') scope.placeHolders[1].disabled = true;
                        if (scope.date != '') scope.placeHolders[2].disabled = true;
                    }

                    // Hide or show days and months according to the min and max dates.
                    scope.updateMonthList(viewValue.year);
                    scope.updateDateList(viewValue.month, viewValue.year);

                    return res;
                });
            },
            template: function(element, attrs) {

                // alert('3');

                // Verify if addtional attributes were defined.
                var strAttrs = ['', '', ''];
                var attrNames = ['ngAttrsDate', 'ngAttrsMonth', 'ngAttrsYear'];
                for (var i = 0; i < 3; i++) {
                    try {
                        // Verify if the attributes were defined.
                        if (attrs && attrs[attrNames[i]]) {
                            // Iterate over each attribute.
                            eval("var attrsAux= " + attrs[attrNames[i]]);
                            for (var key in attrsAux) {
                                var value = attrsAux[key];
                                if (typeof value === "boolean") {
                                    if (value) strAttrs[i] += key + ' ';
                                } else {
                                    if (typeof value === "string" && value.indexOf('"') > 0) {
                                        value = value.replace(/"/g, '&quot;');
                                    }
                                    strAttrs[i] += key + '="' + value + '" ';
                                }
                            }
                        }
                    } catch (err) {
                        $log.log(err);
                    }
                }

                // Generate HTML code.
                var html =
                    '<div class="table-cell-date" >' +
                    '<select class="form-control" required name="' + attrs['name'] + '{{index}}' + 'Date" ng-model="date" ' + strAttrs[0] + ' ng-options="date.value as date.name disable when date.disabled for date in dates"><option value="" disabled selected hidden>Ngày</option></select>' +
                    '</div>' +
                    '<div class="table-cell-date">' +
                    '<select class="form-control" required name="' + attrs['name'] + '{{index}}' + 'Month" ng-model="month" ' + strAttrs[1] + ' ng-options="month.value as month.name disable when month.disabled for month in months"><option value="" disabled selected hidden>Tháng</option></select>' +
                    '</div>' +
                    '<div class="table-cell-date">' +
                    '<select class="form-control" required name="' + attrs['name'] + '{{index}}' + 'Year" ng-model="year" ' + strAttrs[2] + ' ng-options="year.value as year.name disable when year.disabled for year in years"><option value="" disabled selected hidden>Năm</option></select>' +
                    '</div>';

                return html;
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdCollapseClick', gtdCollapseClick);

    gtdCollapseClick.$inject = ['$log', '$timeout', '$compile', '$templateCache', '$q', '$http'];

    function gtdCollapseClick($log, $timeout, $compile, $templateCache, $q, $http) {

        var getTemplate = function(templatePath) {
            var def = $q.defer();

            var template = '';

            template = $templateCache.get(templatePath);
            if (typeof template === "undefined") {
                $http.get(templatePath)
                    .success(function(data) {
                        $templateCache.put(templatePath, data);
                        def.resolve(data);
                    });
            } else {
                def.resolve(template);
            }

            return def.promise;
        };

        return {
            restrict: "A",
            scope: {
                argument: '=',
                argument2: '=',
                argument3: '@?',
                argument4: '@?',
                ibeKeys: '=?'
            },
            link: function(scope, element, attrs) {
                getTemplate(attrs.gtdTemplatePath).then(function(collapseContent) {
                    var content = $compile($(collapseContent))(scope);
                    $(element).append(content);
                });
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('gtdAirportSelect', gtdAirportSelect);

    gtdAirportSelect.$inject = ['$log', '$timeout', '$parse', 'META_SEARCH_AIRPORT_URL', 'GlobalSrv', 'MetaData', 'API_URL'];

    function gtdAirportSelect($log, $timeout, $parse, META_SEARCH_AIRPORT_URL, GlobalSrv, MetaData, API_URL) {

        var refreshDataSource = function(scope, id, type, airlineDataSource, value) {
            $log.log('refresh source - refactor');

            var newOpts = airlineDataSource.slice(0);

            $log.log(newOpts);

            // nam.huynhphuong - fix ISSUE IBE2-502
            /*
            for (var i = newOpts.length - 1; i >= 0; i--) {
                if (newOpts[i].code == scope.ngModel) {
                    newOpts.splice(i, 1);
                }
            }
            */
            // end fix

            var data = $("#" + id).val();
            if ($('#' + id).data('select2')) {
                $('#' + id).select2('destroy').empty().select2({
                    language: 'vi',
                    data: newOpts,
                    // containerCssClass: 'home-select2',
                    dropdownCssClass: 'select2-search-width'

                        // trim
                        ,
                    matcher: function(params, data) {
                        // If there are no search terms, return all of the data
                        if (jQuery.trim(params.term) === '') {
                            return data;
                        }
                        var myTerm = jQuery.trim(params.term);
                        // `params.term` should be the term that is used for searching
                        // `data.text` is the text that is displayed for the data object
                        if (data.text.toLowerCase().indexOf(myTerm.toLowerCase()) > -1) {
                            // You can return modified objects from here
                            // This includes matching the `children` how you want in nested data sets
                            return data;
                        }

                        // Return `null` if the term should not be displayed
                        return null;
                    }

                });
            }

            var found = false;
            for (var i = newOpts.length - 1; i >= 0; i--) {
                if (newOpts[i].code == data) {
                    found = true;
                }
            }
            if (found) {
                $("#" + id).val(data).trigger('change.select2');
            } else {
                $("#" + id).val(null).trigger('change.select2');
            }

            scope.$apply();
        };

        // function gtdAirportSelect() {
        return {
            restrict: 'A',
            require: 'ngModel',
            scope: {
                gtdData: '=',
                gtdValue: '=',
                ngModel: '=',
                gtdMode: '=',

                gtdSearchOptions: '=',
                gtdDirection: '='
            },
            link: function(scope, element, attr, ngModel) {
                $log.log("ngmodel=" + scope.ngModel + ":" + ":" + scope[attr.ngModel] + ":" + ngModel.$viewValue);

                // alert(scope.gtdMode);
                if (scope.gtdMode == 'domestic') {
                    MetaData.searchAirportsLocal('VN').then(function(result) {
                        $log.log("MetaData.searchAirportsLocal from flight.service");


                        GlobalSrv.setVnAirports(result);

                        var airlineDataSource = result;

                        if (airlineDataSource) {
                            for (var i = 0; i < airlineDataSource.length; i++) {
                                airlineDataSource[i].id = airlineDataSource[i].code;
                                airlineDataSource[i].text = airlineDataSource[i].city + ' (' + airlineDataSource[i].code + ')';
                            }
                        }

                        $(element).select2({
                            language: 'vi',
                            data: airlineDataSource,
                            // containerCssClass: 'select2-search-width',
                            dropdownCssClass: 'select2-search-width'
                        }).on('change', function() {
                            $log.log(scope.gtdDirection);
                            // $log.log(airlineDataSource);

                            if (scope.gtdDirection == 'FROM') {
                                refreshDataSource(scope, 'toAirPort', 'FROM', airlineDataSource, scope.ngModel);
                            } else if (scope.gtdDirection == 'TO') {
                                refreshDataSource(scope, 'fromAirPort', 'TO', airlineDataSource, scope.ngModel);
                            }
                        });
                        // $log.log(airlineDataSource);
                    });
                    // $(element).select2({
                    //     data: scope.gtdData,
                    //     dropdownCssClass: 'select2-search-width'
                    // });
                } else {
                    $(element).select2({
                        language: 'vi',
                        minimumInputLength: 1

                            ,
                        templateResult: function(item) {
                            if (!item.id) return item.text;
                            return item.city + ' (' + item.code + ' - ' + item.name + '), ' + item.country;
                        },
                        ajax: {
                            url: API_URL + META_SEARCH_AIRPORT_URL,
                            minimumInputLength: 1,
                            dataType: 'json',
                            delay: 250,
                            data: function(params) {
                                return {
                                    "query": params.term
                                };
                            },

                            processResults: function(data, params) {
                                // parse the results into the format expected by Select2
                                // since we are using custom formatting functions we do not need to
                                // alter the remote JSON data, except to indicate that infinite
                                // scrolling can be used
                                // angular.forEach(data, function(item) {
                                //     item.id = item.code;
                                //     item.text = item.city + " (" + item.code + ")";
                                // });
                                //
                                // GlobalSrv.addLocalAirports(data);
                                // $log.log("data=" + JSON.stringify(data));

                                var tmp = data;

                                var result = [];

                                var excluded = '';
                                if ('FROM' == scope.gtdDirection) {
                                    excluded = scope.gtdSearchOptions.toAirPort;
                                } else if ('TO' == scope.gtdDirection) {
                                    excluded = scope.gtdSearchOptions.fromAirPort;
                                }

                                var isVNAirport = false;
                                var vnAirports = GlobalSrv.getVnAirports();
                                angular.forEach(vnAirports, function(airport) {
                                    if (excluded) {
                                        // $log.log(airport.code.toLowerCase() + ":" + excluded.toLowerCase() + ":" + airport.countryCode);
                                        if (airport.code.toLowerCase() == excluded.toLowerCase() && airport.countryCode == 'VN') {
                                            isVNAirport = true;
                                        }
                                    }
                                });


                                angular.forEach(tmp, function(item) {
                                    if (scope.gtdSearchOptions.dtype == 'domestic') {
                                        if (item.code != excluded) {
                                            result.push(item);
                                        }
                                    } else {
                                        if (isVNAirport) {
                                            if (item.code != excluded && item.countryCode != 'VN') {
                                                result.push(item);
                                            }
                                        } else {
                                            if (item.code != excluded) {
                                                result.push(item);
                                            }
                                        }
                                    }

                                });

                                angular.forEach(result, function(item) {
                                    item.id = item.code;
                                    // item.text = item.city + ' (' + item.code + ' - ' + item.name + '), ' + item.country;
                                    item.text = item.city + ' (' + item.code + ')';
                                });

                                GlobalSrv.addLocalAirports(result);

                                return {
                                    results: result
                                };
                            },
                            cache: true
                        },

                        //data: scope.gtdData,
                        dropdownCssClass: 'select2-search-width'

                            // trim
                            ,
                        matcher: function(params, data) {
                            // If there are no search terms, return all of the data
                            if (jQuery.trim(params.term) === '') {
                                return data;
                            }
                            var myTerm = jQuery.trim(params.term);
                            // `params.term` should be the term that is used for searching
                            // `data.text` is the text that is displayed for the data object
                            if (data.text.toLowerCase().indexOf(myTerm.toLowerCase()) > -1) {
                                // You can return modified objects from here
                                // This includes matching the `children` how you want in nested data sets
                                return data;
                            }

                            // Return `null` if the term should not be displayed
                            return '';
                        }
                    });
                }



                $timeout(function() {
                    var airports = GlobalSrv.getLocalAirports();
                    var text = "";
                    for (var idx in airports) {
                        if (airports[idx].code == scope.ngModel) {
                            // text = airports[idx].city + ' (' + airports[idx].code + ' - ' + airports[idx].name + '), ' + airports[idx].country;
                            text = airports[idx].city + ' (' + airports[idx].code + ')';
                        }
                    }


                    var $option = $('<option selected>' + text + '</option>').val(scope.ngModel);
                    $(element).append($option).trigger('change'); // append the option and update Select2
                });

                // scope.$watch('ngModel', function (newValue, oldValue) {
                //
                //     if ($(element).val() != newValue) {
                //
                //         $timeout(function () {
                //             $log.log("Select 2 Change value:  " + newValue);
                //             $(element).select2("data", {"id":  newValue, "text": newValue});
                //             $(element).select2('val', newValue);
                //             $(element).val(newValue).trigger('change');
                //         }, 0, false);
                //     }
                //
                // });


                // Fix to set existing value
                // alert(scope.gtdValue);
                // if (scope.gtdValue != '' && scope.gtdValue != null) {
                //     $(element).val(scope.gtdValue).trigger('change');
                // }

            }
        };
    }
})();

(function() {
    'use strict';

    gtdHotelProfileBookingCustomerInfoViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdHotelProfileBookingCustomerInfoViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;
    }

    var gtdHotelProfileBookingCustomerInfoView = {
        templateUrl: 'app/components/booking/hotel-profile-booking-customer-info-view.html',
        controller: gtdHotelProfileBookingCustomerInfoViewController,
        bindings: {
            bookingModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelProfileBookingCustomerInfoView', gtdHotelProfileBookingCustomerInfoView);

})();

(function() {
    'use strict';

    gtdHotelBookingSummaryDetailsItemController.$inject = ['$log', '$scope', 'MetaData', 'Hotel'];

    function gtdHotelBookingSummaryDetailsItemController($log, $scope, MetaData, Hotel) {
        var ctrl = this;

        ctrl.BASE_RATE = 'base_rate';
        ctrl.ORTHER_RATE = 'orther_rate';

        ctrl.nightlyFee = {};
        ctrl.orderedDate = [];

        ctrl.feeTypes = [
            "tax_and_service_fee",
            "extra_person_fee",
            "compensation",
            "property_fee",
            "sales_tax",
            "adjustment",
            "recovery_charges_and_fees",
            "mandatory_fee",
            "resort_fee",
            "mandatory_tax"
        ];

        ctrl.reOrderFee = reOrderFee;
        ctrl.reOrderNight = reOrderNight;

        this.$onInit = function() {
            ctrl.reOrderFee();
            ctrl.reOrderNight();
        };

        function reOrderFee() {
            ctrl.nightlyFee = {}; // Reset array.
            // Travel nightly rates of room.
            ctrl.room.ratesPerNight.forEach(function(rate) {
                if (!ctrl.nightlyFee[rate.date]) {
                    ctrl.nightlyFee[rate.date] = {};
                }
                ctrl.nightlyFee[rate.date][rate.id] = rate.amount;
            });
            $log.log('ctrl.nightlyFee');

            $log.log(ctrl.nightlyFee);
        }

        function reOrderNight() {
            for (var date in ctrl.nightlyFee) {
                ctrl.orderedDate.push(date);
            }
            ctrl.orderedDate.sort(function(left, right) {
                return moment(left, 'DD-MM-YYYY').diff(moment(right, 'DD-MM-YYYY'));
            });

            $log.log(ctrl.orderedDate);

        }
    }

    var gtdHotelBookingSummaryDetailsItem = {
        templateUrl: 'app/components/booking/hotel-booking-summary-details-item.html',
        controller: gtdHotelBookingSummaryDetailsItemController,
        bindings: {
            room: '=',
            index: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingSummaryDetailsItem', gtdHotelBookingSummaryDetailsItem);

})();

(function() {
    'use strict';

    gtdHotelBookingSummaryDetailsController.$inject = ['$log', '$scope', 'DataService', 'MetaData', 'Hotel'];

    function gtdHotelBookingSummaryDetailsController($log, $scope, DataService, MetaData, Hotel) {
        var ctrl = this;

        $log.log("ctrl.bookingModel=");
        $log.log(ctrl.bookingModel);

        ctrl.searchOptions = DataService.getHotelSearchOptions();
        $scope.$on('update-promo-select-success', function(event, value) {
            $log.log('update-promo-select-success');
            ctrl.promoSelect = true;
            if (value == "PERCENT") {
                ctrl.typePriceDiscount = "%";
            } else {
                ctrl.typePriceDiscount = "VNĐ";
            }
        });
        $scope.$on('update-promo-remove-success', function(event, value) {
            $log.log('update-promo-remove-success');
            ctrl.promoSelect = false;
        });
    }

    var gtdHotelBookingSummaryDetails = {
        templateUrl: 'app/components/booking/hotel-booking-summary-details.html',
        controller: gtdHotelBookingSummaryDetailsController,
        bindings: {
            bookingModel: '=',
            bjson: '=',
            paymentModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '=',
            showCoupon: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingSummaryDetails', gtdHotelBookingSummaryDetails);

})();

(function() {
    'use strict';

    gtdHotelBookingSummaryController.$inject = ['$log', '$rootScope', '$scope', 'MetaData', 'Hotel', 'Flight', 'Principal', 'DialogService', 'LoginService'];

    function gtdHotelBookingSummaryController($log, $rootScope, $scope, MetaData, Hotel, Flight, Principal, DialogService, LoginService) {
        var ctrl = this;

        $log.log("ctrl.bookingModel=");
        $log.log(ctrl.bookingModel);
        $log.log(ctrl.selectedHotelProduct);

        $log.log('step = ' + ctrl.bookingModel.step);

        if (ctrl.selectedHotelProduct) {
            ctrl.selectedHotelProduct.totalPerson = 0;
            ctrl.selectedHotelProduct.totalAdultQuantity = 0;
            if (ctrl.selectedHotelProduct.rooms) {
                ctrl.selectedHotelProduct.rooms.forEach(function(room) {

                    //+++ keep productCode for add to customer
                    room.productCode = room.id;
                    //---

                    ctrl.selectedHotelProduct.totalPerson += room.pax.adultQuantity + room.pax.childQuantity;
                    ctrl.selectedHotelProduct.totalAdultQuantity += room.pax.adultQuantity;

                });
            }
        }
        $scope.$on('vali-payment-promo', function(event, item) {
            ctrl.promoDiscount = item;
        });

        /**
         * validate voucher
         */
        ctrl.validateVoucher = function() {
            if (ctrl.bookingModel.voucher.voucherCode != null && !Principal.isAuthenticated()) {
                var message = {};
                message.title = 'Rất tiếc';
                message.message = 'Khuyến mãi này chỉ áp dụng cho thành viên của Gotadi. Vui lòng đăng nhập hoặc đăng ký để hưởng khuyến mãi và nhiều ưu đãi khác.';
                var modalInstance = DialogService.openDialogForceLogin(message);

                modalInstance.closed.then(
                    function() {
                        LoginService.open();
                    }
                );
                return;
            }
            ctrl.wrongVoucher = false;
            var myDataPromise = Flight.validateVoucher(ctrl.bookingModel);
            myDataPromise.then(function(result) {
                var voucher = result;
                ctrl.bookingModel.voucher = voucher;
                ctrl.bjson.voucher = voucher;

                $log.log('voucher.voucherValid = ' + voucher.voucherValid);

                //send data to process data
                $rootScope.$broadcast("event-payment-voucher-redeem-succeeded", voucher);

                if (!voucher.voucherValid) {
                    ctrl.wrongVoucher = true;
                }

            }, function error(result) {
                ctrl.bookingModel.voucher = {};
                ctrl.bjson.voucher = {};
                $log.log(result);

                ctrl.wrongVoucher = true;
            });
        };

        $scope.$on('update-promo-select-success', function(event, value) {
            $log.log('update-promo-select-success');
            ctrl.promoSelect = true;
            ctrl.bookingModel.voucher = {};
            ctrl.bjson.voucher = {};
            if (value == "PERCENT") {
                ctrl.typePriceDiscount = "%";
            } else {
                ctrl.typePriceDiscount = "VNĐ";
            }
        });
        $scope.$on('update-promo-remove-success', function(event, value) {
            $log.log('update-promo-remove-success');
            ctrl.promoSelect = false;
            ctrl.promoDiscount = 0;
            ctrl.bookingModel.voucher = {};
            ctrl.bjson.voucher = {};
            ctrl.beyondQuota = false;
        });
        /**
         * Handle redeem invalid
         */
        $scope.$on('event-payment-voucher-redeem-invalid', function(event, item) {
            if (item.textMessage === "PC1406") {
                ctrl.beyondQuota = true;
                return;
            }
            ctrl.beyondQuota = false;
            ctrl.wrongVoucher = true;
        });

        /**
         * Handle voucher reset
         */
        $scope.$on('event-payment-voucher-reset', function(event, item) {
            ctrl.wrongVoucher = false;
            ctrl.beyondQuota = false;
        });

        /**
         * Handle before sending data to server
         */
        $scope.$on('event-payment-voucher-pre-send-data', function(event, item) {
            ctrl.wrongVoucher = false;
            ctrl.beyondQuota = false;
        });

    }

    var gtdHotelBookingSummary = {
        templateUrl: 'app/components/booking/hotel-booking-summary.html',
        controller: gtdHotelBookingSummaryController,
        bindings: {
            bookingModel: '=',
            bjson: '=',
            paymentModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '=',
            showCoupon: '=?',
            showPriceCoupon: '=?',
            promoSelect: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingSummary', gtdHotelBookingSummary);

})();

(function() {
    'use strict';

    gtdHotelBookingHistoryBillingInfoViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdHotelBookingHistoryBillingInfoViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;
        $log.log('ctrl.bookingModel4 : ');
        if (ctrl.bookingModel) {
            ctrl.bookingModel.bookingInfo.taxPersonalInfoContact = angular.fromJson(ctrl.bookingModel.bookingInfo.taxPersonalInfoContact);
        }
        $log.log(ctrl.bookingModel);
    }

    var gtdHotelBookingHistoryBillingInfoView = {
        templateUrl: 'app/components/booking/hotel-booking-history-billing-info-view.html',
        controller: gtdHotelBookingHistoryBillingInfoViewController,
        bindings: {
            bookingModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingHistoryBillingInfoView', gtdHotelBookingHistoryBillingInfoView);

})();

(function() {
    'use strict';

    gtdHotelBookingCustomerInfoViewController.$inject = ['$log', 'Base64', '$timeout', '$state'];

    function gtdHotelBookingCustomerInfoViewController($log, Base64, $timeout, $state) {
        var ctrl = this;

        $timeout(function() {
            angular.forEach(ctrl.bookingModel.customers, function(item) {
                item.show = true;
            });
        }, 10);

        ctrl.hideCust = function(item) {
            item.show = false;
        };

        ctrl.showCust = function(item) {
            item.show = true;
        };

        ctrl.doBack = function() {
            ctrl.bookingModel.curStep = 1;
        };
    }

    var gtdHotelBookingCustomerInfoView = {
        templateUrl: 'app/components/booking/hotel-booking-customer-info-view.html',
        controller: gtdHotelBookingCustomerInfoViewController,
        bindings: {
            bookingModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingCustomerInfoView', gtdHotelBookingCustomerInfoView);

})();

(function() {
    'use strict';

    gtdHotelBookingCustomerInfoController.$inject = [
        '$log', '$rootScope', '$scope',
        'MetaData', 'Flight', 'CustomerService', 'GlobalSrv', 'DataService', 'DateUtils', 'Principal', 'GtdHotelService'
    ];

    function gtdHotelBookingCustomerInfoController(
        $log, $rootScope, $scope,
        MetaData, Flight, CustomerService, GlobalSrv, DataService, DateUtils, Principal, GtdHotelService
    ) {

        var ctrl = this;
        $log.log(ctrl.bookingModel);

        ctrl.allLookups = GlobalSrv.getAllLookups();

        ctrl.titleLookups = [];

        ctrl.searchOptions = GtdHotelService.getSearchOptions();

        ctrl.isAuthenticated = Principal.isAuthenticated;

        ctrl.customerTravellers = [];

        Principal.identity().then(function(user) {
            var data = {
                // other fields
                user: user
            };
            ctrl.identity = user;
            // do something with data only inside this inner function
        });

        $scope.$watch(function(scope) {
                return ctrl.isAuthenticated();
            },
            function(newValue, oldValue) {
                //+++ Load traveler for auth customer
                if (Principal.isAuthenticated()) {
                    CustomerService.getCustomerTravellersForBoth().then(function(result) {
                        //ctrl.customerTravellers = result;
                        ctrl.customerTravellers = [];
                        angular.forEach(result, function(item) {
                            //if (item.gender == 'MALE' || item.gender == 'FEMALE' || item.adultType == 'ADT') {
                            ctrl.customerTravellers.push(item);
                            //}
                        });
                        $log.log(ctrl.customerTravellers);
                    });
                }
            }
        );

        //+++ Load traveler for auth customer
        if (Principal.isAuthenticated()) {
            CustomerService.getCustomerTravellersForBoth().then(function(result) {
                ctrl.customerTravellers = [];
                angular.forEach(result, function(item) {
                    //if (item.gender == 'MALE' || item.gender == 'FEMALE' || item.adultType == 'ADT') {
                    ctrl.customerTravellers.push(item);
                    //}
                });
                $log.log(ctrl.customerTravellers);
                // ctrl.customerTravellers = result;
            });
        }

        $log.log("Search ALL lookups");
        //$log.log("ctrl.allLookups = " + JSON.stringify(ctrl.allLookups));
        $log.log("ctrl.allLookups = " + ctrl.allLookups);

        if (ctrl.allLookups == [] || ctrl.allLookups.length == 0) {
            $log.log("Search ALL lookups");
            MetaData.searchLookups('', '', true).then(function success(result) {
                ctrl.allLookups = result;
                //$log.log("ctrl.allLookups = " + JSON.stringify(ctrl.allLookups));
                $log.log("ctrl.allLookups = " + ctrl.allLookups);
            });
        }

        MetaData.searchLookups('ota_customer', 'passenger_gender').then(function success(result) {
            ctrl.titleLookups = result;
        });

        MetaData.searchLookups('ota_customer', 'passenger_gender').then(function success(result) {
            ctrl.titleLookups = result;

            ctrl.adultTitleLookups = [];
            angular.forEach(ctrl.titleLookups, function(item) {
                // $log.log(item.lookupValue);
                if (item.lookupValue == 'MALE' || item.lookupValue == 'FEMALE') {
                    ctrl.adultTitleLookups.push(item);
                }
            });

        });

        // find depart flight date
        // var departDate = ctrl.selectedHotel.checkIn;


        if (ctrl.bookingModel.customers == undefined) {

            ctrl.bookingModel.customers = [];

            // create adult
            for (var i = 0; i < ctrl.searchOptions.hotelSearchBody.length; i++) {
                ctrl.bookingModel.customers.push({
                    checked: false,
                    type: 'ADT',
                    gid: i,
                    cuPp: 'PP'
                    // min: DateUtils.getYearAgoFromBaseInDefaultFormat(departDate, 90),
                    // max: DateUtils.getYearAgoFromBaseInDefaultFormat(departDate, 12)
                });
            }

            $log.log(ctrl.bookingModel.customers);
            $log.log("++++++++++++++++++++++++++");
            $log.log(ctrl.searchOptions.pax);


            // create infant
            // if (!ctrl.searchOptions.childrenNo) ctrl.searchOptions.childrenNo = 0;
            // for (var i = 0; i < ctrl.searchOptions.childrenNo; i++) {
            //     ctrl.bookingModel.customers.push({
            //         checked: false,
            //         type: 'CHD',
            //         gid: i,
            //         cuPp: 'PP'
            //     });
            // }

            angular.forEach(ctrl.bookingModel.customers, function(item) {
                // Init default
                item.cuGender = 'MR';
                item.cuNationality = 'vn';
            });

        }

        ctrl.addBlankCustomer = function() {
            ctrl.bookingModel.customers.push({
                checked: false
            });

            angular.forEach(ctrl.bookingModel.customers, function(item) {
                // Init default
                item.cuGender = 'MR';
                item.cuNationality = 'vn';
            });
        };

        ctrl.removeCustomer = function(index) {
            ctrl.bookingModel.customers.splice(index, 1);
        };

        ctrl.chooseCustomer = function(item) {
            //$log.log("item = " + JSON.stringify(item));
            $log.log("item = " + item);

            item.id = undefined;
            item.cuGender = undefined;
            item.cuFamilyName = undefined;
            item.cuName = undefined;
            item.cuCardType = undefined;
            item.cuCardNo = undefined;
            item.cuCardId = undefined;
            item.cuDob = undefined;

            if (item.selectedTraveller) {
                item.id = item.selectedTraveller.id;
                item.cuGender = item.selectedTraveller.gender;
                item.cuFamilyName = item.selectedTraveller.surName;
                item.cuName = item.selectedTraveller.firstName;
                if (item.selectedTraveller.dob) {
                    item.cuDob = new Date(item.selectedTraveller.dob);
                }
                // item.cuDob = item.selectedTraveller.dob;
                // item.cuDobd = item.selectedTraveller.dob;
                // item.cuDobm = item.selectedTraveller.dob;
                // item.cuDoby = item.selectedTraveller.dob;
                item.cuPp = item.selectedTraveller.documentType;

                if (!item.cuPp) {
                    item.cuPp = 'PP';
                }

                item.cuId = item.selectedTraveller.documentNumber;
                item.cuNationality = item.selectedTraveller.nationality;

                if (item.selectedTraveller.memberCards != null &&
                    item.selectedTraveller.memberCards != undefined &&
                    item.selectedTraveller.memberCards != []
                ) {
                    var mc = item.selectedTraveller.memberCards[0];
                    if (mc) {
                        item.cuCardType = mc.cardType;
                        item.cuCardNo = mc.cardNumber;
                    }

                }
            } else {
                item.id = null;
            }
        };

        ctrl.updateSelection = function(position, entities) {
            angular.forEach(entities, function(item, index) {
                if (position != index) {
                    item.checked = false;
                } else {
                    // update contact info
                    // alert('$rootScope.$broadcast' + JSON.stringify(item));
                    if (item.checked) {
                        $rootScope.$broadcast('gtd-update-contact-info', {
                            model: item
                        });
                    } else {
                        //$rootScope.$broadcast('gtd-update-contact-info', {model: {}});
                    }
                }
            });
        };

        ctrl.syncContactInfo = function(entities) {
            angular.forEach(entities, function(item, index) {
                // if (position != index) {
                //     item.checked = false;
                // } else {

                // update contact info
                // alert('$rootScope.$broadcast' + JSON.stringify(item));
                if (item.checked) {
                    $rootScope.$broadcast('gtd-update-contact-info', {
                        model: item
                    });
                }
                //     else {
                //         //$rootScope.$broadcast('gtd-update-contact-info', {model: {}});
                //     }
                // }
            });
        };

        // ctrl.syncContactInfo = function() {
        //     var message = {
        //         'name': 'name'
        //     };
        //     alert(1);
        //     //$rootScope.$broad
        // };

        $log.log(ctrl.bookingModel.requestOptions);
        //if (ctrl.bookingModel.requestOptions == undefined) {
        ctrl.bookingModel.requestOptions = [{
            id: "0",
            text: "Phòng yên tĩnh",
            selected: false
        }, {
            id: "1",
            text: "Phòng không hút thuốc",
            selected: false
        }, {
            id: "2",
            text: "Phòng tầng trệt",
            selected: false
        }, {
            id: "3",
            text: "Phòng tầng cao",
            selected: false
        }];


        // END MERGE
    }

    var gtdHotelBookingCustomerInfo = {
        require: {
            form: '^^form'
        },
        templateUrl: 'app/components/booking/hotel-booking-customer-info.html',
        controller: gtdHotelBookingCustomerInfoController,
        bindings: {
            bookingModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingCustomerInfo', gtdHotelBookingCustomerInfo);

})();

(function() {
    'use strict';

    gtdHotelBookingContactInfoViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdHotelBookingContactInfoViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;

        $scope.$on('gtd-load-booking-completed', function() {
            $log.log('gtd-load-booking-completed: ');
            if (ctrl.mode == 'flight') {
                angular.forEach(ctrl.bookingModel.contacts, function(item) {
                    item.show = true;
                });
            }
        });

        ctrl.hideCust = function(item) {
            item.show = false;
        };

        ctrl.showCust = function(item) {
            item.show = true;
        };
    }

    var gtdHotelBookingContactInfoView = {
        templateUrl: 'app/components/booking/hotel-booking-contact-info-view.html',
        controller: gtdHotelBookingContactInfoViewController,
        bindings: {
            bookingModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '=',
            mode: '@?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingContactInfoView', gtdHotelBookingContactInfoView);

})();

(function() {
    'use strict';

    gtdHotelBookingContactInfoController.$inject = ['$log', '$scope', 'Principal', 'MetaData', 'Flight', 'DataService', 'GlobalSrv', 'CustomerService'];

    function gtdHotelBookingContactInfoController($log, $scope, Principal, MetaData, Flight, DataService, GlobalSrv, CustomerService) {
        var ctrl = this;

        ctrl.isAuthenticated = Principal.isAuthenticated;

        ctrl.allCountries = GlobalSrv.getAllCountries();
        // $log.log('ctrl.allCountries=');
        // $log.log(ctrl.allCountries);
        // $log.log(ctrl.allCountries == null || ctrl.allCountries == undefined || ctrl.allCountries.length == 0);

        MetaData.searchLookups('ota_customer', 'passenger_gender').then(function success(result) {
            ctrl.titleLookups = result;

            ctrl.adultTitleLookups = [];
            angular.forEach(ctrl.titleLookups, function(item) {
                // $log.log(item.lookupValue);
                if (item.lookupValue == 'MALE' || item.lookupValue == 'FEMALE') {
                    ctrl.adultTitleLookups.push(item);
                }
            });

        });

        $scope.$watch(function(scope) {
                return ctrl.isAuthenticated();
            },
            function(newValue, oldValue) {
                //+++ Load traveler for auth customer
                if (Principal.isAuthenticated()) {
                    CustomerService.getCustomerTravellersForBoth().then(function(result) {
                        ctrl.customerTravellers = result;
                    });
                } else {
                    ctrl.customerTravellers = [];
                }
            }
        );

        $scope.$on('gtd-update-contact-info', function(event, opt) {
            // alert('on gtd-update-contact-info');
            $log.log(opt);
            // update
            angular.forEach(ctrl.bookingModel.contacts, function(item) {
                item.ciFName = opt.model.cuFamilyName;
                item.ciName = opt.model.cuName;
            });
        });

        //+++ Load traveler for auth customer
        if (Principal.isAuthenticated()) {
            CustomerService.getCustomerTravellersForBoth().then(function(result) {
                ctrl.customerTravellers = result;
            });
        } else {
            ctrl.customerTravellers = [];
        }

        // Startup event
        $scope.$on('gtd-load-booking-completed', function() {
            $log.log(ctrl.bookingModel.contacts);
            if (ctrl.allCountries == null || ctrl.allCountries == undefined || ctrl.allCountries.length == 0) {


                // $log.log('dosearchcountry');

                MetaData.getCountries().then(function success(result) {
                    ctrl.allCountries = result;

                    // $log.log('success');

                    if (result) {
                        angular.forEach(ctrl.bookingModel.contacts, function(item) {
                            // Init default
                            // $log.log('Default init');
                            if (!item.ciMobileCode) {
                                item.ciMobileCode = '84';
                            }

                        });
                    }
                }, function error(result) {
                    // $log.log('error');
                });
            } else {
                if (ctrl.bookingModel.contacts) {
                    angular.forEach(ctrl.bookingModel.contacts, function(item) {
                        // Init default
                        if (!item.ciMobileCode) {
                            item.ciMobileCode = '84';
                        }
                    });
                }

            }
            if (ctrl.bookingModel.contacts == undefined || ctrl.bookingModel.contacts.length == 0) {
                ctrl.bookingModel.contacts = [{
                    checked: false
                }];

                if (ctrl.allCountries && ctrl.allCountries.length > 0) {
                    angular.forEach(ctrl.bookingModel.contacts, function(item) {
                        // Init default
                        if (!item.ciMobileCode) {
                            item.ciMobileCode = '84';
                        }
                    });
                }

            }
            Principal.identity().then(function(user) {
                var data = {
                    // other fields
                    user: user
                };
                ctrl.identity = user;
                // do something with data only inside this inner function
                // Default Init for B2B
                var isB2B = Principal.hasAnyAuthority(['ROLE_B2B']);
                /*if (isB2B) {
                    CustomerService.getB2BProfile(ctrl.identity.login).then(function success(result) {
                        var item = ctrl.bookingModel.contacts[0];

                        var name = result.agentName;
                        var firstName = name.split(' ').slice(0, 1).join(' ');
                        var lastName = name.split(' ').slice(1).join(' ');

                        if (!item.ciFName) item.ciFName = firstName ? firstName.toUpperCase() : "";
                        if (!item.ciName) item.ciName = lastName ? lastName.toUpperCase() : "";
                        if (!item.ciEmail) item.ciEmail = result.email;
                        if (!item.ciMobile) item.ciMobile = result.mobile;

                    });
                }
                */
                // End Default Init for B2B
            });
        });

        ctrl.addBlankContacts = function() {
            ctrl.bookingModel.contacts.push({
                checked: false
            });

            angular.forEach(ctrl.bookingModel.contacts, function(item) {
                // Init default
                item.ciMobileCode = '84';
            });
        };

        ctrl.removeContact = function(index) {
            ctrl.bookingModel.contacts.splice(index, 1);
        };

        ctrl.chooseContact = function(item) {
            //$log.log("item = " + JSON.stringify(item));
            $log.log("item = " + item);

            // reset customer
            item.ciGender = undefined;
            item.id = undefined;
            item.ciFName = undefined;
            item.ciName = undefined;
            item.ciEmail = undefined;
            item.ciMobile = undefined;
            item.ciMobileCode = '84';

            if (item.selectedTraveller) {
                // Contact must be ADULT so type = ADT
                if (item.selectedTraveller.gender == 'MALE' || item.selectedTraveller.gender == 'FEMALE') {
                    item.ciGender = item.selectedTraveller.gender;
                }

                item.id = item.selectedTraveller.id;
                item.ciFName = item.selectedTraveller.surName ? item.selectedTraveller.surName.toUpperCase() : '';
                item.ciName = item.selectedTraveller.firstName ? item.selectedTraveller.firstName.toUpperCase() : '';
                item.ciEmail = item.selectedTraveller.email;
                item.ciMobile = item.selectedTraveller.phoneNumber1;
                item.ciMobileCode = item.selectedTraveller.postalCode;

                if (!item.ciMobileCode) {
                    item.ciMobileCode = '84';
                }
            } else {
                item.id = null;
            }
        };
    }

    var gtdHotelBookingContactInfo = {
        require: {
            form: '^^form'
        },
        // bindToController : true, automatically happens
        // controllerAs : '$ctrl', automatically happens, too
        templateUrl: 'app/components/booking/hotel-booking-contact-info.html',
        controller: gtdHotelBookingContactInfoController,
        bindings: {
            bookingModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingContactInfo', gtdHotelBookingContactInfo);

})();

(function() {
    'use strict';

    gtdHotelBookingBillingInfoViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdHotelBookingBillingInfoViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;
    }

    var gtdHotelBookingBillingInfoView = {
        templateUrl: 'app/components/booking/hotel-booking-billing-info-view.html',
        controller: gtdHotelBookingBillingInfoViewController,
        bindings: {
            bookingModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingBillingInfoView', gtdHotelBookingBillingInfoView);

})();

(function() {
    'use strict';

    gtdHotelBookingBillingInfoController.$inject = ['$log', '$scope', 'MetaData', 'Flight', 'DataService', 'GlobalSrv', 'CustomerService', 'Principal'];

    function gtdHotelBookingBillingInfoController($log, $scope, MetaData, Flight, DataService, GlobalSrv, CustomerService, Principal) {
        var ctrl = this;
        ctrl.isAuthenticated = Principal.isAuthenticated;
        ctrl.allCountries = GlobalSrv.getAllCountries();

        // if (!ctrl.bookingModel.showForm) {
        //     ctrl.bookingModel.showForm = false;
        // }
        $scope.$watch(function(scope) {
                return ctrl.isAuthenticated();
            },
            function(newValue, oldValue) {
                //+++ Load traveler for auth customer
                if (Principal.isAuthenticated()) {
                    CustomerService.getCustomerTravellersForBoth().then(function(result) {
                        ctrl.customerTravellers = result;
                    });
                } else {
                    ctrl.customerTravellers = [];
                }
            }
        );

        $scope.$on('gtd-load-booking-completed', function() {
            $log.log('gtd-load-booking-completed: ');
            if (!ctrl.bookingModel.showForm) {
                ctrl.bookingModel.showForm = false;
            }
        });

        if (!ctrl.allCountries) {
            MetaData.getCountries().then(function success(result) {
                ctrl.allCountries = result;
            });
        }

        ctrl.doShowForm = function() {
            // ctrl.bookingModel.showForm = !ctrl.bookingModel.showForm;

            if (!ctrl.bookingModel.showForm) {
                ctrl.bookingModel.biCompany = undefined;
                ctrl.bookingModel.biMst = undefined;
                ctrl.bookingModel.biMobileCode = '84';
                ctrl.bookingModel.biMobile = undefined;
                ctrl.bookingModel.biAddress = undefined;
                ctrl.bookingModel.tPCfName = undefined;
                ctrl.bookingModel.tPCName = undefined;
                ctrl.bookingModel.tPCPhoneCode = '84';
                ctrl.bookingModel.tPCPhone = undefined;
                ctrl.bookingModel.tPCemail = undefined;
                ctrl.bookingModel.tPCNote = undefined;
            }
        };

        ctrl.chooseContact = function(item) {
            //$log.log("item = " + JSON.stringify(item));
            $log.log("item = " + item);

            // reset customer
            item.ciGender = undefined;
            item.id = undefined;
            ctrl.bookingModel.tPCfName = undefined;
            ctrl.bookingModel.tPCName = undefined;
            ctrl.bookingModel.tPCPhone = undefined;
            ctrl.bookingModel.tPCemail = undefined;
            ctrl.bookingModel.tPCPhoneCode = '84';
            item.postcode = undefined;

            if (item.selectedTraveller) {
                // Contact must be ADULT so type = ADT
                if (item.selectedTraveller.gender == 'MALE' || item.selectedTraveller.gender == 'FEMALE') {
                    item.ciGender = item.selectedTraveller.gender;
                }

                item.id = item.selectedTraveller.id;
                ctrl.bookingModel.tPCfName = item.selectedTraveller.surName ? item.selectedTraveller.surName.toUpperCase() : '';
                ctrl.bookingModel.tPCName = item.selectedTraveller.firstName ? item.selectedTraveller.firstName.toUpperCase() : '';
                ctrl.bookingModel.tPCemail = item.selectedTraveller.email;
                ctrl.bookingModel.tPCPhone = item.selectedTraveller.phoneNumber1;
                ctrl.bookingModel.tPCPhoneCode = item.selectedTraveller.postalCode;
                ctrl.bookingModel.postcode = item.selectedTraveller.postCode;
                if (!ctrl.bookingModel.tPCPhoneCode) {
                    ctrl.bookingModel.tPCPhoneCode = '84';
                }
            } else {
                item.id = null;
            }
            $log.log(item)
        };

        ctrl.updateBillingInfo = function() {
            // alert(ctrl.bookingModel.biChecked);
            // console.log(ctrl.bookingModel);
            if (ctrl.bookingModel.biChecked) {
                ctrl.bookingModel.biFName = ctrl.bookingModel.contacts[0].ciFName;
                ctrl.bookingModel.biLName = ctrl.bookingModel.contacts[0].ciName;
                ctrl.bookingModel.biMobileCode = ctrl.bookingModel.contacts[0].ciMobileCode;
                ctrl.bookingModel.biMobile = ctrl.bookingModel.contacts[0].ciMobile;
                ctrl.bookingModel.biEmail = ctrl.bookingModel.contacts[0].ciEmail;
            }
        };
    }

    var gtdHotelBookingBillingInfo = {
        require: {
            form: '^^form'
        },
        // bindToController : true, automatically happens
        // controllerAs : '$ctrl', automatically happens, too
        templateUrl: 'app/components/booking/hotel-booking-billing-info.html',
        controller: gtdHotelBookingBillingInfoController,
        bindings: {
            bookingModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdHotelBookingBillingInfo', gtdHotelBookingBillingInfo);

})();

(function() {
    'use strict';

    gtdFlightBookingSummaryDetailsItemController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdFlightBookingSummaryDetailsItemController($log, $scope, MetaData, Flight) {
        var ctrl = this;

        //+++ using displayPriceInfo to display additional_price
        if (ctrl.pricedItinerary && ctrl.bookingModel && ctrl.bookingModel.bookingInfo && ctrl.bookingModel.bookingInfo.displayPriceInfo) {
            ctrl.pricedItinerary.displayPriceInfo = ctrl.bookingModel.bookingInfo.displayPriceInfo;
        }
        //--
        // $log.log("+++++>>>>> gtdFlightBookingSummaryDetailsItemController");
    }

    var gtdFlightBookingSummaryDetailsItem = {
        templateUrl: 'app/components/booking/flight-booking-summary-details-item.html',
        controller: gtdFlightBookingSummaryDetailsItemController,
        bindings: {
            groupItem: '=',
            pricedItinerary: '=',
            itinTotalFareInfo: '=',
            searchOptions: '=?',
            flightIdx: '@?',
            bookingModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingSummaryDetailsItem', gtdFlightBookingSummaryDetailsItem);

})();

(function() {
    'use strict';

    gtdFlightBookingSummaryDetailsController.$inject = ['$log', '$scope', 'DataService', 'MetaData', 'Flight'];

    function gtdFlightBookingSummaryDetailsController($log, $scope, DataService, MetaData, Flight) {
        var ctrl = this;

        $log.log("ctrl.bookingModel=");
        $log.log(ctrl.bookingModel);

        if (!ctrl.searchOptions) {
            ctrl.searchOptions = DataService.getSearchOption();
        }
    }

    var gtdFlightBookingSummaryDetails = {
        templateUrl: 'app/components/booking/flight-booking-summary-details.html',
        controller: gtdFlightBookingSummaryDetailsController,
        bindings: {
            bookingModel: '=',
            paymentModel: '=?',
            searchOptions: '=?',
            showCoupon: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingSummaryDetails', gtdFlightBookingSummaryDetails);

})();

(function() {
    'use strict';

    gtdFlightBookingSummaryController.$inject = ['$log', '$rootScope', '$scope', 'MetaData', 'Flight', 'DataService'];

    function gtdFlightBookingSummaryController($log, $rootScope, $scope, MetaData, Flight, DataService) {
        var ctrl = this;

        // $log.log("ctrl.bookingModel=");
        // $log.log(ctrl.bookingModel);

        if (!ctrl.searchOptions) {
            ctrl.searchOptions = DataService.getSearchOption();
        }

        /**
         * validate voucher
         */
        ctrl.validateVoucher = function() {
            ctrl.wrongVoucher = false;
            var myDataPromise = Flight.validateVoucher(ctrl.bookingModel);
            myDataPromise.then(function(result) {
                var voucher = result;
                ctrl.bookingModel.voucher = voucher;

                $log.log('voucher.voucherValid = ' + voucher.voucherValid);

                //send data to process data
                $rootScope.$broadcast("event-payment-voucher-redeem-succeeded", voucher);

                if (!voucher.voucherValid) {
                    ctrl.wrongVoucher = true;
                }

            }, function error(result) {
                ctrl.bookingModel.voucher = {};
                $log.log(result);

                ctrl.wrongVoucher = true;
            });
        };

        /**
         * Handle redeem invalid
         */
        $scope.$on('event-payment-voucher-redeem-invalid', function(event, item) {
            ctrl.wrongVoucher = true;
        });

        /**
         * Handle voucher reset
         */
        $scope.$on('event-payment-voucher-reset', function(event, item) {
            ctrl.wrongVoucher = false;
        });

        /**
         * Handle before sending data to server
         */
        $scope.$on('event-payment-voucher-pre-send-data', function(event, item) {
            ctrl.wrongVoucher = false;
        });
    }

    var gtdFlightBookingSummary = {
        templateUrl: 'app/components/booking/flight-booking-summary.html',
        controller: gtdFlightBookingSummaryController,
        bindings: {
            bookingModel: '=',
            paymentModel: '=?',
            searchOptions: '=?',
            bjson: '=',
            showCoupon: '=?',
            showPriceCoupon: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingSummary', gtdFlightBookingSummary);

})();

(function() {
    'use strict';

    gtdFlightBookingProgressController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdFlightBookingProgressController($log, $scope, MetaData, Flight) {
        var ctrl = this;

        $log.info('mode = ' + ctrl.mode);
    }

    var gtdFlightBookingProgress = {
        templateUrl: 'app/components/booking/flight-booking-progress.html',
        controller: gtdFlightBookingProgressController,
        bindings: {
            bookingModel: '=',
            mode: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingProgress', gtdFlightBookingProgress);

})();

(function() {
    'use strict';

    gtdFlightBookingHistoryBillingInfoViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdFlightBookingHistoryBillingInfoViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;
        $log.log('ctrl.bookingModel4 : ');
        if (ctrl.bookingModel) {
            ctrl.bookingModel.bookingInfo.taxPersonalInfoContact = angular.fromJson(ctrl.bookingModel.bookingInfo.taxPersonalInfoContact);
        }
        // (ctrl.bookingModel.bookingInfo.taxPersonalInfoContact)? ctrl.bookingModel.bookingInfo.taxPersonalInfoContact = angular.fromJson(ctrl.bookingModel.bookingInfo.taxPersonalInfoContact) : '';
        $log.log(ctrl.bookingModel);
    }

    var gtdFlightBookingHistoryBillingInfoView = {
        templateUrl: 'app/components/booking/flight-booking-history-billing-info-view.html',
        controller: gtdFlightBookingHistoryBillingInfoViewController,
        bindings: {
            bookingModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingHistoryBillingInfoView', gtdFlightBookingHistoryBillingInfoView);

})();

(function() {
    'use strict';

    gtdFlightBookingCustomerInfoViewController.$inject = ['$log', '$state', '$scope', 'MetaData', 'Flight', 'DataService', 'Base64'];

    function gtdFlightBookingCustomerInfoViewController($log, $state, $scope, MetaData, Flight, DataService, Base64) {
        var ctrl = this;

        $log.log($scope.mode + ":" + ctrl.mode);

        if (!ctrl.searchOptions) {
            ctrl.searchOptions = DataService.getSearchOption();
        }

        // Startup event
        $scope.$on('gtd-load-booking-completed', function() {
            $log.log('gtd-load-booking-completed: ');
            $log.log(ctrl.bookingModel.customers);
            if (ctrl.mode == 'flight') {
                angular.forEach(ctrl.bookingModel.customers, function(item) {
                    item.show = true;
                });
            }
        });

        ctrl.hideCust = function(item) {
            item.show = false;
        };

        ctrl.showCust = function(item) {
            item.show = true;
        };

        ctrl.doBack = function() {
            // $state.go('booking-info');
            $state.go('booking-info/:booking_number/:params', {
                "searchOptions": ctrl.searchOptions,
                "searchResult": ctrl.searchResult,
                "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                "params": ''
            });
        };
    }

    var gtdFlightBookingCustomerInfoView = {
        templateUrl: 'app/components/booking/flight-booking-customer-info-view.html',
        controller: gtdFlightBookingCustomerInfoViewController,
        bindings: {
            bookingModel: '=',
            mode: '@?',
            searchOptions: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingCustomerInfoView', gtdFlightBookingCustomerInfoView);

})();

(function() {
    'use strict';

    gtdFlightBookingCustomerInfoController.$inject = ['$log', '$scope', '$rootScope', 'Principal', 'MetaData', 'Flight', 'DataService', 'GlobalSrv', 'CustomerService', 'DateUtils', '$location', '$cookies'];

    function gtdFlightBookingCustomerInfoController($log, $scope, $rootScope, Principal, MetaData, Flight, DataService, GlobalSrv, CustomerService, DateUtils, $location, $cookies) {
        var ctrl = this;
        $log.log("gtdFlightBookingCustomerInfoController:" + ctrl.bookingModel);

        // init liteEmbed Option
        ctrl.liteEmbed = false;
        if ($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) {
            ctrl.liteEmbed = (($cookies.get('liteEmbed') || localStorage.getItem('liteEmbed')) === 'true');
        }

        ctrl.allCountries = GlobalSrv.getAllCountries();
        ctrl.allLookups = GlobalSrv.getAllLookups();

        ctrl.titleLookups = [];
        ctrl.cardTypeLookups = [];
        ctrl.passportTypeLookups = [];
        ctrl.customerTravellers = [];

        ctrl.setMeal = setMeal;
        ctrl.mergeSSr = mergeSSr;
        console.log(ctrl);

        function setMeal() {
            setTimeout(function() {
                $(".selectGender-meal").select2();
                $('#selectGender-meal,#selectGender-meal').on('select2:opening select2:closing', function(event) {
                    var $searchfield = $(this).parent().find('.select2-search__field');
                    $searchfield.prop('disabled', true);
                });
            }, 100);
        }

        ctrl.merchantCode = $location.search().merchant_code;
        if (!ctrl.merchantCode) ctrl.merchantCode = $cookies.get('merchant_code') || localStorage.getItem("merchant_code");

        // Startup event
        $scope.$on('gtd-load-booking-completed', function() {
            $log.log('gtd-load-booking-completed: ');
            $log.log(ctrl.bookingModel.customers);
            if (!ctrl.searchOptions) {
                ctrl.searchOptions = DataService.getSearchOption();
            }

            // find depart flight date
            departDate = ctrl.bookingModel.departPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime;
            ctrl.minExp = DateUtils.getMonthAgoFromBaseInDefaultFormat(departDate, -6);
            ctrl.maxExp = DateUtils.getMonthAgoFromBasePlusDaysInDefaultFormat(departDate, -6, 20 * 365);

            if (ctrl.bookingModel.customers == undefined || ctrl.bookingModel.customers.length == 0) {

                ctrl.bookingModel.customers = [];

                var adultQuantity = ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.adultFare && ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities ? ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities.quantity : 0;
                var childQuantity = ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.childFare && ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.childFare.passengerTypeQuantities ? ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.childFare.passengerTypeQuantities.quantity : 0;
                var infantQuantity = ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.infantFare && ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.infantFare.passengerTypeQuantities ? ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.infantFare.passengerTypeQuantities.quantity : 0;

                // create adult
                for (var i = 0; i < adultQuantity; i++) {
                    ctrl.bookingModel.customers.push({
                        checked: false,
                        type: 'ADT',
                        gid: i,
                        cuPp: 'PP',
                        min: DateUtils.getYearAgoFromBaseInDefaultFormat(departDate, 90),
                        max: DateUtils.getYearAgoFromBaseInDefaultFormat(departDate, 12)
                    });
                }


                // create child
                if (!childQuantity) {
                    ctrl.searchOptions.childrenNo = 0;
                } else {
                    ctrl.searchOptions.childrenNo = childQuantity;
                }
                for (var i = 0; i < ctrl.searchOptions.childrenNo; i++) {
                    ctrl.bookingModel.customers.push({
                        checked: false,
                        type: 'CHD',
                        gid: i,
                        cuPp: 'PP',
                        min: DateUtils.getYearAgoFromBasePlusDaysInDefaultFormat(departDate, 12, 0),
                        max: DateUtils.getYearAgoFromBaseInDefaultFormat(departDate, 2)
                    });
                }

                // create infant
                if (!infantQuantity) {
                    ctrl.searchOptions.newBornNo = 0;
                } else {
                    ctrl.searchOptions.newBornNo = infantQuantity;
                }
                for (var i = 0; i < ctrl.searchOptions.newBornNo; i++) {
                    ctrl.bookingModel.customers.push({
                        checked: false,
                        type: 'INF',
                        gid: i,
                        cuPp: 'PP',
                        min: DateUtils.getYearAgoFromBasePlusDaysInDefaultFormat(departDate, 2, 0),
                        max: DateUtils.getYearAgoFromBaseMinusDaysInDefaultFormat(departDate, 0, 14)
                    });
                }

                // ctrl.bookingModel.customers = [
                //     {checked: false}
                // ];

                angular.forEach(ctrl.bookingModel.customers, function(item) {
                    // Init default
                    // item.cuGender = 'MALE';
                    item.cuNationality = 'vn';
                });
            }
        });

        ctrl.checkListBaggage = function(item) {
            if (item.serviceType == "BAGGAGE") {
                if (ctrl.merchantCode == "FSOFT") {
                    if (item.code == "Goi (Bag) 15kgs" || item.code == "Goi (Bag) 20kgs" || item.code == "BG15" || item.code == "BG20" || item.code == "Goi (Bag) 15 kg")
                        return true;
                    else return false;
                }
                return true;
            }
            return false;
        }

        // find depart flight date
        var departDate;

        // ctrl.minExp = DateUtils.getYearAgoInDefaultFormat(0);


        // ctrl.passportExpDate = DateUtils.getMonthAgoFromBaseInDefaultFormat(departDate, 6);

        ctrl.isAuthenticated = Principal.isAuthenticated;

        Principal.identity().then(function(user) {
            var data = {
                // other fields
                user: user
            };
            ctrl.identity = user;
            // do something with data only inside this inner function
        });

        // $scope.$watch(function(scope) { return ctrl.isAuthenticated(); },
        //     function(newValue, oldValue) {
        //         //+++ Load traveler for auth customer
        //         if(Principal.isAuthenticated()) {
        //             CustomerService.getCustomerTravellersForBoth().then(function (result) {
        //                 if(result && result.length > 0) {
        //                     angular.forEach(result, function (traveller, index) {
        //                         if (index != 0) {
        //                             ctrl.customerTravellers.push(traveller);
        //                         }
        //                     });
        //                 }
        //                 $log.log("Search ALL customerTravellers");
        //                 $log.log(ctrl.customerTravellers );
        //             });
        //         } else {
        //             ctrl.customerTravellers = [];
        //         }
        //         //---
        //     }
        // );

        //+++ Load traveler for auth customer


        if (Principal.isAuthenticated()) {
            CustomerService.getCustomerTravellersForBoth().then(function(result) {
                if (result && result.length > 0) {
                    angular.forEach(result, function(traveller, index) {
                        if (index != 0) {
                            ctrl.customerTravellers.push(traveller);
                        }
                    });
                }
            });
        }
        //---

        if (ctrl.allCountries == [] || ctrl.allCountries.length == 0) {
            MetaData.getCountries().then(function success(result) {
                ctrl.allCountries = result;
            });
        }

        $log.log("Search ALL lookups");
        //$log.log("ctrl.allLookups = " + JSON.stringify(ctrl.allLookups));
        $log.log("ctrl.allLookups = " + ctrl.allLookups);

        if (ctrl.allLookups == [] || ctrl.allLookups.length == 0) {
            $log.log("Search ALL lookups");
            MetaData.searchLookups('', '', true).then(function success(result) {
                ctrl.allLookups = result;
                //$log.log("ctrl.allLookups = " + JSON.stringify(ctrl.allLookups));
                $log.log("ctrl.allLookups = " + ctrl.allLookups);
            });
        }


        MetaData.searchLookups('ota_customer', 'passenger_gender').then(function success(result) {
            ctrl.titleLookups = result;

            ctrl.adultTitleLookups = [];
            angular.forEach(ctrl.titleLookups, function(item) {
                //$log.log(item.lookupValue);
                if (item.lookupValue == 'MALE' || item.lookupValue == 'FEMALE') {
                    ctrl.adultTitleLookups.push(item);
                }
            });

            ctrl.childTitleLookups = [];
            angular.forEach(ctrl.titleLookups, function(item) {
                // $log.log(item.lookupValue);
                if (item.lookupValue == 'BOY' || item.lookupValue == 'GIRL') {
                    ctrl.childTitleLookups.push(item);
                }
            });
        });

        MetaData.searchLookups('air_member_card', '').then(function success(result) {
            if (ctrl.merchantCode == "FSOFT") {
                for (var i in result) {
                    if (result[i].lookupType == "DL") {
                        ctrl.cardTypeLookups.push(result[i]);
                    }
                }
            } else {
                ctrl.cardTypeLookups = result
            }

        });

        MetaData.searchLookups('ota_customer', 'passport_type').then(function success(result) {
            ctrl.passportTypeLookups = [];

            angular.forEach(result, function(item) {
                // $log.log(item.lookupValue);
                if (item.lookupValue == 'PP') {
                    ctrl.passportTypeLookups.push(item);
                }
            });
        });

        //dangpham
        ctrl.checkPassportForVNToEastSouthAsia = function() {
            var savedSearchOptions = DataService.getSavedSearchOption();
            var fromVNCheck = this.checkAirPortHasZoneInGroupName(savedSearchOptions.fromAirPort, 'Vietnam');
            var toEastSouthAsiaCheck = this.checkAirPortHasZoneInGroupName(savedSearchOptions.toAirPort, 'SouthEastAsia');
            return fromVNCheck && toEastSouthAsiaCheck;
        }

        ctrl.flightInternalfn = function() {
            var flightInternal = false;
            var flightAbroad = ctrl.bookingModel.departGroupItem;
            if (flightAbroad.airSupplier == 'VJ' || flightAbroad.airSupplier == 'BL' || flightAbroad.airSupplier == 'VN' || flightAbroad.airSupplier == 'QH') {
                flightInternal = true;
            }
            return flightInternal;
        };

        // dangpham
        ctrl.getGroupNameByAirPortCode = function(airPortCode) {
            var airports = GlobalSrv.getLocalAirports();
            var groupName = airports.find(function(x) {
                return x.code === airPortCode;
            }).groupName;
            return groupName;
        };

        //dangpham
        ctrl.checkAirPortHasZoneInGroupName = function(airportCode, zone) {
            var groupName = this.getGroupNameByAirPortCode(airportCode);
            var array = groupName.split(",");
            if (array.length == 1) {
                if (groupName == zone)
                    return true;
                return false;
            }

            for (var i = 0; i < array.length; i++) {
                if (zone == array[i]) {
                    return true;
                }
            }
            return false;
        }

        ctrl.addBlankCustomer = function() {
            ctrl.bookingModel.customers.push({
                checked: false
            });

            angular.forEach(ctrl.bookingModel.customers, function(item) {
                // Init default
                // item.cuGender = 'MALE';
                item.cuNationality = 'vn';
            });
        };

        ctrl.removeCustomer = function(index) {
            ctrl.bookingModel.customers.splice(index, 1);
        };

        ctrl.chooseCustomer = function(item) {
            //$log.log("item = " + JSON.stringify(item));
            $log.log("item = " + item);

            // Reset
            item.id = undefined;
            item.cuGender = undefined;
            item.cuFamilyName = undefined;
            item.cuName = undefined;
            item.cuCardType = undefined;
            item.cuCardNo = undefined;
            item.cuCardId = undefined;
            item.cuDob = undefined;
            if (ctrl.searchOptions.dtype == 'international') {
                item.cuDob = undefined;
                item.cuExpiredDate = undefined;
                item.cuPp = 'PP';
                item.cuId = undefined;
                item.cuNationality = 'vn';
            }



            if (item.selectedTraveller) {
                item.id = item.selectedTraveller.id;


                if (item.type == 'ADT') {
                    if (item.selectedTraveller.gender == 'MALE' || item.selectedTraveller.gender == 'FEMALE') {
                        item.cuGender = item.selectedTraveller.gender;
                    }
                } else if (item.type == 'CHD' || item.type == 'INF') {
                    if (item.selectedTraveller.gender == 'BOY' || item.selectedTraveller.gender == 'GIRL') {
                        item.cuGender = item.selectedTraveller.gender;
                    }

                    if (item.selectedTraveller.dob) {
                        item.cuDob = new Date(item.selectedTraveller.dob);
                    }
                }

                item.cuFamilyName = item.selectedTraveller.surName ? item.selectedTraveller.surName.toUpperCase() : '';
                item.cuName = item.selectedTraveller.firstName ? item.selectedTraveller.firstName.toUpperCase() : '';

                if (item.selectedTraveller.memberCards != null &&
                    item.selectedTraveller.memberCards != undefined &&
                    item.selectedTraveller.memberCards != []
                ) {
                    var mc = item.selectedTraveller.memberCards[0];
                    if (mc) {
                        item.cuCardType = mc.cardType;
                        item.cuCardNo = mc.cardNumber;
                        item.cuCardId = mc.id;
                    }

                }

                if (ctrl.searchOptions.dtype == 'international') {
                    if (item.selectedTraveller.dob) {
                        item.cuDob = new Date(item.selectedTraveller.dob);
                    }

                    if (item.selectedTraveller.expiredDate) {
                        item.cuExpiredDate = new Date(item.selectedTraveller.expiredDate);
                    }

                    if (item.selectedTraveller.documentType == 'PP') {
                        item.cuPp = item.selectedTraveller.documentType;

                        if (!item.cuPp) {
                            item.cuPp = 'PP';
                        }

                        item.cuId = item.selectedTraveller.documentNumber;
                    }

                    item.cuNationality = item.selectedTraveller.nationality;
                }

            } else {
                item.id = null;
            }
        };
        //select meal
        ctrl.chooseMeal = function($event) {
            //  if(ctrl.search.searchType =='oneway'){
            //      if(ctrl.searchOptions.ssrOfferItemsDepart){
            //          var depMeal = ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems;
            //          angular.forEach(ctrl.searchOptions.ssrOfferItemsDepart, function(meal){
            //              if(meal.ssrOfferItemsDepart == )
            //          })
            //      }
            //  }
        }

        ctrl.departBaggageServiceRequests = [];
        ctrl.returnBaggageServiceRequests = [];
        ctrl.departMealServiceRequests = [];
        ctrl.returnMealServiceRequests = [];


        ctrl.chooseLuggagePackage = function(type, idCustomer) {
            if (type == 'depart') {
                ctrl.departBaggageServiceRequests[idCustomer] = [];
                if (ctrl.searchOptions.ssrOfferItemsDepart) {
                    var depSsr = ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems;
                    angular.forEach(depSsr, function(srs) {
                        srs.fareSourceCode = ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        if (ctrl.bookingModel.customers[idCustomer].cuLuggageDeparture == srs.id) {
                            ctrl.departBaggageServiceRequests[idCustomer] = srs;
                        }
                    });
                    $log.log('departBaggageServiceRequests');
                    $log.log(ctrl.departBaggageServiceRequests);
                }
            }
            if (type == 'return') {
                ctrl.returnBaggageServiceRequests[idCustomer] = [];
                if (ctrl.searchOptions.ssrOfferItemsReturn) {
                    var retSsr = ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems;
                    angular.forEach(retSsr, function(srs) {
                        srs.fareSourceCode = ctrl.bookingModel.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        if (ctrl.bookingModel.customers[idCustomer].cuLuggageReturn == srs.id) {
                            ctrl.returnBaggageServiceRequests[idCustomer] = srs;
                        }
                    });
                }
                $log.log('returnServiceRequests');
                $log.log(ctrl.returnBaggageServiceRequests);
            }
            ctrl.mergeSSr(idCustomer);
        }

        ctrl.chooseMealPackage = function(type, idCustomer) {
            if (type == 'depart') {
                if (ctrl.searchOptions.ssrOfferItemsDepart) {
                    ctrl.departMealServiceRequests[idCustomer] = [];
                    var depSsr = ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems;
                    angular.forEach(depSsr, function(srs) {
                        srs.fareSourceCode = ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        angular.forEach(ctrl.bookingModel.customers[idCustomer].cuMealDeparture, function(cuMeal) {
                            if (cuMeal == srs.id) {
                                ctrl.departMealServiceRequests[idCustomer].push(srs);
                            }
                        })
                    });
                    $log.log('departMealServiceRequests');
                    $log.log(ctrl.departMealServiceRequests);
                }
            }
            if (type == 'return') {
                if (ctrl.searchOptions.ssrOfferItemsDepart) {
                    ctrl.returnMealServiceRequests[idCustomer] = [];
                    var retSsr = ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems;
                    angular.forEach(retSsr, function(srs) {
                        srs.fareSourceCode = ctrl.bookingModel.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        angular.forEach(ctrl.bookingModel.customers[idCustomer].cuMealReturn, function(cuMeal) {
                            if (cuMeal == srs.id) {
                                ctrl.returnMealServiceRequests[idCustomer].push(srs);
                            }
                        })
                    });
                    $log.log('returnMealServiceRequests');
                    $log.log(ctrl.returnMealServiceRequests);
                }
            }
            ctrl.mergeSSr(idCustomer);
        }

        function mergeSSr(idCustomer) {
            ctrl.bookingModel.customers[idCustomer].serviceRequests = [];
            ctrl.bookingModel.customers[idCustomer].departServiceRequests = [];
            ctrl.bookingModel.customers[idCustomer].returnServiceRequests = [];

            if (ctrl.departBaggageServiceRequests[idCustomer]) {
                ctrl.bookingModel.customers[idCustomer].serviceRequests = ctrl.bookingModel.customers[idCustomer].serviceRequests.concat(ctrl.departBaggageServiceRequests[idCustomer]);
                ctrl.bookingModel.customers[idCustomer].departServiceRequests = ctrl.bookingModel.customers[idCustomer].departServiceRequests.concat(ctrl.departBaggageServiceRequests[idCustomer]);
            }
            if (ctrl.returnBaggageServiceRequests[idCustomer]) {
                ctrl.bookingModel.customers[idCustomer].serviceRequests = ctrl.bookingModel.customers[idCustomer].serviceRequests.concat(ctrl.returnBaggageServiceRequests[idCustomer]);
                ctrl.bookingModel.customers[idCustomer].returnServiceRequests = ctrl.bookingModel.customers[idCustomer].returnServiceRequests.concat(ctrl.returnBaggageServiceRequests[idCustomer]);
            }
            if (ctrl.departMealServiceRequests[idCustomer]) {
                ctrl.bookingModel.customers[idCustomer].serviceRequests = ctrl.bookingModel.customers[idCustomer].serviceRequests.concat(ctrl.departMealServiceRequests[idCustomer]);
                ctrl.bookingModel.customers[idCustomer].departServiceRequests = ctrl.bookingModel.customers[idCustomer].departServiceRequests.concat(ctrl.departMealServiceRequests[idCustomer]);
            }
            if (ctrl.returnMealServiceRequests[idCustomer]) {
                ctrl.bookingModel.customers[idCustomer].serviceRequests = ctrl.bookingModel.customers[idCustomer].serviceRequests.concat(ctrl.returnMealServiceRequests[idCustomer]);
                ctrl.bookingModel.customers[idCustomer].returnServiceRequests = ctrl.bookingModel.customers[idCustomer].returnServiceRequests.concat(ctrl.returnMealServiceRequests[idCustomer]);
            }
            // $log.log('ctrl.bookingModel.customers');
            // $log.log(ctrl.bookingModel.customers);
        }
        ctrl.chooseMemberCard = function(item) {
            item.cuCardNo = '';
            item.cuCardId = null;

            if (item.selectedTraveller && item.selectedTraveller.memberCards) {
                angular.forEach(item.selectedTraveller.memberCards, function(mc) {
                    if (item.cuCardType == mc.cardType) {
                        item.cuCardNo = mc.cardNumber;
                        item.cuCardId = mc.id;
                    }
                });

            }
        };

        ctrl.updateSelection = function(position, entities) {
            angular.forEach(entities, function(item, index) {
                if (position != index) {
                    item.checked = false;
                } else {
                    // update contact info
                    // alert('$rootScope.$broadcast' + JSON.stringify(item));
                    if (item.checked) {
                        $rootScope.$broadcast('gtd-update-contact-info', {
                            model: item
                        });
                    } else {
                        //$rootScope.$broadcast('gtd-update-contact-info', {model: {}});
                    }
                }
            });
        };

        $scope.fooChanged = function(index) {
            $('.checkedSelectContact').not('.selectContact' + index).prop('checked', false);
            var first_name = $('#cuFamilyName' + index).val();
            var last_name = $('#cuName' + index).val();
            var gender = $('#bookingCuGender' + index).val();
            var infoContact = {
                ciFName: first_name,
                ciName: last_name,
                gender: gender
            };
            $rootScope.$broadcast('gtd-update-contact-info', {
                model: infoContact
            });
        };
        $scope.changeInput = function(index, type, value) {
            if ($('.selectContact' + index).is(':checked')) {
                var first_name = $('#cuFamilyName' + index).val();
                var last_name = $('#cuName' + index).val();
                var gender = $('#bookingCuGender' + index).val();
                var infoContact = {
                    ciFName: first_name,
                    ciName: last_name,
                    gender: gender
                };
                $rootScope.$broadcast('gtd-update-contact-info', {
                    model: infoContact
                });
            }
        };
        $scope.changeSelect = function(index, value) {
            if ($('.selectContact' + index).is(':checked')) {
                var first_name = $('#cuFamilyName' + index).val();
                var last_name = $('#cuName' + index).val();
                var gender = $('#bookingCuGender' + index).val();
                var infoContact = {
                    ciFName: first_name,
                    ciName: last_name,
                    gender: gender
                };
                $rootScope.$broadcast('gtd-update-contact-info', {
                    model: infoContact
                });
            }
        };
    }

    var gtdFlightBookingCustomerInfo = {
        require: {
            form: '^^form'
        },
        // bindToController : true, automatically happens
        // controllerAs : '$ctrl', automatically happens, too

        templateUrl: 'app/components/booking/flight-booking-customer-info.html',
        controller: gtdFlightBookingCustomerInfoController,
        bindings: {
            bookingModel: '=',
            searchOptions: '=?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingCustomerInfo', gtdFlightBookingCustomerInfo);

})();

(function() {
    'use strict';

    gtdFlightBookingContactInfoViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdFlightBookingContactInfoViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;

        $scope.$on('gtd-load-booking-completed', function() {
            $log.log('gtd-load-booking-completed: ');
            if (ctrl.mode == 'flight') {
                angular.forEach(ctrl.bookingModel.contacts, function(item) {
                    item.show = true;
                });
            }
        });

        ctrl.hideCust = function(item) {
            item.show = false;
        };

        ctrl.showCust = function(item) {
            item.show = true;
        };
    }

    var gtdFlightBookingContactInfoView = {
        templateUrl: 'app/components/booking/flight-booking-contact-info-view.html',
        controller: gtdFlightBookingContactInfoViewController,
        bindings: {
            bookingModel: '=',
            mode: '@?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingContactInfoView', gtdFlightBookingContactInfoView);

})();

(function() {
    'use strict';

    gtdFlightBookingContactInfoController.$inject = ['$log', '$scope', 'Principal', 'MetaData', 'Flight', 'DataService', 'GlobalSrv', 'CustomerService'];

    function gtdFlightBookingContactInfoController($log, $scope, Principal, MetaData, Flight, DataService, GlobalSrv, CustomerService) {
        var ctrl = this;

        ctrl.isAuthenticated = Principal.isAuthenticated;
        ctrl.customerTravellers = [];
        ctrl.allCountries = GlobalSrv.getAllCountries();
        // $log.log('ctrl.allCountries=');
        // $log.log(ctrl.allCountries);
        // $log.log(ctrl.allCountries == null || ctrl.allCountries == undefined || ctrl.allCountries.length == 0);
        MetaData.searchLookups('ota_customer', 'passenger_gender').then(function success(result) {
            ctrl.titleLookups = result;
            console.log('resultSearchLookups: ');
            console.log(result);
            ctrl.adultTitleLookups = [];
            angular.forEach(ctrl.titleLookups, function(item) {
                // $log.log(item.lookupValue);
                if (item.lookupValue == 'MALE' || item.lookupValue == 'FEMALE') {
                    ctrl.adultTitleLookups.push(item);
                }
            });

        });
        //
        // $scope.$watch(function(scope) { return ctrl.isAuthenticated(); },
        //     function(newValue, oldValue) {
        //         //+++ Load traveler for auth customer
        //         if(Principal.isAuthenticated()) {
        //             CustomerService.getCustomerTravellersForBoth().then(function (result) {
        //                 if(result && result.length > 0) {
        //                     angular.forEach(result, function (traveller, index) {
        //                         if (index != 0) {
        //                             ctrl.customerTravellers.push(traveller);
        //                         }
        //                     });
        //                 }
        //             });
        //         } else {
        //             ctrl.customerTravellers = [];
        //         }
        //     }
        // );

        //+++ Load traveler for auth customer
        if (Principal.isAuthenticated()) {
            CustomerService.getCustomerTravellersForBoth().then(function(result) {
                if (result && result.length > 0) {
                    angular.forEach(result, function(traveller, index) {
                        if (index != 0) {
                            ctrl.customerTravellers.push(traveller);
                        }
                    });
                }
            });
        } else {
            ctrl.customerTravellers = [];
        }

        // Startup event
        $scope.$on('gtd-load-booking-completed', function() {
            if (ctrl.allCountries == null || ctrl.allCountries == undefined || ctrl.allCountries.length == 0) {


                // $log.log('dosearchcountry');

                MetaData.getCountries().then(function success(result) {
                    ctrl.allCountries = result;

                    // $log.log('success');

                    if (result) {
                        angular.forEach(ctrl.bookingModel.contacts, function(item) {
                            // Init default
                            // $log.log('Default init');
                            if (!item.ciMobileCode) {
                                item.ciMobileCode = '84';
                            }

                        });
                    }
                }, function error(result) {
                    // $log.log('error');
                });
            } else {
                if (ctrl.bookingModel.contacts) {
                    angular.forEach(ctrl.bookingModel.contacts, function(item) {
                        // Init default
                        if (!item.ciMobileCode) {
                            item.ciMobileCode = '84';
                        }
                    });
                }

            }
            if (ctrl.bookingModel.contacts == undefined || ctrl.bookingModel.contacts.length == 0) {
                ctrl.bookingModel.contacts = [{
                    checked: false
                }];

                if (ctrl.allCountries && ctrl.allCountries.length > 0) {
                    angular.forEach(ctrl.bookingModel.contacts, function(item) {
                        // Init default
                        if (!item.ciMobileCode) {
                            item.ciMobileCode = '84';
                        }
                    });
                }

            }
            Principal.identity().then(function(user) {
                var data = {
                    // other fields
                    user: user
                };
                ctrl.identity = user;
                // do something with data only inside this inner function
                // Default Init for B2B
                var isB2B = Principal.hasAnyAuthority(['ROLE_B2B']);
                /*if (isB2B) {
                    CustomerService.getB2BProfile(ctrl.identity.login).then(function success(result) {
                        var item = ctrl.bookingModel.contacts[0];

                        var name = result.agentName;
                        var firstName = name.split(' ').slice(0, 1).join(' ');
                        var lastName = name.split(' ').slice(1).join(' ');

                        if (!item.ciFName) item.ciFName = firstName ? firstName.toUpperCase() : "";
                        if (!item.ciName) item.ciName = lastName ? lastName.toUpperCase() : "";
                        if (!item.ciEmail) item.ciEmail = result.email;
                        if (!item.ciMobile) item.ciMobile = result.mobile;

                    });
                }*/
                // End Default Init for B2B
            });
        });

        $scope.$on('gtd-update-contact-info', function(event, opt) {
            // update
            angular.forEach(ctrl.bookingModel.contacts, function(item) {
                item.ciFName = opt.model.ciFName;
                item.ciName = opt.model.ciName;
                item.ciGender = opt.model.gender;
            });
        });

        ctrl.addBlankContacts = function() {
            ctrl.bookingModel.contacts.push({
                checked: false
            });

            angular.forEach(ctrl.bookingModel.contacts, function(item) {
                // Init default
                item.ciMobileCode = '84';
            });
        };

        ctrl.removeContact = function(index) {
            ctrl.bookingModel.contacts.splice(index, 1);
        };

        ctrl.chooseContact = function(item) {
            //$log.log("item = " + JSON.stringify(item));
            $log.log("item = " + item);

            // reset customer
            item.ciGender = undefined;
            item.id = undefined;
            item.ciFName = undefined;
            item.ciName = undefined;
            item.ciEmail = undefined;
            item.ciMobile = undefined;
            item.ciMobileCode = '84';
            item.postcode = undefined;

            if (item.selectedTraveller) {
                // Contact must be ADULT so type = ADT
                if (item.selectedTraveller.gender == 'MALE' || item.selectedTraveller.gender == 'FEMALE') {
                    item.ciGender = item.selectedTraveller.gender;
                }

                item.id = item.selectedTraveller.id;
                item.ciFName = item.selectedTraveller.surName ? item.selectedTraveller.surName.toUpperCase() : '';
                item.ciName = item.selectedTraveller.firstName ? item.selectedTraveller.firstName.toUpperCase() : '';
                item.ciEmail = item.selectedTraveller.email;
                item.ciMobile = item.selectedTraveller.phoneNumber1;
                item.ciMobileCode = item.selectedTraveller.postalCode;
                item.postcode = item.selectedTraveller.postCode;
                if (!item.ciMobileCode) {
                    item.ciMobileCode = '84';
                }
            } else {
                item.id = null;
            }
        };
    }

    var gtdFlightBookingContactInfo = {
        require: {
            form: '^^form'
        },
        // bindToController : true, automatically happens
        // controllerAs : '$ctrl', automatically happens, too
        templateUrl: 'app/components/booking/flight-booking-contact-info.html',
        controller: gtdFlightBookingContactInfoController,
        bindings: {
            bookingModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingContactInfo', gtdFlightBookingContactInfo);

})();

(function() {
    'use strict';

    gtdFlightBookingBillingInfoViewController.$inject = ['$log', '$scope', 'MetaData', 'Flight'];

    function gtdFlightBookingBillingInfoViewController($log, $scope, MetaData, Flight) {
        var ctrl = this;
        $log.log('ctrl.bookingModel4 : ');
        if (ctrl.bookingModel) {
            ctrl.bookingModel.bookingInfo.taxPersonalInfoContact = angular.fromJson(ctrl.bookingModel.bookingInfo.taxPersonalInfoContact);
        }
        $log.log(ctrl.bookingModel);
    }

    var gtdFlightBookingBillingInfoView = {
        templateUrl: 'app/components/booking/flight-booking-billing-info-view.html',
        controller: gtdFlightBookingBillingInfoViewController,
        bindings: {
            bookingModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingBillingInfoView', gtdFlightBookingBillingInfoView);

})();

(function() {
    'use strict';

    gtdFlightBookingBillingInfoController.$inject = ['$log', '$scope', 'MetaData', 'Flight', 'DataService', 'GlobalSrv', 'Principal', 'CustomerService'];

    function gtdFlightBookingBillingInfoController($log, $scope, MetaData, Flight, DataService, GlobalSrv, Principal, CustomerService) {
        var ctrl = this;
        ctrl.isAuthenticated = Principal.isAuthenticated;
        ctrl.allCountries = GlobalSrv.getAllCountries();
        $log.log('ctrl.bookingModel4 : ');
        if (ctrl.bookingModel) {
            ctrl.bookingModel.bookingInfo = angular.fromJson(ctrl.bookingModel.bookingInfo);
        }
        $log.log(ctrl.bookingModel);
        $scope.$watch(function(scope) {
                return ctrl.isAuthenticated();
            },
            function(newValue, oldValue) {
                //+++ Load traveler for auth customer
                if (Principal.isAuthenticated()) {
                    CustomerService.getCustomerTravellersForBoth().then(function(result) {
                        ctrl.customerTravellers = result;
                    });
                } else {
                    ctrl.customerTravellers = [];
                }
            }
        );

        // if (!ctrl.bookingModel.showForm) {
        //     ctrl.bookingModel.showForm = false;
        // }

        $scope.$on('gtd-load-booking-completed', function() {
            $log.log('gtd-load-booking-completed: ');
            if (!ctrl.bookingModel.showForm) {
                ctrl.bookingModel.showForm = false;
            }
        });

        if (!ctrl.allCountries) {
            MetaData.getCountries().then(function success(result) {
                ctrl.allCountries = result;
            });
        }
        if (ctrl.bookingModel.contacts == undefined || ctrl.bookingModel.contacts.length == 0) {
            ctrl.bookingModel.contacts = [{
                checked: false
            }];

            if (ctrl.allCountries && ctrl.allCountries.length > 0) {
                angular.forEach(ctrl.bookingModel.contacts, function(item) {
                    // Init default
                    if (!item.ciMobileCode) {
                        item.ciMobileCode = '84';
                    }
                });
            }

        }
        ctrl.chooseContact = function(item) {
            //$log.log("item = " + JSON.stringify(item));
            $log.log("itemChooseContact = " + item);

            // reset customer
            item.ciGender = undefined;
            item.id = undefined;
            ctrl.bookingModel.tPCfName = undefined;
            ctrl.bookingModel.tPCName = undefined;
            ctrl.bookingModel.tPCPhone = undefined;
            ctrl.bookingModel.tPCemail = undefined;
            ctrl.bookingModel.tPCPhoneCode = '84';
            item.postcode = undefined;

            if (item.selectedTraveller) {
                // Contact must be ADULT so type = ADT
                if (item.selectedTraveller.gender == 'MALE' || item.selectedTraveller.gender == 'FEMALE') {
                    item.ciGender = item.selectedTraveller.gender;
                }

                item.id = item.selectedTraveller.id;
                ctrl.bookingModel.tPCfName = item.selectedTraveller.surName ? item.selectedTraveller.surName.toUpperCase() : '';
                ctrl.bookingModel.tPCName = item.selectedTraveller.firstName ? item.selectedTraveller.firstName.toUpperCase() : '';
                ctrl.bookingModel.tPCemail = item.selectedTraveller.email;
                ctrl.bookingModel.tPCPhone = item.selectedTraveller.phoneNumber1;
                ctrl.bookingModel.tPCPhoneCode = item.selectedTraveller.postalCode;
                ctrl.bookingModel.postcode = item.selectedTraveller.postCode;
                if (!ctrl.bookingModel.tPCPhoneCode) {
                    ctrl.bookingModel.tPCPhoneCode = '84';
                }
            } else {
                item.id = null;
            }
            $log.log(item)
        };
        ctrl.doShowForm = function() {
            // ctrl.bookingModel.showForm = !ctrl.bookingModel.showForm;
            if (!ctrl.bookingModel.showForm) {
                ctrl.bookingModel.biCompany = undefined;
                ctrl.bookingModel.biMst = undefined;
                ctrl.bookingModel.biMobileCode = '84';
                ctrl.bookingModel.biMobile = undefined;
                ctrl.bookingModel.biAddress = undefined;
                ctrl.bookingModel.tPCfName = undefined;
                ctrl.bookingModel.tPCName = undefined;
                ctrl.bookingModel.tPCPhoneCode = '84';
                ctrl.bookingModel.tPCPhone = undefined;
                ctrl.bookingModel.tPCemail = undefined;
                ctrl.bookingModel.tPCNote = undefined;
            }
        };
    }

    var gtdFlightBookingBillingInfo = {
        require: {
            form: '^^form'
        },
        // bindToController : true, automatically happens
        // controllerAs : '$ctrl', automatically happens, too
        templateUrl: 'app/components/booking/flight-booking-billing-info.html',
        controller: gtdFlightBookingBillingInfoController,
        bindings: {
            bookingModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdFlightBookingBillingInfo', gtdFlightBookingBillingInfo);

})();

(function() {
    'use strict';

    gtdBookingPaymentController.$inject = ['$log', '$rootScope', '$scope', 'Principal', 'MetaData', 'Flight', 'Hotel', 'CustomerService', 'GlobalSrv', '$uibModal', 'DialogService', 'LoginService', '$filter', '$timeout', 'PROMO_EVENT', '$cookies'];

    function gtdBookingPaymentController($log, $rootScope, $scope, Principal, MetaData, Flight, Hotel, CustomerService, GlobalSrv, $uibModal, DialogService, LoginService, $filter, $timeout, PROMO_EVENT, $cookies) {
        var ctrl = this;
        var VOUCHER_TYPE = 'VOUCHER';
        var PROMO_TYPE = 'PROMO';

        ctrl.tempPromo = 0;
        ctrl.tempPromo2 = 0;
        ctrl.tempDiscountAmount = 0;
        ctrl.chosenCardNumber = '';
        ctrl.getAir = getAir;
        ctrl.getHotel = getHotel;
        ctrl.deletePromoAir = deletePromoAir;
        ctrl.updateDiscountAmount = updateDiscountAmount;
        ctrl.discountType;
        ctrl.selectedCardChanged = selectedCardChanged;
        ctrl.currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;

        $log.log("--->>> ctrl.paymentModel.paymentOption: " + ctrl.paymentModel.paymentOption);
        $log.log("--->>> ctrl.bookingModel.bookingInfo.showPayLaterOption: " + ctrl.bookingModel.bookingInfo.showPayLaterOption);
        $log.log("--->>> ctrl.bookingModel.bookingInfo.showPayNowOption: " + ctrl.bookingModel.bookingInfo.showPayNowOption);

        ctrl.isAuthenticated = Principal.isAuthenticated;
        ctrl.listPaymentType = [];

        function selectedCardChanged(selectedCard) {
            if (ctrl.paymentModel.cardModel.chosenCardNumber == -1) {
                ctrl.paymentModel.cardModel.cardId = -1;
            }
            ctrl.paymentModel.cardModel.chosenCardNumber = selectedCard.cardNumber;
            ctrl.paymentModel.cardModel.cardId = selectedCard.id;
        }

        var currentTime = new Date();

        ctrl.currentMonth = currentTime.getMonth() + 1;
        ctrl.currentYear = currentTime.getFullYear();
        ctrl.maxYear = ctrl.currentYear + 20;

        ctrl.allCountries = GlobalSrv.getAllCountries();
        if (ctrl.allCountries == [] || ctrl.allCountries.length == 0) {
            MetaData.getCountries().then(function success(result) {
                ctrl.allCountries = result;
            });
        }
        CustomerService.getAvailablePaymentType().then(function(result) {
            ctrl.listPaymentType = result;
        });
        MetaData.getAtmDebitOptions().then(function success(result) {
            ctrl.allDebitOptions = result;
            ctrl.allDebitOptions.sort();
        });

        if (ctrl.bookingModel.bookingInfo.supplierType == "HOTEL") {
            Hotel.gPaymentPromotion('HOTEL', "PUBLISHING", 0, 20).then(function(result) {
                if (result.content) {
                    ctrl.paymentModel.paymentPromo = result.content;
                }
            });
        }
        if (ctrl.bookingModel.bookingInfo.supplierType == "AIR") {
            Flight.gPaymentPromotion('AIR', "PUBLISHING", 0, 20).then(function(result) {
                if (result.content) {
                    ctrl.paymentModel.paymentPromo = result.content;
                }
            });
        }
        ctrl.creditCards = [];
        //+++ Load credit_cards for auth customer
        // if (vm.currentMerchant && vm.currentMerchant === 'FASTGO') {
        // if (Principal.isAuthenticated() && ctrl.currentMerchant !== 'FASTGO') {
        //     CustomerService.getCreditCards().then(function (result) {
        //         ctrl.creditCards = result;
        //         angular.forEach(ctrl.creditCards, function (item, value) {
        //             item.checked = false;
        //         });
        //     });
        // }

        // Reload cards when login
        Principal.identity().then(function(user) {
            var data = {
                // other fields
                user: user
            };
            ctrl.identity = user;
            // do something with data only inside this inner function
        });
        $scope.$watch(function(scope) {
                return ctrl.isAuthenticated();
            },
            function(newValue, oldValue) {
                //+++ Load traveler for auth customer
                if (Principal.isAuthenticated()) {
                    CustomerService.getCustomerTravellersForBoth().then(function(result) {
                        ctrl.customerTravellers = result;
                    });
                } else {
                    ctrl.customerTravellers = [];
                }
            }
        );
        $scope.$watch(function(scope) {
                return ctrl.isAuthenticated();
            },
            function(newValue, oldValue) {
                //+++ Load credit_cards for auth customer
                // if (Principal.isAuthenticated()) {
                //     CustomerService.getCreditCards().then(function (result) {
                //         ctrl.creditCards = result;
                //         angular.forEach(ctrl.creditCards, function (item, value) {
                //             item.checked = false;
                //         });
                //     });
                // } else {
                //     ctrl.creditCards = [];
                // }
            }
        );

        $rootScope.$on('changeVoucher', function(event, data) {
            ctrl.discountType = VOUCHER_TYPE;
            ctrl.previousPromotionAirName = ctrl.promotionAirName;
            ctrl.promotionAirName = null;
            if (ctrl.tempVoucher && ctrl.tempVoucher.discountAmount) {
                ctrl.tempPromo2 = 0;
                ctrl.tempDiscountAmount = ctrl.tempVoucher.discountAmount;
                // ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount = ctrl.tempVoucher.discountAmount;
                ctrl.updateDiscountAmount(ctrl.tempVoucher.discountAmount);
            }
        });
        //+++ process change payment option
        ctrl.selectTypePaymentAir;
        ctrl.previousSelectTypePaymentAir;
        ctrl.previousSelectTypePaymentVoucherAir;
        $rootScope.$on('changePromo', function(event, data) {
            ctrl.discountType = PROMO_TYPE;
            ctrl.tempVoucher = null;
            if (ctrl.tempPromo2 != 0) {
                ctrl.tempPromo = 0;
                ctrl.tempVoucher = null;
                // ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount = ctrl.tempPromo2;
                ctrl.updateDiscountAmount(ctrl.tempPromo2);
                ctrl.tempDiscountAmount = ctrl.tempPromo2;
            }
            if (!ctrl.openingPopup) {
                ctrl.tempVoucher = null;
                ctrl.selectTypePayment = ctrl.previousSelectTypePayment;
                ctrl.selectTypePaymentAir = ctrl.previousSelectTypePaymentAir;
                ctrl.changeRadio();
            }

        });
        $scope.$on('dismissPromo', function(event, data) {
            ctrl.selectTypePayment = ctrl.previousSelectTypePaymentVoucher;
        });
        ctrl.previousSelectTypePayment;
        ctrl.previousSelectTypePaymentVoucher;
        ctrl.changePromotion = function() {
            ctrl.discountType = PROMO_TYPE;
            if (ctrl.bookingModel.bookingInfo.discountVoucherCode !== null || !!ctrl.tempVoucher) {
                var message = {};
                message.title = $filter('translate')('flight.booking.payment.conf');
                message.message = $filter('translate')('flight.booking.payment.mess-conf');
                var modalInstance = DialogService.PromoMessagge(message, PROMO_EVENT);
                ctrl.previousSelectTypePayment = ctrl.selectTypePayment;
                ctrl.previousSelectTypePaymentAir = ctrl.selectTypePaymentAir;
                ctrl.selectTypePayment = "";
                ctrl.selectTypePaymentAir = "";
            } else {
                ctrl.tempVoucher = null;

                ctrl.changeRadio();

            }
        };

        //+++ process change payment option
        ctrl.changeRadio = function() {
            ctrl.previousSelectTypePaymentVoucher = ctrl.selectTypePayment;
            if (ctrl.bookingModel.bookingInfo.promotionID > 0 && ctrl.selectTypePayment.charAt(0) === '_') {
                Flight.voidPromo(ctrl.bookingModel.bookingNumber, ctrl.bookingModel.bookingInfo.promotionID[0]).then(function(result) {

                });
            }

            if (ctrl.selectTypePayment.indexOf("_") == 0 && !Principal.isAuthenticated()) {
                var message = {};
                message.title = 'Rất tiếc';
                message.message = 'Khuyến mãi này chỉ áp dụng cho thành viên của Gotadi. Vui lòng đăng nhập hoặc đăng ký để hưởng khuyến mãi và nhiều ưu đãi khác.';
                var modalInstance = DialogService.openDialogForceLogin(message);

                modalInstance.closed.then(
                    function() {
                        LoginService.open();
                    }
                );
                ctrl.selectTypePayment = "";
            }
            //+++ reset temp_voucher
            ctrl.tempPromo = 0;
            // ctrl.tempVoucher = null;
            if (!ctrl.DatapromoAir) {
                ctrl.paymentModel.promotions = null;
            }
            //---
            if (ctrl.selectTypePayment.charAt(0) === '_') {
                ctrl.promotionAirName = null;
                ctrl.paymentModel.paymentOption = 'CREDIT';
                var _params = ctrl.selectTypePayment.split("_");
                ctrl.tempVoucher = null;
                if (_params.length >= 1) {
                    ctrl.promoSelect = true;
                    $rootScope.$broadcast("select-payment-promo-succeeded", _params[1]);
                    if (ctrl.bookingModel && ctrl.bookingModel.bookingInfo && ctrl.bookingModel.bookingInfo.displayPriceInfo) {
                        Flight.gPaymentPromoDiscount(ctrl.bookingModel.bookingNumber, ctrl.bookingModel.bookingCode, parseInt(_params[1]), 'CREDIT_CARD').then(function(result) {
                            if (result.discountAmount) {
                                // ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount = result.discountAmount;
                                ctrl.updateDiscountAmount(result.discountAmount);
                                ctrl.tempPromo = result.discountAmount;
                            }
                            ctrl.calcPaymentFee();
                        });
                    } else {
                        ctrl.calcPaymentFee();
                        ctrl.promoSelect = false;
                    }
                } else {
                    $rootScope.$broadcast("update-promo-remove-success", null);
                    ctrl.promoSelect = false;
                    ctrl.calcPaymentFee();

                }
            } else {
                ctrl.paymentModel.paymentOption = ctrl.selectTypePayment;
                $rootScope.$broadcast("update-promo-remove-success", null);
                ctrl.tempPromo = 0;
                ctrl.promoSelect = false;
                ctrl.calcPaymentFee();

                if (ctrl.bookingModel.bookingInfo.promotionID > 0 && ctrl.selectTypePayment.charAt(0) !== '_') {
                    ctrl.calcPaymentFee();
                }
            }
            if (ctrl.bookingModel.bookingInfo.promotionID > 0 && ctrl.selectTypePayment.charAt(0) === '_') {
                ctrl.tempPromo = 0;
                ctrl.tempPromo2 = 0;
                ctrl.calcPaymentFee();
            }
            $rootScope.$broadcast("event-payment-voucher-reset", null);
            ctrl.calcPaymentFee();
        };

        //---
        ctrl.selectCheckbox = function(promotionId) {
            ctrl.selectTypePayment = null;
            ctrl.previousSelectTypePaymentVoucherAir = ctrl.selectTypePaymentAir;
            if (ctrl.bookingModel.bookingInfo.promotionID > 0) {
                Flight.voidPromo(ctrl.bookingModel.bookingNumber, ctrl.bookingModel.bookingInfo.promotionID[0]).then(function(result) {});
            }
            //+++ reset temp_voucher
            ctrl.tempVoucher = null;
            ctrl.tempPromo2 = 0;
            ctrl.paymentModel.promotions = null;
            //set default payment to show paymentfee and discounAmount
            ctrl.paymentModel.paymentOption = 'CREDIT';
            ctrl.selectTypePayment = 'CREDIT';
            ctrl.promoSelect = true;
            $rootScope.$broadcast("select-payment-promo-succeeded-2", promotionId);
            if (ctrl.bookingModel && ctrl.bookingModel.bookingInfo && ctrl.bookingModel.bookingInfo.displayPriceInfo) {
                Flight.gPaymentPromoDiscount(ctrl.bookingModel.bookingNumber, ctrl.bookingModel.bookingCode, promotionId, 'AIRLINES_CODE').then(function(result) {
                    if (result.discountAmount) {
                        // ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount = result.discountAmount;
                        ctrl.updateDiscountAmount(result.discountAmount);
                        ctrl.tempPromo2 = result.discountAmount;
                    }
                    ctrl.calcPaymentFee();
                });
            } else {
                $rootScope.$broadcast("update-promo-remove-success", null);
                ctrl.promoSelect = false;
                ctrl.calcPaymentFee();
            }
        };

        function deletePromoAir() {
            if (ctrl.bookingModel.bookingInfo.promotionID > 0) {
                Flight.voidPromo(ctrl.bookingModel.bookingNumber, ctrl.bookingModel.bookingInfo.promotionID[0]).then(function(result) {});
            }
            ctrl.paymentModel.promotions = null;
            ctrl.promotionAirName = null;
            ctrl.paymentModel.paymentOption = ctrl.selectTypePayment;
            $rootScope.$broadcast("update-promo-remove-success", null);
            ctrl.tempPromo2 = 0;
            ctrl.tempPromo = 0;
            ctrl.calcPaymentFee();
            ctrl.promoSelect = false;
        }
        //---
        $scope.$on('select-payment-promo-succeeded-2', function(event, data) {

            console.log(data);
            angular.forEach(ctrl.paymentModel.paymentPromo, function(item, value) {
                if (item.id == data) {
                    ctrl.paymentModel.promotions = item;
                    $rootScope.$broadcast("update-promo-select-success", item.discountValueType);
                }
            });
        });
        /**
         * Handle redeem voucher
         */
        $scope.$on('event-payment-voucher-redeem-succeeded', function(event, data) {
            if (data) {
                ctrl.tempVoucher = data;
            } else {
                ctrl.tempVoucher = {};
            }
            ctrl.calcPaymentFee();
        });

        //+++ calculate payment fee
        ctrl.chooseContact = function(item) {
            //$log.log("item = " + JSON.stringify(item));
            $log.log("item = " + item);

            // reset customer
            item.ciGender = undefined;
            item.id = undefined;
            ctrl.paymentModel.cardModel.firstName = undefined;
            ctrl.paymentModel.cardModel.lastName = undefined;
            ctrl.paymentModel.cardModel.email = undefined;
            ctrl.paymentModel.cardModel.phoneNumber = undefined;
            item.postcode = undefined;

            if (item.selectedTraveller) {
                // Contact must be ADULT so type = ADT
                if (item.selectedTraveller.gender == 'MALE' || item.selectedTraveller.gender == 'FEMALE') {
                    item.ciGender = item.selectedTraveller.gender;
                }

                item.id = item.selectedTraveller.id;
                ctrl.paymentModel.cardModel.firstName = item.selectedTraveller.surName ? item.selectedTraveller.surName.toUpperCase() : '';
                ctrl.paymentModel.cardModel.lastName = item.selectedTraveller.firstName ? item.selectedTraveller.firstName.toUpperCase() : '';
                ctrl.paymentModel.cardModel.email = item.selectedTraveller.email;
                ctrl.paymentModel.cardModel.phoneNumber = item.selectedTraveller.phoneNumber1;
                if (!ctrl.bookingModel.tPCPhoneCode) {
                    ctrl.bookingModel.tPCPhoneCode = '84';
                }
            } else {
                item.id = null;
            }
            $log.log(item)
        };

        function getHotel() {
            Flight.gPaymentPromotion('HOTEL', "PUBLISHING", 0, 20).then(function(result) {
                var index = result.content.findIndex(function(s) {
                    return s.id == +ctrl.bookingModel.bookingInfo.promotionID[0];
                });
                if (index == -1) {
                    Flight.voidPromo(ctrl.bookingModel.bookingNumber, ctrl.bookingModel.bookingInfo.promotionID[0]).then(function(result) {
                        ctrl.calcPaymentFee();
                        ctrl.promotionAirName = null;
                    });
                }
                if (ctrl.paymentModel.paymentPromo[index].bankCode !== null && ctrl.paymentModel.paymentPromo[index].promotionType === 'CREDIT_CARD') {
                    ctrl.selectTypePayment = "_" + ctrl.bookingModel.bookingInfo.promotionID[0];
                    ctrl.tempPromo = ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount;
                    if (ctrl.selectTypePayment.charAt(0) === '_') {
                        ctrl.paymentModel.paymentOption = 'CREDIT';
                    }
                }
                ctrl.calcPaymentFee();
            });
        }

        function getAir() {
            Flight.gPaymentPromotion('AIR', "PUBLISHING", 0, 20).then(function(result) {
                if (ctrl.bookingModel.bookingInfo.promotionID.length > 0) {
                    ctrl.discountType = PROMO_TYPE;
                }
                var index = result.content.findIndex(function(s) {
                    return s.id == +ctrl.bookingModel.bookingInfo.promotionID[0];
                });
                if (index == -1) {
                    Flight.voidPromo(ctrl.bookingModel.bookingNumber, ctrl.bookingModel.bookingInfo.promotionID[0]).then(function(result) {
                        ctrl.calcPaymentFee();
                        ctrl.promotionAirName = null;
                    });
                } else {
                    if (ctrl.paymentModel.paymentPromo[index].bankCode !== null && ctrl.paymentModel.paymentPromo[index].promotionType === 'CREDIT_CARD') {
                        ctrl.selectTypePayment = "_" + ctrl.bookingModel.bookingInfo.promotionID[0];
                        ctrl.tempPromo = ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount;
                        if (ctrl.selectTypePayment.charAt(0) === '_') {
                            ctrl.paymentModel.paymentOption = 'CREDIT';
                        }
                    } else {
                        if (ctrl.paymentModel.paymentPromo[index].productType[0] === 'AIR' && (!!ctrl.paymentModel.paymentPromo[index].bankCode && ctrl.paymentModel.paymentPromo[index].bankCode.length === 0)) {
                            ctrl.promotionAirName = ctrl.paymentModel.paymentPromo[index].description;
                            ctrl.disAmount = ctrl.paymentModel.paymentPromo[index].discountAmount;
                            ctrl.selectTypePayment = ctrl.bookingModel.bookingInfo.paymentType;
                            ctrl.paymentModel.paymentOption = ctrl.bookingModel.bookingInfo.paymentType;
                            ctrl.tempPromo2 = ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount;
                            if (ctrl.paymentModel.paymentPromo[index].discountValueType == 'PERCENT') {
                                ctrl.paymentModel.paymentPromo[index].discountValueType == '%';
                                ctrl.discountvalue = ctrl.paymentModel.paymentPromo[index].discountValueType;
                            } else {
                                ctrl.paymentModel.paymentPromo[index].discountValueType == 'VNĐ';
                                ctrl.discountvalue = ctrl.paymentModel.paymentPromo[index].discountValueType;
                            }
                        }
                    }

                }
                if ('OTHER' !== ctrl.paymentModel.paymentOption) {
                    ctrl.calcPaymentFee();
                }
            });
        }

        this.$onChanges = function(changes) {
            if (changes.bookingModelOneWay.currentValue.bookingInfo.discountVoucherCode !== null) {
                ctrl.selectTypePayment = changes.bookingModelOneWay.currentValue.bookingInfo.paymentType;
            }
            if (changes.bookingModelOneWay.currentValue.bookingInfo.promotionID && changes.bookingModelOneWay.currentValue.bookingInfo.promotionID > 0) {
                if (changes.bookingModelOneWay.currentValue.bookingInfo.supplierType === "HOTEL") {
                    ctrl.getHotel();
                }
                if (changes.bookingModelOneWay.currentValue.bookingInfo.supplierType === "AIR") {
                    ctrl.getAir();
                }
            }
            ctrl.paymentModel = {
                cardModel: {
                    firstName: changes.bookingModelOneWay.currentValue.travelerInfo.contactInfos[0].firstName,
                    lastName: changes.bookingModelOneWay.currentValue.travelerInfo.contactInfos[0].lastName,
                    address: '194 Nguyễn Thị Minh Khai, Phường 6, Quận 3',
                    city: 'HCMC',
                    state: 'HCMC',
                    phoneNumber: changes.bookingModelOneWay.currentValue.travelerInfo.contactInfos[0].phoneNumber1,
                    email: changes.bookingModelOneWay.currentValue.travelerInfo.contactInfos[0].email,
                    postalCode: (changes.bookingModelOneWay.currentValue.travelerInfo.contactInfos[0].postCode) ? (changes.bookingModelOneWay.currentValue.travelerInfo.contactInfos[0].postCode) : '700000',
                },
            };
            // $log.log(changes);
            // internal = JSON.parse(JSON.stringify(currentvalue));
        };

        ctrl.validatePaymentPromo = function(event, id) {
            ctrl.wrongPromo = false;
            var myDataPromise = Flight.validatePromo(ctrl.bookingModel, id);
            myDataPromise.then(function(result) {
                var voucher = result;
                ctrl.bookingModel.voucher = voucher;

                $log.log('voucher.voucherValid = ' + voucher.voucherValid);
                $log.log(voucher);
                //send data to process data
                // $rootScope.$broadcast("event-payment-voucher-redeem-succeeded", voucher);

                if (!voucher.voucherValid) {
                    ctrl.wrongPromo = true;
                }

            }, function error(result) {
                ctrl.bookingModel.voucher = {};
                $log.log(result);

                ctrl.wrongPromo = true;
            });
        };
        $scope.$on('event-payment-promo-redeem-invalid', function(event, item) {
            ctrl.wrongPromo = true;
        });

        $scope.$on('select-payment-promo-succeeded', function(event, data) {
            angular.forEach(ctrl.paymentModel.paymentPromo, function(item, value) {
                if (item.id == data) {
                    ctrl.paymentModel.promotions = item;
                    $rootScope.$broadcast("update-promo-select-success", item.discountValueType);
                }
            });
        });
        $scope.$on('remove-payment-promo-succeeded', function(event, data) {
            if (data) {
                ctrl.tempPromo = data;
            } else {
                ctrl.tempPromo = 0;
            }
            ctrl.calcPaymentFee();
        });
        $scope.$on('remove-payment-promo-succeeded-2', function(event, data) {
            if (data) {
                ctrl.tempPromo2 = data;
            } else {
                ctrl.tempPromo2 = 0;
            }
            ctrl.calcPaymentFee();
        });
        ctrl.calcPaymentFee = function() {
            if (ctrl.bookingModel && ctrl.bookingModel.bookingInfo && ctrl.bookingModel.bookingInfo.displayPriceInfo) {
                ctrl.bookingModel.bookingInfo.displayPriceInfo.paymentFee = 0;
                ctrl.updateDiscountAmount(0);
                if ('CREDIT' === ctrl.paymentModel.paymentOption || 'ATM_DEBIT' === ctrl.paymentModel.paymentOption || 'VNPAYQR' === ctrl.paymentModel.paymentOption || 'VIETTELPAY' === ctrl.paymentModel.paymentOption || 'MOMO' === ctrl.paymentModel.paymentOption) {
                    //+++ loading all payment_fee option
                    var tempDiscountAmount = 0;
                    if (ctrl.discountType === VOUCHER_TYPE) {
                        tempDiscountAmount = ctrl.tempVoucher.discountAmount;
                        ctrl.updateDiscountAmount(ctrl.tempVoucher.discountAmount);
                    }
                    if (ctrl.discountType === PROMO_TYPE) {

                        if (ctrl.tempPromo != 0) {
                            ctrl.tempPromo2 = 0;
                            ctrl.tempVoucher = null;
                            tempDiscountAmount = ctrl.tempPromo;
                            ctrl.updateDiscountAmount(ctrl.tempPromo);
                        } else if (ctrl.tempPromo2 != 0) {
                            ctrl.tempPromo = 0;
                            ctrl.tempVoucher = null;
                            tempDiscountAmount = ctrl.tempPromo2;
                            ctrl.updateDiscountAmount(ctrl.tempPromo2);
                        }
                    }
                    Flight.gPaymentFeeOpt(ctrl.bookingModel.bookingNumber, ctrl.paymentModel.paymentOption, tempDiscountAmount, ctrl.bookingModel.bookingInfo.totalFare, ctrl.bookingModel.bookingInfo.totalSsrValue).then(function(result) {
                        var paymentFeeOptions = result.peymentFees;


                        angular.forEach(paymentFeeOptions, function(item, value) {
                            if (item.paymentType == ctrl.paymentModel.paymentOption) {

                                ctrl.bookingModel.bookingInfo.displayPriceInfo.paymentFee = item.amount;
                            }
                        });
                    });
                }
            }
        };

        function updateDiscountAmount(amount) {
            $timeout(function() {
                ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount = amount;
                // $rootScope.$emit('booking-model-changed', ctrl.bookingModel);
            }, 0);
        }
        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };
        ctrl.open = function(url) {
            ctrl.tempPromo = 0;
            // ctrl.paymentModel.paymentOption  = '';
            if (modalInstance !== null) return;
            ctrl.openingPopup = true;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/components/booking/flight-booking-promotion-air.html',
                controller: 'flightBookingPromotionAirController',
                controllerAs: '$ctrl',
                windowClass: 'modal-window-extension',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    bookingInfo: function() {
                        return ctrl.bookingModel.bookingInfo;
                    },
                    paymentModel: function() {
                        return ctrl.paymentModel;
                    },
                    bookingModel: function() {
                        return ctrl.bookingModel;
                    },
                    previousSelectedPromoId: function() {
                        return ctrl.selectTypePayment;
                    },
                    voucher: function() {
                        return ctrl.tempVoucher;
                    }
                }
            });
            modalInstance.result.then(function(result) {
                ctrl.discountType = PROMO_TYPE;
                ctrl.selectTypePayment = result.id;
                ctrl.selectTypePaymentAir = result.id;
                ctrl.promotionAirName = result.description;
                ctrl.previousPromotionAirName = ctrl.promotionAirName;
                ctrl.disAmount = result.discountAmount;
                ctrl.discountvalue = result.discountValueType;
                ctrl.DatapromoAir = result;
                ctrl.promotionTypeAir = result.promotionType;
                ctrl.selectCheckbox(result.id);
                ctrl.calcPaymentFee();
                ctrl.openingPopup = false;
                resetModal();
                // if(result ===){
                //     ctrl.selectTypePayment = null;

                // }
            });
            resetModal();
        };

        ctrl.classValid = "";
        ctrl.expireMonthYear = function() {
            var filter = new RegExp("(0[123456789]|10|11|12)([/])(1[89]|2[0123456789])");
            if (filter.test(ctrl.monthYear)) {
                ctrl.dateCardClass = '';
                var parseDate = ctrl.monthYear.split('/');
                ctrl.paymentModel.cardModel.expireMonth = parseInt(parseDate[0]);
                ctrl.paymentModel.cardModel.expireYear = parseInt(parseDate[1]);
            } else {
                ctrl.dateCardClass = 'errorMessageDate';
                ctrl.paymentModel.cardModel.expireMonth = '';
                ctrl.paymentModel.cardModel.expireYear = '';
            }
        };

    }
    var gtdBookingPayment = {
        templateUrl: 'app/components/booking/booking-payment.html',
        controller: gtdBookingPaymentController,
        bindings: {
            paymentModel: '=',
            bookingModel: '=',
            bookingModelOneWay: '<'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdBookingPayment', gtdBookingPayment);
})();

(function() {
    'use strict';

    gtdBookingImportantInfoController.$inject = ['$translate'];

    function gtdBookingImportantInfoController($translate) {
        var ctrl = this;
        ctrl.redirectToTerm = redirectToTerm;
        ctrl.termCheckedChanged = termCheckedChanged;
        ctrl.checkedTerm = false;

        ctrl.changeHook(ctrl.checkedTerm);

        function redirectToTerm() {
            var lang = $translate.use();
            var win = window.open('/#/terms', '_blank');
            win.focus();
        }

        function termCheckedChanged() {
            ctrl.changeHook(ctrl.checkedTerm);
        }
    }


    var gtdBookingImportantInfo = {
        templateUrl: 'app/components/booking/booking-important-info.html',
        controller: gtdBookingImportantInfoController,
        bindings: {
            selectedHotelProduct: '=',
            changeHook: '=',
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdBookingImportantInfo', gtdBookingImportantInfo);

})();

(function() {
    'use strict';

    gtdBookingHotelInfoController.$inject = ['$log', '$scope', 'MetaData', 'Flight', 'LoginService', 'Principal'];

    function gtdBookingHotelInfoController($log, $scope, MetaData, Flight, LoginService, Principal) {
        var ctrl = this;

        ctrl.isAuthenticated = Principal.isAuthenticated;

        ctrl.openLogin = function() {
            LoginService.open();
        };
    }

    var gtdBookingHotelInfo = {
        templateUrl: 'app/components/booking/booking-hotel-info.html',
        controller: gtdBookingHotelInfoController,
        bindings: {
            bookingModel: '=',
            selectedHotel: '=',
            selectedHotelProduct: '=',
            selectedHotelRoom: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdBookingHotelInfo', gtdBookingHotelInfo);

})();

(function() {
    'use strict';

    gtdBookingFlightInfoDetailsController.$inject = ['$log', '$scope', 'MetaData', 'Flight', 'LoginService', 'Principal'];

    function gtdBookingFlightInfoDetailsController($log, $scope, MetaData, Flight, LoginService, Principal) {
        var ctrl = this;

        ctrl.departFlightModel.expand = false;
        ctrl.returnFlightModel.expand = false;
        // ctrl.departFlightModel.popId = 'myPopoverTemplate.html';
        // alert(ctrl.paymentModel.paymentOption);

        ctrl.isAuthenticated = Principal.isAuthenticated;

        ctrl.openLogin = function() {
            LoginService.open();
        };
    }

    var gtdBookingFlightInfoDetails = {
        templateUrl: 'app/components/booking/booking-flight-info-details.html',
        controller: gtdBookingFlightInfoDetailsController,
        bindings: {
            bookingModel: '=',
            departFlightModel: '=',
            returnFlightModel: '='
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdBookingFlightInfoDetails', gtdBookingFlightInfoDetails);

})();

(function() {
    'use strict';

    gtdBookingFlightInfoController.$inject = ['$log', '$state', '$scope', '$timeout', '$rootScope', 'DataService', 'MetaData', 'Flight', 'LoginService', 'Principal', 'Auth', 'IBE_KEYS', 'Base64', 'ValidationUtils'];

    function gtdBookingFlightInfoController($log, $state, $scope, $timeout, $rootScope, DataService, MetaData, Flight, LoginService, Principal, Auth, IBE_KEYS, Base64, ValidationUtils) {
        var ctrl = this;

        ctrl.departFlightModel.expand = false;
        ctrl.returnFlightModel.expand = false;

        $scope.ibeKeys = IBE_KEYS;

        ctrl.searchOptions = DataService.getSearchOption();

        ctrl.isAuthenticated = Principal.isAuthenticated;

        Principal.identity().then(function(user) {
            var data = {
                // other fields
                user: user
            };
            ctrl.identity = user;
            // do something with data only inside this inner function
            //$log.log("ctrl.identity = " + JSON.stringify(user));
            $log.log("ctrl.identity = " + user);
        });

        ctrl.openLogin = function() {
            LoginService.open();
        };


        ctrl.logout = function() {
            Auth.logout();
        };

        ctrl.changeFlight = function(step) {
            var searchOptions = DataService.getSearchOption();
            var departSearchOptions = DataService.getDepartSearchOption();

            // TODO: remove later, current workaround for IE, force user to research
            $log.log('isIE = ' + ValidationUtils.isIE());
            if (ValidationUtils.isIE()) {
                searchOptions = {};
            }

            var searchResult;

            $log.log(searchResult);

            // if (searchOptions.dtype == 'domestic') {
            if (step == 1) {
                searchOptions.returnDomestic = false;
                searchResult = DataService.getDepartSearchResult();
            } else if (step == 2) {
                if (searchOptions.dtype != 'international') {
                    searchOptions.returnDomestic = true;
                }

                searchResult = DataService.getReturnSearchResult();
            }
            // } else {
            //     // searchResult = DataService.getSearchResult();
            //     searchResult = DataService.getDepartSearchResult();
            //     // alert(JSON.stringify(searchResult));
            // }

            searchOptions.selectStep = step;
            // search option is now return option -> for domestic need to set searchId back to departSearchId if change depart flight
            if (searchOptions.dtype == 'domestic' && searchOptions.selectStep == 1 && searchOptions.searchType == 'roundtrip') {
                searchOptions.searchId = departSearchOptions.searchId;
            }

            // calculate searchCompleted
            var searchCompleted;
            if (searchResult.groupPricedItineraries) {
                searchCompleted = true;
            } else {
                searchCompleted = false;
            }

            // TODO: remove later, current workaround for IE, force user to research
            $log.log('isIE = ' + ValidationUtils.isIE());
            if (ValidationUtils.isIE()) {
                searchCompleted = false;
                searchResult = {};
            }

            // $state.go('flight-search', {"searchOptions": searchOptions, "searchResult": searchResult});
            $state.go('flight-search', {
                "searchOptions": searchOptions,
                "searchResult": searchResult,
                "searchCompleted": searchCompleted,
                "params": Base64.encodeJson(searchOptions)
            });


            $timeout(function() {
                // alert("BROADCAST");
                $rootScope.$broadcast("gtd-refresh-adv-search-result", null);
            }, 5000);
        };
    }

    var gtdBookingFlightInfo = {
        templateUrl: 'app/components/booking/booking-flight-info.html',
        controller: gtdBookingFlightInfoController,
        bindings: {
            bookingModel: '=',
            departFlightModel: '=',
            returnFlightModel: '=',
            showChangeFlight: '@?',
            notShowLoginSection: '@?'
        }
    };

    angular
        .module('B2B2CGatewayApp')
        .component('gtdBookingFlightInfo', gtdBookingFlightInfo);

})();

(function() {
    'use strict';

    var jhiAlertError = {
        template: '<div class="alerts" ng-cloak="" role="alert">' +
            '<div ng-repeat="alert in $ctrl.alerts" ng-class="[alert.position, {\'toast\': alert.toast}]">' +
            '<uib-alert ng-cloak="" type="{{alert.type}}" close="alert.close($ctrl.alerts)"><pre>{{ alert.msg }}</pre></uib-alert>' +
            '</div>' +
            '</div>',
        controller: jhiAlertErrorController
    };

    angular
        .module('B2B2CGatewayApp')
        .component('jhiAlertError', jhiAlertError);

    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate', '$log'];

    function jhiAlertErrorController($scope, AlertService, $rootScope, $translate, $log) {
        var vm = this;

        vm.alerts = [];

        function addErrorAlert(message, key, data) {
            key = key ? key : message;
            vm.alerts.push(
                AlertService.add({
                        type: 'danger',
                        msg: key,
                        params: data,
                        timeout: 5000,
                        toast: AlertService.isToast(),
                        scoped: true
                    },
                    vm.alerts
                )
            );
        }

        var cleanHttpErrorListener = $rootScope.$on('B2B2CGatewayApp.httpError', function(event, httpResponse) {
            var i;
            event.stopPropagation();

            $log.info("--->>> INFO: B2B2CGatewayApp.httpError: " + httpResponse.status);

            switch (httpResponse.status) {
                // connection refused, server not reachable
                case 0:
                    addErrorAlert('Server not reachable', 'error.server.not.reachable');
                    break;

                case 400:
                    var headers = Object.keys(httpResponse.headers()).filter(function(header) {
                        return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;
                    }).sort();
                    var errorHeader = httpResponse.headers(headers[0]);
                    var entityKey = httpResponse.headers(headers[1]);
                    if (angular.isString(errorHeader)) {
                        var entityName = $translate.instant('global.menu.entities.' + entityKey);
                        addErrorAlert(errorHeader, errorHeader, {
                            entityName: entityName
                        });
                    } else if (httpResponse.data && httpResponse.data.fieldErrors) {
                        for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {
                            var fieldError = httpResponse.data.fieldErrors[i];
                            // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it
                            var convertedField = fieldError.field.replace(/\[\d*\]/g, '[]');
                            var fieldName = $translate.instant('B2B2CGatewayApp.' + fieldError.objectName + '.' + convertedField);
                            addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {
                                fieldName: fieldName
                            });
                        }
                    } else if (httpResponse.data && httpResponse.data.message) {
                        addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);
                    } else {
                        addErrorAlert(httpResponse.data);
                    }
                    break;

                case 404:
                    addErrorAlert('Not found', 'error.url.not.found');
                    break;

                default:
                    if (httpResponse.data && httpResponse.data.message) {
                        addErrorAlert(httpResponse.data.message);
                    } else {
                        addErrorAlert(angular.toJson(httpResponse));
                    }
            }
        });

        $scope.$on('$destroy', function() {
            if (angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null) {
                cleanHttpErrorListener();
                vm.alerts = [];
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .provider('AlertService', AlertService);

    function AlertService() {
        this.toast = false;
        /*jshint validthis: true */
        this.$get = getService;

        this.showAsToast = function(isToast) {
            this.toast = isToast;
        };

        getService.$inject = ['$timeout', '$sce', '$translate'];

        function getService($timeout, $sce, $translate) {
            var toast = this.toast,
                alertId = 0, // unique id for each alert. Starts from 0.
                alerts = [],
                timeout = 5000; // default timeout

            return {
                factory: factory,
                isToast: isToast,
                add: addAlert,
                closeAlert: closeAlert,
                closeAlertByIndex: closeAlertByIndex,
                clear: clear,
                get: get,
                success: success,
                error: error,
                info: info,
                warning: warning
            };

            function isToast() {
                return toast;
            }

            function clear() {
                alerts = [];
            }

            function get() {
                return alerts;
            }

            function success(msg, params, position) {
                return this.add({
                    type: 'success',
                    msg: msg,
                    params: params,
                    timeout: timeout,
                    toast: toast,
                    position: position
                });
            }

            function error(msg, params, position) {
                return this.add({
                    type: 'danger',
                    msg: msg,
                    params: params,
                    timeout: timeout,
                    toast: toast,
                    position: position
                });
            }

            function warning(msg, params, position) {
                return this.add({
                    type: 'warning',
                    msg: msg,
                    params: params,
                    timeout: timeout,
                    toast: toast,
                    position: position
                });
            }

            function info(msg, params, position) {
                return this.add({
                    type: 'info',
                    msg: msg,
                    params: params,
                    timeout: timeout,
                    toast: toast,
                    position: position
                });
            }

            function factory(alertOptions) {
                var alert = {
                    type: alertOptions.type,
                    msg: $sce.trustAsHtml(alertOptions.msg),
                    id: alertOptions.alertId,
                    timeout: alertOptions.timeout,
                    toast: alertOptions.toast,
                    position: alertOptions.position ? alertOptions.position : 'top right',
                    scoped: alertOptions.scoped,
                    close: function(alerts) {
                        return closeAlert(this.id, alerts);
                    }
                };
                if (!alert.scoped) {
                    alerts.push(alert);
                }
                return alert;
            }

            function addAlert(alertOptions, extAlerts) {
                alertOptions.alertId = alertId++;
                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);
                var that = this;
                var alert = this.factory(alertOptions);
                if (alertOptions.timeout && alertOptions.timeout > 0) {
                    $timeout(function() {
                        that.closeAlert(alertOptions.alertId, extAlerts);
                    }, alertOptions.timeout);
                }
                return alert;
            }

            function closeAlert(id, extAlerts) {
                var thisAlerts = extAlerts ? extAlerts : alerts;
                return closeAlertByIndex(thisAlerts.map(function(e) {
                    return e.id;
                }).indexOf(id), thisAlerts);
            }

            function closeAlertByIndex(index, thisAlerts) {
                return thisAlerts.splice(index, 1);
            }
        }
    }
})();

(function() {
    'use strict';

    var jhiAlert = {
        template: '<div class="alerts" ng-cloak="" role="alert">' +
            '<div ng-repeat="alert in $ctrl.alerts" ng-class="[alert.position, {\'toast\': alert.toast}]">' +
            '<uib-alert ng-cloak="" type="{{alert.type}}" close="alert.close($ctrl.alerts)"><pre ng-bind-html="alert.msg"></pre></uib-alert>' +
            '</div>' +
            '</div>',
        controller: jhiAlertController
    };

    angular
        .module('B2B2CGatewayApp')
        .component('jhiAlert', jhiAlert);

    jhiAlertController.$inject = ['$scope', 'AlertService'];

    function jhiAlertController($scope, AlertService) {
        var vm = this;

        vm.alerts = AlertService.get();
        $scope.$on('$destroy', function() {
            vm.alerts = [];
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('notificationInterceptor', notificationInterceptor);

    notificationInterceptor.$inject = ['$q', 'AlertService'];

    function notificationInterceptor($q, AlertService) {
        var service = {
            response: response
        };

        return service;

        function response(response) {
            var headers = Object.keys(response.headers()).filter(function(header) {
                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;
            }).sort();
            var alertKey = response.headers(headers[0]);
            if (angular.isString(alertKey)) {
                AlertService.success(alertKey, {
                    param: response.headers(headers[1])
                });
            }
            return response;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('errorHandlerInterceptor', errorHandlerInterceptor);

    errorHandlerInterceptor.$inject = ['$q', '$rootScope', '$log'];

    function errorHandlerInterceptor($q, $rootScope, $log) {
        var service = {
            responseError: responseError
        };

        return service;

        function responseError(response) {
            /* https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
            500 Internal Server Error
            501 Not Implemented
            502 Bad Gateway
            503 Service Unavailable
             */
            $log.info("+++>>> errorHandlerInterceptor - response.status: " + response.status);
            if (response.status < 0 || response.status === 500 || response.status === 501 || response.status === 502 || response.status === 503) {
                $rootScope.$emit('B2B2CGatewayApp.http5xxError', response);
            } else {
                if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0)))) {
                    $rootScope.$emit('B2B2CGatewayApp.httpError', response);
                }
            }

            return $q.reject(response);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('authExpiredInterceptor', authExpiredInterceptor);

    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];

    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {
        var service = {
            responseError: responseError
        };

        return service;

        function responseError(response) {
            if (response.status === 401 || response.status === 417) {
                delete $localStorage.authenticationToken;
                delete $sessionStorage.authenticationToken;
                var Principal = $injector.get('Principal');
                if (Principal.isAuthenticated()) {
                    var Auth = $injector.get('Auth');
                    Auth.authorize(true);
                }
            }
            return $q.reject(response);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('authInterceptor', authInterceptor);

    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];

    function authInterceptor($rootScope, $q, $location, $localStorage, $sessionStorage) {
        var service = {
            request: request
        };

        return service;

        function request(config) {
            //<>
            // Implement ignore intercept option.
            // GTD-269 [NewIBE_Mobile] Thông báo "Lỗi kết nối" sau khi đăng nhập và refresh lại trang
            if (config.noAuth) {
                return config;
            }
            //</>

            config.headers["x-gtd-agency"] = "GOTADI";
            config.headers["x-hotel-client-ip"] = localStorage.getItem("client-ip");

            /*jshint camelcase: false */
            config.headers = config.headers || {};
            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;
            if (token) {
                config.headers.Authorization = 'Bearer ' + token;
            }
            return config;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('translationHandler', translationHandler);

    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];

    function translationHandler($rootScope, $window, $state, $translate) {
        return {
            initialize: initialize,
            updateTitle: updateTitle
        };

        function initialize() {
            // if the current translation changes, update the window title
            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {
                updateTitle();
            });

            $rootScope.$on('$destroy', function() {
                if (angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null) {
                    translateChangeSuccess();
                }
            });
        }


        // update the window title using params in the following
        // precedence
        // 1. titleKey parameter
        // 2. $state.$current.data.pageTitle (current state page title)
        // 3. 'global.title'
        function updateTitle(titleKey) {
            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {
                titleKey = $state.$current.data.pageTitle;
            }
            $translate(titleKey || 'global.title').then(function(title) {
                $window.document.title = title;
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('stateHandler', stateHandler);

    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage', '$translate', 'OtaLanguageService', 'translationHandler', '$window',
        'Auth', 'Principal', 'VERSION'
    ];

    function stateHandler($rootScope, $state, $sessionStorage, $translate, OtaLanguageService, translationHandler, $window,
        Auth, Principal, VERSION) {
        return {
            initialize: initialize
        };

        function initialize() {
            $rootScope.VERSION = VERSION;

            var stateChangeStart = $rootScope.$on('$stateChangeStart', function(event, toState, toStateParams, fromState) {
                $rootScope.toState = toState;
                $rootScope.toStateParams = toStateParams;
                $rootScope.fromState = fromState;

                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)
                if (toState.external) {
                    event.preventDefault();
                    $window.open(toState.url, '_self');
                }

                if (Principal.isIdentityResolved()) {
                    Auth.authorize();
                }

                // Update the language
                OtaLanguageService.getCurrent().then(function(language) {
                    $translate.use(language);
                });
            });

            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
                var titleKey = 'global.title';

                // Set the page title key to the one configured in state or use default one
                if (toState.data.pageTitle) {
                    titleKey = toState.data.pageTitle;
                }
                translationHandler.updateTitle(titleKey);
            });

            $rootScope.$on('$destroy', function() {
                if (angular.isDefined(stateChangeStart) && stateChangeStart !== null) {
                    stateChangeStart();
                }
                if (angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null) {
                    stateChangeSuccess();
                }
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(paginationConfig);

    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];

    function paginationConfig(uibPaginationConfig, paginationConstants) {
        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;
        uibPaginationConfig.maxSize = 5;
        uibPaginationConfig.boundaryLinks = true;
        uibPaginationConfig.firstText = '«';
        uibPaginationConfig.previousText = '‹';
        uibPaginationConfig.nextText = '›';
        uibPaginationConfig.lastText = '»';
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(pagerConfig);

    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];

    function pagerConfig(uibPagerConfig, paginationConstants) {
        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;
        uibPagerConfig.previousText = '«';
        uibPagerConfig.nextText = '»';
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('translationStorageProvider', translationStorageProvider);

    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];

    function translationStorageProvider($cookies, $log, LANGUAGES) {
        return {
            get: get,
            put: put
        };

        function get(name) {
            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {
                $log.info('Resetting invalid cookie language "' + $cookies.getObject(name) + '" to preferred language "vi"');
                $cookies.putObject(name, 'vi');
            }
            return $cookies.getObject(name);
        }

        function put(name, value) {
            $cookies.putObject(name, value);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(translationConfig);

    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider', 'BUILD_TIMESTAMP'];

    function translationConfig($translateProvider, tmhDynamicLocaleProvider, BUILD_TIMESTAMP) {
        // Initialize angular-translate
        $translateProvider.useLoader('$translatePartialLoader', {
            urlTemplate: 'i18n/{lang}/{part}.json' + (BUILD_TIMESTAMP ? '?build=' + BUILD_TIMESTAMP : '')
        });

        $translateProvider.preferredLanguage('vi');
        $translateProvider.useStorage('translationStorageProvider');
        $translateProvider.useSanitizeValueStrategy('escaped');
        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');

        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');
        tmhDynamicLocaleProvider.useCookieStorage();
        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(localStorageConfig);

    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];

    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {
        $localStorageProvider.setKeyPrefix('jhi-');
        $sessionStorageProvider.setKeyPrefix('jhi-');
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(httpConfig);

    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];

    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {
        //Cache everything except rest api requests
        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);

        $urlRouterProvider.otherwise('/');

        $httpProvider.interceptors.push('errorHandlerInterceptor');
        $httpProvider.interceptors.push('authExpiredInterceptor');
        $httpProvider.interceptors.push('authInterceptor');
        $httpProvider.interceptors.push('notificationInterceptor');
        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here

        $urlMatcherFactoryProvider.type('boolean', {
            name: 'boolean',
            decode: function(val) {
                return val === true || val === 'true';
            },
            encode: function(val) {
                return val ? 1 : 0;
            },
            equals: function(a, b) {
                return this.is(a) && a === b;
            },
            is: function(val) {
                return [true, false, 0, 1].indexOf(val) >= 0;
            },
            pattern: /bool|true|0|1/
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(compileServiceConfig);

    compileServiceConfig.$inject = ['$compileProvider', 'DEBUG_INFO_ENABLED'];

    function compileServiceConfig($compileProvider, DEBUG_INFO_ENABLED) {
        // disable debug data on prod profile to improve performance
        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);

        /*
        If you wish to debug an application with this information
        then you should open up a debug console in the browser
        then call this method directly in this console:

		angular.reloadWithDebugInfo();
		*/
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(alertServiceConfig);

    alertServiceConfig.$inject = ['AlertServiceProvider'];

    function alertServiceConfig(AlertServiceProvider) {
        // set below to true to make alerts look like toast
        AlertServiceProvider.showAsToast(true);
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];


    function stateConfig($stateProvider) {

        $stateProvider.state('default', {
            parent: 'app',
            url: '/',
            data: {
                authorities: [],
                pageTitle: 'GOTADI Template'
            },
            // templateUrl: 'app/home/home.html',
            // controller: 'HomeController',
            // controllerAs: 'vm'
            views: {
                'content@': {
                    templateUrl: 'app/home/home.html',
                    controller: 'HomeController',
                    controllerAs: 'vm'
                }
            },
            // templateUrl: 'app/home/home.html',
            // controller: 'HomeController',
            // controllerAs: 'vm',
            resolve: {
                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('home');
                    $translatePartialLoader.addPart('flight');
                    $translatePartialLoader.addPart('hotel');
                    return $translate.refresh();
                }]
            }
        });

        // $stateProvider.state('blank', {
        //     parent: 'app',
        //     url: '/',
        //     data: {
        //         authorities: [],
        //         pageTitle: 'BLANK PAGE TITLE'
        //     },
        //     // templateUrl: 'app/home/home.html',
        //     // controller: 'HomeController',
        //     // controllerAs: 'vm'
        //     views: {
        //         'content@': {
        //             templateUrl: 'app/blank/blank.html',
        //             controller: 'BlankController',
        //             controllerAs: 'vm'
        //         }
        //     },
        //     // templateUrl: 'app/home/home.html',
        //     // controller: 'HomeController',
        //     // controllerAs: 'vm',
        //     resolve: {
        //         mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {
        //             $translatePartialLoader.addPart('home');
        //             return $translate.refresh();
        //         }]
        //     }
        // });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('BlankController', BlankController);

    BlankController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];
    // HomeController.$inject = ['$scope', '$state'];

    // function HomeController ($scope, $state) {
    function BlankController($scope, Principal, LoginService, $state) {

        // $scope.$on('$viewContentLoaded', function() {
        //     // initialize core components
        //     App.initAjax();
        // });
        //
        // // set sidebar closed and body solid layout mode
        // $rootScope.settings.layout.pageContentWhite = true;
        // $rootScope.settings.layout.pageBodySolid = false;
        // $rootScope.settings.layout.pageSidebarClosed = false;

        var vm = this;

        vm.account = null;
        vm.isAuthenticated = null;
        vm.login = LoginService.open;
        vm.register = register;

        $scope.$on('authenticationSuccess', function() {
            getAccount();
        });

        getAccount();

        function getAccount() {
            Principal.identity().then(function(account) {
                vm.account = account;
                vm.isAuthenticated = Principal.isAuthenticated;
            });
        }

        function register() {
            $state.go('register');
        }
    }
})();

(function() {
    'use strict';
    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE
    angular
        .module('B2B2CGatewayApp')
        .constant('TEMPLATE_URL', {
            'VIETTEL': {
                'navbar': 'app/layouts/navbar/viettel_navbar.html',
                'footer': 'app/layouts/common/viettel_footer.html',
                'home': 'app/home/viettel_home.html',
                'flight_search': 'app/flights/search/viettel.flight.search.home.html',
                'hotel_search': 'app/hotels/search/viettel.hotel.search.home.html',
                'profile_booking': 'app/account/profile/booking/viettel.profile.booking.html'
            },
            'FASTGO': {
                'flight_search': 'app/flights/search/fastgo.flight.search.home.html',
                'navbar': 'app/layouts/navbar/fastgo_navbar.html',
                'hotel_search': 'app/hotels/search/fastgo.hotel.search.home.html',
                'footer': 'app/layouts/common/viettel_footer.html',
                'home': 'app/home/fastgo_home.html'
            },
            'TIKI': {
                'flight_search_adv': 'app/components/flight/tiki-flight-search-adv.html'
            },
            'LIENVIETBANK': {},
            'VTCPAY': {},
            'SMARTPAY': {},
            'LOOPBACK': {},
            'SENDO': {},
            'SEABANK': {},
            'TRUEMONEY': {},
            'DEFAULT': {
                'navbar': "app/layouts/navbar/navbar.html",
                'footer': 'app/layouts/common/footer.html',
                'home': 'app/home/home.html',
                'flight_search': 'app/flights/search/flight.search.home.html',
                'hotel_search': 'app/hotels/search/hotel.search.home.html',
                'flight_search_adv': 'app/components/flight/flight-search-adv.html',
                'flight_search_result': 'app/flights/search/flight.search.html',
                'profile_booking': 'app/account/profile/booking/profile.booking.html'
            }
        });
})();

(function() {
    'use strict';

    var B2B2CGatewayApp = angular
        .module('B2B2CGatewayApp');

    B2B2CGatewayApp.config(stateConfig);

    stateConfig.$inject = ['$stateProvider', '$urlRouterProvider', 'TEMPLATE_URL'];

    function templateNameByParams(TEMPLATE_URL, type) {
        var param = String(Cookies.get('merchant_code') || localStorage.getItem("merchant_code")).toUpperCase();
        if (!TEMPLATE_URL[param] || !TEMPLATE_URL[param][type])
            return TEMPLATE_URL['DEFAULT'][type];
        return TEMPLATE_URL[param][type];
    }

    function getParamsUrl(key) {
        var result = 'default';
        var url = window.location.href;
        var p = url.split('?')[1];
        if (!p) return result;
        var p2 = p.split('&');
        for (var i = 0; i < p2.length; i++) {
            var p3 = p2[i].split('=');
            if (key == p3[0]) {
                result = p3[1];
            }
        }
        return result;
    }

    ///GotadiApp.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

    function stateConfig($stateProvider, $urlRouterProvider, TEMPLATE_URL) {

        //$urlRouterProvider.otherwise("/home.html");

        $stateProvider.state('app', {
            abstract: true,
            views: {
                'navbar@': {
                    templateUrl: function() {
                        return templateNameByParams(TEMPLATE_URL, 'navbar');
                    },
                    controller: 'NavbarController',
                    controllerAs: 'vm'
                },

                'pagehead@': {
                    templateUrl: 'app/layouts/common/page-head.html'
                    // ,controller: 'NavbarController',
                    // controllerAs: 'vm'
                },

                'footer@': {
                    templateUrl: function() {
                        return templateNameByParams(TEMPLATE_URL, 'footer');
                    },
                    controller: 'FooterController',
                    controllerAs: 'vm'
                }
            },

            resolve: {
                authorize: ['Auth', '$rootScope',
                    function(Auth, $rootScope) {
                        //+++ populate B2B token
                        try {
                            if ($ibe.hasTokenKey()) {
                                //logout to clean existing session
                                Auth.logout();

                                //login with new authentication
                                Auth.loginWithToken($ibe.getTokenKey(), false).then(function() {
                                    Auth.authorize(true).then(function() {
                                        console.log("App.State: $broadcast('authenticationSuccess')");
                                        $rootScope.$broadcast('authenticationSuccess');
                                    });
                                });
                            }
                        } catch (err) {
                            console.log("uth.loginWithToken() -- Error: " + err);
                        }
                        //---
                        // return Auth.authorize().then(function () {
                        //     console.log("app.state -- load app.state SUCCESS... ");
                        //     $rootScope.$broadcast('loadAppStateSuccess');
                        // });
                    }
                ],
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('global');
                    $translatePartialLoader.addPart('lookup');
                }]
            }
        })

        // // Dashboard
        // .state('dashboard', {
        //     url: "/dashboard",
        //     //templateUrl: "app/layouts/views/dashboard.html",
        //     //templateUrl: "app/home/home.html",
        //     data: {pageTitle: 'GOTADI Template'},
        //     //controller: "DashboardController",
        //     // controller: "HomeController",
        //     views: {
        //         'content@': {
        //             templateUrl: "app/layouts/views/dashboard.html",
        //             controller: "DashboardController",
        //             controllerAs: 'vm'
        //         }
        //     },
        //     resolve: {
        //         deps: ['$ocLazyLoad', function($ocLazyLoad) {
        //             return $ocLazyLoad.load({
        //                 name: 'GotadiApp',
        //                 insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
        //                 files: [
        //                     '../bower_components/gtd-theme/assets/global/plugins/morris/morris.css',
        //                     '../bower_components/gtd-theme/assets/global/plugins/morris/morris.min.js',
        //                     '../bower_components/gtd-theme/assets/global/plugins/morris/raphael-min.js',
        //                     '../bower_components/gtd-theme/assets/global/plugins/jquery.sparkline.min.js',
        //
        //                     '../bower_components/gtd-theme/assets/pages/scripts/dashboard.min.js'
        //                     // ,'app/js/controllers/DashboardController.js',
        //                 ]
        //             });
        //         }]
        //     }
        // })

        ;
    }

    /* Setup global settings */
    // B2B2CGatewayApp.factory('settings', ['$rootScope', function($rootScope) {
    //     // supported languages
    //     var settings = {
    //         layout: {
    //             pageSidebarClosed: false, // sidebar menu state
    //             pageContentWhite: true, // set page content layout
    //             pageBodySolid: false, // solid body color state
    //             pageAutoScrollOnLoad: 1000 // auto scroll to top on page load
    //         },
    //         assetsPath: '../assets',
    //         globalPath: '../assets/global',
    //         layoutPath: '../assets/layouts/layout3',
    //     };
    //
    //     $rootScope.settings = settings;
    //
    //     return settings;
    // }]);


})();

/** DEMO **/
// angular.module('B2B2CGatewayApp').controller('DashboardController', function($rootScope, $scope, $http, $timeout) {
//     $scope.$on('$viewContentLoaded', function() {
//         // initialize core components
//         App.initAjax();
//     });
//
//     // set sidebar closed and body solid layout mode
//     $rootScope.settings.layout.pageContentWhite = true;
//     $rootScope.settings.layout.pageBodySolid = false;
//     $rootScope.settings.layout.pageSidebarClosed = false;
// });

(function() {
    'use strict';
    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE
    angular
        .module('B2B2CGatewayApp')
        .constant('VERSION', "0.0.1-SNAPSHOT")
        .constant('DEBUG_INFO_ENABLED', false)
        .constant('BUILD_TIMESTAMP', 1631601569440)
        .constant('API_URL', "https://api.gotadi.com/vendor")
        .constant('API_URL_CALLBACK', "https://api.gotadi.com");
})();

var $ibe = {};

/**
 *
 * @type {string}
 * @private
 */
$ibe._$token_key = null;

/**
 * keep sale_channel information
 * B2C or B2B2C
 * @type {string}
 * @private
 */
$ibe._$sale_channel = "B2C";

/**
 * Keep b2b link
 * @type {string}
 */
$ibe._$b2b_app_url = null;

/**
 *
 * @param tokenKey
 * @returns {boolean}
 */
$ibe.setTokenKey = function(tokenKey) {
    if (!angular.isUndefined(tokenKey) && tokenKey !== null) {
        this._$token_key = tokenKey;
        return true;
    }
    return false;
};

/**
 *
 * @returns {*|string}
 */
$ibe.getTokenKey = function() {
    return this._$token_key;
};

/**
 *
 * @returns {boolean}
 */
$ibe.hasTokenKey = function() {
    return (!angular.isUndefined(this._$token_key) && this._$token_key !== null);
};

/**
 *
 */
$ibe.resetTokenKey = function() {
    this._$token_key = null;
};

/**
 *
 * @param saleChannel
 * @returns {boolean}
 */
$ibe.setSaleChannel = function(saleChannel) {
    if (!angular.isUndefined(saleChannel) && saleChannel !== null) {
        this._$sale_channel = saleChannel;
        return true;
    }
    return false;
};


$ibe.getSaleChannel = function() {
    return this._$sale_channel;
}

/**
 *
 * @returns {boolean}
 */
$ibe.isB2B2C = function() {
    return (!angular.isUndefined(this._$sale_channel) && this._$sale_channel === "B2B2C");
};

$ibe.isB2C = function() {
    return (!angular.isUndefined(this._$sale_channel) && this._$sale_channel === "B2C");
};


/**
 *
 * @param tokenKey
 * @returns {boolean}
 */
$ibe.setB2BAppUrl = function(b2bAppUrl) {
    if (!angular.isUndefined(b2bAppUrl) && b2bAppUrl !== null) {
        this._$b2b_app_url = b2bAppUrl;
        return true;
    }
    return false;
};

/**
 *
 * @returns {*|string}
 */
$ibe.getB2BAppUrl = function() {
    return this._$b2b_app_url;
};

(function() {
    'use strict';
    angular
        .module('B2B2CGatewayApp')
        .constant('TRANS_TIME_OUT', 15)
        .constant('TICKET_SRV_BASE_URL', "/ticketsrv/api")
        .constant('TICKET_SEARCH_URL', "/api/air-tickets/low-fare-search-async")
        .constant('TICKET_SEARCH_INTERNATIONAL_URL', "/api/air-tickets/low-fare-search-international-async")

        .constant('TICKET_SEARCH_CACHE_URL', "/api/air-tickets/filter-availability")

        .constant('TICKET_GET_FARE_RULES_URL', "/api/air-tickets/farerules")

        .constant('TICKET_GET_GROUP_DETAIL_URL', "/api/air-tickets/group-itinerary/")
        .constant('TICKET_GET_FILTER_OPTIONS_URL', "/api/air-tickets/filter-options")

        .constant('TICKET_AIR_REVALIDATE_URL', "/api/air-tickets/revalidate")
        .constant('TICKET_CREATE_DRAFT_BOOKING_URL', "/api/air-tickets/draft-booking")
        // Tam - can cook
        .constant('TICKET_UPDATE_BOOKING_TAGS_URL', "/api/air-tickets/draft-booking")
        .constant('TICKET_CHANGE_DRAFT_BOOKING_OWNER_URL', "/api/air-tickets/change-draft-booking-owner")
        .constant('TICKET_ADD_TRAVELLER_URL', "/api/air-tickets/add-booking-traveller")
        .constant('TICKET_PAYMENT_BOOKING_URL', "/api/air-tickets/payment-booking")
        .constant('TICKET_ORDER_TICKET_URL', "/api/air-tickets/order-tickets")
        .constant('TICKET_AIR_GET_SSR_URL', "/api/air-tickets/ssr-offer/")


        .constant('PROFILE_SHORT_URL', "/api/profile/short")
        // .constant('TICKET_SEARCH_CACHE_URL',    "/ticketsrv/api/air/flight/filter-availability")


        .constant('META_AIRPORT_URL', "/metasrv/api/_search/airports")
        .constant('META_SEARCH_AIRPORT_URL', "/metasrv/api/_search/airports")
        .constant('META_SEARCH_LOOKUP_URL', "/api/_search/lookups")
        .constant('META_AIRLINE_URL', "/metasrv/api/airlines")

        .constant('META_COUNTRY_CODE_URL', "/metasrv/api/country-codes")
        .constant('META_DESTINATION_URL', "/metasrv/api/_search/destinations")

        .constant('CUSTOMER_PROFILE_URL', "/customersrv/api/customer-profiles")
        .constant('B2B_AGENT_PROFILE_URL', "/agentsrv/api/agent-profiles/login-name")
        .constant('CUSTOMER_PROFILE_AVATAR_URL', "/customersrv/api/customer-avatars/profile")
        .constant('CUSTOMER_PROFILE_AVATAR_COMMON_URL', "/customersrv/api/customer-avatars")

        .constant('CUSTOMER_TRAVELLERS_URL', "/customersrv/api/customer-travellers")
        .constant('CUSTOMER_TRAVELLERS_FOR_BOTH_URL', "/api/customers/travellers")

        .constant('CUSTOMER_TRAVELLERS_DETAIL_URL', "/customersrv/api/customer-travellers")
        .constant('CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL', "/customersrv/api/customer-travellers-collection")
        .constant('AIR_CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL', "/api/customers/air-customer-travellers-collection")
        // .constant('AIR_CUSTOMER_TRAVELLERS_COLLECTION_CREATE_URL',    "/customersrv/api/air-customer-travellers-collection")

        .constant('PRICING_CREDIT_CARDS_URL', "/pricingsrv/api/credit-cards")
        .constant('PRICING_CREDIT_CARDS_DELETE_ALL_URL', "/pricingsrv/api/credit-cards/delete-all")

        .constant('PRICING_VOUCHER_VALIDATE_URL', "/api/payments/voucher/validate")
        .constant('PRICING_VOUCHER_REDEEM_URL', "/api/payments/voucher/redeem")

        .constant('PAYMENT_SUB_CARD_URL', "/api/payment/card-subscription")
        .constant('PAYMENT_UNSUB_CARD_URL', "/pricingsrv/api/payment/card-unsubscription")

        .constant('PAYMENT_ATM_DEBIT_OPTIONS', "/api/air-tickets/payment-debit-options")

        .constant('BOOKING_SEARCH_URL', "/bookingsrv/api/bookings/search")
        .constant('BOOKING_DETAILS_URL', "/bookingsrv/api/bookings")

        .constant('PRODUCT_BOOKING_DETAILS_URL', "/api/products/booking-detail")
        .constant('PRODUCT_FINAL_BOOKING_DETAILS_URL', "/api/products/final-booking-detail")

        // HOTEL URL
        .constant('HOTEL_SEARCH_METADATA_URL', "/api/hotel/meta-keyword-search")
        .constant('HOTEL_SEARCH_URL', "/api/hotel/low-fare-search-async")
        .constant('HOTEL_SEARCH_CACHE_URL', "/api/hotel/filter-availability")
        .constant('HOTEL_CHECK_AVAILABILITY_URL', "/api/hotel/check-hotel-availability")
        .constant('HOTEL_FILTER_OPTIONS_URL', "/api/hotel/filter-options")
        .constant('HOTEL_DRAFT_BOOKING_URL', "/api/hotel/draft-booking")
        .constant('HOTEL_ADD_BOOKING_TRAVELLER_URL', "/api/hotel/add-booking-traveller")
        .constant('HOTEL_PAYMENT_BOOKING_URL', "/api/hotel/payment-booking")
        .constant('HOTEL_ORDER_HOTEL_URL', "/api/hotel/order-hotel")
        .constant('HOTEL_STATES', "hotelStates")

        .constant('PAYMENT_PAYMENT_BOOKING_URL', "/api/payments/payment-booking")
        .constant('PAYMENT_FEE_OPTIONS_URL', "/api/payments/payment-fee-options")
        //HuyTT
        .constant('SUBSCRIBED_URL', "/api/users/subscribed")
        .constant('PAYMENT_PROMO_OPTIONS_URL', "/api/_search/promotion-credit-card")
        .constant('PAYMENT_PROMO_DISCOUNT_URL', "/api/payments/promotion/discount")
        .constant('PRICING_PROMO_REDEEM_URL', "/api/payments/promotion/redeem")
        .constant('PRICING_PROMO_VOID_URL', "/api/payments/promotion/void")
        // Tiki
        .constant('TIKI_ORDER_URL', "/tiki-ipn/api")
        .constant('VIETTEL_URL', "/api/viettel")
        .constant('LIENVIET_URL', "/api/lienviet")
        .constant('SEA_URL', "/api/sea/")
        .constant('FSOFT_URL', "/api/fsoft")
        .constant('GET_AVAILABLE_PAYMENT_TYPE', "/api/payment/get-available-payment-type")
        .constant('DEFAULT_DATE_FORMAT', "mm-dd-yyyy")
        .constant('DEFAULT_MOMENT_DATE_FORMAT', "MM-DD-YYYY")
        .constant('DATE_DDMMYYYY_FORMAT', "dd/mm/yyyy")
        .constant('DEFAULT_PAGE_SIZE', 15)
        .constant('IBE_KEYS', {
            "cdn": {
                "airlines": {
                    //"logoUrl" : "/content/images/airlines/gif"
                    "logoUrl": "https://booking.gotadi.com/Booking/AirBooking/images/AirLogos"
                }
            },
            "booking": {
                "directionType": {
                    "departure": "DEPARTURE",
                    "return": "RETURN",
                    "trip": "TRIP"
                },
                "issuedStatus": {
                    "pending": "PENDING",
                    "ticketOnProcess": "TICKET_ON_PROCESS",
                    "succeeded": "SUCCEEDED",
                    "failed": "FAILED",
                    "partlyConfirmed": "PARTLY_CONFIRMED",
                    "partlyFailed": "PARTLY_FAILED"
                },
                "paymentStatus": {
                    "pending": "PENDING",
                    "succeeded": "SUCCEEDED",
                    "failed": "FAILED",
                    "refunded": "REFUNDED"
                },
                "bookStatus": {
                    "pending": "PENDING",
                    "bookingOnProcess": "BOOKING_ON_PROCESS",
                    "booked": "BOOKED",
                    "failed": "FAILED",
                    "cancelled": "CANCELLED",
                    "expired": "EXPIRED",
                    "tentative": "TENTATIVE",
                    "partlyBooked": "PARTLY_BOOKED",
                    "partlyFailed": "PARTLY_FAILED"
                },
                "supplierStatus": {
                    "pending": "PENDING",
                    "bookingOnProcess": "BOOKING_ON_PROCESS",
                    "ticketOnProcess": "TICKET_ON_PROCESS",
                    "booked": "BOOKED",
                    "failed": "FAILED",
                    "cancelled": "CANCELLED",
                    "expired": "EXPIRED",
                    "tentative": "TENTATIVE",
                    "partlyBooked": "PARTLY_BOOKED",
                    "partlyFailed": "PARTLY_FAILED"
                }
            },
            "airTicket": {
                "flightType": {
                    "domestic": "DOMESTIC",
                    "international": "INTERNATIONAL"
                },
                "flightDirection": {
                    "departure": "DEPARTURE",
                    "return": "RETURN"
                }
            }
        })

        .constant('DEFAULT_SETTING', {
            "SCREEN_XS": 768
        })
        .constant('FREE_WIFI_IDS', [2390, 2392, 2403, 2405, 2407,
            1073743392, 1073743393, 1073743394, 1073743396, 1073743397, 1073743398
        ])
        .constant('FREE_PARKING_IDS', [3861, 3863, 4452, 4450, 2554, 3761])
        .constant('HAS_SWIMMING_POOL_IDS', [14, 24, 2014, 2138, 2859, 2860, 4174, 1073743549])
        .constant('FREE_BREAKFAST', [2001])
        .constant('FREE_GYM', [2048])
        .constant('FREE_DRINK_TEXT', ['Đồ uống miễn phí chào đón khách'])
        .constant('FREE_BREAKFAST_TEXT', ['Bữa sáng miễn phí', 'Bữa sáng buffet'])
        .constant('FREE_PARKING_TEXT', ['Đậu xe miễn phí'])
        .constant('FREE_WIFI_TEXT', ['Wifi miễn phí', 'Internet tốc độ cao miễn phí'])
        .constant('FREE_DRINK_TEXT_KEY', ['Đồ uống', 'Minibar'])
        .constant('FREE_BREAKFAST_TEXT_KEY', ['Bữa sáng', 'breakfast'])
        .constant('FREE_PARKING_TEXT_KEY', ['Đậu xe', 'Parking'])
        .constant('FREE_WIFI_TEXT_KEY', ['Wifi', 'Internet'])
        .constant('PREFIX_DEFAULT_POLICY_STRING',
            'Chúng tôi hiểu rằng đôi khi có những thay đổi trong kế hoạch của quý vị. Chúng tôi không tính phí thay đổi hoặc hủy bỏ. Tuy nhiên, khách sạn này ({0}) áp dụng khoản phạt với khách hàng như sau và chúng tôi được yêu cầu thông báo cùng quý vị: Hủy hoặc thay đổi thực hiện sau ')
        .constant('AFTER_DEFAULT_POLICY_STRING',
            ', hoặc không nhận phòng sẽ chịu phí phạt tương đương \\d+% chi phí thời gian lưu trú.  ')
        .constant('SEARCH_BY_HOTEL_NAME',
            '::H::')
        .constant('LIMIT_WIDTH', 114)
        .constant('LIMIT_HEIGHT', 114)
        .constant('VOUCHER_EVENT', 'VOUCHER_EVENT')
        .constant('PROMO_EVENT', 'PROMO_EVENT')

    ;
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('UserManagementDialogController', UserManagementDialogController);

    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'OtaLanguageService'];

    function UserManagementDialogController($stateParams, $uibModalInstance, entity, User, OtaLanguageService) {
        var vm = this;

        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];
        vm.clear = clear;
        vm.languages = null;
        vm.save = save;
        vm.user = entity;


        OtaLanguageService.getAll().then(function(languages) {
            vm.languages = languages;
        });

        function clear() {
            $uibModalInstance.dismiss('cancel');
        }

        function onSaveSuccess(result) {
            vm.isSaving = false;
            $uibModalInstance.close(result);
        }

        function onSaveError() {
            vm.isSaving = false;
        }

        function save() {
            vm.isSaving = true;
            if (vm.user.id !== null) {
                User.update(vm.user, onSaveSuccess, onSaveError);
            } else {
                User.save(vm.user, onSaveSuccess, onSaveError);
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('UserManagementDetailController', UserManagementDetailController);

    UserManagementDetailController.$inject = ['$stateParams', 'User'];

    function UserManagementDetailController($stateParams, User) {
        var vm = this;

        vm.load = load;
        vm.user = {};

        vm.load($stateParams.login);

        function load(login) {
            User.get({
                login: login
            }, function(result) {
                vm.user = result;
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('UserManagementDeleteController', UserManagementDeleteController);

    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];

    function UserManagementDeleteController($uibModalInstance, entity, User) {
        var vm = this;

        vm.user = entity;
        vm.clear = clear;
        vm.confirmDelete = confirmDelete;

        function clear() {
            $uibModalInstance.dismiss('cancel');
        }

        function confirmDelete(login) {
            User.delete({
                    login: login
                },
                function() {
                    $uibModalInstance.close(true);
                });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider
            .state('user-management', {
                parent: 'admin',
                url: '/user-management?page&sort',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'userManagement.home.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'app/admin/user-management/user-management.html',
                        controller: 'UserManagementController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    page: {
                        value: '1',
                        squash: true
                    },
                    sort: {
                        value: 'id,asc',
                        squash: true
                    }
                },
                resolve: {
                    pagingParams: ['$stateParams', 'PaginationUtil', function($stateParams, PaginationUtil) {
                        return {
                            page: PaginationUtil.parsePage($stateParams.page),
                            sort: $stateParams.sort,
                            predicate: PaginationUtil.parsePredicate($stateParams.sort),
                            ascending: PaginationUtil.parseAscending($stateParams.sort)
                        };
                    }],
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('user-management');
                        return $translate.refresh();
                    }]

                }
            })
            .state('user-management.new', {
                url: '/new',
                data: {
                    authorities: ['ROLE_ADMIN']
                },
                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {
                    $uibModal.open({
                        templateUrl: 'app/admin/user-management/user-management-dialog.html',
                        controller: 'UserManagementDialogController',
                        controllerAs: 'vm',
                        backdrop: 'static',
                        size: 'lg',
                        resolve: {
                            entity: function() {
                                return {
                                    id: null,
                                    login: null,
                                    firstName: null,
                                    lastName: null,
                                    email: null,
                                    activated: true,
                                    langKey: null,
                                    createdBy: null,
                                    createdDate: null,
                                    lastModifiedBy: null,
                                    lastModifiedDate: null,
                                    resetDate: null,
                                    resetKey: null,
                                    authorities: null
                                };
                            }
                        }
                    }).result.then(function() {
                        $state.go('user-management', null, {
                            reload: true
                        });
                    }, function() {
                        $state.go('user-management');
                    });
                }]
            })
            .state('user-management.edit', {
                url: '/{login}/edit',
                data: {
                    authorities: ['ROLE_ADMIN']
                },
                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {
                    $uibModal.open({
                        templateUrl: 'app/admin/user-management/user-management-dialog.html',
                        controller: 'UserManagementDialogController',
                        controllerAs: 'vm',
                        backdrop: 'static',
                        size: 'lg',
                        resolve: {
                            entity: ['User', function(User) {
                                return User.get({
                                    login: $stateParams.login
                                }).$promise;
                            }]
                        }
                    }).result.then(function() {
                        $state.go('user-management', null, {
                            reload: true
                        });
                    }, function() {
                        $state.go('^');
                    });
                }]
            })
            .state('user-management-detail', {
                parent: 'user-management',
                url: '/{login}',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'user-management.detail.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'app/admin/user-management/user-management-detail.html',
                        controller: 'UserManagementDetailController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('user-management');
                        return $translate.refresh();
                    }]
                }
            })
            .state('user-management.delete', {
                url: '/{login}/delete',
                data: {
                    authorities: ['ROLE_ADMIN']
                },
                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {
                    $uibModal.open({
                        templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',
                        controller: 'UserManagementDeleteController',
                        controllerAs: 'vm',
                        size: 'md',
                        resolve: {
                            entity: ['User', function(User) {
                                return User.get({
                                    login: $stateParams.login
                                }).$promise;
                            }]
                        }
                    }).result.then(function() {
                        $state.go('user-management', null, {
                            reload: true
                        });
                    }, function() {
                        $state.go('^');
                    });
                }]
            });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('UserManagementController', UserManagementController);

    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants', 'OtaLanguageService'];

    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants, OtaLanguageService) {
        var vm = this;

        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];
        vm.currentAccount = null;
        vm.languages = null;
        vm.loadAll = loadAll;
        vm.setActive = setActive;
        vm.users = [];
        vm.page = 1;
        vm.totalItems = null;
        vm.clear = clear;
        vm.links = null;
        vm.loadPage = loadPage;
        vm.predicate = pagingParams.predicate;
        vm.reverse = pagingParams.ascending;
        vm.itemsPerPage = paginationConstants.itemsPerPage;
        vm.transition = transition;

        vm.loadAll();
        OtaLanguageService.getAll().then(function(languages) {
            vm.languages = languages;
        });
        Principal.identity().then(function(account) {
            vm.currentAccount = account;
        });

        function setActive(user, isActivated) {
            user.activated = isActivated;
            User.update(user, function() {
                vm.loadAll();
                vm.clear();
            });
        }

        function loadAll() {
            User.query({
                page: pagingParams.page - 1,
                size: vm.itemsPerPage,
                sort: sort()
            }, onSuccess, onError);
        }

        function onSuccess(data, headers) {
            vm.links = ParseLinks.parse(headers('link'));
            vm.totalItems = headers('X-Total-Count');
            vm.queryCount = vm.totalItems;
            vm.page = pagingParams.page;
            vm.users = data;
        }

        function onError(error) {
            AlertService.error(error.data.message);
        }

        function clear() {
            vm.user = {
                id: null,
                login: null,
                firstName: null,
                lastName: null,
                email: null,
                activated: null,
                langKey: null,
                createdBy: null,
                createdDate: null,
                lastModifiedBy: null,
                lastModifiedDate: null,
                resetDate: null,
                resetKey: null,
                authorities: null
            };
        }

        function sort() {
            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];
            if (vm.predicate !== 'id') {
                result.push('id');
            }
            return result;
        }

        function loadPage(page) {
            vm.page = page;
            vm.transition();
        }

        function transition() {
            $state.transitionTo($state.$current, {
                page: vm.page,
                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),
                search: vm.currentSearch
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('ota-tracker', {
            parent: 'admin',
            url: '/tracker',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'tracker.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/tracker/tracker.html',
                    controller: 'OtaTrackerController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('tracker');
                    return $translate.refresh();
                }]
            },
            onEnter: ['OtaTrackerService', function(OtaTrackerService) {
                /* OtaTrackerService.subscribe(); */
            }],
            onExit: ['OtaTrackerService', function(OtaTrackerService) {
                /* OtaTrackerService.unsubscribe(); */
            }]
        });
    }
})();

(function() {
    'use strict';
    /* globals SockJS, Stomp */

    angular
        .module('B2B2CGatewayApp')
        .factory('OtaTrackerService', OtaTrackerService);

    OtaTrackerService.$inject = ['$rootScope', '$window', '$cookies', '$http', '$q', 'AuthServerProvider'];

    function OtaTrackerService($rootScope, $window, $cookies, $http, $q, AuthServerProvider) {
        var stompClient = null;
        var subscriber = null;
        var listener = $q.defer();
        var connected = $q.defer();
        var alreadyConnectedOnce = false;

        var service = {
            connect: connect,
            disconnect: disconnect,
            receive: receive,
            sendActivity: sendActivity,
            subscribe: subscribe,
            unsubscribe: unsubscribe
        };

        return service;

        function connect() {
            //building absolute path so that websocket doesn't fail when deploying with a context path
            var loc = $window.location;
            var url = '//' + loc.host + loc.pathname + 'websocket/tracker';
            var authToken = AuthServerProvider.getToken();
            if (authToken) {
                url += '?access_token=' + authToken;
            }
            var socket = new SockJS(url);
            stompClient = Stomp.over(socket);
            var stateChangeStart;
            var headers = {};
            stompClient.connect(headers, function() {
                connected.resolve('success');
                sendActivity();
                if (!alreadyConnectedOnce) {
                    stateChangeStart = $rootScope.$on('$stateChangeStart', function() {
                        sendActivity();
                    });
                    alreadyConnectedOnce = true;
                }
            });
            $rootScope.$on('$destroy', function() {
                if (angular.isDefined(stateChangeStart) && stateChangeStart !== null) {
                    stateChangeStart();
                }
            });
        }

        function disconnect() {
            if (stompClient !== null) {
                stompClient.disconnect();
                stompClient = null;
            }
        }

        function receive() {
            return listener.promise;
        }

        function sendActivity() {
            if (stompClient !== null && stompClient.connected) {
                stompClient
                    .send('/topic/activity', {},
                        angular.toJson({
                            'page': $rootScope.toState.name
                        }));
            }
        }

        function subscribe() {
            connected.promise.then(function() {
                subscriber = stompClient.subscribe('/topic/tracker', function(data) {
                    listener.notify(angular.fromJson(data.body));
                });
            }, null, null);
        }

        function unsubscribe() {
            if (subscriber !== null) {
                subscriber.unsubscribe();
            }
            listener = $q.defer();
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('OtaTrackerController', OtaTrackerController);

    OtaTrackerController.$inject = ['$cookies', '$http', 'OtaTrackerService'];

    function OtaTrackerController($cookies, $http, OtaTrackerService) {
        // This controller uses a Websocket connection to receive user activities in real-time.
        var vm = this;

        vm.activities = [];

        OtaTrackerService.receive().then(null, null, function(activity) {
            showActivity(activity);
        });

        function showActivity(activity) {
            var existingActivity = false;
            for (var index = 0; index < vm.activities.length; index++) {
                if (vm.activities[index].sessionId === activity.sessionId) {
                    existingActivity = true;
                    if (activity.page === 'logout') {
                        vm.activities.splice(index, 1);
                    } else {
                        vm.activities[index] = activity;
                    }
                }
            }
            if (!existingActivity && (activity.page !== 'logout')) {
                vm.activities.push(activity);
            }
        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('ota-metrics', {
            parent: 'admin',
            url: '/metrics',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'metrics.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/metrics/metrics.html',
                    controller: 'OtaMetricsMonitoringController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('metrics');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('OtaMetricsService', OtaMetricsService);

    OtaMetricsService.$inject = ['$rootScope', '$http', 'API_URL'];

    function OtaMetricsService($rootScope, $http, API_URL) {
        var service = {
            getMetrics: getMetrics,
            threadDump: threadDump
        };

        return service;

        function getMetrics() {
            return $http.get(API_URL + '/management/metrics').then(function(response) {
                return response.data;
            });
        }

        function threadDump() {
            return $http.get(API_URL + '/management/dump').then(function(response) {
                return response.data;
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('OtaMetricsMonitoringModalController', OtaMetricsMonitoringModalController);

    OtaMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];

    function OtaMetricsMonitoringModalController($uibModalInstance, threadDump) {
        var vm = this;

        vm.cancel = cancel;
        vm.getLabelClass = getLabelClass;
        vm.threadDump = threadDump;
        vm.threadDumpAll = 0;
        vm.threadDumpBlocked = 0;
        vm.threadDumpRunnable = 0;
        vm.threadDumpTimedWaiting = 0;
        vm.threadDumpWaiting = 0;

        angular.forEach(threadDump, function(value) {
            if (value.threadState === 'RUNNABLE') {
                vm.threadDumpRunnable += 1;
            } else if (value.threadState === 'WAITING') {
                vm.threadDumpWaiting += 1;
            } else if (value.threadState === 'TIMED_WAITING') {
                vm.threadDumpTimedWaiting += 1;
            } else if (value.threadState === 'BLOCKED') {
                vm.threadDumpBlocked += 1;
            }
        });

        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +
            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        function getLabelClass(threadState) {
            if (threadState === 'RUNNABLE') {
                return 'label-success';
            } else if (threadState === 'WAITING') {
                return 'label-info';
            } else if (threadState === 'TIMED_WAITING') {
                return 'label-warning';
            } else if (threadState === 'BLOCKED') {
                return 'label-danger';
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('OtaMetricsMonitoringController', OtaMetricsMonitoringController);

    OtaMetricsMonitoringController.$inject = ['$scope', 'OtaMetricsService', '$uibModal'];

    function OtaMetricsMonitoringController($scope, OtaMetricsService, $uibModal) {
        var vm = this;

        vm.metrics = {};
        vm.refresh = refresh;
        vm.refreshThreadDumpData = refreshThreadDumpData;
        vm.servicesStats = {};
        vm.updatingMetrics = true;

        vm.refresh();

        $scope.$watch('vm.metrics', function(newValue) {
            vm.servicesStats = {};
            angular.forEach(newValue.timers, function(value, key) {
                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {
                    vm.servicesStats[key] = value;
                }
            });

        });

        function refresh() {
            vm.updatingMetrics = true;
            OtaMetricsService.getMetrics().then(function(promise) {
                vm.metrics = promise;
                vm.updatingMetrics = false;
            }, function(promise) {
                vm.metrics = promise.data;
                vm.updatingMetrics = false;
            });
        }

        function refreshThreadDumpData() {
            OtaMetricsService.threadDump().then(function(data) {
                $uibModal.open({
                    templateUrl: 'app/admin/metrics/metrics.modal.html',
                    controller: 'OtaMetricsMonitoringModalController',
                    controllerAs: 'vm',
                    size: 'lg',
                    resolve: {
                        threadDump: function() {
                            return data;
                        }

                    }
                });
            });
        }


    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('logs', {
            parent: 'admin',
            url: '/logs',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'logs.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/logs/logs.html',
                    controller: 'LogsController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('logs');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('LogsService', LogsService);

    LogsService.$inject = ['$resource', 'API_URL'];

    function LogsService($resource, API_URL) {
        var service = $resource(API_URL + '/management/logs', {}, {
            'findAll': {
                method: 'GET',
                isArray: true
            },
            'changeLevel': {
                method: 'PUT'
            }
        });

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('LogsController', LogsController);

    LogsController.$inject = ['LogsService'];

    function LogsController(LogsService) {
        var vm = this;

        vm.changeLevel = changeLevel;
        vm.loggers = LogsService.findAll();

        function changeLevel(name, level) {
            LogsService.changeLevel({
                name: name,
                level: level
            }, function() {
                vm.loggers = LogsService.findAll();
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('ota-health', {
            parent: 'admin',
            url: '/health',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'health.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/health/health.html',
                    controller: 'OtaHealthCheckController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('health');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('OtaHealthService', OtaHealthService);

    OtaHealthService.$inject = ['$rootScope', '$http', 'API_URL'];

    function OtaHealthService($rootScope, $http, API_URL) {
        var separator = '.';
        var service = {
            checkHealth: checkHealth,
            transformHealthData: transformHealthData,
            getBaseName: getBaseName,
            getSubSystemName: getSubSystemName
        };

        return service;

        function checkHealth() {
            return $http.get(API_URL + '/management/health').then(function(response) {
                return response.data;
            });
        }

        function transformHealthData(data) {
            var response = [];
            flattenHealthData(response, null, data);
            return response;
        }

        function getBaseName(name) {
            if (name) {
                var split = name.split('.');
                return split[0];
            }
        }

        function getSubSystemName(name) {
            if (name) {
                var split = name.split('.');
                split.splice(0, 1);
                var remainder = split.join('.');
                return remainder ? ' - ' + remainder : '';
            }
        }

        /* private methods */
        function flattenHealthData(result, path, data) {
            angular.forEach(data, function(value, key) {
                if (isHealthObject(value)) {
                    if (hasSubSystem(value)) {
                        addHealthObject(result, false, value, getModuleName(path, key));
                        flattenHealthData(result, getModuleName(path, key), value);
                    } else {
                        addHealthObject(result, true, value, getModuleName(path, key));
                    }
                }
            });
            return result;
        }

        function addHealthObject(result, isLeaf, healthObject, name) {

            var healthData = {
                'name': name
            };
            var details = {};
            var hasDetails = false;

            angular.forEach(healthObject, function(value, key) {
                if (key === 'status' || key === 'error') {
                    healthData[key] = value;
                } else {
                    if (!isHealthObject(value)) {
                        details[key] = value;
                        hasDetails = true;
                    }
                }
            });

            // Add the of the details
            if (hasDetails) {
                angular.extend(healthData, {
                    'details': details
                });
            }

            // Only add nodes if they provide additional information
            if (isLeaf || hasDetails || healthData.error) {
                result.push(healthData);
            }
            return healthData;
        }

        function getModuleName(path, name) {
            var result;
            if (path && name) {
                result = path + separator + name;
            } else if (path) {
                result = path;
            } else if (name) {
                result = name;
            } else {
                result = '';
            }
            return result;
        }

        function hasSubSystem(healthObject) {
            var result = false;
            angular.forEach(healthObject, function(value) {
                if (value && value.status) {
                    result = true;
                }
            });
            return result;
        }

        function isHealthObject(healthObject) {
            var result = false;
            angular.forEach(healthObject, function(value, key) {
                if (key === 'status') {
                    result = true;
                }
            });
            return result;
        }

    }
})();

(function() {
    'use strict';

    angular.module('B2B2CGatewayApp')
        .controller('HealthModalController', HealthModalController);

    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];

    function HealthModalController($uibModalInstance, currentHealth, baseName, subSystemName) {
        var vm = this;

        vm.cancel = cancel;
        vm.currentHealth = currentHealth;
        vm.baseName = baseName;
        vm.subSystemName = subSystemName;

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('OtaHealthCheckController', OtaHealthCheckController);

    OtaHealthCheckController.$inject = ['OtaHealthService', '$uibModal'];

    function OtaHealthCheckController(OtaHealthService, $uibModal) {
        var vm = this;

        vm.updatingHealth = true;
        vm.getLabelClass = getLabelClass;
        vm.refresh = refresh;
        vm.showHealth = showHealth;
        vm.baseName = OtaHealthService.getBaseName;
        vm.subSystemName = OtaHealthService.getSubSystemName;

        vm.refresh();

        function getLabelClass(statusState) {
            if (statusState === 'UP') {
                return 'label-success';
            } else {
                return 'label-danger';
            }
        }

        function refresh() {
            vm.updatingHealth = true;
            OtaHealthService.checkHealth().then(function(response) {
                vm.healthData = OtaHealthService.transformHealthData(response);
                vm.updatingHealth = false;
            }, function(response) {
                vm.healthData = OtaHealthService.transformHealthData(response.data);
                vm.updatingHealth = false;
            });
        }

        function showHealth(health) {
            $uibModal.open({
                templateUrl: 'app/admin/health/health.modal.html',
                controller: 'HealthModalController',
                controllerAs: 'vm',
                size: 'lg',
                resolve: {
                    currentHealth: function() {
                        return health;
                    },
                    baseName: function() {
                        return vm.baseName;
                    },
                    subSystemName: function() {
                        return vm.subSystemName;
                    }

                }
            });
        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('GatewayRoutes', GatewayRoutes);

    GatewayRoutes.$inject = ['$resource', 'API_URL'];

    function GatewayRoutes($resource, API_URL) {
        var service = $resource(API_URL + '/api/gateway/routes/:id', {}, {
            'query': {
                method: 'GET',
                isArray: true
            },
            'get': {
                method: 'GET',
                transformResponse: function(data) {
                    data = angular.fromJson(data);
                    return data;
                }
            },
            'update': {
                method: 'PUT'
            }
        });

        return service;
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('gateway', {
            parent: 'admin',
            url: '/gateway',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'gateway.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/gateway/gateway.html',
                    controller: 'GatewayController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('gateway');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('GatewayController', GatewayController);

    GatewayController.$inject = ['$filter', '$interval', 'GatewayRoutes'];

    function GatewayController($filter, $interval, GatewayRoutes) {
        var vm = this;

        vm.gatewayRoutes = null;
        vm.refresh = refresh;
        vm.updatingRoutes = null;

        vm.refresh();

        function refresh() {
            vm.updatingRoutes = true;
            GatewayRoutes.query(function(result) {
                vm.gatewayRoutes = result;
                vm.updatingRoutes = false;
            });
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('docs', {
            parent: 'admin',
            url: '/docs',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'global.menu.admin.apidocs'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/docs/docs.html'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', function($translate) {
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('ota-configuration', {
            parent: 'admin',
            url: '/configuration',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'configuration.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/configuration/configuration.html',
                    controller: 'OtaConfigurationController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('configuration');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('OtaConfigurationService', OtaConfigurationService);

    OtaConfigurationService.$inject = ['$filter', '$http', 'API_URL'];

    function OtaConfigurationService($filter, $http, API_URL) {
        var service = {
            get: get,
            getEnv: getEnv
        };

        return service;

        function get() {
            return $http.get(API_URL + '/management/configprops').then(getConfigPropsComplete);

            function getConfigPropsComplete(response) {
                var properties = [];
                angular.forEach(response.data, function(data) {
                    properties.push(data);
                });
                var orderBy = $filter('orderBy');
                return orderBy(properties, 'prefix');
            }
        }

        function getEnv() {
            return $http.get(API_URL + '/management/env').then(getEnvComplete);

            function getEnvComplete(response) {
                var properties = {};
                angular.forEach(response.data, function(val, key) {
                    var vals = [];
                    angular.forEach(val, function(v, k) {
                        vals.push({
                            key: k,
                            val: v
                        });
                    });
                    properties[key] = vals;
                });
                return properties;
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('OtaConfigurationController', OtaConfigurationController);

    OtaConfigurationController.$inject = ['$filter', 'OtaConfigurationService'];

    function OtaConfigurationController(filter, OtaConfigurationService) {
        var vm = this;

        vm.allConfiguration = null;
        vm.configuration = null;

        OtaConfigurationService.get().then(function(configuration) {
            vm.configuration = configuration;
        });
        OtaConfigurationService.getEnv().then(function(configuration) {
            vm.allConfiguration = configuration;
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('audits', {
            parent: 'admin',
            url: '/audits',
            data: {
                authorities: ['ROLE_ADMIN'],
                pageTitle: 'audits.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/admin/audits/audits.html',
                    controller: 'AuditsController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('audits');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('AuditsService', AuditsService);

    AuditsService.$inject = ['$resource', 'API_URL'];

    function AuditsService($resource, API_URL) {
        var service = $resource(API_URL + '/management/audits/:id', {}, {
            'get': {
                method: 'GET',
                isArray: true
            },
            'query': {
                method: 'GET',
                isArray: true,
                params: {
                    fromDate: null,
                    toDate: null
                }
            }
        });

        return service;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('AuditsController', AuditsController);

    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];

    function AuditsController($filter, AuditsService, ParseLinks) {
        var vm = this;

        vm.audits = null;
        vm.fromDate = null;
        vm.links = null;
        vm.loadPage = loadPage;
        vm.onChangeDate = onChangeDate;
        vm.page = 1;
        vm.previousMonth = previousMonth;
        vm.toDate = null;
        vm.today = today;
        vm.totalItems = null;

        vm.today();
        vm.previousMonth();
        vm.onChangeDate();

        function onChangeDate() {
            var dateFormat = 'yyyy-MM-dd';
            var fromDate = $filter('date')(vm.fromDate, dateFormat);
            var toDate = $filter('date')(vm.toDate, dateFormat);

            AuditsService.query({
                page: vm.page - 1,
                size: 20,
                fromDate: fromDate,
                toDate: toDate
            }, function(result, headers) {
                vm.audits = result;
                vm.links = ParseLinks.parse(headers('link'));
                vm.totalItems = headers('X-Total-Count');
            });
        }

        // Date picker configuration
        function today() {
            // Today + 1 day - needed if the current day must be included
            var today = new Date();
            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
        }

        function previousMonth() {
            var fromDate = new Date();
            if (fromDate.getMonth() === 0) {
                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());
            } else {
                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());
            }

            vm.fromDate = fromDate;
        }

        function loadPage(page) {
            vm.page = page;
            vm.onChangeDate();
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('admin', {
            abstract: true,
            parent: 'app'
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('SocialRegisterController', SocialRegisterController);

    SocialRegisterController.$inject = ['$log', '$filter', '$stateParams'];

    function SocialRegisterController($log, $filter, $stateParams) {
        var vm = this;

        vm.success = $stateParams.success;
        vm.error = !vm.success;
        vm.provider = $stateParams.provider;
        vm.providerLabel = $filter('capitalize')(vm.provider);
        vm.success = $stateParams.success;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('SocialAuthController', SocialAuthController);

    SocialAuthController.$inject = ['$log', '$rootScope', '$state', '$cookies', 'Auth'];

    function SocialAuthController($log, $rootScope, $state, $cookies, Auth) {
        var token = $cookies.get('social-authentication');
        if (token) {
            Auth.loginWithToken(token, false).then(function() {
                // $cookies.remove('social-authentication');
                window.postMessage("auth::true", window.location.origin);
                // window.close();
                window.location.href = 'app/account/social/social-register.html';
            }, function() {
                $state.go('social-register', {
                    'success': 'false'
                });
            });
        } else {
            $state.go('social-register', {
                'success': 'false'
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('social-register', {
                parent: 'account',
                url: '/social-register/:provider?{success:boolean}',
                data: {
                    authorities: [],
                    pageTitle: 'social.register.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'app/account/social/social-register.html',
                        controller: 'SocialRegisterController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('social');
                        return $translate.refresh();
                    }]
                }
            })
            .state('social-auth', {
                parent: 'account',
                url: '/social-auth',
                data: {
                    authorities: []
                },
                views: {
                    'content@': {
                        controller: 'SocialAuthController'
                    }
                }
            });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('SocialService', SocialService);

    SocialService.$inject = ['$http', '$cookies'];

    function SocialService($http, $cookies) {
        var socialService = {
            getProviderSetting: getProviderSetting,
            getProviderURL: getProviderURL,
            getCSRF: getCSRF
        };

        return socialService;

        function getProviderSetting(provider) {
            switch (provider) {
                case 'google':
                    return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';
                case 'facebook':
                    return 'public_profile,email';
                case 'twitter':
                    return '';
                    // jhipster-needle-add-social-button
                default:
                    return 'Provider setting not defined';
            }
        }

        function getProviderURL(provider) {
            return 'signin/' + provider;
        }

        function getCSRF() {
            return $cookies.get($http.defaults.xsrfCookieName);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('jhSocial', jhSocial);

    jhSocial.$inject = ['$translatePartialLoader', '$translate', '$filter', 'SocialService', '$cookies', 'Principal', 'Auth', '$rootScope'];

    function jhSocial($translatePartialLoader, $translate, $filter, SocialService, $cookies, Principal, Auth, $rootScope) {
        var directive = {
            restrict: 'E',
            scope: {
                provider: '@ngProvider',
                parent: '=?'
            },
            templateUrl: 'app/account/social/directive/social.html',
            link: linkFunc
        };

        return directive;

        /* private helper methods */

        function linkFunc(scope) {

            $translatePartialLoader.addPart('social');
            $translate.refresh();

            scope.label = $filter('capitalize')(scope.provider);
            scope.providerSetting = SocialService.getProviderSetting(scope.provider);
            scope.providerURL = SocialService.getProviderURL(scope.provider);
            scope.csrf = SocialService.getCSRF();

            $(".connectButton").click(function(event) {
                event.preventDefault();
                if (scope.parent) {
                    scope.parent.close();
                }
                var width = 600,
                    height = 700;
                if (scope.provider === 'google') {
                    //width = 470; height = 580;
                }
                var w = window.outerWidth - width,
                    h = window.outerHeight - height;
                var left = Math.round(window.screenX + (w / 2));
                var top = Math.round(window.screenY + (h / 2.5));
                var popup = window.open("", 'SocialAuth',
                    'width=' + width + ',height=' + height + ',left=' + left + ',top=' + top +
                    ',toolbar=0,scrollbars=0,status=0,resizable=0,location=0,menuBar=0');
                popup.focus();
                var cTP = $(event.currentTarget).parent();
                cTP[0].setAttribute("target", "SocialAuth");

                window.addEventListener('message', function(e) {
                    if (e.data !== 'social::success') {
                        return;
                    }
                    var token = $cookies.get('social-authentication');
                    if (token) {
                        Auth.loginWithToken(token, false).then(function() {
                            $cookies.remove('social-authentication');
                            Principal.identity(true).then(function() {
                                $rootScope.$broadcast('authenticationSuccess');
                            });
                        });
                    }
                });
                cTP[0].submit();
            });

        }

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('settings', {
            parent: 'account',
            url: '/settings',
            data: {
                authorities: ['ROLE_USER'],
                pageTitle: 'global.menu.account.settings'
            },
            views: {
                'content@': {
                    templateUrl: 'app/account/settings/settings.html',
                    controller: 'SettingsController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('settings');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('SettingsController', SettingsController);

    SettingsController.$inject = ['$log', 'Principal', 'Auth', 'OtaLanguageService', '$translate'];

    function SettingsController($log, Principal, Auth, OtaLanguageService, $translate) {
        var vm = this;

        vm.error = null;
        vm.save = save;
        vm.settingsAccount = null;
        vm.success = null;

        /**
         * Store the "settings account" in a separate variable, and not in the shared "account" variable.
         */
        var copyAccount = function(account) {
            return {
                activated: account.activated,
                email: account.email,
                firstName: account.firstName,
                langKey: account.langKey,
                lastName: account.lastName,
                login: account.login
            };
        };

        Principal.identity().then(function(account) {
            vm.settingsAccount = copyAccount(account);
        });

        function save() {
            Auth.updateAccount(vm.settingsAccount).then(function() {
                vm.error = null;
                vm.success = 'OK';
                Principal.identity(true).then(function(account) {
                    vm.settingsAccount = copyAccount(account);
                });
                OtaLanguageService.getCurrent().then(function(current) {
                    if (vm.settingsAccount.langKey !== current) {
                        $translate.use(vm.settingsAccount.langKey);
                    }
                });
            }).catch(function() {
                vm.success = null;
                vm.error = 'ERROR';
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('requestReset', {
            parent: 'account',
            url: '/reset/request',
            data: {
                authorities: []
            },
            views: {
                'content@': {
                    templateUrl: 'app/account/reset/request/reset.request.html',
                    controller: 'RequestResetController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('reset');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('RequestResetController', RequestResetController);

    RequestResetController.$inject = ['$log', '$state', '$timeout', 'Auth'];

    function RequestResetController($log, $state, $timeout, Auth) {
        var vm = this;

        vm.error = null;
        vm.errorEmailNotExists = null;
        vm.requestReset = requestReset;
        vm.resetAccount = {};
        vm.success = null;
        vm.refreshPage = refreshPage;

        $timeout(function() {
            angular.element('#email').focus();
        });

        function requestReset() {

            vm.error = null;
            vm.errorEmailNotExists = null;

            Auth.resetPasswordInit(vm.resetAccount.email).then(function() {
                vm.success = 'OK';
            }).catch(function(response) {
                vm.success = null;
                if (response.status === 400 && response.data === 'email address not registered') {
                    vm.errorEmailNotExists = 'ERROR';
                } else {
                    vm.error = 'ERROR';
                }
            });
        }

        function refreshPage() {
            vm.error = null;
            vm.errorEmailNotExists = null;
            // vm.resetAccount = {};
            vm.success = null;
            // $state.go('requestReset', {reload: true});
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('finishReset', {
            parent: 'account',
            url: '/reset/finish?key',
            data: {
                authorities: []
            },
            views: {
                'content@': {
                    templateUrl: 'app/account/reset/finish/reset.finish.html',
                    controller: 'ResetFinishController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('reset');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ResetFinishController', ResetFinishController);

    ResetFinishController.$inject = ['$log', '$stateParams', '$timeout', 'Auth', 'LoginService'];

    function ResetFinishController($log, $stateParams, $timeout, Auth, LoginService) {
        var vm = this;

        //logout to clean existing session
        Auth.logout();

        vm.passwordpattern = /((?=.*\d)(?=.*[a-zA-Z]).{8,})/;

        vm.keyMissing = angular.isUndefined($stateParams.key);
        vm.confirmPassword = null;
        vm.doNotMatch = null;
        vm.error = null;
        vm.finishReset = finishReset;
        vm.login = LoginService.open;
        vm.resetAccount = {};
        vm.success = null;

        $timeout(function() {
            angular.element('#password').focus();
        });

        function finishReset() {
            vm.doNotMatch = null;
            vm.error = null;
            if (vm.resetAccount.password !== vm.confirmPassword) {
                vm.doNotMatch = 'ERROR';
            } else {
                Auth.resetPasswordFinish({
                    key: $stateParams.key,
                    newPassword: vm.resetAccount.password
                }).then(function() {
                    vm.success = 'OK';
                }).catch(function() {
                    vm.success = null;
                    vm.error = 'ERROR';
                });
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        $stateProvider
            .state('register', {
                parent: 'account',
                url: '/register',
                data: {
                    authorities: [],
                    pageTitle: 'register.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'app/account/register/register.html',
                        controller: 'RegisterController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('register');
                        return $translate.refresh();
                    }]
                },


                onEnter: ['$stateParams', '$state', '$uibModal',
                    function($stateParams, $state, $uibModal) {
                        alert(modalInstance !== null);
                        if (modalInstance !== null) return;
                        modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: 'app/account/register/register.html',
                            controller: 'RegisterController',
                            controllerAs: 'vm',
                            windowClass: 'login-modal-window'
                        });
                        modalInstance.result.then(
                            resetModal,
                            resetModal
                        );
                        modalInstance.result['finally'](function() {
                            modalInstance = null;
                            if ($state.$current.name === stateName) {
                                $state.go('^');
                            }
                        });
                    }
                ],
                onExit: function() {
                    if (modalInstance) {
                        modalInstance.close();
                    }
                }
            })

            .state('terms', {
                parent: 'app',
                url: '/terms',
                data: {
                    //authorities: ['ROLE_USER']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/home/terms.html',
                        controller: 'BlankController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('home');
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('hotel');
                        $translatePartialLoader.addPart('lookup');
                        return $translate.refresh();
                    }]
                }
            })

        ;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .factory('RegisterService', RegisterService);

    RegisterService.$inject = ['$uibModal'];

    function RegisterService($uibModal) {
        var service = {
            open: open
        };

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        return service;

        function open() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'app/account/register/register.html',
                controller: 'RegisterController',
                windowClass: 'login-modal-window',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('register');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('RegisterController', RegisterController);


    RegisterController.$inject = ['$log', '$translate', '$timeout', 'Auth', 'LoginService', '$uibModalInstance'];

    function RegisterController($log, $translate, $timeout, Auth, LoginService, $uibModalInstance) {
        var vm = this;

        vm.passwordpattern = /((?=.*\d)(?=.*[a-zA-Z]).{8,})/;

        vm.doNotMatch = null;
        vm.error = null;
        vm.errorUserExists = null;
        vm.login = function() {
            $uibModalInstance.dismiss('cancel');
            LoginService.open();
        };
        vm.register = register;
        vm.registerAccount = {};
        vm.success = null;
        vm.parent = $uibModalInstance;

        $timeout(function() {
            angular.element('#login').focus();
        });

        function register() {

            // RESET WHEN CLICK
            vm.doNotMatch = null;
            vm.error = null;
            vm.errorUserExists = null;
            vm.errorEmailExists = null;

            if (vm.registerAccount.password !== vm.confirmPassword) {
                vm.doNotMatch = 'ERROR';
            } else {
                vm.registerAccount.langKey = $translate.use();
                // vm.doNotMatch = null;
                // vm.error = null;
                // vm.errorUserExists = null;
                // vm.errorEmailExists = null;

                vm.registerAccount.login = vm.registerAccount.email;
                Auth.createAccount(vm.registerAccount).then(function() {
                    vm.success = 'OK';
                }).catch(function(response) {
                    vm.success = null;
                    if (response.status === 400 && response.data === 'login already in use') {
                        vm.errorUserExists = 'ERROR';
                    } else if (response.status === 400 && response.data === 'email address already in use') {
                        vm.errorEmailExists = 'ERROR';
                    } else {
                        vm.error = 'ERROR';
                    }
                });
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileTravellerNewController', ProfileTravellerNewController);

    ProfileTravellerNewController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', 'CustomerService', 'DialogService', 'Principal'];

    function ProfileTravellerNewController($log, $rootScope, $scope, $state, $stateParams, $timeout, CustomerService, DialogService, Principal) {
        var vm = this;

        $log.log($stateParams);

        vm.profileModel = {};


        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {


                vm.shortProfile = spResult;

                if (vm.shortProfile.defaultTravellerId) {
                    CustomerService.getCustomerTraveller(vm.shortProfile.defaultTravellerId).then(function success(result) {
                        //vm.profileModel = result;
                        //+++ get avartar
                        CustomerService.getCustomerProfileAvatar(vm.shortProfile.id).then(function success(resultAv) {

                            vm.profileModel.avatar = resultAv;

                            if (resultAv === null || resultAv === "") {
                                vm.profileModel.avatar = {
                                    avatarImage: null,
                                    avatarImageContentType: "",
                                    profileId: 0,
                                    inUsed: true,
                                    createdDate: ""
                                };
                            }
                            //vm.profileModel.profileid = vm.shortProfile.id;
                        });
                    });
                }
            });
        });

        var defaultMode = 'edit';
        vm.profileModel.type = 'traveller';
        vm.profileModel.memberCards = [];
        vm.profileModel.editMemberCards = [];
        vm.profileModel.phoneNumbers = [];

        if ($stateParams.traveller_id) {
            CustomerService.getCustomerTraveller($stateParams.traveller_id).then(function(result) {
                vm.profileModel = result;

                //update type
                vm.profileModel.type = 'traveller';

                // Init Phone
                vm.profileModel.phoneNumbers = [];
                if (vm.profileModel.phoneNumber1) vm.profileModel.phoneNumbers.push({
                    text: vm.profileModel.phoneNumber1
                });
                if (vm.profileModel.phoneNumber2) vm.profileModel.phoneNumbers.push({
                    text: vm.profileModel.phoneNumber2
                });
                if (vm.profileModel.phoneNumber3) vm.profileModel.phoneNumbers.push({
                    text: vm.profileModel.phoneNumber3
                });
                if (vm.profileModel.phoneNumber4) vm.profileModel.phoneNumbers.push({
                    text: vm.profileModel.phoneNumber4
                });
                if (vm.profileModel.phoneNumber5) vm.profileModel.phoneNumbers.push({
                    text: vm.profileModel.phoneNumber5
                });

                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }

                // Init membercards
                if (!vm.profileModel.memberCards) {
                    vm.profileModel.memberCards = [];
                }
                vm.profileModel.editMemberCards = [];
                vm.profileModel.editMemberCards.push({
                    cardType: '',
                    cardNumber: ''
                });

                $log.log(vm.profileModel);

                // 'view', 'edit'
                defaultMode = 'edit';

                if ($stateParams.mode) {
                    vm.profileModel.mode = $stateParams.mode;
                } else {
                    vm.profileModel.mode = defaultMode;
                }
            }, function error(result1) {
                vm.profileModel.mode = defaultMode;

                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }
                if (vm.profileModel.editMemberCards.length === 0) {
                    vm.profileModel.editMemberCards.push({
                        text: ''
                    });
                }
            });
        } else {
            vm.profileModel.mode = defaultMode;

            if (vm.profileModel.phoneNumbers.length === 0) {
                vm.profileModel.phoneNumbers.push({
                    text: ''
                });
            }
            if (vm.profileModel.editMemberCards.length === 0) {
                vm.profileModel.editMemberCards.push({
                    text: ''
                });
            }
        }

        vm.saveUserInfo = function(profiletravellerform) {

            if (!profiletravellerform.$valid) {
                angular.element("[name='" + profiletravellerform.$name + "']").find('.ng-invalid:visible:first').focus();
                return false;
            } else {
                //Validate card
                // Check for input
                var isValid = true;
                angular.forEach(vm.profileModel.editMemberCards, function(item, value) {
                    if (
                        (!item.curCardType && item.curCardNumber) ||
                        (item.curCardType && !item.curCardNumber)
                    ) {
                        var error = {
                            "title": "Thông Báo",
                            "message": "Bạn phải nhập đầy đủ thông tin của thẻ!"
                        };
                        isValid = false;
                        DialogService.openAlertDialog(error);
                    }
                });
                if (!isValid) return;

                var options = vm.profileModel;

                // Save info
                CustomerService.addCustomerTravellersProfile(options).then(function(result) {
                    $log.log("Save user info");
                    $log.log(result);

                    if (result.success) {
                        $state.go('user-profile-traveller');
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }

                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
            }



        };

        vm.cancel = function() {
            $state.go('user-profile-traveller');
        };

        vm.save = function() {
            $state.go('user-profile-traveller');
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileTravellerDeleteController', ProfileTravellerDeleteController);

    ProfileTravellerDeleteController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModalInstance', 'CustomerService'];

    function ProfileTravellerDeleteController($log, $rootScope, $scope, $state, $timeout, $uibModalInstance, CustomerService) {
        var vm = this;

        vm.profileModel = {};
        // 'view', 'edit'
        var defaultMode = 'view';

        vm.profileModel.cardMode = defaultMode;

        vm.travellerNames = '';
        angular.forEach($scope.customerTravellers, function(item, value) {
            if (item.checked) {
                vm.travellerNames += item.surName + ' ' + item.firstName + ", ";
            }
        });
        if (vm.travellerNames.endsWith(', ')) {
            vm.travellerNames = vm.travellerNames.substr(0, vm.travellerNames.length - 2);
        }

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        vm.submit = function() {
            // var ids = [];
            var ids = '';
            // console.log("$scope.creditCards = " + JSON.stringify($scope.creditCards));
            angular.forEach($scope.customerTravellers, function(item, value) {
                if (item.checked) {
                    // ids.push(item.id);
                    ids += item.id + ":";
                }
            });

            CustomerService.deleteCustomerTravellers(ids).then(function(result) {
                $state.go('user-profile-traveller', {}, {
                    reload: true
                });
            });

        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileTravellerController', ProfileTravellerController);

    ProfileTravellerController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModal', 'CustomerService', 'DialogService', 'Base64', 'Principal'];

    function ProfileTravellerController($log, $rootScope, $scope, $state, $timeout, $uibModal, CustomerService, DialogService, Base64, Principal) {
        var vm = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        vm.profileModel = {};

        Principal.identity().then(function(user) {
            vm.profileModel.socialUser = user.socialUser;
            $log.log(vm.profileModel.socialUser);
            //$log.log("loginuser="+ JSON.stringify(user));
            $log.log("loginuser=" + user);
        });

        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {
                //$log.log("spResult  = " + JSON.stringify(spResult));
                $log.log("spResult  = " + spResult);

                vm.shortProfile = spResult;

                //+++ initial data
                vm.profileModel = {};
                vm.profileModel.phoneNumbers = [];
                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }

                // Init membercards
                if (!vm.profileModel.memberCards) {
                    vm.profileModel.memberCards = [];
                }
                vm.profileModel.editMemberCards = [];
                vm.profileModel.editMemberCards.push({
                    cardType: '',
                    cardNumber: ''
                });

                vm.profileModel.type = 'profile';

                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
                //---

                if (vm.shortProfile.defaultTravellerId) {
                    CustomerService.getCustomerTraveller(vm.shortProfile.defaultTravellerId).then(function success(result) {
                        vm.profileModel = result;
                        //+++ get avartar
                        CustomerService.getCustomerProfileAvatar(vm.shortProfile.id).then(function success(resultAv) {

                            vm.profileModel.avatar = resultAv;

                            if (resultAv === null || resultAv === "") {
                                vm.profileModel.avatar = {
                                    avatarImage: null,
                                    avatarImageContentType: "",
                                    profileId: 0,
                                    inUsed: true,
                                    createdDate: ""
                                };
                            }
                            vm.profileModel.profileid = vm.shortProfile.id;
                        });

                        // Init Phone
                        vm.profileModel.phoneNumbers = [];
                        if (vm.profileModel.phoneNumber1) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber1
                        });
                        if (vm.profileModel.phoneNumber2) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber2
                        });
                        if (vm.profileModel.phoneNumber3) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber3
                        });
                        if (vm.profileModel.phoneNumber4) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber4
                        });
                        if (vm.profileModel.phoneNumber5) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber5
                        });

                        if (vm.profileModel.phoneNumbers.length === 0) {
                            vm.profileModel.phoneNumbers.push({
                                text: ''
                            });
                        }

                        // Init membercards
                        if (!vm.profileModel.memberCards) {
                            vm.profileModel.memberCards = [];
                        }
                        vm.profileModel.editMemberCards = [];
                        vm.profileModel.editMemberCards.push({
                            cardType: '',
                            cardNumber: ''
                        });

                        vm.profileModel.type = 'profile';

                        // 'view', 'edit'
                        // var defaultMode = 'view';
                        vm.profileModel.mode = 'view';

                        Principal.identity().then(function(user) {
                            vm.profileModel.socialUser = user.socialUser;
                            $log.log('++++++++++++++++++++++++++');
                            $log.log('vm.profileModel.socialUser =' + vm.profileModel.socialUser);
                        });

                    }, function error(result) {
                        $log.log('+++++>> getCustomerTraveller Error: ' + result);

                        // vm.profileModel = {};
                        // vm.profileModel.phoneNumbers = [];
                        // if (vm.profileModel.phoneNumbers.length === 0) {
                        //     vm.profileModel.phoneNumbers.push({text: ''});
                        // }
                        //
                        // // Init membercards
                        // if (!vm.profileModel.memberCards) {
                        //     vm.profileModel.memberCards = [];
                        // }
                        // vm.profileModel.editMemberCards = [];
                        // vm.profileModel.editMemberCards.push({cardType: '', cardNumber: ''});
                        //
                        // vm.profileModel.type = 'profile';
                        //
                        // // 'view', 'edit'
                        // // var defaultMode = 'view';
                        // vm.profileModel.mode = 'view';
                    });
                }

                vm.profileModel.type = "profile";
                //$log.log(vm.profileModel);
                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
            });
        });

        // 'view', 'edit'
        var defaultMode = 'view';

        vm.page = 1;

        vm.profileModel.travellerMode = defaultMode;

        // Get list of travellers
        vm.customerTravellers = [];
        CustomerService.getCustomerTravellersPagination(vm.page).then(function(result) {
            if (result && result.length > 0) {
                angular.forEach(result, function(traveller, index) {
                    if (index != 0) {
                        vm.customerTravellers.push(traveller);
                    }
                });
            }

            vm.totalPages = result.totalPages;
            vm.totalItems = result.totalItems;

            angular.forEach(vm.customerTravellers, function(item, value) {
                item.checked = false;
            });
        });


        // Check default traveller profile
        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {
                //$log.log("spResult  = " + JSON.stringify(spResult));
                $log.log("spResult  = " + spResult);

                vm.shortProfile = spResult;
                vm.profileModel.defaultTravellerId = spResult.defaultTravellerId;

            });
        });

        vm.pageChanged = function() {
            CustomerService.getCustomerTravellersPagination(vm.page).then(function(result) {
                if (result && result.length > 0) {
                    angular.forEach(result, function(traveller, index) {
                        // $log.log(item.lookupValue);
                        if (index != 0) {
                            vm.customerTravellers.push(traveller);
                        }
                    });
                }

                vm.totalPages = result.totalPages;
                vm.totalItems = result.totalItems;

                angular.forEach(vm.customerTravellers, function(item, value) {
                    item.checked = false;
                });
            });
        };

        // Collection Actions
        vm.openAddNewTraveller = function() {
            $state.go('user-profile-traveller.new');
        };

        vm.openDeleteTraveller = function(item, deleteAll) {
            if (deleteAll) {
                var chk = false;
                angular.forEach(vm.customerTravellers, function(item, value) {
                    if (item.checked) {
                        chk = true;
                    }
                });
                if (!chk) {
                    var error = {};
                    error.title = 'Error';
                    error.message = 'Bạn phải chọn bản ghi để xoá!';
                    DialogService.openAlertDialog(error);
                    return;
                }

                $scope.customerTravellers = vm.customerTravellers;

            } else {
                $scope.customerTravellers = [];
                item.checked = true;
                $scope.customerTravellers.push(item);
            }

            // $log.log($scope.customerTravellers);

            // $scope.cardItem = item;
            // $scope.customerTravellers = vm.customerTravellers;

            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                backdrop: 'static',
                templateUrl: 'app/account/profile/traveller/profile.traveller.delete.html',
                controller: 'ProfileTravellerDeleteController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        // Item actions
        vm.viewItem = function(item) {
            $state.go('user-profile-traveller/:traveller_id/:mode', {
                "traveller_id": item.id,
                "mode": 'view'
            });
        };

        vm.editItem = function(item) {
            $state.go('user-profile-traveller/:traveller_id/:mode', {
                "traveller_id": item.id,
                "mode": 'edit'
            });
        };

        vm.deleteItem = function(item) {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/account/profile/traveller/profile.traveller.delete.html',
                controller: 'ProfileCardDeleteController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider', 'TEMPLATE_URL'];

    function stateConfig($stateProvider, TEMPLATE_URL) {
        $stateProvider

            .state('user-profile-card-abstract', {
                abstract: true,
                data: {
                    authorities: ['ROLE_USER', 'ROLE_B2C']
                },
                parent: 'account'
            })
            .state('user-profile-traveller-abstract', {
                abstract: true,
                data: {
                    authorities: ['ROLE_USER', 'ROLE_B2C']
                },
                parent: 'account'
            })
            .state('user-profile-booking-abstract', {
                abstract: true,
                parent: 'account',
                data: {
                    authorities: ['ROLE_USER', 'ROLE_B2C']
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('password');
                        return $translate.refresh();
                    }]
                }
            })

            .state('user-profile', {
                parent: 'account',
                url: '/user-profile',
                data: {
                    authorities: ['ROLE_USER', 'ROLE_B2C']
                },
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/profile.html',
                        controller: 'ProfileController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        $translatePartialLoader.addPart('password');
                        return $translate.refresh();
                    }]
                }
            })

            // USER PROFILE CARDS
            .state('user-profile-card', {
                parent: 'user-profile-card-abstract',
                url: '/user-profile-card',
                data: {},
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/card/profile.card.html',
                        controller: 'ProfileCardController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {}
            })

            .state('user-profile-card.new', {
                parent: 'user-profile-card-abstract',
                url: '/user-profile-card.new',
                data: {},
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/card/profile.card.new.html',
                        controller: 'ProfileCardNewController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {}
            })

            // USER - PROFILE - TRAVELLER
            .state('user-profile-traveller', {
                parent: 'user-profile-traveller-abstract',
                url: '/user-profile-traveller',
                data: {},
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/traveller/profile.traveller.html',
                        controller: 'ProfileTravellerController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {}
            })

            .state('user-profile-traveller.new', {
                parent: 'user-profile-traveller-abstract',
                url: '/user-profile-traveller.new',
                data: {},
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/traveller/profile.traveller.new.html',
                        controller: 'ProfileTravellerNewController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {}
            })

            .state('user-profile-traveller/:traveller_id/:mode', {
                parent: 'user-profile-traveller-abstract',
                url: '/user-profile-traveller/:traveller_id/:mode',
                data: {},
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/traveller/profile.traveller.new.html',
                        controller: 'ProfileTravellerNewController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {}
            })

            // USER- BOOKING
            .state('user-profile-booking', {
                parent: 'user-profile-booking-abstract',
                url: '/user-profile-booking',
                data: {},
                views: {
                    'content@': {
                        templateUrl: function() {
                            return templateNameByParams(TEMPLATE_URL, 'profile_booking');
                        },
                        // 'app/account/profile/booking/profile.booking.html',
                        controller: 'ProfileBookingController',
                        controllerAs: 'vm'
                    }
                },
                params: {
                    'tab': 'tab-a'
                },
                resolve: {}
            })

            .state('user-profile-booking-air/:booking_number/:mode', {
                parent: 'user-profile-booking-abstract',
                url: '/user-profile-booking-air/:booking_number/:mode',
                data: {},
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/booking/profile.booking.air.view.html',
                        controller: 'ProfileBookingAirViewController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {}
            })

            .state('user-profile-booking-htl/:booking_number/:mode', {
                parent: 'user-profile-booking-abstract',
                url: '/user-profile-booking-htl/:booking_number/:mode',
                data: {},
                views: {
                    'content@': {
                        templateUrl: 'app/account/profile/booking/profile.booking.hotel.view.html',
                        controller: 'ProfileBookingHotelViewController',
                        controllerAs: 'vm'
                    }
                },
                params: {},
                resolve: {}
            });

    }

    function templateNameByParams(TEMPLATE_URL, type) {
        var param = String(Cookies.get('merchant_code')).toUpperCase();
        if (!TEMPLATE_URL[param] || !TEMPLATE_URL[param][type])
            return TEMPLATE_URL['DEFAULT'][type];
        return TEMPLATE_URL[param][type];
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileMemberCardDeleteController', ProfileMemberCardDeleteController);

    ProfileMemberCardDeleteController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModalInstance', 'CustomerService', 'DialogService', 'profileModel', 'item'];

    function ProfileMemberCardDeleteController($log, $rootScope, $scope, $state, $timeout, $uibModalInstance, CustomerService, DialogService, profileModel, item) {
        var vm = this;

        vm.profileModel = profileModel;

        // vm.profileModel = {};
        // // 'view', 'edit'
        // var defaultMode = 'view';
        //
        // vm.profileModel.cardMode = defaultMode;
        //
        // vm.cardNumbers = '';
        //
        // angular.forEach($scope.creditCards, function (item, value) {
        //     if (item.checked) {
        //         vm.cardNumbers += item.cardNumber + ", ";
        //     }
        // });
        //
        // if (vm.cardNumbers.endsWith(', ')) {
        //     vm.cardNumbers = vm.cardNumbers.substr(0, vm.cardNumbers.length - 2)
        // }

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        vm.submit = function() {
            // var ids = [];
            // var ids = '';
            // // console.log("$scope.creditCards = " + JSON.stringify($scope.creditCards));
            // angular.forEach($scope.creditCards, function (item, value) {
            //     if (item.checked) {
            //         // ids.push(item.id);
            //         ids += item.id + ":";
            //     }
            // });
            //
            // CustomerService.deleteCreditCards(ids).then(function (result) {
            //     //$uibModalInstance.dismiss('cancel');
            //     $state.go('user-profile-card', {}, {reload: true});
            // }, function error(result) {
            //     $uibModalInstance.dismiss('cancel');
            //     DialogService.openHttpAlertDilalog(result);
            // });

            var curItem;
            for (var i = 0; i < vm.profileModel.memberCards.length; i++) {
                curItem = vm.profileModel.memberCards[i];
                if (
                    item.cardType == curItem.cardType &&
                    item.cardNumber == curItem.cardNumber
                ) {
                    vm.profileModel.memberCards.splice(i, 1);
                }
            }

            $uibModalInstance.dismiss('cancel');

        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileController', ProfileController);

    ProfileController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModal', 'CustomerService', 'Principal', 'DialogService'];

    function ProfileController($log, $rootScope, $scope, $state, $timeout, $uibModal, CustomerService, Principal, DialogService) {
        var vm = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        vm.shortProfile = {};
        vm.profileModel = {};

        Principal.identity().then(function(user) {
            vm.profileModel.socialUser = user.socialUser;
            $log.log(vm.profileModel.socialUser);
            //$log.log("loginuser="+ JSON.stringify(user));
            $log.log("loginuser=" + user);
        });

        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {
                //$log.log("spResult  = " + JSON.stringify(spResult));
                $log.log("spResult  = " + spResult);

                vm.shortProfile = spResult;

                //+++ initial data
                vm.profileModel = {};
                vm.profileModel.phoneNumbers = [];
                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }

                // Init membercards
                if (!vm.profileModel.memberCards) {
                    vm.profileModel.memberCards = [];
                }
                vm.profileModel.editMemberCards = [];
                vm.profileModel.editMemberCards.push({
                    cardType: '',
                    cardNumber: ''
                });

                vm.profileModel.type = 'profile';

                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
                //---

                if (vm.shortProfile.defaultTravellerId) {
                    CustomerService.getCustomerTraveller(vm.shortProfile.defaultTravellerId).then(function success(result) {
                        vm.profileModel = result;
                        //+++ get avartar
                        CustomerService.getCustomerProfileAvatar(vm.shortProfile.id).then(function success(resultAv) {

                            vm.profileModel.avatar = resultAv;

                            if (resultAv === null || resultAv === "") {
                                vm.profileModel.avatar = {
                                    avatarImage: null,
                                    avatarImageContentType: "",
                                    profileId: 0,
                                    inUsed: true,
                                    createdDate: ""
                                };
                            }
                            vm.profileModel.profileid = vm.shortProfile.id;
                        });

                        // Init Phone
                        vm.profileModel.phoneNumbers = [];
                        if (vm.profileModel.phoneNumber1) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber1
                        });
                        if (vm.profileModel.phoneNumber2) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber2
                        });
                        if (vm.profileModel.phoneNumber3) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber3
                        });
                        if (vm.profileModel.phoneNumber4) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber4
                        });
                        if (vm.profileModel.phoneNumber5) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber5
                        });

                        if (vm.profileModel.phoneNumbers.length === 0) {
                            vm.profileModel.phoneNumbers.push({
                                text: ''
                            });
                        }

                        // Init membercards
                        if (!vm.profileModel.memberCards) {
                            vm.profileModel.memberCards = [];
                        }
                        vm.profileModel.editMemberCards = [];
                        vm.profileModel.editMemberCards.push({
                            cardType: '',
                            cardNumber: ''
                        });

                        vm.profileModel.type = 'profile';

                        // 'view', 'edit'
                        // var defaultMode = 'view';
                        vm.profileModel.mode = 'view';

                        Principal.identity().then(function(user) {
                            vm.profileModel.socialUser = user.socialUser;
                            $log.log('++++++++++++++++++++++++++');
                            $log.log('vm.profileModel.socialUser =' + vm.profileModel.socialUser);
                        });

                    }, function error(result) {
                        $log.log('+++++>> getCustomerTraveller Error: ' + result);

                        // vm.profileModel = {};
                        // vm.profileModel.phoneNumbers = [];
                        // if (vm.profileModel.phoneNumbers.length === 0) {
                        //     vm.profileModel.phoneNumbers.push({text: ''});
                        // }
                        //
                        // // Init membercards
                        // if (!vm.profileModel.memberCards) {
                        //     vm.profileModel.memberCards = [];
                        // }
                        // vm.profileModel.editMemberCards = [];
                        // vm.profileModel.editMemberCards.push({cardType: '', cardNumber: ''});
                        //
                        // vm.profileModel.type = 'profile';
                        //
                        // // 'view', 'edit'
                        // // var defaultMode = 'view';
                        // vm.profileModel.mode = 'view';
                    });
                }

                vm.profileModel.type = "profile";
                //$log.log(vm.profileModel);
                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
            });
        });

        vm.saveUserInfo = function(userprofileform) {

            if (!userprofileform.$valid) {
                angular.element("[name='" + userprofileform.$name + "']").find('.ng-invalid:visible:first').focus();
                return false;
            } else {
                //Validate card
                // Check for input
                var isValid = true;
                angular.forEach(vm.profileModel.editMemberCards, function(item, value) {
                    if (
                        (!item.curCardType && item.curCardNumber) ||
                        (item.curCardType && !item.curCardNumber)
                    ) {
                        var error = {
                            "title": "Error",
                            "message": "Bạn phải nhập đầy đủ thông tin của thẻ!"
                        };
                        isValid = false;
                        DialogService.openAlertDialog(error);
                    }
                });

                if (!isValid) return;

                var options = vm.profileModel;
                options.isDefault = true;

                // Save info
                CustomerService.addCustomerTravellersProfile(options).then(function(result) {
                    $log.log("Save user info");
                    $log.log(result);

                    // if (result.id) {
                    if (result && result[0]) {
                        vm.shortProfile.defaultTravellerId = result[0].id;
                    }
                    var avatar = options.avatar;
                    if (avatar && avatar.profileId === vm.shortProfile.id) {
                        CustomerService.updateAvatarCustomer(avatar);
                    }

                    CustomerService.updateCustomerProfile(vm.shortProfile).then(function() {
                        $state.go('user-profile', {}, {
                            reload: true
                        });
                    }, function(result) {
                        DialogService.openHttpAlertDilalog(result);
                    });
                    // }

                    // update user profile with default travellerid

                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });

            }


        };

        vm.cancel = function() {
            // vm.profileModel.mode = defaultMode;
            $state.go('user-profile', {}, {
                reload: true
            });
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileCardNewController', ProfileCardNewController);

    ProfileCardNewController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModal', 'CustomerService', 'DialogService', 'GlobalSrv', 'DataService', 'MetaData'];

    function ProfileCardNewController($log, $rootScope, $scope, $state, $timeout, $uibModal, CustomerService, DialogService, GlobalSrv, DataService, MetaData) {
        var vm = this;

        vm.profileModel = {};
        // 'view', 'edit'
        var defaultMode = 'view';

        var currentTime = new Date();

        vm.currentMonth = currentTime.getMonth() + 1;
        vm.currentYear = currentTime.getFullYear();
        vm.maxYear = vm.currentYear + 20;

        vm.allCountries = GlobalSrv.getAllCountries();
        if (vm.allCountries == [] || vm.allCountries.length == 0) {
            MetaData.getCountries().then(function success(result) {
                vm.allCountries = result;
            });
        }

        vm.cardModel = {};

        vm.profileModel.cardMode = defaultMode;
        vm.profileModel.paToken = null;

        $scope.$on('DoPaymentWith3DAuthConfirmation', function(event, item) {
            $log.log("DoPaymentWith3DAuth - " + item);
            vm.profileModel.paToken = item;

            vm.doCreateCreditCards();
        });

        /**
         *
         */
        vm.doCreateCreditCards = function() {
            vm.cardModel.type = $scope.cardForm.cardNumber.$ccType ? $scope.cardForm.cardNumber.$ccType.toUpperCase() : "OTHER";
            CustomerService.createCreditCards(vm.cardModel, vm.profileModel.paToken)
                .then(function success(result) {
                    if (result.authReq && result.authReq.acsUrl) {
                        $log.log(result.authReq.acsUrl);
                        vm.open3DAuth(
                            result.authReq.acsUrl, result.authReq.paReq, result.authReq.mdxId, result.authReq.termUrl
                        );

                    } else {
                        //reset payment_auth token
                        vm.profileModel.paToken = null;

                        if (result.success) {
                            $state.go('user-profile-card');
                        } else {
                            DialogService.openHttpAlertDilalog(result);
                        }
                    }

                }, function error(result) {
                    DialogService.openHttpAlertDilalog(result);
                });
        };

        /**
         *
         */
        vm.cancel = function() {
            $state.go('user-profile-card');
        };


        /**
         *
         * @param cardForm
         * @returns {boolean}
         */
        vm.save = function(cardForm) {

            if (!cardForm.$valid) {
                angular.element("[name='" + cardForm.$name + "']").find('.ng-invalid:visible:first').focus();
                return false;
            } else {
                vm.doCreateCreditCards();
            }

        };

        /**
         * Define dialog instances
         */
        var modal3DAuthInstance = null;
        var reset3DAuthModal = function() {
            modal3DAuthInstance = null;
        };

        /**
         * Open 3D Authentication for CREDIT payment option
         *
         * @param url
         * @param paReq
         * @param md
         * @param termUrl
         */
        vm.open3DAuth = function(url, paReq, md, termUrl) {
            if (modal3DAuthInstance !== null) return;
            modal3DAuthInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.3d.auth.external.html',
                controller: 'FlightPayment3DAuthExternalController',
                controllerAs: 'vm',
                windowClass: 'modal-window-extension',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    paReq: function() {
                        return paReq;
                    },
                    md: function() {
                        return md;
                    },
                    termUrl: function() {
                        return termUrl;
                    }
                }
            });
            modal3DAuthInstance.result.then(
                reset3DAuthModal,
                reset3DAuthModal
            );
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileCardDeleteController', ProfileCardDeleteController);

    ProfileCardDeleteController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModalInstance', 'CustomerService', 'DialogService'];

    function ProfileCardDeleteController($log, $rootScope, $scope, $state, $timeout, $uibModalInstance, CustomerService, DialogService) {
        var vm = this;

        vm.profileModel = {};
        // 'view', 'edit'
        var defaultMode = 'view';

        vm.profileModel.cardMode = defaultMode;

        vm.cardNumbers = '';

        angular.forEach($scope.creditCards, function(item, value) {
            if (item.checked) {
                vm.cardNumbers += item.cardNumber + ", ";
            }
        });

        if (vm.cardNumbers.endsWith(', ')) {
            vm.cardNumbers = vm.cardNumbers.substr(0, vm.cardNumbers.length - 2);
        }

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        vm.submit = function() {
            // var ids = [];
            var ids = '';
            // console.log("$scope.creditCards = " + JSON.stringify($scope.creditCards));
            angular.forEach($scope.creditCards, function(item, value) {
                if (item.checked) {
                    // ids.push(item.id);
                    ids += item.id + ":";
                }
            });

            CustomerService.deleteCreditCards(ids).then(function(result) {
                //$uibModalInstance.dismiss('cancel');
                $state.go('user-profile-card', {}, {
                    reload: true
                });
            }, function error(result) {
                $uibModalInstance.dismiss('cancel');
                DialogService.openHttpAlertDilalog(result);
            });

        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileCardController', ProfileCardController);

    ProfileCardController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModal', 'CustomerService', 'DialogService', 'Base64', 'Principal'];

    function ProfileCardController($log, $rootScope, $scope, $state, $timeout, $uibModal, CustomerService, DialogService, Base64, Principal) {
        var vm = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        vm.profileModel = {};

        Principal.identity().then(function(user) {
            vm.profileModel.socialUser = user.socialUser;
            $log.log(vm.profileModel.socialUser);
            //$log.log("loginuser="+ JSON.stringify(user));
            $log.log("loginuser=" + user);
        });

        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {
                //$log.log("spResult  = " + JSON.stringify(spResult));
                $log.log("spResult  = " + spResult);

                vm.shortProfile = spResult;

                //+++ initial data
                vm.profileModel = {};
                vm.profileModel.phoneNumbers = [];
                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }

                // Init membercards
                if (!vm.profileModel.memberCards) {
                    vm.profileModel.memberCards = [];
                }
                vm.profileModel.editMemberCards = [];
                vm.profileModel.editMemberCards.push({
                    cardType: '',
                    cardNumber: ''
                });

                vm.profileModel.type = 'profile';

                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
                //---

                if (vm.shortProfile.defaultTravellerId) {
                    CustomerService.getCustomerTraveller(vm.shortProfile.defaultTravellerId).then(function success(result) {
                        vm.profileModel = result;
                        //+++ get avartar
                        CustomerService.getCustomerProfileAvatar(vm.shortProfile.id).then(function success(resultAv) {

                            vm.profileModel.avatar = resultAv;

                            if (resultAv === null || resultAv === "") {
                                vm.profileModel.avatar = {
                                    avatarImage: null,
                                    avatarImageContentType: "",
                                    profileId: 0,
                                    inUsed: true,
                                    createdDate: ""
                                };
                            }
                            vm.profileModel.profileid = vm.shortProfile.id;
                        });

                        // Init Phone
                        vm.profileModel.phoneNumbers = [];
                        if (vm.profileModel.phoneNumber1) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber1
                        });
                        if (vm.profileModel.phoneNumber2) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber2
                        });
                        if (vm.profileModel.phoneNumber3) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber3
                        });
                        if (vm.profileModel.phoneNumber4) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber4
                        });
                        if (vm.profileModel.phoneNumber5) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber5
                        });

                        if (vm.profileModel.phoneNumbers.length === 0) {
                            vm.profileModel.phoneNumbers.push({
                                text: ''
                            });
                        }

                        // Init membercards
                        if (!vm.profileModel.memberCards) {
                            vm.profileModel.memberCards = [];
                        }
                        vm.profileModel.editMemberCards = [];
                        vm.profileModel.editMemberCards.push({
                            cardType: '',
                            cardNumber: ''
                        });

                        vm.profileModel.type = 'profile';

                        // 'view', 'edit'
                        // var defaultMode = 'view';
                        vm.profileModel.mode = 'view';

                        Principal.identity().then(function(user) {
                            vm.profileModel.socialUser = user.socialUser;
                            $log.log('++++++++++++++++++++++++++');
                            $log.log('vm.profileModel.socialUser =' + vm.profileModel.socialUser);
                        });

                    }, function error(result) {
                        $log.log('+++++>> getCustomerTraveller Error: ' + result);

                        // vm.profileModel = {};
                        // vm.profileModel.phoneNumbers = [];
                        // if (vm.profileModel.phoneNumbers.length === 0) {
                        //     vm.profileModel.phoneNumbers.push({text: ''});
                        // }
                        //
                        // // Init membercards
                        // if (!vm.profileModel.memberCards) {
                        //     vm.profileModel.memberCards = [];
                        // }
                        // vm.profileModel.editMemberCards = [];
                        // vm.profileModel.editMemberCards.push({cardType: '', cardNumber: ''});
                        //
                        // vm.profileModel.type = 'profile';
                        //
                        // // 'view', 'edit'
                        // // var defaultMode = 'view';
                        // vm.profileModel.mode = 'view';
                    });
                }

                vm.profileModel.type = "profile";
                //$log.log(vm.profileModel);
                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
            });
        });

        // 'view', 'edit'
        var defaultMode = 'view';

        vm.profileModel.cardMode = defaultMode;

        vm.creditCards = [];
        CustomerService.getCreditCards().then(function(result) {
            vm.creditCards = result;
            angular.forEach(vm.creditCards, function(item, value) {
                item.checked = false;
            });
        });

        vm.openAddNewCard = function() {
            $state.go('user-profile-card.new');
        };

        vm.openDeleteCards = function(item, deleteAll) {

            if (vm.creditCards) {
                var chk = false;
                angular.forEach(vm.creditCards, function(item, value) {
                    if (item.checked) {
                        chk = true;
                    }
                });
                if (!chk) {
                    var error = {};
                    error.title = 'Error';
                    error.message = 'Bạn phải chọn bản ghi để xoá!';
                    DialogService.openAlertDialog(error);
                    return;
                }

            }

            // $scope.cardItem = item;
            $scope.creditCards = vm.creditCards;

            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                backdrop: 'static',
                templateUrl: 'app/account/profile/card/profile.card.delete.html',
                controller: 'ProfileCardDeleteController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileBookingHotelViewController', ProfileBookingHotelViewController);

    ProfileBookingHotelViewController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$uibModal', 'CustomerService', 'DateUtils', 'DataService', 'Hotel', 'DialogService', 'Base64', 'Principal', 'Flight', '$window', '$cookies', 'MerchantService'];

    function ProfileBookingHotelViewController($log, $rootScope, $scope, $state, $stateParams, $timeout, $uibModal, CustomerService, DateUtils, DataService, Hotel, DialogService, Base64, Principal, Flight, $window, $cookies, MerchantService) {
        var vm = this;

        vm.viettelPayment = viettelPayment;

        vm.showPaymentInfo = !MerchantService.isSimpleView();
        vm.showProfileInfo = !MerchantService.isSimpleView();
        vm.merchantList = ['FASTGO'];
        vm.currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;
        vm.profileModel = {};
        Principal.identity().then(function(user) {
            vm.profileModel.socialUser = user.socialUser;
            $log.log(vm.profileModel.socialUser);
            //$log.log("loginuser="+ JSON.stringify(user));
            $log.log("loginuser=" + user);
        });
        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {
                //$log.log("spResult  = " + JSON.stringify(spResult));
                $log.log("spResult  = " + spResult);

                vm.shortProfile = spResult;

                //+++ initial data
                vm.profileModel = {};
                vm.profileModel.phoneNumbers = [];
                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }

                // Init membercards
                if (!vm.profileModel.memberCards) {
                    vm.profileModel.memberCards = [];
                }
                vm.profileModel.editMemberCards = [];
                vm.profileModel.editMemberCards.push({
                    cardType: '',
                    cardNumber: ''
                });

                vm.profileModel.type = 'profile';

                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
                //---

                if (vm.shortProfile.defaultTravellerId) {
                    CustomerService.getCustomerTraveller(vm.shortProfile.defaultTravellerId).then(function success(result) {
                        vm.profileModel = result;
                        //+++ get avartar
                        CustomerService.getCustomerProfileAvatar(vm.shortProfile.id).then(function success(resultAv) {

                            vm.profileModel.avatar = resultAv;

                            if (resultAv === null || resultAv === "") {
                                vm.profileModel.avatar = {
                                    avatarImage: null,
                                    avatarImageContentType: "",
                                    profileId: 0,
                                    inUsed: true,
                                    createdDate: ""
                                };
                            }
                            vm.profileModel.profileid = vm.shortProfile.id;
                        });

                        // Init Phone
                        vm.profileModel.phoneNumbers = [];
                        if (vm.profileModel.phoneNumber1) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber1
                        });
                        if (vm.profileModel.phoneNumber2) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber2
                        });
                        if (vm.profileModel.phoneNumber3) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber3
                        });
                        if (vm.profileModel.phoneNumber4) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber4
                        });
                        if (vm.profileModel.phoneNumber5) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber5
                        });

                        if (vm.profileModel.phoneNumbers.length === 0) {
                            vm.profileModel.phoneNumbers.push({
                                text: ''
                            });
                        }

                        // Init membercards
                        if (!vm.profileModel.memberCards) {
                            vm.profileModel.memberCards = [];
                        }
                        vm.profileModel.editMemberCards = [];
                        vm.profileModel.editMemberCards.push({
                            cardType: '',
                            cardNumber: ''
                        });

                        vm.profileModel.type = 'profile';

                        // 'view', 'edit'
                        // var defaultMode = 'view';
                        vm.profileModel.mode = 'view';

                        Principal.identity().then(function(user) {
                            vm.profileModel.socialUser = user.socialUser;
                            $log.log('++++++++++++++++++++++++++');
                            $log.log('vm.profileModel.socialUser =' + vm.profileModel.socialUser);
                        });

                    }, function error(result) {
                        $log.log('+++++>> getCustomerTraveller Error: ' + result);

                        // vm.profileModel = {};
                        // vm.profileModel.phoneNumbers = [];
                        // if (vm.profileModel.phoneNumbers.length === 0) {
                        //     vm.profileModel.phoneNumbers.push({text: ''});
                        // }
                        //
                        // // Init membercards
                        // if (!vm.profileModel.memberCards) {
                        //     vm.profileModel.memberCards = [];
                        // }
                        // vm.profileModel.editMemberCards = [];
                        // vm.profileModel.editMemberCards.push({cardType: '', cardNumber: ''});
                        //
                        // vm.profileModel.type = 'profile';
                        //
                        // // 'view', 'edit'
                        // // var defaultMode = 'view';
                        // vm.profileModel.mode = 'view';
                    });
                }

                vm.profileModel.type = "profile";
                //$log.log(vm.profileModel);
                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
            });
        });
        vm.bookingModel = {};
        vm.returnBookingModel = {};
        vm.searchOptions = {};

        vm.paymentModel = {};

        vm.bookingModel.airView = true;
        vm.paymentModel.airView = true;

        //TODO: remove later
        vm.paymentModel.cardModel = {};

        vm.paymentModel.paToken = null;

        var bookingNumber = Base64.decodeString($stateParams.booking_number);

        $log.log("ProfileBookingHotelViewController - bookingNumber:" + bookingNumber);

        CustomerService.getBookingByNumber(bookingNumber).then(function(result) {

            vm.bkgroup = result;
            $log.log("+++++ vm.bkgroup = ");
            $log.log(vm.bkgroup);

            vm.selectedHotel = vm.bkgroup.hotelAvailability;
            vm.selectedHotelProduct = vm.bkgroup.hotelAvailability.products[0];
            vm.selectedHotelRoom = vm.bkgroup.hotelAvailability.products[0].rooms[0];

            $log.log('CustomerService.getBooking result = ');

            $log.log("CustomerService.getBookingByNumber result:");
            //$log.log("data=" + JSON.stringify(result));
            $log.log("data=" + result);
            $log.log("++++++++++++++++++++++++++++");

            if (result && result.bookingInfo) {
                vm.bjson = result;

                vm.bookingModel = result.bookingInfo;

                $log.log('vn.bookingModel = ');
                $log.log(vm.bookingModel);
                //vm.bookingModel.duration = DateUtils.timeDiff(vm.bookingModel.departureDate, vm.bookingModel.returnDate);

                // var content = vm.bookingModel.content.bookingContent;
                // $log.log(content);
                // var obj = JSON.parse(content).items[0];

                var obj = result;

                // Process contacts view
                var contactInfos = [];
                if (obj.bookingInfo && obj.bookingInfo.contactInfos) {
                    angular.forEach(obj.bookingInfo.contactInfos, function(value, key) {
                        var c = value;

                        contactInfos.push({
                            "ciGender": c.gender,
                            "ciEmail": c.email,
                            "ciName": c.surName,
                            "ciFName": c.firstName,
                            "ciMobileCode": c.phoneCode1,
                            "ciMobile": c.phoneNumber1
                        });
                    });
                }

                obj.contacts = contactInfos;

                // Process customer view
                var customerInfos = [];
                if (obj.travelerInfo && obj.travelerInfo.airTravelers) {
                    angular.forEach(obj.travelerInfo.airTravelers, function(value, key) {
                        var c = value;

                        // var cardType;
                        // var cardNumber;
                        // if (c.memberCards && c.memberCards[0]) {
                        //     cardType = c.memberCards[0].cardType;
                        //     cardNumber = c.memberCards[0].cardNumber;
                        // }

                        var customer = {
                            /* passport info */
                            "cuPp": "Passport",
                            "cuId": c.passport.passportNumber,
                            "cuExpiredDate": c.passport.expiryDate,
                            "cuNationality": c.passport.country,
                            /* passenger info */
                            "type": c.passengerType,
                            "cuName": c.passengerName.firstName,
                            "cuFamilyName": c.passengerName.lastName,
                            "cuGender": c.passengerName.title,
                            //"cuDob": new Date(c.dateOfBirth * 1000),
                            "cuDob": c.dateOfBirth,
                            "cuCardType": c.frequentFlyerType,
                            "cuCardNo": c.frequentFlyerNumber,
                            "ssrRequest": c.specialServiceRequest
                        };

                        if (c.specialServiceRequest && c.specialServiceRequest.ssrItems) {
                            customer.departServiceRequests = [];
                            customer.returnServiceRequests = [];

                            angular.forEach(c.specialServiceRequest.ssrItems, function(ssr) {
                                if (ssr.direction == 'DEPARTURE') {
                                    var tmp = ssr;
                                    customer.departServiceRequests.push(tmp);
                                } else if (ssr.direction == 'RETURN') {
                                    var tmp = ssr;
                                    customer.returnServiceRequests.push(tmp);
                                }
                            });
                        }

                        customerInfos.push(customer);

                    });
                }

                obj.customers = customerInfos;

                // Process tax view
                obj.biCompany = vm.bookingModel.taxCompanyName;
                obj.biMst = vm.bookingModel.taxNumber;
                obj.biMobile = vm.bookingModel.taxAddress2;
                obj.biAddress = vm.bookingModel.taxAddress1;

                // bind to view
                vm.orgBookingModel = obj;

                /*+++ 20Nov2017-Tung: disable pay_later */
                if (vm.bjson.bookingInfo) {
                    vm.bjson.bookingInfo.showPayLaterOption = false;
                }
                /*--- 20Nov2017-Tung */

            } else {
                $log.log("CustomerService.getBookingByNumber Booking Empty");
                // Go to
                $state.go('user-profile-booking', {
                    'tab': 'tab-h'
                });
            }
        });

        /**
         * reset voucher event
         */
        $scope.$on('event-payment-voucher-reset', function(event, item) {
            vm.bookingModel.voucher = {};
        });

        /**
         * Handler IssueTicket from Popup payment for ATM_DEBIT
         */
        $scope.$on('IssueTicket', function(event, item) {
            //+++ show waiting message
            vm.openLoading();
            //---

            Hotel.orderTickets(vm.bookingModel, vm.bjson)
                .then(function(result1) {
                    $log.log("Get Flight.orderTickets()");
                    $log.log(result1);

                    vm.paymentModel.payFailed = !result1.success;
                    DataService.setHotelPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    // Go to
                    $state.go('hotel-booking-result/:booking_number/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                    });


                }, function error(result1) {
                    // Go to
                    // $state.go('hotel-booking-result');
                    $log.log("error orderTickets");
                    //$log.log(JSON.stringify(result1));
                    $log.log(result1);

                    // DialogService.openHttpAlertDilalog(result1);
                    vm.paymentModel.payFailed = true;
                    DataService.setHotelPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    //$state.go('booking-result');
                    $state.go('hotel-booking-result/:booking_number/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                    });
                });
        });

        /**
         *
         */
        $scope.$on('DoPaymentWith3DAuthConfirmation', function(event, item) {
            $log.log("DoPaymentWith3DAuth - " + item);
            vm.paymentModel.paToken = item;

            vm.doPayment();
        });

        /**
         * Process payment and issue ticket
         */
        vm.doConfirm = function() {
            DataService.setPaymentModel(vm.paymentModel);
            DataService.setBookingModel(vm.bookingModel);

            $log.log("doConfirm - PaymentOption:" + vm.paymentModel.paymentOption);

            // Do redeem
            // Check need to do redeem
            vm.bookingModel.voucher = vm.orgBookingModel.voucher;
            if (vm.bookingModel.voucher)
                $log.log('vm.bookingModel.voucher.voucherValid = ' + vm.bookingModel.voucher.voucherValid);
            if (vm.bookingModel.voucher && vm.bookingModel.voucher.voucherValid) {
                Hotel.redeemVoucher(vm.bookingModel).then(function success(result) {

                    if (result.redeemValid && result.success) {
                        $log.log('result.redeemValid = ' + result.redeemValid + ", result.success = " + result.success);
                        vm.doPayment();
                    } else {
                        $rootScope.$broadcast("event-flight-load-completed", null);

                        // Go to
                        // $state.go('hotel-booking-result');
                        $log.log("error paymentBooking");
                        //$log.log(JSON.stringify(result));
                        $log.log(result);

                        // DialogService.openHttpAlertDilalog(result);
                        vm.paymentModel.payFailed = true;
                        DataService.setPaymentModel(vm.paymentModel);

                        //$state.go('booking-result');
                        // $state.go('booking-result', {"profileBooking": vm.bookingModel});
                        $state.go('hotel-booking-result/:booking_number/:params', {
                            "profileBooking": vm.bookingModel,
                            "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                            "params": ''
                            // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                        });
                    }

                }, function error(result) {
                    $rootScope.$broadcast("event-flight-load-completed", null);

                    // Go to
                    // $state.go('hotel-booking-result');
                    $log.log("error paymentBooking");
                    //$log.log(JSON.stringify(result));
                    $log.log(result);

                    // DialogService.openHttpAlertDilalog(result);
                    vm.paymentModel.payFailed = true;
                    DataService.setPaymentModel(vm.paymentModel);

                    //$state.go('booking-result');
                    // $state.go('booking-result', {"profileBooking": vm.bookingModel});
                    $state.go('hotel-booking-result/:booking_number/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber),
                        "params": ''
                        // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                    });
                });
            } else {
                vm.doPayment();
            }
        };

        /**
         *
         */
        vm.doPayment = function() {

            // Try to payment booking
            if (vm.paymentModel.paymentOption === 'ATM_DEBIT') {
                Hotel.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    // alert(JSON.stringify(result));

                    if (result.hasPaymentAuth && result.paymentAuthUrl) {
                        $log.log(result.paymentAuthUrl);
                        vm.open(result.paymentAuthUrl);
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function(result) {

                    DialogService.openHttpAlertDilalog(result);
                });
            }
            if (vm.paymentModel.paymentOption === 'VNPAYQR') {
                Hotel.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    // alert(JSON.stringify(result));
                    vnpay.open({
                        width: 900,
                        height: 800,
                        url: result.paymentAuthUrl
                    });
                });

                // window.location.href = "#/payment-vnpay-qr/"+$stateParams.booking_number+"/FLIGHT";         
            }
            if (vm.paymentModel.paymentOption !== 'VNPAYQR' && vm.paymentModel.paymentOption !== 'ATM_DEBIT') {
                //+++ show waiting message
                vm.openLoading();
                //---

                Hotel.paymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson)
                    .then(function(result) {

                        $log.log("Get Hotel.paymentBooking()");
                        $log.log(result);

                        $rootScope.$broadcast("event-flight-load-completed", null);

                        if (result.hasPaymentAuth && result.paymentAuthUrl) {
                            $log.log(result.paymentAuthUrl);
                            vm.open3DAuth(
                                result.paymentAuthUrl, result.paReq, result.md, result.termUrl
                            );

                        } else {
                            // Try to order - tickets
                            if (vm.paymentModel.paymentOption === 'CREDIT' ||
                                vm.paymentModel.paymentOption === 'BALANCE') {
                                // Try to save credit card for later
                                // vm.paymentModel.cardModel.type = $scope.cardForm.cardNumber.$ccType ? $scope.cardForm.cardNumber.$ccType.toUpperCase() : "OTHER";
                                if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.cardId == -1 && vm.paymentModel.cardModel.checked) {

                                    CustomerService.createCreditCards(vm.paymentModel.cardModel, vm.paymentModel.paToken)
                                        .then(function success(result) {
                                            //$state.go('user-profile-card');
                                            $log.log("success createCreditCards");
                                        }, function error(result) {
                                            //DialogService.openHttpAlertDilalog(result);
                                            $log.log("error createCreditCards");
                                            //$log.log(JSON.stringify(result));
                                            $log.log(result);
                                        });
                                }

                                //process payment
                                $rootScope.$broadcast("IssueTicket", null);

                            } else {

                                // $rootScope.$broadcast("event-flight-load-completed", null);

                                vm.paymentModel.payFailed = !result.success;
                                DataService.setHotelPaymentModel(vm.paymentModel);

                                // $state.go('hotel-booking-result', {"profileBooking": vm.bookingModel});
                                $state.go('hotel-booking-result/:booking_number/:params', {
                                    "profileBooking": vm.bookingModel,
                                    "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                                });
                            }
                        }

                        //reset payment token
                        vm.paymentModel.paToken = null;

                        // Go to
                        //$state.go('hotel-booking-result');
                    }, function error(result) {

                        $rootScope.$broadcast("event-flight-load-completed", null);

                        // Go to
                        // $state.go('hotel-booking-result');
                        $log.log("error paymentBooking");
                        //$log.log(JSON.stringify(result));
                        $log.log(result);

                        // DialogService.openHttpAlertDilalog(result);
                        vm.paymentModel.payFailed = true;
                        DataService.setHotelPaymentModel(vm.paymentModel);

                        //$state.go('booking-result');
                        // $state.go('hotel-booking-result', {"profileBooking": vm.bookingModel});
                        $state.go('hotel-booking-result/:booking_number/:params', {
                            "profileBooking": vm.bookingModel,
                            "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber)
                        });
                    });
            }

        };

        /**
         * Define dialog instances
         */

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        var modal3DAuthInstance = null;
        var reset3DAuthModal = function() {
            modal3DAuthInstance = null;
        };

        /**
         *
         * @param url
         */
        vm.open = function(url) {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.external.html',
                controller: 'HotelPaymentExternalController',
                controllerAs: 'vm',
                windowClass: 'modal-window-extension',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        /**
         * Open 3D Authentication for CREDIT payment option
         *
         * @param url
         * @param paReq
         * @param md
         * @param termUrl
         */
        vm.open3DAuth = function(url, paReq, md, termUrl) {
            if (modal3DAuthInstance !== null) return;
            modal3DAuthInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.3d.auth.external.html',
                controller: 'FlightPayment3DAuthExternalController',
                controllerAs: 'vm',
                windowClass: 'modal-window-extension',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    paReq: function() {
                        return paReq;
                    },
                    md: function() {
                        return md;
                    },
                    termUrl: function() {
                        return termUrl;
                    }
                }
            });
            modal3DAuthInstance.result.then(
                reset3DAuthModal,
                reset3DAuthModal
            );
        };

        /**
         *
         */
        vm.cancel = function() {
            $state.go('user-profile-booking', {
                'tab': 'tab-h'
            });
        };

        /**
         *
         */
        vm.openLoading = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/flight.loading.html',
                controller: 'HotelLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        function viettelPayment(bookingNumber) {

            // alert("Implement viettel");

            Flight.getViettelPaymentURL(bookingNumber).then(function(response) {
                $window.location.href = response;

            }, function error(response) {
                $log.log('errorCallback Create viettel order');
                // $log.log("response = " + JSON.stringify(response));
            });
            return;

            // TODO: Implement Viettel payment. Can reuse code from A.Tam
        }


        vm.viettelPaymentSubmit = function() {
            CustomerService.getBookingByNumber(vm.bookingModel.bookingNumber).then(function(bookingResult) {
                var bookingStatus = bookingResult.bookingInfo.status;
                if ("BOOKED" === bookingStatus) {
                    if (vm.currentMerchant && vm.currentMerchant === 'FASTGO') {
                        $log.log('GOTO - booking-payment');
                        $state.go('hotel-booking/:booking_number/:params', {
                            "searchOptions": vm.searchOptions,
                            "searchResult": vm.searchResult,
                            "booking_number": Base64.encodeString(bookingResult.bookingNumber),
                            "params": ''
                        });
                    } else {
                        Flight.externalPayment(bookingResult.bookingNumber);
                    }
                } else {
                    $state.go('booking-result/:booking_number/:params', {
                        "searchOptions": vm.searchOptions,
                        "searchResult": vm.searchResult,
                        "booking_number": Base64.encodeString(bookingResult.bookingNumber),
                        "params": ''
                    });
                }
            });
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileBookingDeleteController', ProfileBookingDeleteController);

    ProfileBookingDeleteController.$inject = ['$log', '$rootScope', '$scope', '$state', '$timeout', '$uibModalInstance', 'CustomerService'];

    function ProfileBookingDeleteController($log, $rootScope, $scope, $state, $timeout, $uibModalInstance, CustomerService) {
        var vm = this;

        vm.profileModel = {};
        // 'view', 'edit'
        var defaultMode = 'view';

        vm.profileModel.cardMode = defaultMode;

        vm.bookingNumbers = '';
        vm.pnrs = '';
        angular.forEach($scope.bookings, function(item, value) {
            //if (item.checked) {
            vm.bookingNumbers += item.bookingNumber + ", ";

            vm.pnrs += item.bookingCode + ", ";
            //}
        });
        if (vm.bookingNumbers.endsWith(', ')) {
            vm.bookingNumbers = vm.bookingNumbers.substr(0, vm.bookingNumbers.length - 2);
        }

        if (vm.pnrs.endsWith(', ')) {
            vm.pnrs = vm.pnrs.substr(0, vm.pnrs.length - 2);
        }

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        vm.submit = function() {
            // var ids = [];
            var ids = '';
            // console.log("$scope.creditCards = " + JSON.stringify($scope.creditCards));
            angular.forEach($scope.bookings, function(item, value) {
                if (item.checked) {
                    // ids.push(item.id);
                    ids += item.id + ":";
                }
            });

            CustomerService.deleteBookings(ids).then(function(result) {
                $state.go('user-profile-booking', {
                    'tab': $scope.selectedTab
                }, {
                    reload: true
                });
            });

        };

    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileBookingController', ProfileBookingController);

    ProfileBookingController.$inject = ['$location', '$log', '$stateParams', '$scope', '$state', '$timeout', '$uibModal', '$anchorScroll', 'CustomerService', 'DialogService', 'Base64', 'Principal'];

    function ProfileBookingController($location, $log, $stateParams, $scope, $state, $timeout, $uibModal, $anchorScroll, CustomerService, DialogService, Base64, Principal) {
        var vm = this;

        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        vm.airBusy = false;
        vm.htlBusy = false;

        vm.profileModel = {};

        Principal.identity().then(function(user) {
            vm.profileModel.socialUser = user.socialUser;
            $log.log(vm.profileModel.socialUser);
            //$log.log("loginuser="+ JSON.stringify(user));
            $log.log("loginuser=" + user);
        });

        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {
                //$log.log("spResult  = " + JSON.stringify(spResult));
                $log.log("spResult  = " + spResult);

                vm.shortProfile = spResult;

                //+++ initial data
                vm.profileModel = {};
                vm.profileModel.phoneNumbers = [];
                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }

                // Init membercards
                if (!vm.profileModel.memberCards) {
                    vm.profileModel.memberCards = [];
                }
                vm.profileModel.editMemberCards = [];
                vm.profileModel.editMemberCards.push({
                    cardType: '',
                    cardNumber: ''
                });

                vm.profileModel.type = 'profile';

                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
                //---

                if (vm.shortProfile.defaultTravellerId) {
                    CustomerService.getCustomerTraveller(vm.shortProfile.defaultTravellerId).then(function success(result) {
                        vm.profileModel = result;
                        //+++ get avartar
                        CustomerService.getCustomerProfileAvatar(vm.shortProfile.id).then(function success(resultAv) {

                            vm.profileModel.avatar = resultAv;

                            if (resultAv === null || resultAv === "") {
                                vm.profileModel.avatar = {
                                    avatarImage: null,
                                    avatarImageContentType: "",
                                    profileId: 0,
                                    inUsed: true,
                                    createdDate: ""
                                };
                            }
                            vm.profileModel.profileid = vm.shortProfile.id;
                        });

                        // Init Phone
                        vm.profileModel.phoneNumbers = [];
                        if (vm.profileModel.phoneNumber1) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber1
                        });
                        if (vm.profileModel.phoneNumber2) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber2
                        });
                        if (vm.profileModel.phoneNumber3) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber3
                        });
                        if (vm.profileModel.phoneNumber4) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber4
                        });
                        if (vm.profileModel.phoneNumber5) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber5
                        });

                        if (vm.profileModel.phoneNumbers.length === 0) {
                            vm.profileModel.phoneNumbers.push({
                                text: ''
                            });
                        }

                        // Init membercards
                        if (!vm.profileModel.memberCards) {
                            vm.profileModel.memberCards = [];
                        }
                        vm.profileModel.editMemberCards = [];
                        vm.profileModel.editMemberCards.push({
                            cardType: '',
                            cardNumber: ''
                        });

                        vm.profileModel.type = 'profile';

                        // 'view', 'edit'
                        // var defaultMode = 'view';
                        vm.profileModel.mode = 'view';

                        Principal.identity().then(function(user) {
                            vm.profileModel.socialUser = user.socialUser;
                            $log.log('++++++++++++++++++++++++++');
                            $log.log('vm.profileModel.socialUser =' + vm.profileModel.socialUser);
                        });

                    }, function error(result) {
                        $log.log('+++++>> getCustomerTraveller Error: ' + result);

                        // vm.profileModel = {};
                        // vm.profileModel.phoneNumbers = [];
                        // if (vm.profileModel.phoneNumbers.length === 0) {
                        //     vm.profileModel.phoneNumbers.push({text: ''});
                        // }
                        //
                        // // Init membercards
                        // if (!vm.profileModel.memberCards) {
                        //     vm.profileModel.memberCards = [];
                        // }
                        // vm.profileModel.editMemberCards = [];
                        // vm.profileModel.editMemberCards.push({cardType: '', cardNumber: ''});
                        //
                        // vm.profileModel.type = 'profile';
                        //
                        // // 'view', 'edit'
                        // // var defaultMode = 'view';
                        // vm.profileModel.mode = 'view';
                    });
                }

                vm.profileModel.type = "profile";
                //$log.log(vm.profileModel);
                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
            });
        });

        // 'view', 'edit'
        var defaultMode = 'view';

        vm.airBookingOptions = {
            "supplierType": 'AIR',
            page: 0,
            links: {
                last: 0
            }
        };
        vm.hotelBookingOptions = {
            "supplierType": 'HOTEL',
            page: 0,
            links: {
                last: 0
            }
        };


        vm.selectedTab = $stateParams.tab;
        if (!vm.selectedTab) vm.selectedTab = 'tab-a';
        vm.setSelectedTab = function(tab) {
            vm.selectedTab = tab;
        }

        vm.tabClass = function(tab) {
            if (vm.selectedTab == tab) {
                return "active";
            } else {
                return "";
            }
        }

        vm.tabPaneClass = function(tab) {
            if (vm.selectedTab == tab) {
                return "tab-pane active";
            } else {
                return "tab-pane";
            }
        }



        vm.airBookings = [];
        vm.hotelBookings = [];

        vm.profileModel.travellerMode = defaultMode;

        //Click on search button
        vm.doAirSearch = function() {
            vm.airBookingOptions.page = 0;
            if (vm.airBookingOptions.links) {
                vm.airBookingOptions.links.last = 0;
            }

            vm.doSearch();
        };

        //Click on search button on hotel tab
        vm.doHotelButtonSearch = function() {
            vm.hotelBookingOptions.page = 0;
            if (vm.hotelBookingOptions.links) {
                vm.hotelBookingOptions.links.last = 0;
            }
            vm.doHotelSearch();
        };

        // Reset
        vm.doAirReset = function() {
            vm.airBookingOptions = {
                "supplierType": 'AIR',
                page: 0,
                links: {
                    last: 0
                }
            };

            $('#flightstartdate').bootstrapDP('clearDates');

            vm.doSearch();
        };

        vm.doHotelReset = function() {
            vm.hotelBookingOptions = {
                "supplierType": 'HOTEL',
                page: 0,
                links: {
                    last: 0
                }
            };
            vm.doHotelSearch();
        };

        // Collection Actions
        vm.doSearch = function(nextpage) {

            if (vm.airBusy) {
                return;
            } else {
                vm.airBusy = true;
            }

            if (!nextpage) {
                vm.airBookings = [];
            }

            CustomerService.searchBookings(vm.airBookingOptions).then(function(result) {
                $log.log("Search Air Booking Result = ");
                $log.log(result);
                $log.log(vm.airBookingOptions);

                var lastId = null;
                if (vm.airBookings.length > 1) {
                    lastId = 'air' + vm.airBookings[vm.airBookings.length - 1].id;
                }

                vm.airBookingOptions.links = result.links;
                vm.airBookingOptions.totalItems = result.totalItems;

                for (var i = 0; i < result.length; i++) {
                    vm.airBookings.push(result[i]);
                }
                if (nextpage && lastId) {
                    $log.log('searchBookings air---------lastId: ' + lastId);
                    $location.hash(lastId);
                    $anchorScroll();
                    $location.hash(null);

                }
                $timeout(function() {
                    vm.airBusy = false;
                }, 1000);

            });
        };

        vm.nextAirPage = function() {
            if (vm.selectedTab != 'tab-a') return;
            if (vm.airBusy) return;

            vm.airBookingOptions.page += 1;

            // vm.airBookingOptions.page = page;
            vm.doSearch(true);
        };

        vm.doHotelSearch = function(nextpage) {

            if (vm.htlBusy) {
                return;
            } else {
                vm.htlBusy = true;
            }

            if (!nextpage) {
                vm.hotelBookings = [];
            }

            CustomerService.searchBookings(vm.hotelBookingOptions).then(function(result) {
                $log.log("Search Hotel Booking Result = ");
                $log.log(result);
                $log.log(vm.hotelBookingOptions);

                var lastId = null;
                if (vm.hotelBookings.length > 0) {
                    lastId = 'htl' + vm.hotelBookings[vm.hotelBookings.length - 1].id;
                }

                vm.hotelBookingOptions.links = result.links;
                vm.hotelBookingOptions.totalItems = result.totalItems;

                for (var i = 0; i < result.length; i++) {
                    vm.hotelBookings.push(result[i]);
                }
                if (nextpage && lastId) {
                    $log.log('searchBookings hotel---------lastId: ' + lastId);
                    $location.hash(lastId);
                    $anchorScroll();
                    $location.hash(null);

                }
                $timeout(function() {
                    vm.htlBusy = false;
                }, 1000);
                // vm.hotelBookings = result;
            });
        };

        vm.nextHotelPage = function(page) {
            if (vm.selectedTab != 'tab-h') return;
            if (vm.htlBusy) return;

            vm.hotelBookingOptions.page += 1;
            // vm.hotelBookingOptions.page = page;
            vm.doHotelSearch(true);
        };

        // Item actions
        vm.viewAirItem = function(item) {
            var bookingNumber = Base64.encodeString(item.bookingNumber);
            $state.go('user-profile-booking-air/:booking_number/:mode', {
                "booking_number": bookingNumber,
                "mode": 'view'
            });
        };

        vm.openDeleteAirBooking = function(item, deleteAll) {
            $scope.selectedTab = vm.selectedTab;
            if (deleteAll) {
                var chk = false;
                angular.forEach(vm.airBookings, function(item, value) {
                    // if (item.checked) {
                    item.checked = true;
                    chk = true;
                    // }
                });
                if (!chk) {
                    var error = {};
                    error.title = 'Error';
                    error.message = 'Bạn phải chọn bản ghi để xoá!';
                    DialogService.openAlertDialog(error);
                    return;
                }

                $scope.bookings = vm.airBookings;

            } else {
                $scope.bookings = [];
                item.checked = true;
                $scope.bookings.push(item);
            }

            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                backdrop: 'static',
                templateUrl: 'app/account/profile/booking/profile.booking.delete.html',
                controller: 'ProfileBookingDeleteController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        vm.viewHotelItem = function(item) {
            var bookingNumber = Base64.encodeString(item.bookingNumber);
            if (item.supplierBookingStatus == 'BOOKED') {
                $state.go('hotel-booking/:booking_number/:params', {
                    "booking_number": bookingNumber,
                    "params": ''
                });
            } else {
                $state.go('user-profile-booking-htl/:booking_number/:mode', {
                    "booking_number": bookingNumber,
                    "mode": 'view'
                });
            }
        };

        vm.openDeleteHotelBooking = function(item, deleteAll) {
            $scope.selectedTab = vm.selectedTab;
            if (deleteAll) {
                var chk = false;
                angular.forEach(vm.hotelBookings, function(item, value) {
                    // if (item.checked) {
                    item.checked = true;
                    chk = true;
                    // }
                });
                if (!chk) {
                    var error = {};
                    error.title = 'Error';
                    error.message = 'Bạn phải chọn bản ghi để xoá!';
                    DialogService.openAlertDialog(error);
                    return;
                }

                $scope.bookings = vm.hotelBookings;

            } else {
                $scope.bookings = [];
                item.checked = true;
                $scope.bookings.push(item);
            }

            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                backdrop: 'static',
                templateUrl: 'app/account/profile/booking/profile.booking.delete.html',
                controller: 'ProfileBookingDeleteController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('global');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        // Init search
        vm.doSearch();
        vm.doHotelSearch();
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ProfileBookingAirViewController', ProfileBookingAirViewController);

    ProfileBookingAirViewController.$inject = ['$log', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$uibModal', 'CustomerService', 'DateUtils', 'DataService', 'Flight', 'DialogService', 'Base64', 'Principal', '$cookies', '$window', 'MerchantService'];

    function ProfileBookingAirViewController($log, $rootScope, $scope, $state, $stateParams, $timeout, $uibModal, CustomerService, DateUtils, DataService, Flight, DialogService, Base64, Principal, $cookies, $window, MerchantService) {
        var vm = this;
        vm.viettelPayment = viettelPayment;

        vm.showPaymentInfo = !MerchantService.isSimpleView();
        vm.showProfileInfo = !MerchantService.isSimpleView();
        vm.merchantList = ['VIETTEL', 'TIKI', 'FSOFT', 'TRUEMONEY', 'FASTGO'];

        // Get current merchant.
        vm.currentMerchant = $cookies.get('merchant_code') || localStorage.getItem("merchant_code") || null;
        vm.profileModel = {};
        Principal.identity().then(function(user) {
            vm.profileModel.socialUser = user.socialUser;
            $log.log(vm.profileModel.socialUser);
            //$log.log("loginuser="+ JSON.stringify(user));
            $log.log("loginuser=" + user);
        });

        CustomerService.getShortProfile().then(function(result) {
            var requester = result;
            CustomerService.getCustomerProfile(requester.requesterId).then(function(spResult) {
                //$log.log("spResult  = " + JSON.stringify(spResult));
                $log.log("spResult  = " + spResult);

                vm.shortProfile = spResult;

                //+++ initial data
                vm.profileModel = {};
                vm.profileModel.phoneNumbers = [];
                if (vm.profileModel.phoneNumbers.length === 0) {
                    vm.profileModel.phoneNumbers.push({
                        text: ''
                    });
                }

                // Init membercards
                if (!vm.profileModel.memberCards) {
                    vm.profileModel.memberCards = [];
                }
                vm.profileModel.editMemberCards = [];
                vm.profileModel.editMemberCards.push({
                    cardType: '',
                    cardNumber: ''
                });

                vm.profileModel.type = 'profile';

                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
                //---

                if (vm.shortProfile.defaultTravellerId) {
                    CustomerService.getCustomerTraveller(vm.shortProfile.defaultTravellerId).then(function success(result) {
                        vm.profileModel = result;
                        //+++ get avartar
                        CustomerService.getCustomerProfileAvatar(vm.shortProfile.id).then(function success(resultAv) {

                            vm.profileModel.avatar = resultAv;

                            if (resultAv === null || resultAv === "") {
                                vm.profileModel.avatar = {
                                    avatarImage: null,
                                    avatarImageContentType: "",
                                    profileId: 0,
                                    inUsed: true,
                                    createdDate: ""
                                };
                            }
                            vm.profileModel.profileid = vm.shortProfile.id;
                        });

                        // Init Phone
                        vm.profileModel.phoneNumbers = [];
                        if (vm.profileModel.phoneNumber1) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber1
                        });
                        if (vm.profileModel.phoneNumber2) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber2
                        });
                        if (vm.profileModel.phoneNumber3) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber3
                        });
                        if (vm.profileModel.phoneNumber4) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber4
                        });
                        if (vm.profileModel.phoneNumber5) vm.profileModel.phoneNumbers.push({
                            text: vm.profileModel.phoneNumber5
                        });

                        if (vm.profileModel.phoneNumbers.length === 0) {
                            vm.profileModel.phoneNumbers.push({
                                text: ''
                            });
                        }

                        // Init membercards
                        if (!vm.profileModel.memberCards) {
                            vm.profileModel.memberCards = [];
                        }
                        vm.profileModel.editMemberCards = [];
                        vm.profileModel.editMemberCards.push({
                            cardType: '',
                            cardNumber: ''
                        });

                        vm.profileModel.type = 'profile';

                        // 'view', 'edit'
                        // var defaultMode = 'view';
                        vm.profileModel.mode = 'view';

                        Principal.identity().then(function(user) {
                            vm.profileModel.socialUser = user.socialUser;
                            $log.log('++++++++++++++++++++++++++');
                            $log.log('vm.profileModel.socialUser =' + vm.profileModel.socialUser);
                        });

                    }, function error(result) {
                        $log.log('+++++>> getCustomerTraveller Error: ' + result);

                        // vm.profileModel = {};
                        // vm.profileModel.phoneNumbers = [];
                        // if (vm.profileModel.phoneNumbers.length === 0) {
                        //     vm.profileModel.phoneNumbers.push({text: ''});
                        // }
                        //
                        // // Init membercards
                        // if (!vm.profileModel.memberCards) {
                        //     vm.profileModel.memberCards = [];
                        // }
                        // vm.profileModel.editMemberCards = [];
                        // vm.profileModel.editMemberCards.push({cardType: '', cardNumber: ''});
                        //
                        // vm.profileModel.type = 'profile';
                        //
                        // // 'view', 'edit'
                        // // var defaultMode = 'view';
                        // vm.profileModel.mode = 'view';
                    });
                }

                vm.profileModel.type = "profile";
                //$log.log(vm.profileModel);
                // 'view', 'edit'
                // var defaultMode = 'view';
                vm.profileModel.mode = 'view';
            });
        });
        vm.bookingModel = {};
        vm.returnBookingModel = {};
        vm.searchOptions = {};

        vm.paymentModel = {};

        vm.bookingModel.airView = true;
        vm.paymentModel.airView = true;

        //TODO: remove later
        vm.paymentModel.cardModel = {};

        vm.paymentModel.paToken = null;

        var bookingNumber = Base64.decodeString($stateParams.booking_number);

        $log.log("ProfileBookingAirViewController - bookingNumber:" + bookingNumber);

        CustomerService.getBookingByNumber(bookingNumber).then(function(result) {
            $log.log('CustomerService.getBooking result = ');

            $log.log("CustomerService.getBookingByNumber result:");
            //$log.log("data=" + JSON.stringify(result));
            $log.log("data=" + result);
            $log.log("++++++++++++++++++++++++++++");

            if (result && result.bookingInfo) {
                vm.bjson = result;

                vm.bookingModel = result.bookingInfo;
                //vm.bookingModel.duration = DateUtils.timeDiff(vm.bookingModel.departureDate, vm.bookingModel.returnDate);

                // var content = vm.bookingModel.content.bookingContent;
                // $log.log(content);
                // var obj = JSON.parse(content).items[0];

                var obj = result;

                // Process contacts view
                var contactInfos = [];
                if (obj.bookingInfo && obj.bookingInfo.contactInfos) {
                    angular.forEach(obj.bookingInfo.contactInfos, function(value, key) {
                        var c = value;

                        contactInfos.push({
                            "ciGender": c.gender,
                            "ciEmail": c.email,
                            "ciName": c.surName,
                            "ciFName": c.firstName,
                            "ciMobileCode": c.phoneCode1,
                            "ciMobile": c.phoneNumber1
                        });
                    });
                }

                obj.contacts = contactInfos;

                // Process customer view
                var customerInfos = [];
                if (obj.travelerInfo && obj.travelerInfo.airTravelers) {
                    angular.forEach(obj.travelerInfo.airTravelers, function(value, key) {
                        var c = value;

                        // var cardType;
                        // var cardNumber;
                        // if (c.memberCards && c.memberCards[0]) {
                        //     cardType = c.memberCards[0].cardType;
                        //     cardNumber = c.memberCards[0].cardNumber;
                        // }

                        var customer = {
                            /* passport info */
                            "cuPp": "Passport",
                            "cuId": c.passport.passportNumber,
                            "cuExpiredDate": c.passport.expiryDate,
                            "cuNationality": c.passport.country,
                            /* passenger info */
                            "type": c.passengerType,
                            "cuName": c.passengerName.firstName,
                            "cuFamilyName": c.passengerName.lastName,
                            "cuGender": c.passengerName.title,
                            //"cuDob": new Date(c.dateOfBirth * 1000),
                            "cuDob": c.dateOfBirth,
                            "cuCardType": c.frequentFlyerType,
                            "cuCardNo": c.frequentFlyerNumber,
                            "ssrRequest": c.specialServiceRequest
                        };

                        if (c.specialServiceRequest && c.specialServiceRequest.ssrItems) {
                            customer.departServiceRequests = [];
                            customer.returnServiceRequests = [];

                            angular.forEach(c.specialServiceRequest.ssrItems, function(ssr) {
                                if (ssr.direction == 'DEPARTURE') {
                                    var tmp = ssr;
                                    customer.departServiceRequests.push(tmp);
                                } else if (ssr.direction == 'RETURN') {
                                    var tmp = ssr;
                                    customer.returnServiceRequests.push(tmp);
                                }
                            });
                        }

                        customerInfos.push(customer);

                    });
                }

                obj.customers = customerInfos;

                // Process tax view
                obj.biCompany = vm.bookingModel.taxCompanyName;
                obj.biMst = vm.bookingModel.taxNumber;
                obj.biMobile = vm.bookingModel.taxAddress2;
                obj.biAddress = vm.bookingModel.taxAddress1;

                // process payment view
                obj.departPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];
                obj.departGroupItem = obj.groupPricedItineraries[0];

                vm.searchOptions.searchType = 'oneway';

                if ((obj.groupPricedItineraries && obj.groupPricedItineraries[1])) {
                    obj.returnGroupItem = obj.groupPricedItineraries[1];
                    obj.returnPricedItinerary = obj.groupPricedItineraries[1].pricedItineraries[0];

                    vm.searchOptions.searchType = 'roundtrip';
                } else if (obj.groupPricedItineraries[0].pricedItineraries[0].directionInd == 'RETURN') {
                    obj.returnGroupItem = obj.groupPricedItineraries[0];
                    obj.returnPricedItinerary = obj.groupPricedItineraries[0].pricedItineraries[0];

                    vm.searchOptions.searchType = 'roundtrip';
                }

                // Process flight view
                if (obj.departGroupItem.flightType == 'INTERNATIONAL') {
                    vm.searchOptions.dtype = 'international';
                    //vm.bookingModel.dtype = 'international';

                    // Convert for view details -- DEPART
                    vm.flightModel = {};
                    vm.bookingModel.checkIn = new Date(obj.departPricedItinerary.originDestinationOptions[0].originDateTime);
                    vm.bookingModel.checkOut = new Date(obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime);
                    vm.bookingModel.noOfTransit = obj.departPricedItinerary.originDestinationOptions[0].flightSegments.length;
                    vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                    vm.bookingModel.airline = obj.departGroupItem.airline;
                    vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                    vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                    vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                    vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                    vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                    vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                    vm.bookingModel.flightIdx = 1;
                    vm.bookingModel.searchType = vm.searchOptions.searchType;
                    vm.bookingModel.booking = {};
                    vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                    vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;
                    // vm.bookingModel.passengerNameRecords = vm.bkgroup.bookingInfo.passengerNameRecords;


                    // Convert for view details -- RETURN
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    if (obj.returnPricedItinerary && obj.returnGroupItem) {
                        vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                        vm.returnBookingModel.checkIn = new Date(obj.returnPricedItinerary.originDestinationOptions[1].originDateTime);
                        vm.returnBookingModel.checkOut = new Date(obj.returnPricedItinerary.originDestinationOptions[1].destinationDateTime);
                        vm.returnBookingModel.noOfTransit = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments.length;
                        vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                        vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                        vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                        vm.returnBookingModel.originLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].originLocationCode;
                        vm.returnBookingModel.destinationLocationCode = obj.returnPricedItinerary.originDestinationOptions[1].destinationLocationCode;
                        vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[1].journeyDuration;
                        vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName;
                        vm.returnBookingModel.flightIdx = 2;
                        vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                        vm.returnBookingModel.booking = {};
                        vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                        vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[1].flightSegments;
                        vm.returnBookingModel.passengerNameRecords = vm.bookingModel.passengerNameRecords;
                    }

                } else {
                    vm.searchOptions.dtype = 'domestic';

                    // Convert for view details -- DEPART
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    vm.bookingModel.checkIn = new Date(obj.departPricedItinerary.originDestinationOptions[0].originDateTime);
                    vm.bookingModel.checkOut = new Date(obj.departPricedItinerary.originDestinationOptions[0].destinationDateTime);
                    vm.bookingModel.noOfTransit = 1;
                    vm.bookingModel.supplierName = obj.departGroupItem.airlineName;
                    vm.bookingModel.airline = obj.departGroupItem.airline;
                    vm.bookingModel.carrierNo = obj.departGroupItem.fightNo;
                    vm.bookingModel.originLocationCode = obj.departGroupItem.originLocationCode;
                    vm.bookingModel.destinationLocationCode = obj.departGroupItem.destinationLocationCode;
                    vm.bookingModel.duration = obj.departPricedItinerary.originDestinationOptions[0].journeyDuration;
                    vm.bookingModel.supplierCode = obj.departPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                    vm.bookingModel.cabinClassName = obj.departPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                    vm.bookingModel.flightIdx = 1;
                    vm.bookingModel.searchType = vm.searchOptions.searchType;
                    vm.bookingModel.booking = {};
                    vm.bookingModel.pricedItinerary = obj.departPricedItinerary;
                    vm.bookingModel.flightSegments = obj.departPricedItinerary.originDestinationOptions[0].flightSegments;

                    // Convert for view details -- RETURN
                    // vm.bookingModel.bookingNumber = vm.bookingModel.code.bookingCode.bookingNumber;
                    if (obj.returnPricedItinerary && obj.returnGroupItem) {
                        vm.returnBookingModel.bookingNumber = vm.bookingModel.bookingNumber;
                        vm.returnBookingModel.checkIn = new Date(obj.returnPricedItinerary.originDestinationOptions[0].originDateTime);
                        vm.returnBookingModel.checkOut = new Date(obj.returnPricedItinerary.originDestinationOptions[0].destinationDateTime);
                        vm.returnBookingModel.noOfTransit = 1;
                        vm.returnBookingModel.supplierName = obj.returnGroupItem.airlineName;
                        vm.returnBookingModel.airline = obj.returnGroupItem.airline;
                        vm.returnBookingModel.carrierNo = obj.returnGroupItem.fightNo;
                        vm.returnBookingModel.originLocationCode = obj.returnGroupItem.originLocationCode;
                        vm.returnBookingModel.destinationLocationCode = obj.returnGroupItem.destinationLocationCode;
                        vm.returnBookingModel.duration = obj.returnPricedItinerary.originDestinationOptions[0].journeyDuration;
                        vm.returnBookingModel.supplierCode = obj.returnPricedItinerary.airItineraryPricingInfo.fareSourceCode;
                        vm.returnBookingModel.cabinClassName = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName;
                        vm.returnBookingModel.flightIdx = 2;
                        vm.returnBookingModel.searchType = vm.searchOptions.searchType;
                        vm.returnBookingModel.booking = {};
                        vm.returnBookingModel.pricedItinerary = obj.returnPricedItinerary;
                        vm.returnBookingModel.flightSegments = obj.returnPricedItinerary.originDestinationOptions[0].flightSegments;
                        vm.returnBookingModel.passengerNameRecords = vm.bookingModel.passengerNameRecords;
                    }
                }

                // bind to view
                vm.orgBookingModel = obj;

                /* +++ 05Nov2017-Tung: add pricing for summary */
                var departItinTotalFare = vm.orgBookingModel.departPricedItinerary.airItineraryPricingInfo.itinTotalFare;
                var returnItinTotalFare = {};

                if (vm.orgBookingModel.returnPricedItinerary && vm.orgBookingModel.returnPricedItinerary.airItineraryPricingInfo) {
                    returnItinTotalFare = vm.orgBookingModel.returnPricedItinerary.airItineraryPricingInfo.itinTotalFare;
                }
                vm.orgBookingModel.departItinTotalFare = departItinTotalFare;
                vm.orgBookingModel.returnItinTotalFare = returnItinTotalFare;
                vm.orgBookingModel.isPerBookingType = vm.bjson.isPerBookingType;
                /* --- 05Nov2017-Tung */

                /*+++ 20Nov2017-Tung: disable pay_later */
                if (vm.bjson.bookingInfo) {
                    vm.bjson.bookingInfo.showPayLaterOption = false;
                }
                /*--- 20Nov2017-Tung */

            } else {
                $log.log("CustomerService.getBookingByNumber Booking Empty");
                // Go to
                $state.go('user-profile-booking', {
                    'tab': 'tab-a'
                });
            }
        });

        /**
         * reset voucher event
         */
        $scope.$on('event-payment-voucher-reset', function(event, item) {
            vm.bookingModel.voucher = {};
        });

        /**
         * Handler IssueTicket from Popup payment for ATM_DEBIT
         */
        $scope.$on('IssueTicket', function(event, item) {
            //+++ show waiting message
            vm.openLoading();
            //---

            Flight.orderTickets(vm.bookingModel)
                .then(function(result1) {
                    $log.log("Get Flight.orderTickets()");
                    $log.log(result1);

                    vm.paymentModel.payFailed = !result1.success;
                    DataService.setPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    // Go to
                    // $state.go('booking-result');

                    $state.go('booking-result/:booking_number/:params', {
                        "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber),
                        "params": ''
                        // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                    });

                }, function error(result1) {
                    // Go to
                    // $state.go('hotel-booking-result');
                    $log.log("error orderTickets");
                    //$log.log(JSON.stringify(result1));
                    $log.log(result1);

                    // DialogService.openHttpAlertDilalog(result1);
                    vm.paymentModel.payFailed = true;
                    DataService.setPaymentModel(vm.paymentModel);

                    $rootScope.$broadcast("event-flight-load-completed", null);

                    //$state.go('booking-result');
                    // $state.go('booking-result', {"profileBooking": vm.bookingModel});

                    $state.go('booking-result/:booking_number/:params', {
                        "profileBooking": vm.bookingModel,
                        "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber),
                        "params": ''
                        // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                    });
                });
        });

        /**
         *
         */
        $scope.$on('DoPaymentWith3DAuthConfirmation', function(event, item) {
            $log.log("DoPaymentWith3DAuth - " + item);
            vm.paymentModel.paToken = item;

            vm.doPayment();
        });

        /**
         * Process payment and issue ticket
         */
        vm.doConfirm = function() {
            Flight.externalPayment(vm.bookingModel.bookingNumber);
            //
            // DataService.setPaymentModel(vm.paymentModel);
            // DataService.setBookingModel(vm.bookingModel);
            //
            // $log.log("doConfirm - PaymentOption:" + vm.paymentModel.paymentOption);
            //
            // // Do redeem
            // // Check need to do redeem
            // vm.bookingModel.voucher = vm.orgBookingModel.voucher;
            // if (vm.bookingModel.voucher)
            //     $log.log('vm.bookingModel.voucher.voucherValid = ' + vm.bookingModel.voucher.voucherValid);
            // if (vm.bookingModel.voucher && vm.bookingModel.voucher.voucherValid) {
            //     Flight.redeemVoucher(vm.bookingModel).then(function success(result) {
            //
            //         if (result.redeemValid && result.success) {
            //             $log.log('result.redeemValid = ' + result.redeemValid + ", result.success = " + result.success);
            //             vm.doPayment();
            //         } else {
            //             $rootScope.$broadcast("event-flight-load-completed", null);
            //
            //             // Go to
            //             // $state.go('hotel-booking-result');
            //             $log.log("error paymentBooking");
            //             //$log.log(JSON.stringify(result));
            //             $log.log(result);
            //
            //             // DialogService.openHttpAlertDilalog(result);
            //             vm.paymentModel.payFailed = true;
            //             DataService.setPaymentModel(vm.paymentModel);
            //
            //             //$state.go('booking-result');
            //             // $state.go('booking-result', {"profileBooking": vm.bookingModel});
            //             $state.go('booking-result/:booking_number/:params', {"profileBooking": vm.bookingModel
            //                 , "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber)
            //                 , "params": ''
            //                 // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
            //             });
            //         }
            //
            //     }, function error(result) {
            //         $rootScope.$broadcast("event-flight-load-completed", null);
            //
            //         // Go to
            //         // $state.go('hotel-booking-result');
            //         $log.log("error paymentBooking");
            //         //$log.log(JSON.stringify(result));
            //         $log.log(result);
            //
            //         // DialogService.openHttpAlertDilalog(result);
            //         vm.paymentModel.payFailed = true;
            //         DataService.setPaymentModel(vm.paymentModel);
            //
            //         //$state.go('booking-result');
            //         // $state.go('booking-result', {"profileBooking": vm.bookingModel});
            //         $state.go('booking-result/:booking_number/:params', {"profileBooking": vm.bookingModel
            //             , "booking_number": Base64.encodeString(DataService.getBookingModel().bookingNumber)
            //             , "params": ''
            //             // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
            //         });
            //     });
            // } else {
            //     vm.doPayment();
            // }
        };

        /**
         * Process payment
         */
        vm.doPayment = function() {
            if (vm.paymentModel.paymentOption === 'ATM_DEBIT') {

                Flight.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    // alert(JSON.stringify(result));
                    // $rootScope.$broadcast("event-flight-load-completed", null);

                    if (result.hasPaymentAuth && result.paymentAuthUrl) {
                        $log.log(result.paymentAuthUrl);
                        vm.open(result.paymentAuthUrl);
                    } else {
                        DialogService.openHttpAlertDilalog(result);
                    }
                }, function(result) {
                    // $rootScope.$broadcast("event-flight-load-completed", null);

                    DialogService.openHttpAlertDilalog(result);
                });
            }
            if (vm.paymentModel.paymentOption === 'VNPAYQR') {
                Flight.gPaymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson).then(function(result) {
                    // alert(JSON.stringify(result));
                    vnpay.open({
                        width: 900,
                        height: 800,
                        url: result.paymentAuthUrl
                    });
                });

                //window.location.href = "#/payment-vnpay-qr/"+$stateParams.booking_number+"/FLIGHT";
            }
            if (vm.paymentModel.paymentOption !== 'VNPAYQR' && vm.paymentModel.paymentOption !== 'ATM_DEBIT') {
                //+++ show waiting message
                vm.openLoading();
                //---

                // Try to payment booking
                Flight.paymentBooking(vm.bookingModel, vm.paymentModel, vm.bjson)
                    .then(function(result) {
                        $log.log("Get Flight.paymentBooking()");
                        $log.log(result);

                        $rootScope.$broadcast("event-flight-load-completed", null);

                        if (result.hasPaymentAuth && result.paymentAuthUrl) {
                            $log.log(result.paymentAuthUrl);
                            vm.open3DAuth(
                                result.paymentAuthUrl, result.paReq, result.md, result.termUrl
                            );

                        } else {
                            // Try to order - tickets
                            if (vm.paymentModel.paymentOption === 'CREDIT' ||
                                vm.paymentModel.paymentOption === 'BALANCE') {
                                // Try to save credit card for later
                                // vm.paymentModel.cardModel.type = $scope.cardForm.cardNumber.$ccType ? $scope.cardForm.cardNumber.$ccType.toUpperCase() : "OTHER";
                                if (vm.paymentModel.cardModel && vm.paymentModel.cardModel.cardId == -1 && vm.paymentModel.cardModel.checked) {

                                    CustomerService.createCreditCards(vm.paymentModel.cardModel, vm.paymentModel.paToken)
                                        .then(function success(result) {
                                            //$state.go('user-profile-card');
                                            $log.log("success createCreditCards");
                                        }, function error(result) {
                                            //DialogService.openHttpAlertDilalog(result);
                                            $log.log("error createCreditCards");
                                            //$log.log(JSON.stringify(result));
                                            $log.log(result);
                                        });
                                }

                                //process payment
                                $rootScope.$broadcast("IssueTicket", null);

                            } else {

                                vm.paymentModel.payFailed = !result.success;
                                DataService.setPaymentModel(vm.paymentModel);

                                // $state.go('booking-result', {"profileBooking": vm.bookingModel});

                                $state.go('booking-result/:booking_number/:params', {
                                    "profileBooking": vm.bookingModel,
                                    "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber),
                                    "params": ''
                                    // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                                });
                            }
                        }

                        //reset payment token
                        vm.paymentModel.paToken = null;

                        // Go to
                        //$state.go('hotel-booking-result');
                    }, function error(result) {
                        $rootScope.$broadcast("event-flight-load-completed", null);

                        // Go to
                        // $state.go('hotel-booking-result');
                        $log.log("error paymentBooking");
                        //$log.log(JSON.stringify(result));
                        $log.log(result);

                        // DialogService.openHttpAlertDilalog(result);
                        vm.paymentModel.payFailed = true;
                        DataService.setPaymentModel(vm.paymentModel);

                        //$state.go('booking-result');
                        // $state.go('booking-result', {"profileBooking": vm.bookingModel});

                        $state.go('booking-result/:booking_number/:params', {
                            "profileBooking": vm.bookingModel,
                            "booking_number": Base64.encodeString(vm.bookingModel.bookingNumber),
                            "params": ''
                            // , "params": Base64.encode(JSON.stringify(DataService.getBookingModel()))
                        });
                    });
            }

        };

        vm.viettelPaymentSubmit = function() {
            CustomerService.getBookingByNumber(vm.bookingModel.bookingNumber).then(function(bookingResult) {
                var bookingStatus = bookingResult.bookingInfo.status;
                if ("BOOKED" === bookingStatus) {
                    if (vm.currentMerchant && vm.currentMerchant === 'FASTGO') {
                        $log.log('GOTO - booking-payment');
                        $state.go('booking-payment/:booking_number/:params', {
                            "searchOptions": vm.searchOptions,
                            "searchResult": vm.searchResult,
                            "booking_number": Base64.encodeString(bookingResult.bookingNumber),
                            "params": ''
                        });
                    } else {
                        Flight.externalPayment(bookingResult.bookingNumber);
                    }
                } else {
                    $state.go('booking-result/:booking_number/:params', {
                        "searchOptions": vm.searchOptions,
                        "searchResult": vm.searchResult,
                        "booking_number": Base64.encodeString(bookingResult.bookingNumber),
                        "params": ''
                    });
                }
            });
        };

        function viettelPayment(bookingNumber) {

            // alert("Implement viettel");

            Flight.getViettelPaymentURL(bookingNumber).then(function(response) {
                $window.location.href = response;

            }, function error(response) {
                $log.log('errorCallback Create viettel order');
                // $log.log("response = " + JSON.stringify(response));
            });
            return;

            // TODO: Implement Viettel payment. Can reuse code from A.Tam
        };


        /**
         * Define dialog instances
         */
        var modalInstance = null;
        var resetModal = function() {
            modalInstance = null;
        };

        var modal3DAuthInstance = null;
        var reset3DAuthModal = function() {
            modal3DAuthInstance = null;
        };

        /**
         *
         * @param url
         */
        vm.open = function(url) {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.external.html',
                controller: 'FlightPaymentExternalController',
                controllerAs: 'vm',
                windowClass: 'modal-window-extension',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    }
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

        /**
         * Open 3D Authentication for CREDIT payment option
         *
         * @param url
         * @param paReq
         * @param md
         * @param termUrl
         */
        vm.open3DAuth = function(url, paReq, md, termUrl) {
            if (modal3DAuthInstance !== null) return;
            modal3DAuthInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/payment/flight.payment.3d.auth.external.html',
                controller: 'FlightPayment3DAuthExternalController',
                controllerAs: 'vm',
                windowClass: 'modal-window-extension',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }],
                    paymentUrl: function() {
                        return url;
                    },
                    paReq: function() {
                        return paReq;
                    },
                    md: function() {
                        return md;
                    },
                    termUrl: function() {
                        return termUrl;
                    }
                }
            });
            modal3DAuthInstance.result.then(
                reset3DAuthModal,
                reset3DAuthModal
            );
        };

        /**
         *
         */
        vm.cancel = function() {
            $state.go('user-profile-booking', {
                'tab': 'tab-a'
            });
        };

        /**
         *
         */
        vm.openLoading = function() {
            if (modalInstance !== null) return;
            modalInstance = $uibModal.open({
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/flights/flight.loading.html',
                controller: 'FlightLoadingController',
                controllerAs: 'vm',
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('flight');
                        return $translate.refresh();
                    }]
                }
            });
            modalInstance.result.then(
                resetModal,
                resetModal
            );
        };

    }
})();

/* globals $ */
(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .directive('passwordStrengthBar', passwordStrengthBar);

    function passwordStrengthBar() {
        var directive = {
            replace: true,
            restrict: 'E',
            template: '<div id="strength">' +
                '<small data-translate="global.messages.validate.newpassword.strength">Password strength:</small>' +
                '<ul id="strengthBar">' +
                '<li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li>' +
                '</ul>' +
                '</div>',
            scope: {
                passwordToCheck: '='
            },
            link: linkFunc
        };

        return directive;

        /* private helper methods*/

        function linkFunc(scope, iElement) {
            var strength = {
                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],
                mesureStrength: function(p) {

                    var _force = 0;
                    var _regex = /[$-/:-?{-~!"^_`\[\]]/g; // "

                    var _lowerLetters = /[a-z]+/.test(p);
                    var _upperLetters = /[A-Z]+/.test(p);
                    var _numbers = /[0-9]+/.test(p);
                    var _symbols = _regex.test(p);

                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];
                    var _passedMatches = $.grep(_flags, function(el) {
                        return el === true;
                    }).length;

                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);
                    _force += _passedMatches * 10;

                    // penalty (short password)
                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;

                    // penalty (poor variety of characters)
                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;
                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;
                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;

                    return _force;

                },
                getColor: function(s) {

                    var idx;
                    if (s <= 10) {
                        idx = 0;
                    } else if (s <= 20) {
                        idx = 1;
                    } else if (s <= 30) {
                        idx = 2;
                    } else if (s <= 40) {
                        idx = 3;
                    } else {
                        idx = 4;
                    }

                    return {
                        idx: idx + 1,
                        col: this.colors[idx]
                    };
                }
            };
            scope.$watch('passwordToCheck', function(password) {
                if (password) {
                    var c = strength.getColor(strength.mesureStrength(password));
                    iElement.removeClass('ng-hide');
                    iElement.find('ul').children('li')
                        .css({
                            'background-color': '#DDD'
                        })
                        .slice(0, c.idx)
                        .css({
                            'background-color': c.col
                        });
                }
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('password', {
            parent: 'account',
            url: '/password',
            data: {
                authorities: ['ROLE_USER'],
                pageTitle: 'global.menu.account.password'
            },
            views: {
                'content@': {
                    templateUrl: 'app/account/password/password.html',
                    controller: 'PasswordController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                PreviousState: [
                    "$state",
                    function($state) {
                        var currentStateData = {
                            Name: $state.current.name,
                            Params: $state.params,
                            URL: $state.href($state.current.name, $state.params)
                        };
                        return currentStateData;
                    }
                ],
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('password');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('PasswordController', PasswordController);

    PasswordController.$inject = ['$log', '$state', 'Auth', 'Principal', 'LoginService', 'PreviousState'];

    function PasswordController($log, $state, Auth, Principal, LoginService, PreviousState) {
        var vm = this;

        vm.passwordpattern = /((?=.*\d)(?=.*[a-zA-Z]).{8,})/;

        vm.changePassword = changePassword;
        vm.doNotMatch = null;
        vm.samePassword = null;

        vm.error = null;
        vm.success = null;
        vm.login = LoginService.open;
        vm.cancel = cancel;

        Principal.identity().then(function(account) {
            vm.account = account;
        });

        function changePassword() {
            if (vm.password == vm.oldPassword) {
                vm.error = null;
                vm.success = null;
                vm.doNotMatch = null;
                vm.samePassword = 'ERROR';
            } else if (vm.password !== vm.confirmPassword) {
                vm.error = null;
                vm.success = null;
                vm.samePassword = null;
                vm.doNotMatch = 'ERROR';
            } else {
                vm.doNotMatch = null;
                vm.samePassword = null;
                Auth.changePassword(vm.oldPassword, vm.password).then(function() {
                    vm.error = null;
                    vm.success = 'OK';
                    //$uibModalInstance.dismiss('cancel');
                }).catch(function() {
                    vm.success = null;
                    vm.error = 'ERROR';
                });

            }
        }

        function cancel() {
            $state.go(PreviousState.Name, PreviousState.params);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('PasswordDialogController', PasswordDialogController);

    PasswordDialogController.$inject = ['$log', '$uibModalInstance', 'Auth', 'Principal', 'LoginService', 'DialogService'];

    function PasswordDialogController($log, $uibModalInstance, Auth, Principal, LoginService, DialogService) {
        var vm = this;

        vm.passwordpattern = /((?=.*\d)(?=.*[a-zA-Z]).{8,})/;

        vm.changePassword = changePassword;
        vm.doNotMatch = null;
        vm.samePassword = null;
        vm.error = null;
        vm.success = null;

        vm.login = function() {
            $uibModalInstance.dismiss('cancel');
            LoginService.open();
        };

        Principal.identity().then(function(account) {
            vm.account = account;
        });

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        function changePassword() {

            if (vm.password == vm.oldPassword) {
                vm.error = null;
                vm.success = null;
                vm.doNotMatch = null;
                vm.samePassword = 'ERROR';
            } else if (vm.password !== vm.confirmPassword) {
                vm.error = null;
                vm.success = null;
                vm.samePassword = null;
                vm.doNotMatch = 'ERROR';
            } else {
                vm.doNotMatch = null;
                vm.samePassword = null;
                Auth.changePassword(vm.oldPassword, vm.password).then(function() {
                    vm.error = null;
                    vm.success = 'OK';
                    //$uibModalInstance.dismiss('cancel');
                }).catch(function() {
                    vm.success = null;
                    vm.error = 'ERROR';
                });

            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('activate', {
            parent: 'account',
            url: '/activate?key',
            data: {
                authorities: [],
                pageTitle: 'activate.title'
            },
            views: {
                'content@': {
                    templateUrl: 'app/account/activate/activate.html',
                    controller: 'ActivationController',
                    controllerAs: 'vm'
                }
            },
            resolve: {
                translatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('activate');
                    return $translate.refresh();
                }]
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .controller('ActivationController', ActivationController);

    ActivationController.$inject = ['$log', '$stateParams', 'Auth', 'LoginService'];

    function ActivationController($log, $stateParams, Auth, LoginService) {
        var vm = this;

        Auth.activateAccount({
            key: $stateParams.key
        }).then(function() {
            vm.error = null;
            vm.success = 'OK';
        }).catch(function() {
            vm.success = null;
            vm.error = 'ERROR';
        });

        vm.login = LoginService.open;
    }
})();

(function() {
    'use strict';

    angular
        .module('B2B2CGatewayApp')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {
        $stateProvider.state('account', {
            abstract: true,
            parent: 'app',

            resolve: {
                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('global');
                    return $translate.refresh();
                }]
            }
        });
    }
})();
(function() {
    angular.module('B2B2CGatewayApp').run(['$templateCache', function($templateCache) {
        $templateCache.put('app/blank/blank.html', '<div ng-cloak><div class="row"><div class="col-md-4"><span class="hipster img-responsive img-rounded"></span></div><div class="col-md-8"><h1>BLANK PAGE</h1></div></div></div>');
        $templateCache.put('app/dialogs/alert.dialog.html', '<div class="portlet delete-card-dialog light no-border"><div class="portlet-title"><div class="caption"><span class="caption-subject bold text-gtd-3 uppercase">{{vm.error.title}}</span></div></div><div class="portlet-body"><div class="content"><span>{{vm.error.message}}</span></div><div class="buttons-actions"><div class="btn btn-green" ng-click="vm.cancel()"><span class="uppercase">OK</span></div></div></div></div>');
        $templateCache.put('app/dialogs/b2b2c.dialog.html', '<div class="portlet new-gtd-dialog delete-card-dialog no-border"><div class="portlet-title"><div class="caption"><span class="fa fa-info-circle gtd-h1 info-icon"></span> <span class="caption-subject bold uppercase gtd-h4" data-translate="dialog.b2b2c.title">Th\xF4ng B\xE1o</span></div></div><div class="portlet-body"><div class="content"><span data-translate="dialog.b2b2c.message">Phi\xEAn l\xE0m vi\u1EC7c c\u1EE7a b\u1EA1n \u0111\xE3 k\u1EBFt th\xFAc. M\u1EDDi b\u1EA1n quay l\u1EA1i B2B \u0111\u1EC3 s\u1EED d\u1EE5ng ch\u1EE9c n\u0103ng n\xE0y.</span></div><div class="buttons-actions"><div class="btn btn-green gtd-btn-medium" style="padding-top: 9px" ng-click="vm.cancel()"><span class="uppercase">OK</span></div></div></div></div>');
        $templateCache.put('app/dialogs/merchant.alert.dialog.html', '<div class="portlet light no-border"><div class="portlet-title"><div class="caption"><span class="caption-subject bold text-gtd-3 uppercase">{{vm.error.title}}</span></div></div><div class="portlet-body"><div class="content"><span>{{vm.error.message}}</span></div></div></div>');
        $templateCache.put('app/dialogs/otp.popup.html', '<div data-backdrop="static" data-keyboard="false" class="modal-content"><div class="portlet delete-card-dialog light no-border ng-scope"><div class="portlet-title"><div class="caption"><span class="caption-subject bold text-gtd-3 uppercase ng-binding" data-translate="flight.otp.accuracy"></span></div></div><div dismiss-on-timeout="10000" ng-show="alerts[0].msg" class="portlet-body"><div class="content"><div class="captionText messageError"><div ng-repeat="alert in alerts">{{alert.msg}}</div></div></div><div class="row text-center" ng-show="alerts[0] && alerts[0].type == \'noValidPhone\'"><div class="btnVerify btn btn-green" ng-click="doBack()" role="button"><span class="uppercase" data-translate="flight.otp.changePhone"></span></div><div class="btnCancel btn btn-danger" ng-click="cancel()" role="button"><span class="uppercase" data-translate="flight.otp.cancel"></span></div></div></div><div ng-hide="!showDiv"><div ng-hide="verificationCode.length > 0" class="portlet-body"><div class="content"><div class="captionText"><span data-translate="flight.otp.captionText"></span></div></div><div class="row text-center"><div class="btnVerify btn btn-green" ng-click="getOTP()" role="button"><span class="uppercase" data-translate="flight.otp.getOtp"></span></div><div class="btnCancel btn btn-danger" ng-click="cancel()" role="button"><span class="uppercase" data-translate="flight.otp.cancel"></span></div></div></div><div ng-hide="verificationCode.length == 0" class="portlet-body"><div class="content"><span style="font-weight: bold"><span data-translate="flight.otp.sendToPhone"></span> {{phoneNumber}}</span><br><span data-translate="flight.otp.inputToField"></span><p><span data-translate="flight.otp.note"></span> <span style="font-weight: bold">{{timeOut}} </span><span data-translate="flight.otp.seconds"></span></p><div class="otp-container"><input class="otpVal" oninput="inputInsideOtpInput(this)" maxlength="1" type="number"> <input class="otpVal" oninput="inputInsideOtpInput(this)" maxlength="1" type="number"> <input class="otpVal" oninput="inputInsideOtpInput(this)" maxlength="1" type="number"> <input class="otpVal" oninput="inputInsideOtpInput(this)" maxlength="1" type="number"> <input class="otpVal" oninput="inputInsideOtpInput(this)" maxlength="1" type="number"> <input class="otpVal" oninput="inputInsideOtpInput(this)" maxlength="1" type="number"></div><input type="hidden" name="otp" ng-model="otpCode" required></div><div dismiss-on-timeout="10000" class="alert-danger errorMessageOtp" data-translate="flight.otp.errorMessageOtp"></div><div class="buttons-actions row text-center"><div class="btn btn-green btnVerify" ng-click="verify()" role="button"><span class="uppercase">OK</span></div><div class="btnCancel btn btn-danger" ng-click="cancel()" role="button"><span class="uppercase" data-translate="flight.otp.cancel"></span></div></div></div><script>function inputInsideOtpInput(el) {\n                    if (el.value.length > 1){\n                        el.value = el.value[el.value.length - 1];\n                    }\n                    try {\n                        if(el.value == null || el.value == ""){\n                            this.foucusOnInput(el.previousElementSibling);\n                        }else {\n                            this.foucusOnInput(el.nextElementSibling);\n                        }\n                    }catch (e) {\n                        console.log(e);\n                    }\n                }\n\n                function foucusOnInput(ele){\n                    if(ele != null) {\n                        ele.focus();\n                        var val = ele.value;\n                        ele.value = val;\n                    }\n                }</script></div></div></div>');
        $templateCache.put('app/dialogs/payoo-popup.html', '<div class="portlet delete-card-dialog light no-border ng-scope"><div class="portlet-title"><div class="form-group heading-payoo"><div class="logo-gtd"><img src="../../content/images/logo.png" style="width: 150px"></div><div class="logo-payoo"><img src="../../content/images/payoo-logo.jpeg" style="width: 100px; height: 100%"></div><div class="portlet-title"><span data-translate="payoo.title"></span></div></div></div><div class="portlet-body body-payoo"><div class="content"><p><span data-translate="payoo.payment"></span></p><p><span data-translate="payoo.body"></span></p><div class="infoBillCode"><span data-translate="payoo.paymentInfo"></span><span class="billingCode">{{billingCode}}</span></div><p><span data-translate="payoo.lstStore"></span></p><iframe src="https://payoo.vn/v2/merchants/logo_shop_paylater.php" frameborder="0" width="100%" class="partner" scrolling="no" style="overflow:hidden"></iframe></div><div class="buttons-actions"><span><span data-translate="payoo.findStore"></span><a href="https://www.payoo.vn/mapv2/index.php?verify=true" target="_blank"><span data-translate="payoo.linkStore"></span></a></span><div class="btn btn-green pull-right" ng-click="vm.closePayoo()" role="button" tabindex="0"><span class="uppercase ng-scope" data-translate="payoo.buttonAccept"></span></div></div></div></div>');
        $templateCache.put('app/dialogs/timeout.dialog.html', '<div class="portlet new-gtd-dialog delete-card-dialog no-border"><div class="portlet-title"><div class="caption"><span class="fa fa-info-circle gtd-h1 info-icon"></span> <span class="caption-subject bold uppercase gtd-h4">{{vm.error.title}}</span></div></div><div class="portlet-body"><div class="content"><span>{{vm.error.message}}</span></div><div class="buttons-actions"><div class="btn btn-green gtd-btn-medium" style="padding-top: 9px" ng-click="vm.cancel()"><span class="uppercase">OK</span></div></div></div></div>');
        $templateCache.put('app/flights/flight.loading.html', '<div class="flight-search-loading"><div class="modal-body"><div class="row" ng-switch="vm.searchOptions.searchType == \'roundtrip\'"><div class="col-md-12"><span class="flight-search-loading-title" style="font-size: 14px" data-translate="flight.loadingprocess">Y\xEAu c\u1EA7u c\u1EE7a qu\xFD kh\xE1ch \u0111ang \u0111\u01B0\u1EE3c x\u1EED l\xFD. Vui l\xF2ng kh\xF4ng \u0111\xF3ng c\u1EEDa s\u1ED5 tr\xECnh duy\u1EC7t.</span><div class="progress-bar-wapper"><div class="progress"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{{vm.progress}}" aria-valuemin="0" aria-valuemax="100" ng-style="{\'width\':vm.progress+\'%\'}"></div></div></div></div></div></div></div>');
        $templateCache.put('app/home/error-partner.html', '<style>/*\nVIEW IN FULL SCREEN MODE\nFULL SCREEN MODE: http://salehriaz.com/404Page/404.html\n\nDRIBBBLE: https://dribbble.com/shots/4330167-404-Page-Lost-In-Space\n*/\n\n    /* @import url("https://fonts.googleapis.com/css?family=Dosis:300,400,500"); */\n\n    @-moz-keyframes rocket-movement {\n        100% {\n            -moz-transform: translate(1200px, -600px);\n        }\n    }\n    @-webkit-keyframes rocket-movement {\n        100% {\n            -webkit-transform: translate(1200px, -600px);\n        }\n    }\n    @keyframes rocket-movement {\n        100% {\n            transform: translate(1200px, -600px);\n        }\n    }\n    @-moz-keyframes spin-earth {\n        100% {\n            -moz-transform: rotate(-360deg);\n            transition: transform 20s;\n        }\n    }\n    @-webkit-keyframes spin-earth {\n        100% {\n            -webkit-transform: rotate(-360deg);\n            transition: transform 20s;\n        }\n    }\n    @keyframes spin-earth {\n        100% {\n            -webkit-transform: rotate(-360deg);\n            transform: rotate(-360deg);\n            transition: transform 20s;\n        }\n    }\n\n    @-moz-keyframes move-astronaut {\n        100% {\n            -moz-transform: translate(-160px, -160px);\n        }\n    }\n    @-webkit-keyframes move-astronaut {\n        100% {\n            -webkit-transform: translate(-160px, -160px);\n        }\n    }\n    @keyframes move-astronaut {\n        100% {\n            -webkit-transform: translate(-160px, -160px);\n            transform: translate(-160px, -160px);\n        }\n    }\n    @-moz-keyframes rotate-astronaut {\n        100% {\n            -moz-transform: rotate(-720deg);\n        }\n    }\n    @-webkit-keyframes rotate-astronaut {\n        100% {\n            -webkit-transform: rotate(-720deg);\n        }\n    }\n    @keyframes rotate-astronaut {\n        100% {\n            -webkit-transform: rotate(-720deg);\n            transform: rotate(-720deg);\n        }\n    }\n\n    @-moz-keyframes glow-star {\n        40% {\n            -moz-opacity: 0.3;\n        }\n        90%,\n        100% {\n            -moz-opacity: 1;\n            -moz-transform: scale(1.2);\n        }\n    }\n    @-webkit-keyframes glow-star {\n        40% {\n            -webkit-opacity: 0.3;\n        }\n        90%,\n        100% {\n            -webkit-opacity: 1;\n            -webkit-transform: scale(1.2);\n        }\n    }\n    @keyframes glow-star {\n        40% {\n            -webkit-opacity: 0.3;\n            opacity: 0.3;\n        }\n        90%,\n        100% {\n            -webkit-opacity: 1;\n            opacity: 1;\n            -webkit-transform: scale(1.2);\n            transform: scale(1.2);\n            border-radius: 999999px;\n        }\n    }\n\n    .spin-earth-on-hover {\n        transition: ease 200s !important;\n        transform: rotate(-3600deg) !important;\n    }\n\n    html,\n    body {\n        margin: 0;\n        width: 100%;\n        height: 100%;\n        font-family: "Dosis", sans-serif;\n        font-weight: 300;\n        -webkit-user-select: none; /* Safari 3.1+ */\n        -moz-user-select: none; /* Firefox 2+ */\n        -ms-user-select: none; /* IE 10+ */\n        user-select: none; /* Standard syntax */\n    }\n\n    .background-error {\n        background: url(../../content/images/error-page/bg_purple.png);\n        background-repeat: repeat-x;\n        background-size: cover;\n        background-position: left top;\n        height: 100%;\n        width: 100%;\n        overflow: hidden;\n        position: fixed;\n    }\n    .error-title {\n        z-index: 200;\n        color: #ffcb39;\n        font-weight: bold;\n        font-size: 4rem;\n        line-height: 4rem;\n        position: relative;\n        padding: 0.5rem;\n        text-shadow: 2px 2px 6px #ce5937;\n    }\n\n    .error-subtitle {\n        z-index: 200;\n        color: #ffcb39;\n        font-size: 2rem;\n        line-height: 2rem;\n        position: relative;\n        padding-bottom: 1rem;\n        text-shadow: 2px 2px 6px #ce5937;\n    }\n\n    .error-description {\n        z-index: 200;\n        color: #fff;\n        font-size: 1rem;\n        line-height: 1rem;\n        position: relative;\n        text-shadow: 2px 2px 6px #ce5937;\n    }\n    .central-body {\n        /*    width: 100%;*/\n        margin: 17% 5% 10% 5%;\n        text-align: center;\n        /* background-color: #ffffff80; */\n        padding: 0.5rem;\n        position: relative;\n        z-index: 100;\n        border-radius: 1%;\n    }\n\n    .objects img {\n        z-index: 90;\n        pointer-events: none;\n    }\n\n    .object_rocket {\n        z-index: 95;\n        position: absolute;\n        transform: translateX(-50px);\n        top: 75%;\n        pointer-events: none;\n        animation: rocket-movement 200s linear infinite both running;\n    }\n\n    .object_earth {\n        position: absolute;\n        top: 20%;\n        left: 15%;\n        z-index: 90;\n        /*    animation: spin-earth 100s infinite linear both;*/\n    }\n\n    .object_moon {\n        position: absolute;\n        top: 12%;\n        left: 25%;\n        /*\n    transform: rotate(0deg);\n    transition: transform ease-in 99999999999s;\n*/\n    }\n\n    .earth-moon {\n    }\n\n    .object_astronaut {\n        animation: rotate-astronaut 200s infinite linear both alternate;\n    }\n\n    .box_astronaut {\n        z-index: 110 !important;\n        position: absolute;\n        top: 60%;\n        right: 20%;\n        will-change: transform;\n        animation: move-astronaut 50s infinite linear both alternate;\n    }\n\n    .image-404 {\n        position: relative;\n        z-index: 100;\n        pointer-events: none;\n    }\n\n    .stars {\n        background: url(../../content/images/error-page/overlay_stars.svg);\n        background-repeat: repeat;\n        background-size: contain;\n        background-position: left top;\n    }\n\n    .glowing_stars .star {\n        position: absolute;\n        border-radius: 100%;\n        background-color: #fff;\n        width: 3px;\n        height: 3px;\n        opacity: 0.3;\n        will-change: opacity;\n    }\n\n    .glowing_stars .star:nth-child(1) {\n        top: 80%;\n        left: 25%;\n        animation: glow-star 2s infinite ease-in-out alternate 1s;\n    }\n    .glowing_stars .star:nth-child(2) {\n        top: 20%;\n        left: 40%;\n        animation: glow-star 2s infinite ease-in-out alternate 3s;\n    }\n    .glowing_stars .star:nth-child(3) {\n        top: 25%;\n        left: 25%;\n        animation: glow-star 2s infinite ease-in-out alternate 5s;\n    }\n    .glowing_stars .star:nth-child(4) {\n        top: 75%;\n        left: 80%;\n        animation: glow-star 2s infinite ease-in-out alternate 7s;\n    }\n    .glowing_stars .star:nth-child(5) {\n        top: 90%;\n        left: 50%;\n        animation: glow-star 2s infinite ease-in-out alternate 9s;\n    }\n\n    @media only screen and (max-width: 600px) {\n        .box_astronaut {\n            top: 70%;\n        }\n\n        .central-body {\n            margin-top: 25%;\n        }\n    }</style><!--\nVIEW IN FULL SCREEN MODE\nFULL SCREEN MODE: http://salehriaz.com/404Page/404.html\n\nDRIBBBLE: https://dribbble.com/shots/4330167-404-Page-Lost-In-Space\n--><div class="background-error"><div class="stars"><div class="central-body"><!-- <img class="image-404" src="../../../content/images/error-page/404.svg" width="300px"> --><div class="error-title">Opps!.......</div><div class="error-subtitle">L\u1EA1c \u0111\u01B0\u1EDDng r\u1ED3i!</div><div class="error-description"></div><!-- <a href="http://salehriaz.com/404Page/404.html" class="btn-go-home" target="_blank">GO BACK HOME</a> --></div><div class="objects"><img class="object_rocket" src="../../../content/images/error-page/rocket.svg" width="40px"><div class="earth-moon"><img class="object_earth" src="../../../content/images/error-page/earth.svg" width="100px"> <img class="object_moon" src="../../../content/images/error-page/moon.svg" width="80px"></div><div class="box_astronaut"><img class="object_astronaut" src="../../../content/images/error-page/astronaut.svg" width="140px"></div></div><div class="glowing_stars"><div class="star"></div><div class="star"></div><div class="star"></div><div class="star"></div><div class="star"></div></div></div></div>');
        $templateCache.put('app/home/fastgo_home.html', '<div class="formSearch"><div class="container reset-container home"><div class="flight-search-home"><div class="tab-content"><div class="tab-pane active" id="flight"><div class="row" ng-if="!vm.enable_template"><div class="col-md-7"><div class="mainFormSearch"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearchFlight($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div></div><div ng-if="vm.enable_template" class="mainFormSearch"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearchFlight($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div><div class="tab-pane" id="hotel"><div class="row" ng-if="!vm.enable_template"><div class="col-md-8"><gtd-hotel-home-search-header search-options="vm.hotelSearchOptions" do-search="vm.doSearchHotel($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div><div ng-if="vm.enable_template" class="mainFormSearch"><gtd-hotel-home-search-header search-options="vm.hotelSearchOptions" do-search="vm.doSearchHotel($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div></div></div></div></div>');
        $templateCache.put('app/home/home.html', '<div class="formSearch"><div class="container reset-container home"><div class="flight-search-home"><div class="tab-content"><div class="tab-pane active" id="flight"><div class="row" ng-if="!vm.enable_template"><div class="col-md-7"><div class="mainFormSearch"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearchFlight($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div><div class="col-md-5 hidden-sm hidden-xs"><div class="hotel-header-ads porlet"><div class="listSliderHome"><div class="groupSlider"><div id="slider1_container"><div id="slider_content" class="uSlider" u="slides"></div><div u="navigator" class="jssorb13"><div u="prototype"></div></div></div></div></div></div></div></div><div ng-if="vm.enable_template" class="mainFormSearch"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearchFlight($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div><div class="tab-pane" id="hotel"><div class="row" ng-if="!vm.enable_template"><div class="col-md-8"><gtd-hotel-home-search-header search-options="vm.hotelSearchOptions" do-search="vm.doSearchHotel($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div><div class="col-md-4"><div class="hotel-header-ads porlet"><div class="listSliderHome"><div class="groupSlider"><div id="slider1_container"><div id="slider_content" class="uSlider" u="slides"></div><div u="navigator" class="jssorb13"><div u="prototype"></div></div></div></div></div></div></div></div><div ng-if="vm.enable_template" class="mainFormSearch"><gtd-hotel-home-search-header search-options="vm.hotelSearchOptions" do-search="vm.doSearchHotel($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div></div></div></div></div><div class="mainPage" ng-if="!vm.enable_template"><div class="container reset-container"><div class="flight-search-home"><div class="row"><div class="col-md-12 hotel-header-carousel"><div class="listCaption"><div class="item"><div class="icon"><img src="../../../content/images/icon-sellingpoint.svg" class="img-responsive"></div><div class="content-zone"><div class="title">{{\'home.bestprice\' |translate}}</div><div class="content">{{\'home.allservice\' |translate}}</div></div></div><div class="item"><div class="icon"><img src="../../../content/images/icon-ho-tro.svg" class="img-responsive"></div><div class="content-zone"><div class="title">{{\'home.care\' |translate}}</div><div class="content">{{\'home.callcenter\' |translate}}</div></div></div><div class="item"><div class="icon"><img src="../../../content/images/icon-thue.svg" class="img-responsive"></div><div class="content-zone"><div class="title">{{\'home.vat\' |translate}}</div><div class="content">{{\'home.vat2\' |translate}}</div></div></div></div></div></div></div></div><div class="subscrice"><div class="container reset-container"><div class="imgApp"><img src="../../../content/images/3caidt.png" class="img-responsive"></div><div class="row"><div class="col-md-4"></div><div class="col-md-6"><div class="form-subscrice"><div class="form-group"><div class="email"><label for="email">{{\'home.app1\' |translate}}</label><input type="text" class="form-text" placeholder="{{\'home.plchdr.entermail\'|translate}}" id="email"><div class="send"><button class="btnSend" ng-click="subscriceEmail()"><i class="fa fa-envelope"></i> &nbsp; {{\'home.send\' |translate}}</button></div></div><div class="messageResult"></div></div><div class="downApp"><div class="name-tk">{{\'home.app2\' |translate}}</div><div class="icon-store"><a href="https://itunes.apple.com/us/app/gotadi-flight-booking/id1234937358?mt=8" target="_blank"><img src="../../../content/images/app-store.jpg" class="img-responsive"></a></div><div class="icon-store"><a href="https://play.google.com/store/apps/details?id=com.vn.gotadi.mobileapp" target="_blank"><img src="../../../content/images/google-play.jpg" class="img-responsive"></a></div></div></div></div></div></div></div><div class="member-benefits"><div class="container"><div class="litsBenefits"><div class="heading-name">{{\'home.benefit\' |translate}}</div><div class="row"><div class="col-md-4"><div class="item"><div class="name">{{\'home.price1\' |translate}}</div><div class="iconBf"><img class="header-icon" src="../../../content/images/icon-price-good.svg"></div><p>{{\'home.price2\' |translate}}</p></div></div><div class="col-md-4"><div class="item"><div class="name">{{\'home.deal1\' |translate}}</div><div class="iconBf"><img class="header-icon" src="../../../content/images/icon-uu-dai.svg"></div><p>{{\'home.deal2\' |translate}}</p></div></div><div class="col-md-4"><div class="item"><div class="name">{{\'home.point1\' |translate}}</div><div class="iconBf"><img class="header-icon" src="../../../content/images/icon-tichluydiem.svg"></div><p>{{\'home.point2\' |translate}}</p></div></div></div></div></div></div><div class="partner"><div class="container"><div class="heading-name">{{\'home.partner\' |translate}}</div><div class="listPartner"><div id="partner-carousel" class="partner-carousel owl-carousel owl-theme col-md-12 no-padding-left no-padding-right"><div class="item"><div class="item-icon"><img src="../../../content/images/partner/logobankplus1.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/partner/TIKI.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/partner/LOGO-VIB-Blue.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/partner/zalopay.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/partner/logo-viviet.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/partner/momo.png" class="img-responsive"></div></div></div></div></div><script type="text/javascript">$("#partner-carousel").owlCarousel({\n                autoPlay: 3000, //Set AutoPlay to 3 seconds\n                items: 6,\n                nav: false,\n                dots: false,\n                responsive : {\n                    280 : { items : 3, dots: true },\n                    480 : { items : 4, dots: true },\n                    768 : { items : 5, dots: true  },\n                    991 : { items : 6, dots: true  },\n                }\n            });</script></div><div class="trademark"><div class="container"><div class="heading-name">{{\'home.brands\' |translate}}</div><div class="listTrademark"><div id="trademark-carousel" class="trademark-carousel owl-carousel owl-theme col-md-12 no-padding-left no-padding-right"><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/acprail.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/jeju.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/k6.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/hawai.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/tk.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/db.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/goodwill.png" class="img-responsive"></div></div><div class="item"><div class="item-icon"><img src="../../../content/images/trademark/bhaya.png" class="img-responsive"></div></div></div></div></div><script type="text/javascript">$("#trademark-carousel").owlCarousel({\n                autoPlay: 3000, //Set AutoPlay to 3 seconds\n                dots: false,\n                items: 8,\n                responsive : {\n                    280 : { items : 3, dots: true },\n                    480 : { items : 4, dots: true },\n                    768 : { items : 5, dots: true  },\n                    991 : { items : 8, dots: true  },\n                }\n            });</script></div></div>');
        $templateCache.put('app/home/hotel-booking-terms.html', '<div class="container margin-top-20"><div class="col-md-12 detail-tour">PLEASE READ THESE TERMS AND CONDITIONS CAREFULLY AS THEY CONTAIN IMPORTANT INFORMATION ABOUT LIMITATIONS OF LIABILITY AND RESOLUTION OF DISPUTES EAN TERMS AND CONDITIONS We have tried to make these terms of use (the Terms) as easy to understand as possible by using plain English. To make it easier for you to follow, we have occasionally used definitions. When a definition is first used, you will be able to see it clearly in bold text. If we use it again in these Terms, it will appear with capital letters (unless it is a reference to we, us or our or you or your). In the Terms, the following words have the following meanings: Affiliate means any of our marketing affiliates, including those through whose site you may have made the Booking; Customer Support Agent means (i) our or one of our Group Member\u2019s customer support providers; or (ii) our Affiliates\u2019 customer support providers (including any persons acting on their behalf); or (iii) any persons acting as customer support providers on behalf of us or our Group Members; Booking means your making of a Hotel Reservation; Group Member means an entity that, directly or indirectly, through one or more intermediaries, controls or is controlled by, or is under common control with us, including Travelscape LLC (a Nevada limited liability company) and Vacationspot, SL (a Spanish registered company); Hotel Reservations means the accommodation reservations, including those which are part of a package, made available by us and our Group Members from time to time; and we, us, our means EAN.com L.P, a Delaware limited partnership; you, your means the individual or corporate end customer browsing our Information or making Hotel Reservations. The Terms tell you the terms on which you may: access the information about Hotel Reservations (our Information) we and our Group Members provide to our Affiliates and Customer Support Agents about the Hotel Reservations; and complete a Booking. Please read these Terms carefully before you start to browse our Information and/or make a Booking. We recommend that you print a copy of these Terms for future reference. By browsing our Information and/or making a Booking, you confirm that you accept these Terms and that you agree to comply with them. If you do not agree to these Terms, you must not use our Information, contact our Customer Support Agents or make any Bookings. OTHER APPLICABLE TERMS These Terms also refer to additional rules and restrictions, including cancellation policies of suppliers of Hotel Reservations (Rules) which may apply to your Booking. These Rules will be made available to you prior to completion of the Booking and any Booking is made subject to the Rules as set out on the booking page. Please read these Rules carefully. If you are making a Booking on behalf of any other persons, you are responsible for bringing these Rules to the attention of such persons and advising them they will be bound by the same. We retain the right, at our sole discretion, to deny access to our Information and Hotel Reservations at any time and for any reason, including, but not limited to, for breach of these Terms. CHANGES TO THESE TERMS We may revise these Terms at any time by amending this page and will publish the updated version online from time to time. Please check this web page each time you make a Booking to take notice of any changes we have made, as they are binding on you in relation to all matters except any Bookings made prior to the date of the last set of changes (see top right). The Terms that applied at the time you made the Booking will continue to apply to such Booking. PURPOSE OF OUR INFORMATION Our Information is provided solely to assist you in gathering travel information, determining the availability of Hotel Reservations, making legitimate Bookings or otherwise communicating with our Customer Support Agents. Unless we agree otherwise in writing, you may not use our Information for any other purpose. CONDITIONS OF MAKING A BOOKING As a condition of making a Booking, you warrant that: you are at least 18 years of age; you have the authority to create a binding legal agreement with us and the relevant Hotel Reservation supplier(s); you will only make Bookings for you or for other persons for whom you have authority to make such Bookings (Other Persons); you will advise such Other Persons about these Terms (as updated by us from time to time) and any other applicable terms that apply to a Booking; all information supplied by you (including any information supplied on behalf of Other Persons) in respect of a Booking is accurate, complete and up to date; and you will comply with our Acceptable Use Policy set out below. ACCEPTABLE USE POLICY When accessing our Information you agree not to: use our Information for any commercial purpose; make any speculative, false, or fraudulent Bookings or any Booking in anticipation of demand; access, monitor or copy any of our Information using any robot, spider, scraper or other automated means or any manual process for any purpose without our express written permission; violate the restrictions in any robot exclusion headers on our Information or bypass or circumvent other measures employed to prevent or limit access to our Information; take any action that imposes, or may impose, in our discretion, an unreasonable or disproportionately large load on our infrastructure; deep-link to any portion of our Information (including, without limitation, the purchase path for any Travel Products) for any purpose without our express written permission; or "frame", "mirror" or otherwise incorporate any part of our Information into any other website without our prior written authorization.</div></div>');
        $templateCache.put('app/home/terms.html', '<div ng-if="vm.language ===\'vi\'" class="container margin-top-20"><div class="col-md-12 detail-tour"><h2 class="title">C\xE1c \u0111i\u1EC1u kho\u1EA3n s\u1EED d\u1EE5ng</h2><a href="https://developer.expediapartnersolutions.com/terms/agent/{{vm.language}}" target="_blank">\u0110i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n c\u1EE7a nh\xE0 cung c\u1EA5p kh\xE1ch s\u1EA1n</a><br><br><div class="content"><p><span style="font-size:14px"><span style="font-family:arial,helvetica,sans-serif"><strong>A. Th\u1ECFa thu\u1EADn s\u1EED d\u1EE5ng</strong></span></span></p><p>&nbsp;</p><p><span style="font-size:14px"><span style="font-family:arial,helvetica,sans-serif"><strong>Ph\u1EA1m vi \xE1p d\u1EE5ng th\u1ECFa thu\u1EADn n\xE0y</strong><br><br>Th\u1ECFa thu\u1EADn n\xE0y ("Th\u1ECFa thu\u1EADn c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng") l\xE0 t\u1ED5ng h\u1EE3p c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n \u0111\u1EC3 Gotadi v\xE0 c\xE1c c\xF4ng ty li\xEAn k\u1EBFt cung c\u1EA5p c\xE1c d\u1ECBch v\u1EE5 cho (nh\u1EEFng) ng\u01B0\u1EDDi ("Ng\u01B0\u1EDDi d\xF9ng") c\xF3 \xFD \u0111\u1ECBnh mua ho\u1EB7c h\u1ECFi th\xF4ng tin v\u1EC1 b\u1EA5t k\u1EF3 s\u1EA3n ph\u1EA9m v\xE0/ho\u1EB7c d\u1ECBch v\u1EE5 n\xE0o c\u1EE7a Gotadi b\u1EB1ng c\xE1ch s\u1EED d\u1EE5ng c\xE1c trang web c\u1EE7a Gotadi ho\u1EB7c s\u1EED d\u1EE5ng b\u1EA5t k\u1EF3 k\xEAnh giao di\u1EC7n kh\xE1ch h\xE0ng n\xE0o kh\xE1c c\u1EE7a Gotadi, trong \u0111\xF3 bao g\u1ED3m c\xE1c nh\xE2n vi\xEAn b\xE1n h\xE0ng, c\xE1c v\u0103n ph\xF2ng \u0111\u1EA1i di\u1EC7n, c\xE1c t\u1ED5ng \u0111\xE0i \u0111i\u1EC7n tho\u1EA1i, c\xE1c qu\u1EA3ng c\xE1o, c\xE1c chi\u1EBFn d\u1ECBch qu\u1EA3ng b\xE1,\u2026<br><br>C\u1EA3 Ng\u01B0\u1EDDi d\xF9ng v\xE0 Gotadi \u0111\u1EC1u \u0111\u01B0\u1EE3c g\u1ECDi ri\xEAng l\xE0 \u201Cb\xEAn\u201D trong th\u1ECFa thu\u1EADn n\xE0y v\xE0 g\u1ECDi chung l\xE0 \u201Cc\xE1c b\xEAn\u201D.<br><br><strong>Tr\xE1ch nhi\u1EC7m nh\u1EADn th\u1EE9c th\u1ECFa thu\u1EADn n\xE0y c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng</strong><br><br>Nh\u1EEFng Ng\u01B0\u1EDDi d\xF9ng c\xE1c d\u1ECBch v\u1EE5 t\u1EEB Gotadi s\u1EBD \u0111\u01B0\u1EE3c coi l\xE0 \u0111\xE3 \u0111\u1ECDc, hi\u1EC3u v\xE0 tuy\u1EC7t \u0111\u1ED1i ch\u1EA5p nh\u1EADn c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n c\u1EE7a th\u1ECFa thu\u1EADn n\xE0y, m\u1ED9t tho\u1EA3 thu\u1EADn s\u1EBD \u0111i\u1EC1u ch\u1EC9nh c\xE1c giao d\u1ECBch c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng ho\u1EB7c vi\u1EC7c cung c\u1EA5p c\xE1c d\u1ECBch v\u1EE5 \u0111\xF3 b\u1EDFi Gotadi trong th\u1EF1c t\u1EBF, v\xE0 s\u1EBD r\xE0ng bu\u1ED9c Ng\u01B0\u1EDDi d\xF9ng. T\u1EA5t c\u1EA3 c\xE1c quy\u1EC1n v\xE0 ngh\u0129a v\u1EE5 c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng v\xE0/ho\u1EB7c Gotadi \u0111\u1ED1i v\u1EDBi b\u1EA5t k\u1EF3 d\u1ECBch v\u1EE5 n\xE0o do Gotadi cung c\u1EA5p s\u1EBD \u0111\u01B0\u1EE3c gi\u1EDBi h\u1EA1n trong ph\u1EA1m vi c\u1EE7a th\u1ECFa thu\u1EADn n\xE0y.<br><br>Gotadi c\xF3 quy\u1EC1n, to\xE0n quy\u1EC1n quy\u1EBFt \u0111\u1ECBnh, ch\u1EA5m d\u1EE9t quy\u1EC1n truy c\u1EADp v\xE0o b\u1EA5t k\u1EF3 ho\u1EB7c t\u1EA5t c\u1EA3 c\xE1c ph\u1EA7n tr\xEAn trang web c\u1EE7a Gotadi ho\u1EB7c c\xE1c k\xEAnh b\xE1n h\xE0ng kh\xE1c v\xE0 c\xE1c d\u1ECBch v\u1EE5 c\xF3 li\xEAn quan ho\u1EB7c b\u1EA5t c\u1EE9 ph\u1EA7n n\xE0o trong \u0111\xF3 v\xE0o b\u1EA5t k\u1EF3 l\xFAc n\xE0o, m\xE0 kh\xF4ng c\u1EA7n th\xF4ng b\xE1o, \u0111\u1EC3 b\u1EA3o tr\xEC chung ho\u1EB7c v\xEC b\u1EA5t k\u1EF3 l\xFD do g\xEC.<br><br>Ngo\xE0i Th\u1ECFa thu\u1EADn n\xE0y, c\xF3 m\u1ED9t s\u1ED1 \u0111i\u1EC1u kho\u1EA3n d\u1ECBch v\u1EE5 (TOS) c\u1EE5 th\u1EC3 cho c\xE1c d\u1ECBch v\u1EE5/s\u1EA3n ph\u1EA9m do Gotadi \u0111\u01B0a ra/cung c\u1EA5p nh\u01B0 v\xE9 m\xE1y bay, kh\xE1ch s\u1EA1n, c\xE1c g\xF3i k\u1EF3 ngh\u1EC9\u2026 TOS n\xE0y s\u1EBD \u0111\u01B0\u1EE3c cung c\u1EA5p/c\u1EADp nh\u1EADt b\u1EDFi Gotadi v\xE0 s\u1EBD \u0111\u01B0\u1EE3c coi l\xE0 m\u1ED9t ph\u1EA7n c\u1EE7a Th\u1ECFa thu\u1EADn n\xE0y v\xE0 trong tr\u01B0\u1EDDng h\u1EE3p c\xF3 m\xE2u thu\u1EABn gi\u1EEFa C\xE1c \u0111i\u1EC1u kho\u1EA3n d\u1ECBch v\u1EE5 c\u1EE5 th\u1EC3 kh\xE1c (TOS) \u0111\xF3 v\xE0 Th\u1ECFa thu\u1EADn n\xE0y, c\xE1c \u0111i\u1EC1u kho\u1EA3n c\u1EE7a Th\u1ECFa thu\u1EADn n\xE0y s\u1EBD \u0111\u01B0\u1EE3c \xE1p d\u1EE5ng. Ng\u01B0\u1EDDi d\xF9ng s\u1EBD \u0111\u01B0\u1EE3c y\xEAu c\u1EA7u ph\u1EA3i \u0111\u1ECDc v\xE0 ch\u1EA5p nh\u1EADn TOS li\xEAn quan \u0111\u1EBFn c\xE1c d\u1ECBch v\u1EE5/s\u1EA3n ph\u1EA9m m\xE0 Ng\u01B0\u1EDDi d\xF9ng \u0111\xE3 d\xF9ng.<br>Ngo\xE0i ra, ch\xEDnh Nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5 c\u0169ng c\xF3 th\u1EC3 \u0111\u01B0a ra c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 h\u01B0\u1EDBng d\u1EABn \u0111\u1ED1i v\u1EDBi c\xE1c t\xEDnh n\u0103ng, c\xE1c l\u1EDDi ch\xE0o h\xE0ng \u0111\u1EB7c bi\u1EC7t ho\u1EB7c c\xE1c quy t\u1EAFc v\xE0 ch\xEDnh s\xE1ch \u0111i\u1EC1u h\xE0nh \u0111\u1ED1i v\u1EDBi t\u1EEBng D\u1ECBch v\u1EE5 (v\xED d\u1EE5: c\xE1c chuy\u1EBFn bay, \u0111\u1EB7t ph\xF2ng kh\xE1ch s\u1EA1n, c\xE1c g\xF3i d\u1ECBch v\u1EE5\u2026) . Ng\u01B0\u1EDDi d\xF9ng c\xF3 tr\xE1ch nhi\u1EC7m b\u1EA3o \u0111\u1EA3m vi\u1EC7c tu\xE2n th\u1EE7 c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 h\u01B0\u1EDBng d\u1EABn ho\u1EB7c c\xE1c quy t\u1EAFc v\xE0 ch\xEDnh s\xE1ch \u0111i\u1EC1u h\xE0nh c\u1EE7a Nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5 m\xE0 Ng\u01B0\u1EDDi d\xF9ng \u0111\xE3 ch\u1ECDn, trong \u0111\xF3 c\xF3 c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n \u0111\u01B0\u1EE3c quy \u0111\u1ECBnh trong quy t\u1EAFc gi\xE1 v\xE9, h\u1EE3p \u0111\u1ED3ng v\u1EADn chuy\u1EC3n ho\u1EB7c c\xE1c quy \u0111\u1ECBnh kh\xE1c c\u1EE7a c\xE1c Nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5.<br><br>C\xE1c d\u1ECBch v\u1EE5 c\u1EE7a Gotadi \u0111\u01B0\u1EE3c cung c\u1EA5p cho Ng\u01B0\u1EDDi d\xF9ng v\u1EDBi \u0111i\u1EC1u ki\u1EC7n ng\u01B0\u1EDDi \u0111\xF3 ch\u1EA5p nh\u1EADn m\xE0 kh\xF4ng s\u1EEDa \u0111\u1ED5i t\u1EA5t c\u1EA3 c\xE1c \u0111i\u1EC1u kho\u1EA3n, \u0111i\u1EC1u ki\u1EC7n v\xE0 th\xF4ng b\xE1o trong Th\u1ECFa thu\u1EADn n\xE0y v\xE0 C\xE1c \u0111i\u1EC1u kho\u1EA3n d\u1ECBch v\u1EE5 c\u1EE5 th\u1EC3 kh\xE1c (TOS). \u0110\u1EC3 lo\u1EA1i b\u1ECF s\u1EF1 ng\u1EDD v\u1EF1c, \u0111i\u1EC1u n\xE0y \u0111\u01B0\u1EE3c l\xE0m r\xF5 nh\u01B0 sau: vi\u1EC7c Ng\u01B0\u1EDDi d\xF9ng d\xF9ng c\xE1c D\u1ECBch v\u1EE5 ch\xEDnh l\xE0 m\u1ED9t s\u1EF1 th\u1EEBa nh\u1EADn v\xE0 ch\u1EA5p nh\u1EADn c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng \u0111\xF3 \u0111\u1ED1i v\u1EDBi \u0110i\u1EC1u kho\u1EA3n n\xE0y v\xE0 C\xE1c \u0111i\u1EC1u kho\u1EA3n d\u1ECBch v\u1EE5 c\u1EE5 th\u1EC3 kh\xE1c (TOS). N\u1EBFu Ng\u01B0\u1EDDi d\xF9ng kh\xF4ng \u0111\u1ED3ng \xFD v\u1EDBi b\u1EA5t k\u1EF3 ph\u1EA7n n\xE0o c\u1EE7a c\xE1c \u0111i\u1EC1u kho\u1EA3n, \u0111i\u1EC1u ki\u1EC7n v\xE0 th\xF4ng b\xE1o \u0111\xF3, Ng\u01B0\u1EDDi d\xF9ng kh\xF4ng c\u1EA7n s\u1EED d\u1EE5ng c\xE1c D\u1ECBch v\u1EE5 c\u1EE7a Gotadi .<br><br>Trong tr\u01B0\u1EDDng h\u1EE3p b\u1EA5t k\u1EF3 \u0111i\u1EC1u kho\u1EA3n, \u0111i\u1EC1u ki\u1EC7n v\xE0 th\xF4ng b\xE1o n\xE0o t\u1EA1i \u0111\xE2y m\xE2u thu\u1EABn v\u1EDBi c\xE1c \u0110i\u1EC1u kho\u1EA3n B\u1ED5 sung ho\u1EB7c c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 h\u01B0\u1EDBng d\u1EABn kh\xE1c trong b\u1EA5t k\u1EF3 t\xE0i li\u1EC7u n\xE0o kh\xE1c c\u1EE7a Gotadi, th\xEC c\xE1c \u0111i\u1EC1u kho\u1EA3n n\xE0y s\u1EBD \u0111\u01B0\u1EE3c \xE1p d\u1EE5ng.<br>&nbsp;<br><strong>Th\xF4ng tin T\xE0i kho\u1EA3n c\u1EE7a B\xEAn th\u1EE9 ba</strong><br><br>B\u1EB1ng vi\u1EC7c s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 Truy c\u1EADp T\xE0i kho\u1EA3n tr\xEAn trang web c\u1EE7a Gotadi, ng\u01B0\u1EDDi d\xF9ng cho ph\xE9p Gotadi v\xE0 c\xE1c \u0111\u1EA1i l\xFD truy c\u1EADp c\xE1c trang web c\u1EE7a b\xEAn th\u1EE9 ba, bao g\u1ED3m c\u1EE7a c\xE1c Ng\xE2n h\xE0ng v\xE0 c\xE1c c\u1ED5ng thanh to\xE1n kh\xE1c, do h\u1ECD ch\u1EC9 \u0111\u1ECBnh ho\u1EB7c thay m\u1EB7t h\u1ECD \u0111\u1EC3 l\u1EA5y th\xF4ng tin y\xEAu c\u1EA7u.<br><br>Trong khi \u0111\u0103ng k\xFD, Ng\u01B0\u1EDDi d\xF9ng s\u1EBD ch\u1ECDn m\u1ED9t m\u1EADt kh\u1EA9u v\xE0 ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 vi\u1EC7c b\u1EA3o m\u1EADt m\u1EADt kh\u1EA9u v\xE0 t\xE0i kho\u1EA3n.<br><br>Ng\u01B0\u1EDDi d\xF9ng ho\xE0n to\xE0n ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 t\u1EA5t c\u1EA3 c\xE1c ho\u1EA1t \u0111\u1ED9ng di\u1EC5n ra khi s\u1EED d\u1EE5ng m\u1EADt kh\u1EA9u ho\u1EB7c t\xE0i kho\u1EA3n c\u1EE7a h\u1ECD. Ng\u01B0\u1EDDi d\xF9ng c\xF3 tr\xE1ch nhi\u1EC7m th\xF4ng b\xE1o cho Gotadi ngay l\u1EADp t\u1EE9c b\u1EB1ng v\u0103n b\u1EA3n v\u1EC1 b\u1EA5t k\u1EF3 vi\u1EC7c s\u1EED d\u1EE5ng tr\xE1i ph\xE9p m\u1EADt kh\u1EA9u ho\u1EB7c t\xE0i kho\u1EA3n n\xE0o c\u1EE7a h\u1ECD ho\u1EB7c b\u1EA5t k\u1EF3 s\u1EF1 vi ph\u1EA1m an ninh n\xE0o. Gotadi s\u1EBD kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 b\u1EA5t k\u1EF3 t\u1ED5n th\u1EA5t n\xE0o c\xF3 th\u1EC3 x\u1EA3y ra cho Ng\u01B0\u1EDDi d\xF9ng do vi\u1EC7c s\u1EED d\u1EE5ng tr\xE1i ph\xE9p m\u1EADt kh\u1EA9u ho\u1EB7c t\xE0i kho\u1EA3n c\u1EE7a h\u1ECD, cho d\xF9 h\u1ECD c\xF3 bi\u1EBFt hay kh\xF4ng. Ng\u01B0\u1EDDi d\xF9ng s\u1EBD kh\xF4ng s\u1EED d\u1EE5ng m\u1EADt kh\u1EA9u c\u1EE7a ng\u01B0\u1EDDi kh\xE1c b\u1EA5t c\u1EE9 l\xFAc n\xE0o.<br>&nbsp;<br><strong>Thanh to\xE1n chi ph\xED</strong><br><br>Gotadi c\xF3 quy\u1EC1n thu m\u1EE9c ph\xED \u0111\xE3 ni\xEAm y\u1EBFt cho c\xE1c ni\xEAm y\u1EBFt c\u1EE5 th\u1EC3 tr\xEAn trang web, c\u0169ng nh\u01B0 ph\xED giao d\u1ECBch d\u1EF1a tr\xEAn nh\u1EEFng giao d\u1ECBch \u0111\xE3 ho\xE0n t\u1EA5t \u0111\xF3. Gotadi c\u0169ng b\u1EA3o l\u01B0u quy\u1EC1n \u0111\xF4i khi thay \u0111\u1ED5i b\u1EA5t k\u1EF3 v\xE0 t\u1EA5t c\u1EA3 c\xE1c lo\u1EA1i ph\xED, m\xE0 kh\xF4ng c\u1EA7n th\xF4ng b\xE1o.<br><br>Ng\u01B0\u1EDDi d\xF9ng s\u1EBD ho\xE0n to\xE0n ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 m\u1ECDi kho\u1EA3n ph\xED, l\u1EC7 ph\xED, thu\u1EBF quan, thu\u1EBF, v\xE0 s\u1ED1 ti\u1EC1n \u1EA5n \u0111\u1ECBnh ph\u1EA3i tr\u1EA3, ph\xE1t sinh t\u1EEB vi\u1EC7c s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5.<br><br>Trong tr\u01B0\u1EDDng h\u1EE3p, Gotadi t\xEDnh thi\u1EBFu ph\xED cho vi\u1EC7c ni\xEAm y\u1EBFt, cho c\xE1c d\u1ECBch v\u1EE5 ho\u1EB7c ph\xED giao d\u1ECBch ho\u1EB7c b\u1EA5t k\u1EF3 lo\u1EA1i ph\xED hay d\u1ECBch v\u1EE5 n\xE0o kh\xE1c do b\u1EA5t k\u1EF3 l\xFD do k\u1EF9 thu\u1EADt ho\u1EB7c l\xFD do n\xE0o kh\xE1c, Gotadi c\xF3 quy\u1EC1n kh\u1EA5u tr\u1EEB /t\xEDnh ph\xED/\u0111\xF2i ph\u1EA7n c\xF2n l\u1EA1i sau giao d\u1ECBch \u0111\xF3 theo quy\u1EC1n t\u1EF1 quy\u1EBFt c\u1EE7a m\xECnh.<br><br>Trong m\u1ED9t s\u1ED1 tr\u01B0\u1EDDng h\u1EE3p hi\u1EBFm hoi, n\u1EBFu vi\u1EC7c \u0111\u1EB7t ch\u1ED7 kh\xF4ng nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn v\xEC b\u1EA5t k\u1EF3 l\xFD do g\xEC, ch\xFAng t\xF4i s\u1EBD ti\u1EBFn h\xE0nh ho\xE0n tr\u1EA3 ti\u1EC1n v\xE0 th\xF4ng b\xE1o cho b\u1EA1n. Gotadi kh\xF4ng c\xF3 ngh\u0129a v\u1EE5 ph\u1EA3i \u0111\u1EB7t l\u1EA1i ch\u1ED7 ho\u1EB7c b\u1ED3i th\u01B0\u1EDDng/thay th\u1EBF m\u1ED9t vi\u1EC7c \u0111\u1EB7t ch\u1ED7 ch\u01B0a \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn. T\u1EA5t c\u1EA3 nh\u1EEFng l\u1EA7n \u0111\u1EB7t ch\u1ED7 ti\u1EBFp theo s\u1EBD \u0111\u01B0\u1EE3c x\u1EED l\xFD nh\u01B0 c\xE1c giao d\u1ECBch m\u1EDBi, kh\xF4ng tham chi\u1EBFu \u0111\u1EBFn c\xE1c giao d\u1ECBch \u0111\u1EB7t ch\u1ED7 ch\u01B0a \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn tr\u01B0\u1EDBc \u0111\xF3.<br><br>Ng\u01B0\u1EDDi d\xF9ng s\u1EBD y\xEAu c\u1EA7u Gotadi ho\xE0n l\u1EA1i ti\u1EC1n \u0111\u1ED1i v\u1EDBi nh\u1EEFng giao d\u1ECBch \u0111\u1EB7t ph\xF2ng kh\xE1ch s\u1EA1n ho\u1EB7c v\xE9 m\xE1y bay nh\u01B0ng ch\u01B0a s\u1EED d\u1EE5ng v\xEC b\u1EA5t k\u1EF3 l\xFD do n\xE0o trong th\u1EDDi h\u1EA1n 90 ng\xE0y k\u1EC3 t\u1EEB ng\xE0y kh\u1EDFi h\xE0nh \u0111\u1ED1i v\u1EDBi v\xE9 m\xE1y bay v\xE0/ho\u1EB7c ng\xE0y check-in \u0111\u1ED1i v\u1EDBi \u0111\u1EB7t ph\xF2ng kh\xE1ch s\u1EA1n. B\u1EA5t k\u1EF3 vi\u1EC7c ho\xE0n ti\u1EC1n n\xE0o \u0111\u01B0\u1EE3c \xE1p d\u1EE5ng s\u1EBD \u0111\u01B0\u1EE3c x\u1EED l\xFD theo c\xE1c ch\xEDnh s\xE1ch c\u1EE7a c\xE1c H\xE3ng h\xE0ng kh\xF4ng, c\xE1c kh\xE1ch s\u1EA1n v\xE0 Gotadi theo t\u1EEBng tr\u01B0\u1EDDng h\u1EE3p. Vi\u1EC7c ho\xE0n ti\u1EC1n s\u1EBD kh\xF4ng \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n \u0111\u1ED1i v\u1EDBi b\u1EA5t k\u1EF3 y\xEAu c\u1EA7u n\xE0o \u0111\u01B0\u1EE3c \u0111\u01B0a ra sau th\u1EDDi h\u1EA1n 90 ng\xE0y nh\u01B0 tr\xEAn. T\u1EA5t c\u1EA3 c\xE1c kho\u1EA3n ti\u1EC1n do \u0111\xE3 \u0111\u1EB7t ph\xF2ng kh\xE1ch s\u1EA1n/v\xE9 m\xE1y bay/tour du l\u1ECBch nh\u01B0ng ch\u01B0a s\u1EED d\u1EE5ng nh\u01B0 v\u1EADy s\u1EBD \u0111\u01B0\u1EE3c coi l\xE0 \u0111\xE3 b\u1ECB m\u1EA5t.<br>&nbsp;&nbsp;<br><strong>B\u1EA3o m\u1EADt th\xF4ng tin</strong><br><br>B\u1EA5t k\u1EF3 th\xF4ng tin n\xE0o \u0111\u01B0\u1EE3c Gotadi \u0111\u1EC1 c\u1EADp c\u1EE5 th\u1EC3 l\xE0 th\xF4ng tin B\xED m\u1EADt ph\u1EA3i \u0111\u01B0\u1EE3c Ng\u01B0\u1EDDi d\xF9ng duy tr\xEC b\xED m\u1EADt v\xE0 kh\xF4ng \u0111\u01B0\u1EE3c ti\u1EBFt l\u1ED9 tr\u1EEB tr\u01B0\u1EDDng h\u1EE3p theo y\xEAu c\u1EA7u c\u1EE7a ph\xE1p lu\u1EADt ho\u1EB7c \u0111\u1EC3 ph\u1EE5c v\u1EE5 m\u1EE5c \u0111\xEDch c\u1EE7a th\u1ECFa thu\u1EADn n\xE0y v\xE0 c\xE1c ngh\u0129a v\u1EE5 c\u1EE7a c\u1EA3 hai b\xEAn trong \u0111\xF3.<br>&nbsp;<br><strong>Gotadi s\u1EED d\u1EE5ng s\u1ED1 \u0111i\u1EC7n tho\u1EA1i di \u0111\u1ED9ng c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng</strong><br><br>Gotadi c\xF3 th\u1EC3 g\u1EEDi x\xE1c nh\u1EADn \u0111\u1EB7t ch\u1ED7, th\xF4ng tin h\xE0nh tr\xECnh, vi\u1EC7c h\u1EE7y b\u1ECF, x\xE1c nh\u1EADn thanh to\xE1n , t\xECnh tr\u1EA1ng ho\xE0n ti\u1EC1n, thay \u0111\u1ED5i l\u1ECBch tr\xECnh ho\u1EB7c b\u1EA5t k\u1EF3 th\xF4ng tin n\xE0o kh\xE1c c\xF3 li\xEAn quan \u0111\u1EBFn c\xE1c giao d\u1ECBch, th\xF4ng qua tin nh\u1EAFn SMS ho\u1EB7c cu\u1ED9c g\u1ECDi v\xE0o s\u1ED1 \u0111i\u1EC7n tho\u1EA1i li\xEAn l\u1EA1c do Ng\u01B0\u1EDDi d\xF9ng cung c\u1EA5p khi \u0111\u1EB7t ch\u1ED7; Gotadi c\u0169ng c\xF3 th\u1EC3 li\xEAn l\u1EA1c v\u1EDBi Ng\u01B0\u1EDDi d\xF9ng b\u1EB1ng c\xE1ch g\u1ECDi \u0111i\u1EC7n tho\u1EA1i, tin nh\u1EAFn SMS ho\u1EB7c email trong tr\u01B0\u1EDDng h\u1EE3p Ng\u01B0\u1EDDi d\xF9ng kh\xF4ng th\u1EC3 ho\u1EB7c ch\u01B0a ho\xE0n th\xE0nh vi\u1EC7c \u0111\u1EB7t ch\u1ED7, v\xEC b\u1EA5t k\u1EF3 l\xFD do g\xEC, \u0111\u1EC3 bi\u1EBFt nguy\u1EC7n v\u1ECDng c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED1i v\u1EDBi vi\u1EC7c ho\xE0n th\xE0nh \u0111\u1EB7t ch\u1ED7 v\xE0 c\u0169ng \u0111\u1EC3 gi\xFAp \u0111\u1EE1 Ng\u01B0\u1EDDi d\xF9ng. Theo \u0111\xE2y, Ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED3ng v\xF4 \u0111i\u1EC1u ki\u1EC7n r\u1EB1ng nh\u1EEFng th\xF4ng tin li\xEAn l\u1EA1c qua tin nh\u1EAFn SMS v\xE0/ho\u1EB7c cu\u1ED9c g\u1ECDi tho\u1EA1i c\u1EE7a Gotadi l\xE0 theo y\xEAu c\u1EA7u v\xE0 s\u1EF1 cho ph\xE9p c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng. Ng\u01B0\u1EDDi d\xF9ng s\u1EBD b\u1ED3i th\u01B0\u1EDDng Gotadi cho t\u1EA5t c\u1EA3 c\xE1c lo\u1EA1i t\u1ED5n th\u1EA5t v\xE0 thi\u1EC7t h\u1EA1i Gotadi ph\u1EA3i ch\u1ECBu do b\u1EA5t k\u1EF3 h\xE0nh \u0111\u1ED9ng n\xE0o c\u1EE7a c\xE1c c\u01A1 quan qu\u1EA3n l\xFD nh\xE0 n\u01B0\u1EDBc do b\u1EA5t k\u1EF3 l\u1ED7i n\xE0o c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED1i v\u1EDBi Gotadi li\xEAn quan \u0111\u1EBFn vi\u1EC7c th\xF4ng b\xE1o \u0111\u01B0\u1EE3c \u0111\u1EC1 c\u1EADp \u1EDF tr\xEAn ho\u1EB7c do m\u1ED9t s\u1ED1 \u0111i\u1EC7n tho\u1EA1i ho\u1EB7c \u0111\u1ECBa ch\u1EC9 email sai do Ng\u01B0\u1EDDi d\xF9ng cung c\u1EA5p, v\xEC b\u1EA5t k\u1EF3 l\xFD do g\xEC.<br>&nbsp;<br><strong>Tr\xE1ch nhi\u1EC7m c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng&nbsp;</strong><br><br>Gotadi ch\u1EC9 ch\u1ECBu tr\xE1ch nhi\u1EC7m \u0111\u1ED1i v\u1EDBi c\xE1c giao d\u1ECBch do Ng\u01B0\u1EDDi d\xF9ng th\u1EF1c hi\u1EC7n th\xF4ng qua Gotadi. Gotadi s\u1EBD kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m s\xE0ng l\u1ECDc, ki\u1EC3m duy\u1EC7t ho\u1EB7c ki\u1EC3m so\xE1t c\xE1c giao d\u1ECBch, bao g\u1ED3m c\u1EA3 vi\u1EC7c giao d\u1ECBch c\xF3 h\u1EE3p ph\xE1p v\xE0 h\u1EE3p l\u1EC7 theo lu\u1EADt ph\xE1p n\u01A1i Ng\u01B0\u1EDDi d\xF9ng sinh s\u1ED1ng hay kh\xF4ng.<br><br>Ng\u01B0\u1EDDi d\xF9ng cam \u0111oan s\u1EBD tu\xE2n th\u1EE7 t\u1EA5t c\u1EA3 c\xE1c quy tr\xECnh v\xE0 h\u01B0\u1EDBng d\u1EABn b\u1ED5 sung, \u0111\u01B0\u1EE3c s\u1EEDa \u0111\u1ED5i theo th\u1EDDi gian, li\xEAn quan t\u1EDBi vi\u1EC7c s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5. Ng\u01B0\u1EDDi d\xF9ng c\u0169ng cam \u0111oan s\u1EBD tu\xE2n th\u1EE7 t\u1EA5t c\u1EA3 c\xE1c lu\u1EADt v\xE0 quy \u0111\u1ECBnh hi\u1EC7n h\xE0nh v\u1EC1 vi\u1EC7c s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5 li\xEAn quan \u0111\u1EBFn th\u1EA9m quy\u1EC1n \u0111\u1ED1i v\u1EDBi t\u1EEBng giao d\u1ECBch.<br><br>Ng\u01B0\u1EDDi d\xF9ng \u0111\u1EA1i di\u1EC7n v\xE0 x\xE1c nh\u1EADn r\u1EB1ng h\u1ECD \u1EDF \u0111\u1ED9 tu\u1ED5i h\u1EE3p ph\xE1p \u0111\u1EC3 tham gia m\u1ED9t h\u1EE3p \u0111\u1ED3ng r\xE0ng bu\u1ED9di\u1EC7nc v\xE0 kh\xF4ng ph\u1EA3i l\xE0 ng\u01B0\u1EDDi b\u1ECB c\u1EA5m s\u1EED d\u1EE5ng c\xE1c D\u1ECBch v\u1EE5 theo ph\xE1p lu\u1EADt Vi\u1EC7t Nam ho\u1EB7c lu\u1EADt \xE1p d\u1EE5ng kh\xE1c.<br>&nbsp;<br><strong>C\xE1c qu\u1EA3ng c\xE1o tr\xEAn Gotadi ho\u1EB7c c\xE1c trang web li\xEAn k\u1EBFt&nbsp;</strong><br><br>Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m \u0111\u1ED1i v\u1EDBi b\u1EA5t k\u1EF3 l\u1ED7i, thi\u1EBFu s\xF3t ho\u1EB7c mi\xEAu t\u1EA3 n\xE0o tr\xEAn trang web n\xE0o c\u1EE7a m\xECnh, ho\u1EB7c tr\xEAn b\u1EA5t k\u1EF3 li\xEAn k\u1EBFt ho\u1EB7c trang web li\xEAn k\u1EBFt n\xE0o. Gotadi kh\xF4ng x\xE1c nh\u1EADn ch\u1EA5t l\u01B0\u1EE3ng c\u1EE7a b\u1EA5t k\u1EF3 qu\u1EA3ng c\xE1o n\xE0o tr\xEAn c\xE1c trang web c\u1EE7a m\xECnh theo b\u1EA5t k\u1EF3 ph\u01B0\u01A1ng th\u1EE9c n\xE0o. Ng\u01B0\u1EDDi d\xF9ng ph\u1EA3i t\u1EF1 x\xE1c minh t\xEDnh ch\xEDnh x\xE1c c\u1EE7a t\u1EA5t c\u1EA3 c\xE1c th\xF4ng tin tr\u01B0\u1EDBc khi ti\u1EBFn h\xE0nh b\u1EA5t k\u1EF3 c\xF4ng vi\u1EC7c n\xE0o d\u1EF1a tr\xEAn c\xE1c th\xF4ng tin \u0111\xF3.<br><br>C\xE1c trang web li\xEAn k\u1EBFt kh\xF4ng thu\u1ED9c quy\u1EC1n ki\u1EC3m so\xE1t c\u1EE7a Gotadi v\xE0 Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 n\u1ED9i dung c\u1EE7a b\u1EA5t k\u1EF3 trang web li\xEAn k\u1EBFt ho\u1EB7c b\u1EA5t k\u1EF3 li\xEAn k\u1EBFt n\xE0o tr\xEAn m\u1ED9t trang web li\xEAn k\u1EBFt, ho\u1EB7c b\u1EA5t k\u1EF3 thay \u0111\u1ED5i hay c\u1EADp nh\u1EADt n\xE0o \u0111\u1ED1i v\u1EDBi c\xE1c trang web \u0111\xF3. Gotadi cung c\u1EA5p nh\u1EEFng li\xEAn k\u1EBFt \u0111\xF3 \u0111\u1EBFn Ng\u01B0\u1EDDi d\xF9ng ch\u1EC9 v\xEC s\u1EF1 ti\u1EC7n l\u1EE3i c\u1EE7a h\u1ECD, v\xE0 vi\u1EC7c vi\u1EC7c s\u1EED d\u1EE5ng b\u1EA5t c\u1EE9 li\xEAn k\u1EBFt n\xE0o kh\xF4ng bao h\xE0m s\u1EF1 ch\u1EE9ng th\u1EF1c trang web \u0111\xF3 c\u1EE7a Gotadi.<br>&nbsp;<br><strong>B\u1EA3o hi\u1EC3m</strong><br><br>Tr\u1EEB tr\u01B0\u1EDDng h\u1EE3p \u0111\u01B0\u1EE3c cung c\u1EA5p m\u1ED9t c\xE1ch r\xF5 r\xE0ng b\u1EDFi Gotadi trong b\u1EA5t k\u1EF3 d\u1ECBch v\u1EE5 ho\u1EB7c s\u1EF1 chuy\u1EC3n giao c\u1EE5 th\u1EC3 n\xE0o \u0111\xF3, vi\u1EC7c mua b\u1EA3o hi\u1EC3m \u0111\u1EA7y \u0111\u1EE7 l\xE0 ngh\u0129a v\u1EE5/l\u1EF1a ch\u1ECDn c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng v\xE0 Gotadi kh\xF4ng ch\u1EA5p nh\u1EADn b\u1EA5t k\u1EF3 khi\u1EBFu n\u1EA1i n\xE0o ph\xE1t sinh t\u1EEB \u0111\xF3.<br><br>B\u1EA3o hi\u1EC3m, n\u1EBFu \u0111\u01B0\u1EE3c cung c\u1EA5p nh\u01B0 m\u1ED9t ph\u1EA7n c\u1EE7a d\u1ECBch v\u1EE5/s\u1EA3n ph\u1EA9m c\u1EE7a Gotadi s\u1EBD tu\xE2n theo c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n c\u1EE7a c\xF4ng ty b\u1EA3o hi\u1EC3m. Ng\u01B0\u1EDDi d\xF9ng s\u1EBD li\xEAn h\u1EC7 tr\u1EF1c ti\u1EBFp v\u1EDBi c\xF4ng ty b\u1EA3o hi\u1EC3m n\u1EBFu c\xF3 b\u1EA5t k\u1EF3 khi\u1EBFu n\u1EA1i ho\u1EB7c tranh ch\u1EA5p n\xE0o v\xE0 Gotadi s\u1EBD kh\xF4ng \u0111\u01B0a ra b\u1EA5t k\u1EF3 cam \u0111oan n\xE0o, d\xF9 l\xE0 r\xF5 r\xE0ng hay ng\u1EE5 \xFD, l\xE0 s\u1EBD ch\u1EA5p nh\u1EADn c\xE1c y\xEAu c\u1EA7u c\u1EE7a c\xF4ng ty b\u1EA3o hi\u1EC3m.<br>&nbsp;<br><strong>Nh\u1EEFng tr\u01B0\u1EDDng h\u1EE3p B\u1EA5t kh\u1EA3 kh\xE1ng</strong><br><br>Ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED3ng \xFD r\u1EB1ng c\xF3 th\u1EC3 c\xF3 nh\u1EEFng tr\u01B0\u1EDDng h\u1EE3p \u0111\u1EB7c bi\u1EC7t, khi c\xE1c nh\xE0 khai th\xE1c d\u1ECBch v\u1EE5 nh\u01B0 c\xE1c h\xE3ng h\xE0ng kh\xF4ng, c\xE1c kh\xE1ch s\u1EA1n, c\xE1c c\xF4ng ty ho\u1EB7c nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5 v\u1EADn t\u1EA3i kh\xF4ng th\u1EC3 th\u1EF1c hi\u1EC7n nh\u1EEFng vi\u1EC7c \u0111\u1EB7t ch\u1ED7 \u0111\xE3 x\xE1c nh\u1EADn v\xEC nhi\u1EC1u l\xFD do kh\xE1c nhau nh\u01B0 \u0111i\u1EC1u ki\u1EC7n kh\xED h\u1EADu, t\xECnh tr\u1EA1ng b\u1EA5t \u1ED5n lao \u0111\u1ED9ng, m\u1EA5t kh\u1EA3 n\u0103ng thanh to\xE1n, t\xECnh tr\u1EA1ng kinh doanh kh\u1EA9n c\u1EA5p, c\xE1c quy\u1EBFt \u0111\u1ECBnh c\u1EE7a ch\xEDnh ph\u1EE7, c\xE1c v\u1EA5n \u0111\u1EC1 \u0111i\u1EC1u h\xE0nh v\xE0 k\u1EF9 thu\u1EADt, h\u1EE7y l\u1ED9 tr\xECnh v\xE0 chuy\u1EBFn bay\u2026 N\u1EBFu Gotadi \u0111\u01B0\u1EE3c th\xF4ng b\xE1o tr\u01B0\u1EDBc v\u1EC1 nh\u1EEFng t\xECnh hu\u1ED1ng c\xF3 th\u1EC3 s\u1EBD kh\xF4ng th\u1EF1c hi\u1EC7n \u0111\u01B0\u1EE3c vi\u1EC7c \u0111\u1EB7t ch\u1ED7, Gotadi s\u1EBD c\u1ED1 g\u1EAFng h\u1EBFt s\u1EE9c \u0111\u1EC3 cung c\u1EA5p d\u1ECBch v\u1EE5 thay th\u1EBF t\u01B0\u01A1ng t\u1EF1 cho kh\xE1ch h\xE0ng ho\u1EB7c ho\xE0n tr\u1EA3 l\u1EA1i s\u1ED1 ti\u1EC1n \u0111\u1EB7t ch\u1ED7 sau khi \u0111\xE3 tr\u1EEB \u0111i c\xE1c kho\u1EA3n ph\xED d\u1ECBch v\u1EE5 h\u1EE3p l\xFD, n\u1EBFu \u0111\u01B0\u1EE3c h\u1ED7 tr\u1EE3 v\xE0 ho\xE0n ti\u1EC1n t\u1EEB c\xE1c nh\xE0 khai th\xE1c d\u1ECBch v\u1EE5 t\u01B0\u01A1ng \u1EE9ng. Ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED3ng \xFD r\u1EB1ng Gotadi, v\u1EDBi t\u01B0 c\xE1ch l\xE0 m\u1ED9t \u0111\u1EA1i l\xFD t\u1EA1o \u0111i\u1EC1u ki\u1EC7n thu\u1EADn l\u1EE3i cho c\xE1c d\u1ECBch v\u1EE5 \u0111\u1EB7t ch\u1ED7, s\u1EBD kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m cho b\u1EA5t k\u1EF3 tr\u01B0\u1EDDng h\u1EE3p n\xE0o nh\u01B0 v\u1EADy v\xE0 kh\xE1ch h\xE0ng ph\u1EA3i li\xEAn h\u1EC7 tr\u1EF1c ti\u1EBFp v\u1EDBi nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5 \u0111\xF3 \u0111\u1EC3 c\xF3 c\xE1c gi\u1EA3i ph\xE1p kh\xE1c v\xE0 \u0111\u01B0\u1EE3c ho\xE0n l\u1EA1i ti\u1EC1n (n\u1EBFu c\xF3).<br><br>Ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED3ng \xFD r\u1EB1ng trong c\xE1c t\xECnh hu\u1ED1ng do b\u1EA5t k\u1EF3 s\u1EF1 h\u1ECFng h\xF3c v\u1EC1 k\u1EF9 thu\u1EADt ho\u1EB7c h\u1ECFng h\xF3c n\xE0o kh\xE1c t\u1EA1i Gotadi, c\xE1c d\u1ECBch v\u1EE5 cam k\u1EBFt tr\u01B0\u1EDBc \u0111\xF3 c\xF3 th\u1EC3 s\u1EBD kh\xF4ng \u0111\u01B0\u1EE3c cung c\u1EA5p ho\u1EB7c ph\u1EA3i thay \u0111\u1ED5i \u0111\xE1ng k\u1EC3. Trong nh\u1EEFng tr\u01B0\u1EDDng h\u1EE3p n\xE0y, Gotadi s\u1EBD ho\xE0n tr\u1EA3 to\xE0n b\u1ED9 s\u1ED1 ti\u1EC1n nh\u1EADn \u0111\u01B0\u1EE3c t\u1EEB kh\xE1ch h\xE0ng cho vi\u1EC7c s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5 \u0111\xF3 tr\u1EEB \u0111i c\xE1c kho\u1EA3n ph\xED h\u1EE7y b\u1ECF, ph\xED ho\xE0n ti\u1EC1n ho\u1EB7c c\xE1c kho\u1EA3n ph\xED th\xEDch h\u1EE3p kh\xE1c, ho\xE0n th\xE0nh b\u1EA5t k\u1EF3 v\xE0 to\xE0n b\u1ED9 tr\xE1ch nhi\u1EC7m c\u1EE7a Gotadi li\xEAn quan \u0111\u1EBFn vi\u1EC7c kh\xF4ng cung c\u1EA5p ho\u1EB7c cung c\u1EA5p kh\xF4ng \u0111\u1EA7y \u0111\u1EE7 d\u1ECBch v\u1EE5. C\xE1c kho\u1EA3n ph\u1EA3i tr\u1EA3 b\u1ED5 sung, n\u1EBFu c\xF3, s\u1EBD do Ng\u01B0\u1EDDi d\xF9ng tr\u1EA3.<br><br>Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m cho nh\u1EEFng s\u1EF1 ch\u1EADm tr\u1EC5 ho\u1EB7c kh\xF4ng c\xF3 kh\u1EA3 n\u0103ng th\u1EF1c hi\u1EC7n ho\u1EB7c kh\xF4ng th\u1EF1c hi\u1EC7n to\xE0n b\u1ED9 ho\u1EB7c m\u1ED9t ph\u1EA7n c\xE1c ngh\u0129a v\u1EE5 c\u1EE7a m\xECnh do b\u1EA5t k\u1EF3 nguy\xEAn nh\xE2n n\xE0o kh\xF4ng ph\u1EA3i do h\xE0nh vi ho\u1EB7c thi\u1EBFu s\xF3t c\u1EE7a m\xECnh v\xE0 n\u1EB1m ngo\xE0i t\u1EA7m ki\u1EC3m so\xE1t h\u1EE3p l\xFD c\u1EE7a m\xECnh, ch\u1EB3ng h\u1EA1n nh\u01B0 thi\xEAn tai, h\u1ECFa ho\u1EA1n, \u0111\xECnh c\xF4ng, c\u1EA5m v\u1EADn, h\xE0nh \u0111\u1ED9ng c\u1EE7a ch\xEDnh ph\u1EE7, c\xE1c h\xE0nh \u0111\u1ED9ng kh\u1EE7ng b\u1ED1 ho\u1EB7c c\xE1c nguy\xEAn nh\xE2n kh\xE1c t\u01B0\u01A1ng t\u1EF1, v\u1EA5n \u0111\u1EC1 t\u1EEB ph\xEDa c\xE1c h\xE3ng h\xE0ng kh\xF4ng, \u0111\u01B0\u1EDDng ray, xe bu\xFDt, kh\xE1ch s\u1EA1n ho\u1EB7c nh\xE0 v\u1EADn t\u1EA3i. Trong tr\u01B0\u1EDDng h\u1EE3p \u0111\xF3, Ng\u01B0\u1EDDi d\xF9ng b\u1ECB \u1EA3nh h\u01B0\u1EDFng s\u1EBD \u0111\u01B0\u1EE3c th\xF4ng b\xE1o k\u1ECBp th\u1EDDi theo ho\xE0n c\u1EA3nh cho ph\xE9p.<br><br>Kh\xF4ng \u1EA3nh h\u01B0\u1EDFng \u0111\u1EBFn b\u1EA5t c\u1EE9 \u0111i\u1EC1u g\xEC \u0111\u01B0\u1EE3c n\xF3i \u1EDF tr\xEAn, tr\xE1ch nhi\u1EC7m t\u1ED1i \u0111a c\u1EE7a ph\xEDa Gotadi ph\xE1t sinh trong m\u1ECDi tr\u01B0\u1EDDng h\u1EE3p, li\xEAn quan t\u1EDBi b\u1EA5t k\u1EF3 d\u1ECBch v\u1EE5 n\xE0o \u0111\u01B0\u1EE3c cung c\u1EA5p tr\xEAn trang web n\xE0y, s\u1EBD \u0111\u01B0\u1EE3c gi\u1EDBi h\u1EA1n \u1EDF vi\u1EC7c ho\xE0n tr\u1EA3 t\u1ED5ng s\u1ED1 ti\u1EC1n nh\u1EADn \u0111\u01B0\u1EE3c t\u1EEB kh\xE1ch h\xE0ng cho vi\u1EC7c s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5 tr\u1EEB \u0111i c\xE1c kho\u1EA3n ph\xED h\u1EE7y b\u1ECF, ph\xED ho\xE0n ti\u1EC1n ho\u1EB7c c\xE1c kho\u1EA3n ph\xED kh\xE1c, nh\u01B0 c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c \xE1p d\u1EE5ng. Trong m\u1ECDi tr\u01B0\u1EDDng h\u1EE3p, tr\xE1ch nhi\u1EC7m kh\xF4ng bao g\u1ED3m b\u1EA5t k\u1EF3 t\u1ED5n th\u1EA5t, thi\u1EC7t h\u1EA1i hay chi ph\xED b\u1ED5 sung n\xE0o v\u01B0\u1EE3t qu\xE1 s\u1ED1 ti\u1EC1n Gotadi thu cho c\xE1c d\u1ECBch v\u1EE5 c\u1EE7a m\xECnh.<br><br>Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m \u0111\u1ED1i v\u1EDBi b\u1EA5t k\u1EF3 l\u1ED7i, thi\u1EBFu s\xF3t ho\u1EB7c ph\u1EA7n tr\xECnh b\xE0y n\xE0o tr\xEAn b\u1EA5t k\u1EF3 trang web n\xE0o c\u1EE7a m\xECnh, ho\u1EB7c tr\xEAn b\u1EA5t k\u1EF3 li\xEAn k\u1EBFt ho\u1EB7c trang web li\xEAn k\u1EBFt n\xE0o.<br>&nbsp;<br><strong>T\xEDnh an to\xE0n c\u1EE7a d\u1EEF li\u1EC7u t\u1EA3i v\u1EC1</strong><br><br>Ng\u01B0\u1EDDi d\xF9ng hi\u1EC3u v\xE0 \u0111\u1ED3ng \xFD r\u1EB1ng b\u1EA5t k\u1EF3 t\xE0i li\u1EC7u v\xE0/ho\u1EB7c d\u1EEF li\u1EC7u n\xE0o t\u1EA3i v\u1EC1 ho\u1EB7c thu \u0111\u01B0\u1EE3c th\xF4ng qua vi\u1EC7c s\u1EED d\u1EE5ng D\u1ECBch v\u1EE5 \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n ho\xE0n to\xE0n theo quy\u1EBFt \u0111\u1ECBnh v\xE0 r\u1EE7i ro c\u1EE7a ri\xEAng c\u1EE7a h\u1ECD v\xE0 h\u1ECD s\u1EBD ho\xE0n to\xE0n ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 b\u1EA5t k\u1EF3 thi\u1EC7t h\u1EA1i n\xE0o \u0111\u1ED1i v\u1EDBi h\u1EC7 th\u1ED1ng m\xE1y t\xEDnh c\u1EE7a m\xECnh ho\u1EB7c vi\u1EC7c m\u1EA5t d\u1EEF li\u1EC7u do h\u1ECD t\u1EA3i c\xE1c t\xE0i li\u1EC7u v\xE0/ho\u1EB7c d\u1EEF li\u1EC7u \u0111\xF3 v\u1EC1.<br><br>Tuy nhi\xEAn, Gotadi s\u1EBD lu\xF4n c\u1ED1 g\u1EAFng h\u1EBFt s\u1EE9c \u0111\u1EC3 \u0111\u1EA3m b\u1EA3o r\u1EB1ng n\u1ED9i dung tr\xEAn c\xE1c trang web c\u1EE7a m\xECnh ho\u1EB7c c\xE1c k\xEAnh th\xF4ng tin kh\xE1c kh\xF4ng ch\u1EE9a c\xE1c lo\u1EA1i virus ho\u1EB7c c\xE1c ph\u1EA7n m\u1EC1m \u0111\u1ED9c h\u1EA1i.<br>&nbsp;<br><strong>Ph\u1EA3n h\u1ED3i t\u1EEB kh\xE1ch h\xE0ng v\xE0 vi\u1EC7c ch\xE0o m\u1EDDi kh\xE1ch</strong><br><br>Ng\u01B0\u1EDDi d\xF9ng nh\u1EADn th\u1EE9c \u0111\u01B0\u1EE3c r\u1EB1ng Gotadi cung c\u1EA5p nhi\u1EC1u d\u1ECBch v\u1EE5 kh\xE1c nhau nh\u01B0 \u0111\u1EB7t ph\xF2ng kh\xE1ch s\u1EA1n, v\xE9 m\xE1y bay, g\xF3i k\u1EF3 ngh\u1EC9 v\xE0 mu\u1ED1n t\xECm hi\u1EC3u v\u1EC1 h\u1ECD, \u0111\u1EC3 n\xE2ng cao d\u1ECBch v\u1EE5 du l\u1ECBch c\u1EE7a m\xECnh. C\u1EE5 th\u1EC3 \u1EDF \u0111\xE2y, Ng\u01B0\u1EDDi d\xF9ng cho ph\xE9p Gotadi li\xEAn h\u1EC7 v\u1EDBi m\xECnh v\u1EC1 vi\u1EC7c cung c\u1EA5p c\xE1c d\u1ECBch v\u1EE5 kh\xE1c nhau c\u1EE7a Gotadi th\xF4ng qua b\u01B0u ph\u1EA9m tr\u1EF1c ti\u1EBFp, th\u01B0 \u0111i\u1EC7n t\u1EED, c\xE1c cu\u1ED9c g\u1ECDi \u0111i\u1EC7n tho\u1EA1i, d\u1ECBch v\u1EE5 nh\u1EAFn tin ng\u1EAFn (SMS) ho\u1EB7c b\u1EA5t k\u1EF3 ph\u01B0\u01A1ng ti\u1EC7n n\xE0o kh\xE1c, v\xE0o m\u1ED9t s\u1ED1 th\u1EDDi \u0111i\u1EC3m. Trong tr\u01B0\u1EDDng h\u1EE3p kh\xE1ch h\xE0ng l\u1EF1a ch\u1ECDn kh\xF4ng li\xEAn l\u1EA1c, h\u1ECD s\u1EBD vi\u1EBFt th\u01B0 cho Gotadi t\u1EDBi \u0111\u1ECBa ch\u1EC9 service@gotadi.com. Kh\xE1ch h\xE0ng n\xEAn \u0111\u1ECDc v\xE0 hi\u1EC3u c\xE1c ch\xEDnh s\xE1ch b\u1EA3o m\u1EADt c\u1EE7a Gotadi tr\xEAn trang web c\u1EE7a Gotadi. Gotadi s\u1EBD li\xEAn l\u1EA1c, m\u1EDDi ch\xE0o Ng\u01B0\u1EDDi d\xF9ng ho\u1EB7c chia s\u1EBB th\xF4ng tin c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng theo c\xE1c ch\xEDnh s\xE1ch b\u1EA3o m\u1EADt \u0111\xF3.<br>&nbsp;<br><strong>Quy\u1EC1n s\u1EDF h\u1EEFu</strong><br><br>Gotadi c\xF3 th\u1EC3 cung c\u1EA5p t\u1EDBi Ng\u01B0\u1EDDi d\xF9ng c\xE1c n\u1ED9i dung nh\u01B0 \xE2m thanh, h\xECnh \u1EA3nh, \u0111\u1ED3 h\u1ECDa, video ho\u1EB7c c\xE1c t\xE0i li\u1EC7u kh\xE1c c\xF3 trong c\xE1c qu\u1EA3ng c\xE1o ho\u1EB7c th\xF4ng tin. T\xE0i li\u1EC7u n\xE0y c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c b\u1EA3o v\u1EC7 b\u1EDFi lu\u1EADt b\u1EA3n quy\u1EC1n, th\u01B0\u01A1ng hi\u1EC7u, ho\u1EB7c c\xE1c quy\u1EC1n v\xE0 lu\u1EADt s\u1EDF h\u1EEFu tr\xED tu\u1EC7 kh\xE1c.<br><br>Ng\u01B0\u1EDDi d\xF9ng ch\u1EC9 c\xF3 th\u1EC3 s\u1EED d\u1EE5ng t\xE0i li\u1EC7u n\xE0y khi \u0111\u01B0\u1EE3c Gotadi cho ph\xE9p m\u1ED9t c\xE1ch r\xF5 r\xE0ng v\xE0 s\u1EBD kh\xF4ng \u0111\u01B0\u1EE3c sao ch\xE9p, truy\u1EC1n t\u1EA3i ho\u1EB7c t\u1EA1o ra c\xE1c s\u1EA3n ph\u1EA9m sao ch\xE9p t\u1EEB c\xE1c t\xE0i li\u1EC7u n\xE0y khi ch\u01B0a \u0111\u01B0\u1EE3c cho ph\xE9p r\xF5 r\xE0ng.<br><br>Ng\u01B0\u1EDDi d\xF9ng th\u1EEBa nh\u1EADn v\xE0 \u0111\u1ED3ng \xFD r\u1EB1ng h\u1ECD s\u1EBD kh\xF4ng t\u1EA3i l\xEAn, sao ch\xE9p ho\u1EB7c g\u1EEDi \u0111i b\u1EA5t k\u1EF3 n\u1ED9i dung n\xE0o c\xF3 tr\xEAn ho\u1EB7c th\xF4ng qua c\xE1c D\u1ECBch v\u1EE5 \u0111\u01B0\u1EE3c b\u1EA3o v\u1EC7 b\u1EDFi b\u1EA3n quy\u1EC1n ho\u1EB7c quy\u1EC1n s\u1EDF h\u1EEFu kh\xE1c c\u1EE7a m\u1ED9t b\xEAn th\u1EE9 ba, m\xE0 kh\xF4ng c\xF3 s\u1EF1 cho ph\xE9p b\u1EB1ng v\u0103n b\u1EA3n c\u1EE7a ch\u1EE7 s\u1EDF h\u1EEFu c\u1EE7a quy\u1EC1n \u0111\xF3.<br><br>B\u1EA5t k\u1EF3 n\u1ED9i dung \u0111\u1ED9c quy\u1EC1n hay c\xF3 b\u1EA3n quy\u1EC1n&nbsp; s\u1EDF h\u1EEFu n\xE0o kh\xE1c \u0111\u01B0\u1EE3c g\u1EEDi \u0111i v\u1EDBi s\u1EF1 \u0111\u1ED3ng \xFD c\u1EE7a ch\u1EE7 s\u1EDF h\u1EEFu ph\u1EA3i c\xF3 ph\u1EA7n th\xF4ng b\xE1o th\xEDch h\u1EE3p v\u1EC1 quy\u1EC1n s\u1EDF h\u1EEFu. Vi\u1EC7c \u0111\u01B0a l\xEAn ho\u1EB7c g\u1EEDi \u0111i c\xE1c n\u1ED9i dung c\xF3 b\u1EA3n quy\u1EC1n ho\u1EB7c c\xF3 c\xE1c quy\u1EC1n s\u1EDF h\u1EEFu kh\xE1c m\xE0 ch\u01B0a \u0111\u01B0\u1EE3c ph\xE9p l\xE0 b\u1EA5t h\u1EE3p ph\xE1p v\xE0 c\xF3 th\u1EC3 khi\u1EBFn Ng\u01B0\u1EDDi d\xF9ng ph\u1EA3i ch\u1ECBu tr\xE1ch nhi\u1EC7m c\xE1 nh\xE2n ho\u1EB7c b\u1ECB truy t\u1ED1.<br>&nbsp;<br><strong>Tr\xE1ch nhi\u1EC7m xin VISA c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng</strong><br><br>Nh\u1EEFng vi\u1EC7c \u0111\u1EB7t ch\u1ED7 du l\u1ECBch do Gotadi th\u1EF1c hi\u1EC7n c\xF2n t\xF9y thu\u1ED9c v\xE0o c\xE1c y\xEAu c\u1EA7u v\u1EC1 Visa m\xE0 t\u1EEBng c\xE1 nh\xE2n kh\xE1ch du l\u1ECBch ph\u1EA3i t\u1EF1 \u0111\xE1p \u1EE9ng \u0111\u01B0\u1EE3c. Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 b\u1EA5t k\u1EF3 v\u1EA5n \u0111\u1EC1 n\xE0o, bao g\u1ED3m vi\u1EC7c kh\xF4ng th\u1EC3 \u0111i du l\u1ECBch, ph\xE1t sinh t\u1EEB c\xE1c y\xEAu c\u1EA7u Visa \u0111\xF3 v\xE0 c\u0169ng kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m ho\xE0n ti\u1EC1n cho nh\u1EEFng giao d\u1ECBch \u0111\u1EB7t ch\u1ED7 nh\u01B0ng ch\u01B0a s\u1EED d\u1EE5ng v\xEC b\u1EA5t k\u1EF3 l\xFD do n\xE0o nh\u01B0 v\u1EADy.<br>&nbsp;<br><strong>Gi\u1EDBi h\u1EA1n M\u1EE5c \u0111\xEDch s\u1EED d\u1EE5ng C\xE1 nh\xE2n v\xE0 Phi th\u01B0\u01A1ng m\u1EA1i&nbsp;</strong><br><br>Tr\u1EEB tr\u01B0\u1EDDng h\u1EE3p \u0111\u01B0\u1EE3c ghi r\xF5, c\xE1c d\u1ECBch v\u1EE5 c\u1EE7a Gotadi l\xE0 d\xE0nh cho m\u1EE5c \u0111\xEDch s\u1EED d\u1EE5ng c\xE1 nh\xE2n v\xE0 phi th\u01B0\u01A1ng m\u1EA1i c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng. Ng\u01B0\u1EDDi d\xF9ng kh\xF4ng th\u1EC3 thay \u0111\u1ED5i, sao ch\xE9p, ph\xE2n ph\u1ED1i, truy\u1EC1n t\u1EA3i, hi\u1EC3n th\u1ECB, th\u1EF1c hi\u1EC7n, t\xE1i s\u1EA3n xu\u1EA5t, xu\u1EA5t b\u1EA3n, c\u1EA5p ph\xE9p hay t\u1EA1o ra c\xE1c s\u1EA3n ph\u1EA9m ph\xE1i sinh, chuy\u1EC3n nh\u01B0\u1EE3ng ho\u1EB7c b\xE1n b\u1EA5t k\u1EF3 th\xF4ng tin, ph\u1EA7n m\u1EC1m, s\u1EA3n ph\u1EA9m ho\u1EB7c d\u1ECBch v\u1EE5 n\xE0o c\xF3 \u0111\u01B0\u1EE3c t\u1EEB trang web c\u1EE7a Gotadi m\xE0 kh\xF4ng c\xF3 s\u1EF1 ch\u1EA5p r\xF5 r\xE0ng thu\u1EADn b\u1EB1ng v\u0103n b\u1EA3n t\u1EEB Gotadi.<br>&nbsp;<br><strong>B\u1ED3i th\u01B0\u1EDDng</strong><br><br>Ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED3ng \xFD b\u1ED3i th\u01B0\u1EDDng, b\u1EA3o v\u1EC7 v\xE0 gi\u1EEF cho Gotadi v\xE0/ho\u1EB7c c\xE1c chi nh\xE1nh, c\xE1c trang web v\xE0 nh\u1EEFng ng\u01B0\u1EDDi k\u1EBF nhi\u1EC7m/th\u1EE5 quy\u1EC1n h\u1EE3p ph\xE1p kh\xF4ng b\u1ECB t\u1ED5n h\u1EA1i tr\u01B0\u1EDBc b\u1EA5t k\u1EF3 v\xE0 t\u1EA5t c\u1EA3 c\xE1c t\u1ED5n th\u1EA5t, ngh\u0129a v\u1EE5, khi\u1EBFu n\u1EA1i, thi\u1EC7t h\u1EA1i v\xE0 chi ph\xED (bao g\u1ED3m c\u1EA3 c\xE1c kho\u1EA3n chi ph\xED ph\xE1p l\xFD h\u1EE3p l\xFD li\xEAn quan v\xE0 c\xE1c kho\u1EA3n l\xE3i su\u1EA5t \xE1p d\u1EE5ng) m\xE0 Gotadi v\xE0/ho\u1EB7c c\xE1c chi nh\xE1nh, c\xE1c trang web \u0111\u1ED1i t\xE1c v\xE0 nh\u1EEFng ng\u01B0\u1EDDi th\u1EEBa k\u1EBF/th\u1EE5 quy\u1EC1n h\u1EE3p ph\xE1p b\u1ECB \u0111\xF2i ho\u1EB7c ph\u1EA3i g\xE1nh ch\u1ECBu ph\xE1t sinh t\u1EEB, l\xE0 k\u1EBFt qu\u1EA3 c\u1EE7a, ho\u1EB7c c\xF3 th\u1EC3 ph\u1EA3i tr\u1EA3 v\xEC s\u1EF1 vi ph\u1EA1m ho\u1EB7c kh\xF4ng th\u1EF1c hi\u1EC7n b\u1EA5t k\u1EF3 tuy\xEAn b\u1ED1, s\u1EF1 b\u1EA3o \u0111\u1EA3m, giao \u01B0\u1EDBc ho\u1EB7c th\u1ECFa thu\u1EADn n\xE0o \u0111\xE3 \u0111\u01B0\u1EE3c l\u1EADp ho\u1EB7c b\u1EA5t k\u1EF3 ngh\u0129a v\u1EE5 n\xE0o s\u1EBD ph\u1EA3i \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n b\u1EDFi Ng\u01B0\u1EDDi d\xF9ng theo th\u1ECFa thu\u1EADn n\xE0y.<br><br>Ng\u01B0\u1EDDi d\xF9ng s\u1EBD ch\u1ECBu tr\xE1ch nhi\u1EC7m duy nh\u1EA5t v\xE0 ho\xE0n to\xE0n v\u1EC1 b\u1EA5t k\u1EF3 s\u1EF1 vi ph\u1EA1m n\xE0o \u0111\u1ED1i v\u1EDBi b\u1EA5t k\u1EF3 quy \u0111\u1ECBnh c\u1EE5 th\u1EC3 n\xE0o c\u1EE7a t\u1EEBng qu\u1ED1c gia ho\u1EB7c quy t\u1EAFc \u1EE9ng x\u1EED chung v\xE0 Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 c\xF9ng vi ph\u1EA1m \u0111\xF3.<br>&nbsp;<br><strong>Quy\u1EC1n t\u1EEB ch\u1ED1i</strong><br><br>Gotadi, theo quy\u1EBFt \u0111\u1ECBnh c\u1EE7a ri\xEAng m\xECnh, c\xF3 quy\u1EC1n kh\xF4ng ch\u1EA5p nh\u1EADn b\u1EA5t k\u1EF3 \u0111\u01A1n \u0111\u1EB7t h\xE0ng n\xE0o m\xE0 kh\xF4ng ph\u1EA3i gi\u1EA3i thich b\u1EA5t k\u1EF3 l\xFD do n\xE0o. B\u1EA5t k\u1EF3 h\u1EE3p \u0111\u1ED3ng cung c\u1EA5p b\u1EA5t k\u1EF3 d\u1ECBch v\u1EE5 n\xE0o c\u1EE7a Gotadi \u0111\u1EC1u \u0111\u01B0\u1EE3c coi l\xE0 ch\u01B0a ho\xE0n th\xE0nh cho \u0111\u1EBFn khi to\xE0n b\u1ED9 s\u1ED1 ti\u1EC1n cho d\u1ECBch v\u1EE5 \u0111\xE3 \u0111\u01B0\u1EE3c Gotadi nh\u1EADn v\xE0 ch\u1EA5p thu\u1EADn.<br><br>Kh\xF4ng \u1EA3nh h\u01B0\u1EDFng \u0111\u1EBFn c\xE1c bi\u1EC7n ph\xE1p kh\xE1c d\xE0nh cho Gotadi theo th\u1ECFa thu\u1EADn n\xE0y,&nbsp; theo m\u1ED9t s\u1ED1 \u0111i\u1EC1u kho\u1EA3n d\u1ECBch v\u1EE5 (TOS) ho\u1EB7c theo lu\u1EADt \xE1p d\u1EE5ng, Gotadi c\xF3 th\u1EC3 h\u1EA1n ch\u1EBF ho\u1EA1t \u0111\u1ED9ng c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng, ho\u1EB7c ch\u1EA5m d\u1EE9t vi\u1EC7c ni\xEAm y\u1EBFt danh m\u1EE5c d\u1ECBch v\u1EE5 cho Ng\u01B0\u1EDDi d\xF9ng, c\u1EA3nh b\xE1o nh\u1EEFng Ng\u01B0\u1EDDi d\xF9ng kh\xE1c v\u1EC1 c\xE1c h\xE0nh \u0111\u1ED9ng c\u1EE7a m\u1ED9t Ng\u01B0\u1EDDi d\xF9ng n\xE0o \u0111\xF3, ngay l\u1EADp t\u1EE9c v\xE0 t\u1EA1m th\u1EDDi/v\xF4 th\u1EDDi h\u1EA1n \u0111\xECnh ch\u1EC9 ho\u1EB7c ch\u1EA5m d\u1EE9t vi\u1EC7c \u0111\u0103ng k\u200E\xFD c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng, v\xE0/ho\u1EB7c t\u1EEB ch\u1ED1i cho Ng\u01B0\u1EDDi d\xF9ng truy c\u1EADp v\xE0o c\xE1c trang web n\u1EBFu:<br><br>- Ng\u01B0\u1EDDi d\xF9ng vi ph\u1EA1m th\u1ECFa thu\u1EADn n\xE0y, m\u1ED9t s\u1ED1 \u0111i\u1EC1u kho\u1EA3n d\u1ECBch v\u1EE5 (TOS) v\xE0/ho\u1EB7c c\xE1c t\xE0i li\u1EC7u tham chi\u1EBFu \u0111i k\xE8m;<br>- Gotadi kh\xF4ng th\u1EC3 x\xE1c minh hay x\xE1c th\u1EF1c b\u1EA5t k\u1EF3 th\xF4ng tin n\xE0o do Ng\u01B0\u1EDDi d\xF9ng cung c\u1EA5p; ho\u1EB7c<br>- Gotadi tin r\u1EB1ng h\xE0nh \u0111\u1ED9ng c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng c\xF3 th\u1EC3 vi ph\u1EA1m c\xE1c quy\u1EC1n c\u1EE7a b\xEAn th\u1EE9 ba ho\u1EB7c vi ph\u1EA1m b\u1EA5t k\u1EF3 lu\u1EADt \xE1p d\u1EE5ng n\xE0o ho\u1EB7c l\xE0 d\u1EABn \u0111\u1EBFn b\u1EA5t k\u1EF3 tr\xE1ch nhi\u1EC7m ph\xE1p l\xFD n\xE0o cho Ng\u01B0\u1EDDi d\xF9ng, cho nh\u1EEFng Ng\u01B0\u1EDDi d\xF9ng kh\xE1c c\u1EE7a trang web v\xE0/ho\u1EB7c cho Gotadi.<br><br>Gotadi c\xF3 th\u1EC3 kh\xF4i ph\u1EE5c ho\u1EA1t \u0111\u1ED9ng cho nh\u1EEFng Ng\u01B0\u1EDDi d\xF9ng \u0111\xE3 b\u1ECB \u0111\xECnh ch\u1EC9 v\xE0o b\u1EA5t c\u1EE9 l\xFAc n\xE0o, t\xF9y v\xE0o quy\u1EBFt \u0111\u1ECBnh c\u1EE7a m\xECnh. M\u1ED9t khi \u0111\xE3 b\u1ECB \u0111\xECnh ch\u1EC9 v\xF4 th\u1EDDi h\u1EA1n, Ng\u01B0\u1EDDi d\xF9ng s\u1EBD kh\xF4ng \u0111\u0103ng k\xFD ho\u1EB7c c\u1ED1 g\u1EAFng \u0111\u0103ng k\xFD v\u1EDBi Gotadi ho\u1EB7c s\u1EED d\u1EE5ng trang web b\u1EB1ng b\u1EA5t c\u1EE9 c\xE1ch n\xE0o cho \u0111\u1EBFn khi \u0111\u01B0\u1EE3c Gotadi kh\xF4i ph\u1EE5c l\u1EA1i.<br><br>M\u1EB7c d\xF9 \u0111\xE3 n\xF3i \u1EDF tr\xEAn, n\u1EBFu Ng\u01B0\u1EDDi d\xF9ng vi ph\u1EA1m th\u1ECFa thu\u1EADn n\xE0y, m\u1ED9t s\u1ED1 \u0111i\u1EC1u kho\u1EA3n d\u1ECBch v\u1EE5 (TOS) ho\u1EB7c c\xE1c t\xE0i li\u1EC7u tham chi\u1EBFu \u0111i k\xE8m, Gotadi c\xF3 quy\u1EC1n thu h\u1ED3i b\u1EA5t k\u1EF3 kho\u1EA3n ti\u1EC1n th\xEDch h\u1EE3p n\xE0o m\xE0 Ng\u01B0\u1EDDi d\xF9ng ph\u1EA3i tr\u1EA3 cho Gotadi v\xE0/ho\u1EB7c nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5 v\xE0 c\xF3 th\u1EC3 kh\u1EDFi ki\u1EC7n n\u1EBFu Gotadi th\u1EA5y c\u1EA7n thi\u1EBFt.<br><br><strong>Quy\u1EC1n h\u1EE7y b\u1ECF c\u1EE7a Gotadi trong tr\u01B0\u1EDDng h\u1EE3p Th\xF4ng tin c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng Kh\xF4ng h\u1EE3p l\u1EC7</strong><br><br>Ng\u01B0\u1EDDi d\xF9ng cam \u0111oan r\xF5 r\xE0ng ch\u1EC9 cung c\u1EA5p cho Gotadi c\xE1c th\xF4ng tin ch\xEDnh x\xE1c v\xE0 h\u1EE3p l\u1EC7 trong qu\xE1 tr\xECnh y\xEAu c\u1EA7u b\u1EA5t k\u1EF3 d\u1ECBch v\u1EE5 n\xE0o theo Th\u1ECFa thu\u1EADn n\xE0y, v\xE0 kh\xF4ng tr\xECnh b\xE0y sai b\u1EA5t k\u1EF3 s\u1EF1 th\u1EF1c n\xE0o. B\u1EA5t k\u1EF3 th\xF4ng tin sai l\u1EC7ch n\xE0o t\u1EEB ph\xEDa Ng\u01B0\u1EDDi d\xF9ng s\u1EBD l\xE0m m\u1EA5t hi\u1EC7u l\u1EF1c c\u1EE7a th\u1ECFa thu\u1EADn n\xE0y v\xE0 s\u1EBD t\u01B0\u1EDBc b\u1ECF quy\u1EC1n s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5 c\u1EE7a Gotadi c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng.<br><br>V\xE0o b\u1EA5t c\u1EE9 l\xFAc n\xE0o trong ho\u1EB7c sau khi nh\u1EADn \u0111\u01B0\u1EE3c y\xEAu c\u1EA7u cung c\u1EA5p d\u1ECBch v\u1EE5 t\u1EEB Ng\u01B0\u1EDDi d\xF9ng, n\u1EBFu Gotadi ph\xE1t hi\u1EC7n ho\u1EB7c c\xF3 l\xFD do \u0111\u1EC3 tin r\u1EB1ng y\xEAu c\u1EA7u cung c\u1EA5p d\u1ECBch v\u1EE5 \u0111\xF3 l\xE0 tr\xE1i ph\xE9p ho\u1EB7c c\xE1c/m\u1ED9t ph\u1EA7n th\xF4ng tin Ng\u01B0\u1EDDi d\xF9ng cung c\u1EA5p l\xE0 kh\xF4ng ch\xEDnh x\xE1c ho\u1EB7c b\u1EA5t k\u1EF3 s\u1EF1 th\u1EF1c n\xE0o \u0111\xE3 b\u1ECB Ng\u01B0\u1EDDi d\xF9ng tr\xECnh b\xE0y sai, Gotadi, tu\u1EF3 theo \xFD m\xECnh, c\xF3 quy\u1EC1n kh\xF4ng h\u1EA1n ch\u1EBF trong vi\u1EC7c th\u1EF1c hi\u1EC7n b\u1EA5t k\u1EF3 h\xE0nh \u0111\u1ED9ng n\xE0o \u0111\u1ED1i v\u1EDBi (nh\u1EEFng) Ng\u01B0\u1EDDi d\xF9ng, bao g\u1ED3m h\u1EE7y b\u1ECF \u0111\u1EB7t ch\u1ED7, m\xE0 kh\xF4ng c\u1EA7n b\xE1o tr\u01B0\u1EDBc cho Ng\u01B0\u1EDDi d\xF9ng. Trong tr\u01B0\u1EDDng h\u1EE3p \u0111\xF3, Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m ho\u1EB7c c\xF3 ngh\u0129a v\u1EE5 v\u1EC1 b\u1EA5t k\u1EF3 t\u1ED5n th\u1EA5t ho\u1EB7c thi\u1EC7t h\u1EA1i n\xE0o Ng\u01B0\u1EDDi d\xF9ng c\xF3 th\u1EC3 ph\u1EA3i ch\u1ECBu do h\u1EC7 qu\u1EA3 c\u1EE7a vi\u1EC7c hu\u1EF7 \u0111\u1EB7t ch\u1ED7 ho\u1EB7c d\u1ECBch v\u1EE5 \u0111\xF3.<br><br>Ng\u01B0\u1EDDi d\xF9ng ch\u1EAFc ch\u1EAFn b\u1ED3i th\u01B0\u1EDDng cho Gotadi v\xEC b\u1EA5t k\u1EF3 khi\u1EBFu n\u1EA1i hay tr\xE1ch nhi\u1EC7m n\xE0o nh\u01B0 v\u1EADy v\xE0 s\u1EBD kh\xF4ng \u0111\u1EC3 Gotadi ph\u1EA3i ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 b\u1EA5t k\u1EF3 t\u1ED5n th\u1EA5t hay thi\u1EC7t h\u1EA1i n\xE0o ph\xE1t sinh t\u1EEB c\xE1c bi\u1EC7n ph\xE1p do Gotadi th\u1EF1c hi\u1EC7n \u0111\u1EC3 b\u1EA3o v\u1EC7 l\u1EE3i \xEDch c\u1EE7a m\xECnh v\xE0 c\u1EE7a c\xE1c kh\xE1ch h\xE0ng th\xE0nh th\u1EF1c. \u0110i\u1EC1u n\xE0y c\u0169ng bao g\u1ED3m vi\u1EC7c Gotadi ph\u1EE7 nh\u1EADn/h\u1EE7y b\u1ECF b\u1EA5t k\u1EF3 vi\u1EC7c \u0111\u1EB7t ch\u1ED7 n\xE0o do c\xE1c giao d\u1ECBch b\u1ECB nghi ng\u1EDD l\xE0 gian l\u1EADn.<br>&nbsp;<br><strong>S\u1EF1 chia t\xE1ch</strong><br>&nbsp;<br>N\u1EBFu b\u1EA5t k\u1EF3 \u0111i\u1EC1u kho\u1EA3n n\xE0o c\u1EE7a Th\u1ECFa thu\u1EADn n\xE0y \u0111\u01B0\u1EE3c x\xE1c \u0111\u1ECBnh l\xE0 kh\xF4ng h\u1EE3p l\u1EC7 ho\u1EB7c kh\xF4ng th\u1EC3 th\u1EF1c hi\u1EC7n \u0111\u01B0\u1EE3c to\xE0n b\u1ED9 hay m\u1ED9t ph\u1EA7n, th\xEC s\u1EF1 v\xF4 hi\u1EC7u ho\u1EB7c kh\xF4ng th\u1EC3 th\u1EF1c thi \u0111\xF3 s\u1EBD ch\u1EC9 g\u1EAFn v\u1EDBi \u0111i\u1EC1u kho\u1EA3n ho\u1EB7c ph\u1EA7n \u0111i\u1EC1u kho\u1EA3n \u0111\xF3 v\xE0 ph\u1EA7n c\xF2n l\u1EA1i c\u1EE7a \u0111i\u1EC1u kho\u1EA3n \u0111\xF3 v\xE0 t\u1EA5t c\u1EA3 c\xE1c \u0111i\u1EC1u kho\u1EA3n kh\xE1c c\u1EE7a Th\u1ECFa thu\u1EADn n\xE0y s\u1EBD ti\u1EBFp t\u1EE5c c\xF3 hi\u1EC7u l\u1EF1c v\xE0 t\xE1c d\u1EE5ng \u0111\u1EA7y \u0111\u1EE7.<br>&nbsp;<br><strong>C\xE1c \u0111\u1EC1 m\u1EE5c&nbsp;&nbsp;</strong><br><br>C\xE1c \u0111\u1EC1 m\u1EE5c v\xE0 ti\u1EC3u m\u1EE5c c\xF3 m\u1EB7t \u1EDF \u0111\xE2y ch\u1EC9 \u0111\u1EC3 thu\u1EADn ti\u1EC7n v\xE0 d\u1EC5 nh\u1EADn d\u1EA1ng v\xE0 kh\xF4ng nh\u1EB1m m\u1EE5c \u0111\xEDch m\xF4 t\u1EA3, gi\u1EA3i th\xEDch, \u0111\u1ECBnh ngh\u0129a ho\u1EB7c gi\u1EDBi h\u1EA1n ph\u1EA1m vi, m\u1EE9c \u0111\u1ED9 hay m\u1EE5c \u0111\xEDch c\u1EE7a Th\u1ECFa thu\u1EADn n\xE0y, c\u1EE7a c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n, c\xE1c th\xF4ng b\xE1o, ho\u1EB7c quy\u1EC1n s\u1EED d\u1EE5ng trang web n\xE0y c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng \u0111\u01B0\u1EE3c quy \u0111\u1ECBnh t\u1EA1i \u0111\xE2y ho\u1EB7c b\u1EA5t k\u1EF3 ph\u1EA7n ho\u1EB7c trang n\xE0o kh\xE1c c\u1EE7a rang Web c\u1EE7a Gotadi ho\u1EB7c c\xE1c trang web \u0111\u1ED1i t\xE1c c\u1EE7a n\xF3 ho\u1EB7c b\u1EA5t k\u1EF3 \u0111i\u1EC1u kho\u1EA3n n\xE0o c\u1EE7a Th\u1ECFa thu\u1EADn n\xE0y b\u1EB1ng b\u1EA5t k\u1EF3 c\xE1ch n\xE0o.<br><br>Trong tr\u01B0\u1EDDng h\u1EE3p b\u1EA5t k\u1EF3 \u0111i\u1EC1u kho\u1EA3n, \u0111i\u1EC1u ki\u1EC7n v\xE0 th\xF4ng b\xE1o n\xE0o t\u1EA1i \u0111\xE2y m\xE2u thu\u1EABn v\u1EDBi c\xE1c \u0110i\u1EC1u kho\u1EA3n B\u1ED5 sung ho\u1EB7c c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 h\u01B0\u1EDBng d\u1EABn kh\xE1c tr\xEAn b\u1EA5t k\u1EF3 trang web n\xE0o c\u1EE7a Gotadi, th\xEC c\xE1c \u0111i\u1EC1u kho\u1EA3n n\xE0y s\u1EBD \u0111\u01B0\u1EE3c \xE1p d\u1EE5ng.<br>&nbsp;<br><strong>M\u1ED1i quan h\u1EC7</strong><br><br>Kh\xF4ng c\xF3 \u0111i\u1EC1u kho\u1EA3n n\xE0o trong b\u1EA5t k\u1EF3 th\u1ECFa thu\u1EADn, \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n hay th\xF4ng b\xE1o n\xE0o, ho\u1EB7c quy\u1EC1n s\u1EED d\u1EE5ng trang web n\xE0y c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng \u0111\u01B0\u1EE3c quy \u0111\u1ECBnh t\u1EA1i \u0111\xE2y ho\u1EB7c b\u1EA5t k\u1EF3 ph\u1EA7n ho\u1EB7c trang n\xE0o c\u1EE7a c\xE1c rtang web c\u1EE7a Gotadi ho\u1EB7c c\xE1c trang web \u0111\u1ED1i t\xE1c, \u0111\u01B0\u1EE3c coi l\xE0 t\u1EA1o th\xE0nh&nbsp; m\u1ED1i quan h\u1EC7 \u0111\u1ED1i t\xE1c gi\u1EEFa Ng\u01B0\u1EDDi d\xF9ng v\xE0 Gotadi v\xE0 kh\xF4ng b\xEAn n\xE0o c\xF3 b\u1EA5t k\u1EF3 quy\u1EC1n r\xE0ng bu\u1ED9c ho\u1EB7c \u0111\u01B0\u1EE3c coi l\xE0 \u0111\u1EA1i l\xFD c\u1EE7a b\xEAn kia theo b\u1EA5t k\u1EF3 c\xE1ch n\xE0o.<br>&nbsp;<br><strong>C\u1EADp nh\u1EADt th\xF4ng tin b\u1EDFi Gotadi</strong><br><br>Ng\u01B0\u1EDDi d\xF9ng th\u1EEBa nh\u1EADn r\u1EB1ng Gotadi cung c\u1EA5p c\xE1c d\u1ECBch v\u1EE5 v\u1EDBi s\u1EF1 chuy\xEAn c\u1EA7n v\xE0 ch\u0103m s\xF3c h\u1EE3p l\xFD. Gotadi n\u1ED7 l\u1EF1c h\u1EBFt m\xECnh \u0111\u1EC3 \u0111\u1EA3m b\u1EA3o Ng\u01B0\u1EDDi d\xF9ng kh\xF4ng g\u1EB7p ph\u1EA3i b\u1EA5t k\u1EF3 phi\u1EC1n to\xE1i n\xE0o. Tuy nhi\xEAn, v\xE0o m\u1ED9t s\u1ED1 th\u1EDDi \u0111i\u1EC3m, c\xE1c th\xF4ng tin, ph\u1EA7n m\u1EC1m, s\u1EA3n ph\u1EA9m v\xE0 d\u1ECBch v\u1EE5 bao g\u1ED3m ho\u1EB7c c\xF3 tr\xEAn c\xE1c trang web c\u1EE7a Gotadi ho\u1EB7c c\xE1c k\xEAnh b\xE1n h\xE0ng kh\xE1c v\xE0 c\xE1c t\xE0i li\u1EC7u qu\u1EA3ng c\xE1o c\xF3 th\u1EC3 c\xF3 s\u1EF1 thi\u1EBFu ch\xEDnh x\xE1c ho\u1EB7c l\u1ED7i \u0111\xE1nh m\xE1y, s\u1EBD \u0111\u01B0\u1EE3c s\u1EEDa ch\u1EEFa ngay l\u1EADp t\u1EE9c sau khi Gotadi nh\u1EADn ra. Nh\u1EEFng s\u1EF1 thay \u0111\u1ED5i \u0111\u01B0\u1EE3c/c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c \u0111\u1ECBnh k\u1EF3 th\u1EF1c hi\u1EC7n ho\u1EB7c th\xEAm v\xE0o c\xE1c th\xF4ng tin \u0111\u01B0\u1EE3c cung c\u1EA5p \u0111\xF3. Gotadi c\xF3 th\u1EC3 c\xF3 c\xE1c c\u1EA3i ti\u1EBFn v\xE0/ho\u1EB7c thay \u0111\u1ED5i tr\xEAn c\xE1c trang web c\u1EE7a m\xECnh v\xE0o b\u1EA5t c\u1EE9 l\xFAc n\xE0o m\xE0 kh\xF4ng c\u1EA7n th\xF4ng b\xE1o cho Ng\u01B0\u1EDDi d\xF9ng. B\u1EA5t c\u1EE9 l\u1EDDi khuy\xEAn n\xE0o nh\u1EADn \u0111\u01B0\u1EE3c m\xE0 kh\xF4ng th\xF4ng qua m\u1ED9t \u0111\u1EA1i di\u1EC7n \u0111\u01B0\u1EE3c \u1EE7y quy\u1EC1n c\u1EE7a Gotadi qua c\xE1c trang web c\u1EE7a Gotadi \u0111\u1EC1u kh\xF4ng n\xEAn l\u1EA5y l\xE0m c\u0103n c\u1EE9 \u0111\u1EC3 \u0111\u01B0a ra c\xE1c quy\u1EBFt \u0111\u1ECBnh.<br>&nbsp;<br><strong>Thay \u0111\u1ED5i c\xE1c \u0110i\u1EC1u kho\u1EA3n s\u1EED d\u1EE5ng</strong><br><br>Gotadi c\xF3 quy\u1EC1n thay \u0111\u1ED5i c\xE1c \u0111i\u1EC1u kho\u1EA3n, \u0111i\u1EC1u ki\u1EC7n, v\xE0 th\xF4ng b\xE1o \u0111\u01B0\u1EE3c cung c\u1EA5p tr\xEAn trang web c\u1EE7a Gotadi. Ng\u01B0\u1EDDi d\xF9ng c\xF3 tr\xE1ch nhi\u1EC7m th\u01B0\u1EDDng xuy\xEAn xem l\u1EA1i c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n n\xE0y.<br>&nbsp;<br><strong>Th\u1EA9m quy\u1EC1n</strong><br>&nbsp;<br>Gotadi ho\xE0n to\xE0n ch\u1ED1i t\u1EEB b\u1EA5t k\u1EF3 s\u1EF1 \u0111\u1EA3m b\u1EA3o ng\u1EE5 \xFD n\xE0o \u0111\u01B0\u1EE3c quy cho lu\u1EADt ph\xE1p c\u1EE7a b\u1EA5t c\u1EE9 th\u1EA9m quy\u1EC1n hay qu\u1ED1c gia n\xE0o ngo\xE0i nh\u1EEFng n\u01A1i c\xE1c v\u0103n ph\xF2ng c\u1EE7a Gotadi \u0111ang ho\u1EA1t \u0111\u1ED9ng. Gotadi t\u1EF1 coi m\xECnh v\xE0 c\xF3 \xFD \u0111\u1ECBnh ch\u1ECBu th\u1EA9m quy\u1EC1n duy nh\u1EA5t c\u1EE7a c\xE1c to\xE0 \xE1n \u1EDF Vi\u1EC7t Nam.<br>&nbsp;<br><strong>Tr\xE1ch nhi\u1EC7m c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng v\u1EC1 Th\u1ECFa thu\u1EADn n\xE0y</strong><br><br>Ng\u01B0\u1EDDi d\xF9ng ho\xE0n to\xE0n \u0111\u1ED3ng \xFD r\u1EB1ng h\u1ECD ph\u1EA3i t\u1EF1 g\xE1nh ch\u1ECBu r\u1EE7i ro trong vi\u1EC7c s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5. Trong ph\u1EA1m vi Gotadi ch\u1EC9 l\xE0 m\u1ED9t \u0111\u1EA1i l\xFD \u0111\u1EB7t ch\u1ED7 thay m\u1EB7t cho c\xE1c nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5 b\xEAn th\u1EE9 ba, Gotadi s\u1EBD kh\xF4ng c\xF3 b\u1EA5t k\u1EF3 tr\xE1ch nhi\u1EC7m n\xE0o v\u1EC1 b\u1EA5t k\u1EF3 kh\xEDa c\u1EA1nh n\xE0o c\u1EE7a c\xE1c ti\xEAu chu\u1EA9n d\u1ECBch v\u1EE5 \u0111\u01B0\u1EE3c cung c\u1EA5p b\u1EDFi c\xE1c nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5. Trong m\u1ECDi tr\u01B0\u1EDDng h\u1EE3p, Gotadi kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 c\xE1c d\u1ECBch v\u1EE5 do c\xE1c nh\xE0 cung c\u1EA5p d\u1ECBch v\u1EE5 cung c\u1EA5p.<br><br>Gotadi ho\xE0n to\xE0n t\u1EEB ch\u1ED1i t\u1EA5t c\u1EA3 c\xE1c lo\u1EA1i b\u1EA3o \u0111\u1EA3m, d\xF9 l\xE0 r\xF5 r\xE0ng hay ng\u1EE5 \xFD. Kh\xF4ng c\xF3 l\u1EDDi khuy\xEAn ho\u1EB7c th\xF4ng tin n\xE0o, cho d\xF9 b\u1EB1ng mi\u1EC7ng ho\u1EB7c b\u1EB1ng v\u0103n b\u1EA3n, m\xE0 Ng\u01B0\u1EDDi d\xF9ng c\xF3 \u0111\u01B0\u1EE3c t\u1EEB Gotadi ho\u1EB7c th\xF4ng qua c\xE1c d\u1ECBch v\u1EE5, s\u1EBD t\u1EA1o th\xE0nh b\u1EA5t k\u1EF3 s\u1EF1 b\u1EA3o \u0111\u1EA3m n\xE0o m\xE0 kh\xF4ng \u0111\u01B0\u1EE3c n\xEAu ra r\xF5 r\xE0ng \u1EDF \u0111\xE2y ho\u1EB7c trong c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n c\u1EE7a d\u1ECBch v\u1EE5. N\u1EBFu Ng\u01B0\u1EDDi d\xF9ng kh\xF4ng \u0111\u1ED3ng \xFD v\u1EDBi b\u1EA5t k\u1EF3 \u0111i\u1EC1u kho\u1EA3n n\xE0o \u1EDF tr\xEAn, h\u1ECD \u0111\u01B0\u1EE3c khuy\xEAn kh\xF4ng n\xEAn \u0111\u1ECDc c\xE1c t\xE0i li\u1EC7u tr\xEAn b\u1EA5t k\u1EF3 trang n\xE0o c\u1EE7a Gotadi ho\u1EB7c s\u1EED d\u1EE5ng b\u1EA5t k\u1EF3 n\u1ED9i dung, trang, th\xF4ng tin ho\u1EB7c b\u1EA5t k\u1EF3 t\xE0i li\u1EC7u n\xE0o kh\xE1c \u0111\u01B0\u1EE3c cung c\u1EA5p b\u1EDFi Gotadi. Gi\u1EA3i ph\xE1p kh\u1EAFc ph\u1EE5c duy nh\u1EA5t c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng trong tr\u01B0\u1EDDng h\u1EE3p kh\xF4ng \u0111\u1ED3ng \xFD, to\xE0n b\u1ED9 ho\u1EB7c m\u1ED9t ph\u1EA7n, c\u1EE7a Th\u1ECFa thu\u1EADn s\u1EED d\u1EE5ng n\xE0y, l\xE0 ng\u1EEBng s\u1EED d\u1EE5ng c\xE1c d\u1ECBch v\u1EE5 sau khi \u0111\xE3 th\xF4ng b\xE1o cho Gotadi b\u1EB1ng v\u0103n b\u1EA3n.&nbsp;</span></span></p><p>&nbsp;</p><p><span style="font-size:14px"><span style="font-family:arial,helvetica,sans-serif"><b>B. Th\u1ECFa thu\u1EADn v\u1EC1 quy\u1EC1n ri\xEAng t\u01B0</b></span></span></p><p><br><span style="font-size:14px"><span style="font-family:arial,helvetica,sans-serif">Ch\xEDnh s\xE1ch B\u1EA3o m\u1EADt n\xE0y m\xF4 t\u1EA3 c\xE1ch th\u1EE9c ch\xFAng t\xF4i thu th\u1EADp, s\u1EED d\u1EE5ng, ti\u1EBFt l\u1ED9, ho\u1EB7c x\u1EED l\u200E\xFD c\xE1c th\xF4ng tin c\xE1 nh\xE2n m\xE0 ch\xFAng t\xF4i thu th\u1EADp \u0111\u01B0\u1EE3c t\u1EEB c\xE1c c\xE1 nh\xE2n l\xE0 ng\u01B0\u1EDDi d\xF9ng website Gotadi.com ("D\u1EEF li\u1EC7u C\xE1 nh\xE2n") li\xEAn quan t\u1EDBi c\xE1c d\u1ECBch v\u1EE5 m\xE0 ch\xFAng t\xF4i cung c\u1EA5p th\xF4ng qua website Gotadi.com ("Website"). B\u1EB1ng c\xE1ch truy c\u1EADp Website n\xE0y, ng\u01B0\u1EDDi d\xF9ng \u0111\u1ED3ng \xFD v\u1EDBi vi\u1EC7c thu th\u1EADp, s\u1EED d\u1EE5ng, ti\u1EBFt l\u1ED9 v\xE0 x\u1EED l\xFD c\xE1c D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a m\xECnh theo c\xE1ch th\u1EE9c \u0111\u01B0\u1EE3c m\xF4 t\u1EA3 trong Ch\xEDnh s\xE1ch B\u1EA3o m\u1EADt n\xE0y v\xE0 \u0111\u1ED3ng \xFD t\u1EEB b\u1ECF m\u1ECDi quy\u1EC1n \u0111\xF2i b\u1ED3i th\u01B0\u1EDDng li\xEAn quan \u0111\u1EBFn D\u1EEF li\u1EC7u C\xE1 nh\xE2n n\xE0y t\u1EA1i c\xE1c c\u01A1 quan c\xF3 th\u1EA9m quy\u1EC1n v\xE0 c\u01A1 quan t\xE0i ph\xE1n. T\u1EA5t c\u1EA3 c\xE1c d\u1EEF li\u1EC7u m\xE0 ch\xFAng t\xF4i thu th\u1EADp v\xE0 x\u1EED l\xFD \u0111\u01B0\u1EE3c l\u01B0u tr\u1EEF tr\xEAn c\xE1c m\xE1y ch\u1EE7 \u0111\u1EB7t t\u1EA1i Vi\u1EC7t Nam, v\xE0 s\u1EBD&nbsp; \u0111\u01B0\u1EE3c l\u01B0u tr\u1EEF tr\xEAn h\u1EC7 th\u1ED1ng cho t\u1EDBi khi ch\xFAng t\xF4i c\xF2n ti\u1EBFp t\u1EE5c cung c\u1EA5p d\u1ECBch v\u1EE5 tr\xEAn Website.<br>&nbsp;<br>Ch\xFAng t\xF4i b\u1EA3o l\u01B0u quy\u1EC1n \u0111i\u1EC1u ch\u1EC9nh Ch\xEDnh s\xE1ch B\u1EA3o m\u1EADt n\xE0y \u0111\u1EC3 ph\u1EA3n \xE1nh nh\u1EEFng thay \u0111\u1ED5i v\u1EC1 lu\u1EADt ph\xE1p, v\u1EC1 th\xF4ng l\u1EC7 thu th\u1EADp v\xE0 s\u1EED d\u1EE5ng D\u1EEF li\u1EC7u C\xE1 nh\xE2n, v\u1EC1 c\xE1c t\xEDnh n\u0103ng c\u1EE7a Website ho\u1EB7c nh\u1EEFng ti\u1EBFn b\u1ED9 trong c\xF4ng ngh\u1EC7. N\u1EBFu c\xF3 nh\u1EEFng \u0111i\u1EC1u ch\u1EC9nh l\xE0m thay \u0111\u1ED5i c\xE1ch ch\xFAng t\xF4i thu th\u1EADp ho\u1EB7c s\u1EED d\u1EE5ng D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a ng\u01B0\u1EDDi d\xF9ng, nh\u1EEFng thay \u0111\u1ED5i \u0111\xF3 s\u1EBD \u0111\u01B0\u1EE3c \u0111\u0103ng trong m\u1EE5c Ch\xEDnh s\xE1ch B\u1EA3o m\u1EADt n\xE0y v\xE0 ng\xE0y c\xF3 hi\u1EC7u l\u1EF1c s\u1EBD \u0111\u01B0\u1EE3c ghi ch\xFA \u1EDF ph\u1EA7n \u0111\u1EA7u c\u1EE7a Ch\xEDnh s\xE1ch B\u1EA3o m\u1EADt n\xE0y. V\xEC v\u1EADy, ng\u01B0\u1EDDi d\xF9ng n\xEAn xem l\u1EA1i Ch\xEDnh s\xE1ch B\u1EA3o m\u1EADt n\xE0y \u0111\u1ECBnh k\u1EF3 \u0111\u1EC3 \u0111\u01B0\u1EE3c c\u1EADp nh\u1EADt v\u1EC1 c\xE1c ch\xEDnh s\xE1ch v\xE0 th\xF4ng l\u1EC7 m\u1EDBi nh\u1EA5t c\u1EE7a ch\xFAng t\xF4i. Gotadi c\u0169ng s\u1EBD \u0111\u0103ng t\u1EA3i n\u1ED5i b\u1EADt c\xE1c thay \u0111\u1ED5i quan tr\u1ECDng n\xE0y tr\u01B0\u1EDBc khi th\u1EF1c hi\u1EC7n.<br>&nbsp;<br><strong>Th\xF4ng tin ch\xFAng t\xF4i thu th\u1EADp</strong><br>&nbsp;<br>Ch\xFAng t\xF4i thu th\u1EADp c\xE1c D\u1EEF li\u1EC7u C\xE1 nh\xE2n v\u1EC1 Ng\u01B0\u1EDDi d\xF9ng&nbsp; m\xE0 Ng\u01B0\u1EDDi d\xF9ng&nbsp; cung c\u1EA5p cho ch\xFAng t\xF4i khi s\u1EED d\u1EE5ng Website n\xE0y. D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\xF3 th\u1EC3 bao g\u1ED3m t\xEAn, \u0111\u1ECBa ch\u1EC9, s\u1ED1 \u0111i\u1EC7n tho\u1EA1i, s\u1ED1 th\u1EBB t\xEDn d\u1EE5ng ho\u1EB7c \u0111\u1ECBa ch\u1EC9 e-mail. Ch\xFAng t\xF4i c\u0169ng thu th\u1EADp c\xE1c th\xF4ng tin kh\xF4ng mang t\xEDnh nh\u1EADn d\u1EA1ng c\xE1 nh\xE2n, nh\u01B0ng c\xF3 th\u1EC3 c\xF3 li\xEAn quan t\u1EDBi D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng, bao g\u1ED3m t\xEAn \u0111\u0103ng nh\u1EADp, \u0111\u1ECBa ch\u1EC9 IP v\xE0 m\u1EADt kh\u1EA9u, c\u0169ng nh\u01B0 t\xECm ki\u1EBFm nh\u1EEFng s\u1EDF th\xEDch li\xEAn quan \u0111\u1EBFn c\xE1c t\xECm ki\u1EBFm c\u1EE5 th\u1EC3 c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng.<br>&nbsp;<br><strong>B\u1EA3o v\u1EC7 D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng&nbsp;</strong><br>&nbsp;<br>\u0110\u1EC3 ng\u0103n ch\u1EB7n truy c\u1EADp tr\xE1i ph\xE9p, ch\xFAng t\xF4i duy tr\xEC c\xE1c th\u1EE7 t\u1EE5c c\u1EA3 offline l\u1EABn online, \u1EDF m\u1EE9c \u0111\u1ED9 h\u1EE3p l\xFD \u0111\u1EC3 b\u1EA3o v\u1EC7 D\u1EEF li\u1EC7u C\xE1 nh\xE2n tr\u01B0\u1EDBc s\u1EF1 ph\xE1 ho\u1EA1i do t\xECnh c\u1EDD ho\u1EB7c tr\xE1i ph\xE1p lu\u1EADt, ho\u1EB7c do s\u1EF1 m\u1EA5t d\u1EEF li\u1EC7u, thay \u0111\u1ED5i d\u1EEF li\u1EC7u b\u1EA5t ng\u1EDD, ti\u1EBFt l\u1ED9 hay truy c\u1EADp d\u1EEF li\u1EC7u tr\xE1i ph\xE9p. \u0110\u1EC3 b\u1EA3o v\u1EC7 c\xE1c giao d\u1ECBch th\u1EBB t\xEDn d\u1EE5ng, Gotadi hi\u1EC7n \u0111ang s\u1EED d\u1EE5ng C\xF4ng ngh\u1EC7 SSL (Secure Socket Layer) \u0111\u1EC3 m\xE3 h\xF3a th\xF4ng tin th\u1EBB t\xEDn d\u1EE5ng trong qu\xE1 tr\xECnh chuy\u1EC3n th\xF4ng tin.<br>&nbsp;<br><strong>Ch\xFAng t\xF4i s\u1EED d\u1EE5ng c\xE1c th\xF4ng tin ch\xFAng t\xF4i thu th\u1EADp nh\u01B0 th\u1EBF n\xE0o?</strong><br>&nbsp;<br>Ch\xFAng t\xF4i s\u1EED d\u1EE5ng D\u1EEF li\u1EC7u C\xE1 nh\xE2n v\xE0 c\xE1c th\xF4ng tin kh\xE1c thu th\u1EADp th\xF4ng qua Website n\xE0y \u0111\u1EC3 \u0111\u0103ng k\xFD cho Ng\u01B0\u1EDDi d\xF9ng&nbsp; v\xE0o Website v\xE0 Ch\u01B0\u01A1ng tr\xECnh t\xEDnh \u0111i\u1EC3m th\u01B0\u1EDFng c\u1EE7a ch\xFAng t\xF4i, \u0111\u1EC3 cung c\u1EA5p cho Ng\u01B0\u1EDDi d\xF9ng&nbsp; c\xE1c s\u1EA3n ph\u1EA9m v\xE0 d\u1ECBch v\u1EE5 theo y\xEAu c\u1EA7u, \u0111\u1EC3 x\xE2y d\u1EF1ng c\xE1c t\xEDnh n\u0103ng gi\xFAp cho c\xE1c d\u1ECBch v\u1EE5 c\xF3 tr\xEAn Website n\xE0y d\u1EC5 s\u1EED d\u1EE5ng h\u01A1n, v\xE0 \u0111\u1EC3 li\xEAn l\u1EA1c v\u1EDBi Ng\u01B0\u1EDDi d\xF9ng v\u1EC1 c\xE1c d\u1ECBch v\u1EE5 n\xE0y. D\u1EEF li\u1EC7u C\xE1 nh\xE2n \u0111\xF3ng vai tr\xF2 quan tr\u1ECDng \u0111\u1EC3 ch\xFAng t\xF4i gi\xFAp kh\xE1ch h\xE0ng \u0111\u1EB7t ch\u1ED7 nhanh h\u01A1n, h\u1ED7 tr\u1EE3 kh\xE1ch h\xE0ng t\u1ED1t h\u01A1n v\xE0 th\xF4ng b\xE1o k\u1ECBp th\u1EDDi v\u1EC1 c\xE1c d\u1ECBch v\u1EE5 m\u1EDBi v\xE0 c\xE1c khuy\u1EBFn m\u1EA1i \u0111\u1EB7c bi\u1EC7t. \u0110\xF4i khi, Gotadi c\xF3 th\u1EC3 li\xEAn l\u1EA1c v\u1EDBi Ng\u01B0\u1EDDi d\xF9ng \u0111\u1EC3 y\xEAu c\u1EA7u Ng\u01B0\u1EDDi d\xF9ng ph\u1EA3n h\u1ED3i v\u1EC1 vi\u1EC7c s\u1EED d\u1EE5ng Website n\xE0y, \u0111\u1EC3 gi\xFAp ch\xFAng t\xF4i c\u1EA3i thi\u1EC7n Website, ho\u1EB7c \u0111\u1EC3 gi\u1EDBi thi\u1EC7u t\u1EDBi Ng\u01B0\u1EDDi d\xF9ng&nbsp; nh\u1EEFng g\xF3i ti\u1EBFt ki\u1EC7m ho\u1EB7c ch\u01B0\u01A1ng tr\xECnh khuy\u1EBFn m\u1EA1i \u0111\u1EB7c bi\u1EC7t do Ng\u01B0\u1EDDi d\xF9ng l\xE0 m\u1ED9t ng\u01B0\u1EDDi s\u1EED d\u1EE5ng Website, n\u01A1i Ng\u01B0\u1EDDi d\xF9ng&nbsp; \u0111\xE3 \u0111\u1ED3ng \xFD c\xF4ng nh\u1EADn c\xE1ch th\u1EE9c trao \u0111\u1ED5i th\xF4ng tin nh\u01B0 v\u1EADy. N\u1EBFu Ng\u01B0\u1EDDi d\xF9ng&nbsp; kh\xF4ng mu\u1ED1n nh\u1EADn c\xE1c th\xF4ng b\xE1o v\u1EC1 c\xE1c g\xF3i ti\u1EBFt ki\u1EC7m ho\u1EB7c ch\u01B0\u01A1ng tr\xECnh khuy\u1EBFn m\u1EA1i \u0111\u1EB7c bi\u1EC7t, Ng\u01B0\u1EDDi d\xF9ng \u0111\u01A1n gi\u1EA3n ch\u1EC9 c\u1EA7n t\u1EEB ch\u1ED1i nh\u1EADn ch\xFAng b\u1EB1ng c\xE1ch ph\u1EA3n h\u1ED3i t\u1EDBi Gotadi th\xF4ng qua \u0111\u01B0\u1EDDng link \u0111\u01B0\u1EE3c cung c\u1EA5p trong c\xE1c th\xF4ng b\xE1o \u0111\xF3.<br>&nbsp;<br><strong>Chia s\u1EBB D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng&nbsp;</strong><br>&nbsp;<br>Gotadi c\xF3 th\u1EC3 chia s\u1EBB D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng v\u1EDBi c\xE1c b\xEAn th\u1EE9 ba m\xE0 ch\xFAng t\xF4i thu\xEA \u0111\u1EC3 thay m\u1EB7t ch\xFAng t\xF4i th\u1EF1c hi\u1EC7n c\xE1c d\u1ECBch v\u1EE5, \u0111\u1EC3 qu\u1EA3ng b\xE1 c\xE1c s\u1EA3n ph\u1EA9m v\xE0 d\u1ECBch v\u1EE5 c\u1EE7a ch\xFAng t\xF4i, \u0111\u1EC3 x\u1EED l\xFD c\xE1c giao d\u1ECBch th\u1EBB t\xEDn d\u1EE5ng ho\u1EB7c cung c\u1EA5p cho Ng\u01B0\u1EDDi d\xF9ng d\u1ECBch v\u1EE5 kh\xE1ch h\xE0ng. T\u1EA5t c\u1EA3 c\xE1c b\xEAn th\u1EE9 ba \u0111\xF3 s\u1EBD c\xF3 ngh\u0129a v\u1EE5 ph\u1EA3i duy tr\xEC an ninh v\xE0 t\xEDnh b\u1EA3o m\u1EADt c\u1EE7a c\xE1c D\u1EEF li\u1EC7u C\xE1 nh\xE2n, v\xE0 ch\u1EC9 x\u1EED l\xFD c\xE1c D\u1EEF li\u1EC7u C\xE1 nh\xE2n theo h\u01B0\u1EDBng d\u1EABn c\u1EE7a ch\xFAng t\xF4i.<br>&nbsp;<br>Trong m\u1ED9t s\u1ED1 tr\u01B0\u1EDDng h\u1EE3p, Gotadi c\xF3 th\u1EC3 y\xEAu c\u1EA7u Ng\u01B0\u1EDDi d\xF9ng&nbsp; giao d\u1ECBch tr\u1EF1c ti\u1EBFp v\u1EDBi m\u1ED9t b\xEAn th\u1EE9 ba \u0111\u1EC3 c\xF3 \u0111\u01B0\u1EE3c c\xE1c d\u1ECBch v\u1EE5, ho\u1EB7c khi Ng\u01B0\u1EDDi d\xF9ng&nbsp; s\u1EED d\u1EE5ng Website n\xE0y \u0111\u1EC3 \u0111\u1EB7t ph\xF2ng kh\xE1ch s\u1EA1n ho\u1EB7c \u0111\u1EC3 c\xF3 \u0111\u01B0\u1EE3c m\u1ED9t s\u1EA3n ph\u1EA9m hay d\u1ECBch v\u1EE5 kh\xE1c, ch\xFAng t\xF4i c\xF3 th\u1EC3 cung c\u1EA5p D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng&nbsp; cho kh\xE1ch s\u1EA1n \u0111\xF3 ho\u1EB7c b\xEAn th\u1EE9 ba kh\xE1c c\xF3 li\xEAn quan.<br>&nbsp;<br>Gotadi c\xF3 th\u1EC3 ti\u1EBFt l\u1ED9 D\u1EEF li\u1EC7u C\xE1 nh\xE2n \u0111\u1EC3 t\u1EF1 b\u1EA3o v\u1EC7 m\xECnh tr\u01B0\u1EDBc c\xE1c ngh\u0129a v\u1EE5 ph\xE1p l\xFD, \u0111\u1EC3 \u0111\xE1p \u1EE9ng c\xE1c y\xEAu c\u1EA7u c\u1EE7a t\xF2a \xE1n, c\xE1c th\u1EE7 t\u1EE5ng t\u1ED1 t\u1EE5ng, c\xE1c y\xEAu c\u1EA7u h\u1EE3p ph\xE1p c\u1EE7a c\xE1c nh\xE2n vi\xEAn th\u1EF1c thi ph\xE1p lu\u1EADt theo \u0111\xFAng ph\xE1p lu\u1EADt hi\u1EC7n h\xE0nh. Ch\xFAng t\xF4i c\u0169ng c\xF3 th\u1EC3 ti\u1EBFt l\u1ED9 cho nh\u1EEFng ng\u01B0\u1EDDi mua c\xF3 li\xEAn quan t\u1EDBi b\u1EA5t k\u1EF3 vi\u1EC7c b\xE1n, chuy\u1EC3n nh\u01B0\u1EE3ng, ho\u1EB7c nh\u01B0\u1EE3ng l\u1EA1i to\xE0n b\u1ED9 ho\u1EB7c m\u1ED9t ph\u1EA7n doanh nghi\u1EC7p ho\u1EB7c c\xF4ng ty c\u1EE7a ch\xFAng t\xF4i. Ch\xFAng t\xF4i c\u0169ng c\xF3 th\u1EC3 ti\u1EBFt l\u1ED9 D\u1EEF li\u1EC7u C\xE1 nh\xE2n \u0111\u1EC3 th\u1EF1c thi ho\u1EB7c \xE1p d\u1EE5ng c\xE1c \u0111i\u1EC1u kho\u1EA3n v\xE0 \u0111i\u1EC1u ki\u1EC7n \xE1p d\u1EE5ng \u0111\u1ED1i v\u1EDBi c\xE1c s\u1EA3n ph\u1EA9m v\xE0 d\u1ECBch v\u1EE5 c\u1EE7a ch\xFAng t\xF4i, ho\u1EB7c \u0111\u1EC3 b\u1EA3o v\u1EC7 c\xE1c quy\u1EC1n, t\xE0i s\u1EA3n ho\u1EB7c s\u1EF1 an to\xE0n c\u1EE7a Gotadi, c\u1EE7a nh\u1EEFng ng\u01B0\u1EDDi s\u1EED d\u1EE5ng Website c\u1EE7a ch\xFAng t\xF4i, ho\u1EB7c nh\u1EEFng ng\u01B0\u1EDDi kh\xE1c.<br>&nbsp;<br><strong>Ch\xEDnh s\xE1ch c\u1EE7a ch\xFAng t\xF4i v\u1EC1 Cookies&nbsp;</strong><br>&nbsp;<br>\u0110\u1EC3 ph\u1EE5c v\u1EE5 Ng\u01B0\u1EDDi d\xF9ng&nbsp; nhanh h\u01A1n v\xE0 v\u1EDBi ch\u1EA5t l\u01B0\u1EE3ng t\u1ED1t h\u01A1n, ch\xFAng t\xF4i s\u1EED d\u1EE5ng c\xF4ng ngh\u1EC7 "cookie" tr\xEAn Website c\u1EE7a ch\xFAng t\xF4i. Cookies c\xE1c l\xE0 t\u1EADp m\xE3 nh\u1ECF, th\u01B0\u1EDDng \u0111\u01B0\u1EE3c l\u01B0u tr\u1EEF tr\xEAn \u1ED5 c\u1EE9ng m\xE1y t\xEDnh c\u1EE7a ng\u01B0\u1EDDi s\u1EED d\u1EE5ng, cho ph\xE9p m\u1ED9t Website t\u1EF1 "c\xE1 nh\xE2n ho\xE1" m\xECnh v\u1EDBi m\u1ED7i ng\u01B0\u1EDDi d\xF9ng b\u1EB1ng c\xE1ch ghi nh\u1EDB th\xF4ng tin v\u1EC1 l\u1EA7n truy c\u1EADp c\u1EE7a ng\u01B0\u1EDDi d\xF9ng \u0111\xF3 \u0111\u1EBFn Website \u0111\xF3. Cookies c\xF3 th\u1EC3 l\u01B0u tr\u1EEF nhi\u1EC1u lo\u1EA1i th\xF4ng tin, bao g\u1ED3m c\xE1c \u0111\u1ECBa ch\u1EC9 IP, d\u1EEF li\u1EC7u \u0111\u1ECBnh h\u01B0\u1EDBng, th\xF4ng tin m\xE1y ch\u1EE7, th\u1EDDi gian truy\u1EC1n d\u1EEF li\u1EC7u, c\xE1c s\u1EDF th\xEDch c\u1EE7a ng\u01B0\u1EDDi d\xF9ng, v\xE0 \u0111\u1ECBa ch\u1EC9 e-mail v\xE0 m\u1EADt kh\u1EA9u c\u1EA7n thi\u1EBFt \u0111\u1EC3 truy c\u1EADp v\xE0o Website. M\u1EE5c "Tr\u1EE3 gi\xFAp" tr\xEAn thanh c\xF4ng c\u1EE5 c\u1EE7a h\u1EA7u h\u1EBFt c\xE1c tr\xECnh duy\u1EC7t Internet s\u1EBD cho Ng\u01B0\u1EDDi d\xF9ng&nbsp; bi\u1EBFt c\xE1ch ng\u0103n ch\u1EB7n tr\xECnh duy\u1EC7t c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng&nbsp; ch\u1EA5p nh\u1EADn c\xE1c cookie m\u1EDBi ho\u1EB7c c\xE1ch c\u1EA5u h\xECnh tr\xECnh duy\u1EC7t c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng&nbsp; \u0111\u1EC3 t\u1EEB ch\u1ED1i ho\xE0n to\xE0n cookies. N\u1EBFu Ng\u01B0\u1EDDi d\xF9ng&nbsp; v\xF4 hi\u1EC7u h\xF3a c\xE1c t\u1EADp tin cookies, c\xF3 th\u1EC3 Ng\u01B0\u1EDDi d\xF9ng&nbsp; s\u1EBD kh\xF4ng th\u1EC3 truy c\u1EADp \u0111\u01B0\u1EE3c v\xE0o c\xE1c ch\u1EE9c n\u0103ng ho\u1EB7c t\xEDnh n\u0103ng quan tr\u1ECDng c\u1EE7a Website n\xE0y v\xE0 vi\u1EC7c s\u1EED d\u1EE5ng Website n\xE0y c\xF3 th\u1EC3 b\u1ECB h\u1EA1n ch\u1EBF. C\xE1c t\u1EADp tin cookies \u0111\u01B0\u1EE3c s\u1EED d\u1EE5ng tr\xEAn Website n\xE0y c\xF3 li\xEAn h\u1EC7 v\u1EDBi D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a ng\u01B0\u1EDDi d\xF9ng.<br>&nbsp;<br><strong>L\xE0m th\u1EBF n\xE0o Ng\u01B0\u1EDDi d\xF9ng c\xF3 th\u1EC3 truy c\u1EADp ho\u1EB7c thay \u0111\u1ED5i th\xF4ng tin nh\u1EADn d\u1EA1ng c\xE1 nh\xE2n c\u1EE7a m\xECnh?</strong><br>&nbsp;<br>N\u1EBFu Ng\u01B0\u1EDDi d\xF9ng mu\u1ED1n c\u1EADp nh\u1EADt b\u1EA5t k\u1EF3 D\u1EEF li\u1EC7u C\xE1 nh\xE2n n\xE0o Ng\u01B0\u1EDDi d\xF9ng \u0111\xE3 cung c\u1EA5p tr\u01B0\u1EDBc \u0111\xF3, ho\u1EB7c th\u1EF1c hi\u1EC7n b\u1EA5t k\u1EF3 quy\u1EC1n truy c\u1EADp, c\u1EA3i ch\xEDnh, x\xF3a, ho\u1EB7c ph\u1EA3n \u0111\u1ED1i vi\u1EC7c x\u1EED l\xFD D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng m\xE0 Ng\u01B0\u1EDDi d\xF9ng c\xF3 th\u1EC3 c\xF3 theo lu\u1EADt ph\xE1p hi\u1EC7n h\xE0nh, xin vui l\xF2ng email cho ch\xFAng t\xF4i theo \u0111\u1ECBa ch\u1EC9 service@gotadi.com.&nbsp; \u0110\u1EC3 b\u1EA3o v\u1EC7 s\u1EF1 ri\xEAng t\u01B0 v\xE0 an to\xE0n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng, ch\xFAng t\xF4i s\u1EBD x\xE1c minh danh t\xEDnh c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng&nbsp; tr\u01B0\u1EDBc khi c\u1EA5p quy\u1EC1n truy c\u1EADp ho\u1EB7c thay \u0111\u1ED5i D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng . M\u1ECDi y\xEAu c\u1EA7u truy c\u1EADp v\xE0o D\u1EEF li\u1EC7u C\xE1 nh\xE2n c\u1EE7a Ng\u01B0\u1EDDi d\xF9ng s\u1EBD \u0111\u01B0\u1EE3c tr\u1EA3 l\u1EDDi trong v\xF2ng 30 ng\xE0y.</span></span><br>&nbsp;</p></div></div></div><div ng-if="vm.language ===\'en\'" class="container margin-top-20"><div class="col-md-12 detail-tour"><h2 style="margin-top:15.0pt;margin-right:0in;margin-bottom:7.5pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:22.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;font-weight:normal\'>General</span><span lang="VI" style=\'font-size:\n\t\t\t22.5pt;font-family:"Arial",sans-serif;color:#444444;mso-ansi-language:VI;\n\t\t\tfont-weight:normal\'> Terms and Conditions<o:p></o:p></span></h2><a href="https://developer.expediapartnersolutions.com/terms/agent/{{vm.language}}" target="_blank">Hotel Supplier Terms and Conditions</a><br><br><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><strong><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>A. Terms</span></strong><strong><span lang="VI" style=\'font-size:\n\t\t\t10.5pt;font-family:"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> of use agreement</span></strong><span lang="VI" style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'><o:p></o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>&nbsp;<o:p></o:p></span></p><p style="background:#F0F0F0"><strong><span style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444\'>Scope of application</span></strong><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'><br><br>This agreement (&quot;User Agreement&quot;) is a summary of the terms and conditions for Gotadi and its affiliates to provide services to people (&quot;Users&quot;) who intend to buy or inquire about any Gotadi products and / or services using the Gotadi website or use any other Gotadi user interface channel, including salespeople, representative offices, telephone exchanges, advertisements, promotional campaigns, ...<o:p></o:p></span></p><p style="background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'><o:p>&nbsp;</o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>Both Users and Gotadi are individually called &quot;stakeholder&quot; in this agreement and collectively referred to as &quot;stakeholders&quot;.<o:p></o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'><br><strong><span style=\'font-family:"Arial",sans-serif\'>The User\'s responsibility to acknowledge this agreement</span></strong><br><br>Users using</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;mso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444\'>services from Gotadi will be deemed to have read, understood and absolutely accept the terms and conditions of this agreement, an agreement that governs User\'s transactions or the provision of such services by Gotadi in practice, and will bind User. All rights and obligations of User and / or Gotadi in respect of any services provided by Gotadi will be limited to the scope of this agreement.<br><br>Gotadi reserves the right at its sole discretion to terminate access to any or all parts of Gotadi\'s website or other sales channels and related services or any part thereof at any time, without notice, for general maintenance or for any reason.<br><br>In addition to this Agreement, there are some specific terms of service (TOS) for services / products offered by Gotadi such as airline tickets, hotels, vacation packages, etc. This TOS will be provided/ updated by Gotadi and shall be deemed to be part of this Agreement and in the event of a conflict between such other Specific Terms of Service (TOS) and this Agreement, the terms of this Agreement will be applied. Users will be required to read and accept the TOS in relation to the services / products that the User has used.<o:p></o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>Besides</span><span lang="VI" style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> that</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'>, the Service Provider</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;mso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444\'>may also provide terms and instructions for special features, offers or operating rules and policies for each Service (for example, flights, hotel reservations, service packages ...). The User is responsible for ensuring compliance with the Service Provider\'s terms and instructions or operating policies, which include the terms and conditions set forth in the fare rules, shipping contracts, or other provisions of Service Providers.<br><br>Gotadi\'s services are provided to the User only on condition that he or she accepts</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;mso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444\'>without modifying all terms, conditions and notices in this Agreement and other Specific Terms of Service (TOS). To eliminate suspicion, this is clarified as follows: The</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>User\uFFFDs use of the Services is a user\'s acknowledgment and acceptance of these Terms and other specific Terms of Service (TOS).</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>If the User does not agree to any part of such terms, conditions and notices, the User does not need to use the Gotadi Services.<br><br>In case any of these terms, conditions and notices herein conflict with the Additional Terms or other terms and instructions in any other Gotadi documents, these terms will be</span><span lang="VI" style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> applied</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'><br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Third Party Account Information</span></strong><br><br>By using the Account Access service on Gotadi\'s website, users allow Gotadi and its agents to access third-party websites, including Banks and other payment gateways, as they designate or on their behalf to obtain the requested information<br><br>During registration, the User will choose a password and be responsible for the password and account security.<br><br>Users are solely responsible for all activities that occur when using their password or account. Users are responsible to notify Gotadi immediately in writing of any unauthorized use of their password or account or any security breach. Gotadi will not be responsible for any losses that may occur to a User due to unauthorized use of their password or account, whether they know it or not. Users will not use other people\'s passwords at any time.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Payment costs</span></strong><br><br>Gotadi reserves the right to charge the rates listed specifically</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>on the</span><span lang="VI" style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> web</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'> site, as well as transaction fees based on those completed transactions. Gotadi also reserves the right to change any</span><span lang="VI" style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> or all fees without notice.</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'><br><br>Users will be solely responsible for all charges, fees, taxes, taxes, and any fixed amounts payable, resulting from the use of the services.<o:p></o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>In case that Gotadi charges not</span><span lang="VI" style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> enough of</span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444\'> listing fees, services or transaction fees or any other fees by technical</span><span lang="VI" style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> issue</span><span style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444\'> or other reason, Gotadi reserves the right to deduct / charge / claim the rest after that transaction at its sole discretion.<br><br>On rare occasions, if the booking is not confirmed for any reason, we will issue a refund and notify you. Gotadi has no obligation to rebook or compensate / replace an unconfirmed reservation. All subsequent bookings will be processed as new transactions, without reference to previously unconfirmed bookings.<br><br>The user will request Gotadi to refund the money for the hotel reservation or flight tickets but have not used it for any reason within 90 days from the departure date for the flight ticket and / or Check-in date for hotel reservation. Any refunds that apply will be processed according to the policies of Airlines, Hotels and Gotadi on a case by case basis. Refunds will not be made for any requests made after the 90-day period above. All amounts due to hotel / flight / tour bookings but not yet used as such will be deemed lost.<br>&nbsp;&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Information security</span></strong><br><br>Any information specifically mentioned by Gotadi as Confidential information must be kept by the User confidential and not disclosed except as required by law or for the purposes of this agreement and the obligations of both parties in it.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Gotadi uses the user\'s mobile number</span></strong><br><br>Gotadi may send booking confirmation, itinerary information, cancellation, payment confirmation, refund status, schedule changes or any other information related to the transactions, via information. SMS or call to the contact phone number provided by the User when making a reservation; Gotadi may also contact the User by calling, SMS or email in case the User cannot or has not completed the reservation, for any reason, to know the User\'s willing with the reservation completion and also to help Users. There</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>for, User unconditionally agrees that communications via SMS and / or Gotadi\'s voice call are upon the User\'s request and permission. The User will indemnify Gotadi for all types of damages and damages Gotadi suffered as a result of any action of the state regulatory authorities due to any User error on Gotadi in connection with the notice. mentioned above or provided by a wrong telephone number or email address provided by the User, for any reason.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>User Responsibility&nbsp;</span></strong><br><br>Gotadi is only responsible for transactions made by Users through Gotadi. Gotadi will not be responsible for screening, censoring or controlling transactions, including whether the transaction is legal and valid according to the laws where</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;mso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444\'>User lives.<o:p></o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>The user assures that he will comply</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>with all additional procedures and guidelines, as amended from time to time, in connection with the use of the services. The user</span><span lang="VI" style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> also</span><span style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444\'> assures that he will comply</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>with all applicable laws and regulations regarding the use of services related to the authority for each transaction.<br><br>Users represent and confirm that they are in</span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'>legal age to enter into a binding contract and not to be prohibited from using the Services under the laws of Vietnam or other applicable law..<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Ads on Gotadi or affiliated websites</span></strong><br><br>Gotadi is not responsible for any errors, omissions or descriptions on its website, or on any link or linked website. Gotadi does not endorse the quality of any ads on its sites in any manner. The user must verify the accuracy of all information before taking any action based on that information.<br><br>The linked sites are not under Gotadi\'s control and Gotadi is not responsible for the content of any linked website or any link on a linked website, or any changes or updates. for those sites. Gotadi provides such links to Users solely for their convenience, and the use of any such link does not imply endorsement of that site by Gotadi.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Insurrance</span></strong><br><br>Except as expressly provided by Gotadi in any particular service or transfer, the purchase of full insurance is the User\'s obligation / choice and Gotadi does not accept any claims. Which arises from that.<br><br>Insurance, if provided as part of Gotadi\'s services / products, will</span><span lang="VI" style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> comply</span><span style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444\'> to the insurance company\'s terms and conditions. The user will contact the insurance company directly if there are any complaints or disputes and Gotadi will not make any representations, whether express or implied, that will accept the requests of insurance company.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Cases of Force Majeure</span></strong><br><br>The user agrees that there may be special case when operators such as airlines, hotels, companies or transportation providers cannot make reservations. confirmed for various reasons such as climatic conditions, labor unrest, insolvency, emergency business status, government decisions, regulatory and technical issues, cancel itineraries and flights ... If Gotadi is informed in advance of situations where a reservation may not be made, Gotadi will make every effort to provide the same replacement service to the customer or refund. Reservation amount after deducting reasonable service fees, if supported and refunded n from the respective service operators. The User agrees that Gotadi, as an agent that facilitates booking services, will not be responsible for any such circumstances and the customer must contact the supplier directly. provide that service for other solutions and get a refund (if any).<br><br>The User agrees that in situations due to any technical failure or other failure at Gotadi, previously committed services may not be provided or subject to significant changes. In such cases, Gotadi will refund the entire amount received from the customer for the use of such services minus any cancellation, refund, or other appropriate fees, completing any and Gotadi\'s entire responsibility with respect to failure to provide or inadequate provision of services. Additional amounts, if any, will be paid by the User.<br><br>Gotadi is not responsible for delays or inability to fulfill or fail to fulfill all or part of its obligations due to any cause not due to its acts or omissions and outside reasonable control, such as natural disasters, fires, strikes, sanctions, government actions, acts of terrorism or other similar causes, problems from airlines , rails, buses, hotels, or carriers. In such event, the affected User will be promptly notified as circumstances permit.<br><br>Without prejudice to any of the foregoing, Gotadi\'s maximum liability arising under any circumstances, in connection with any services provided on this website, will be limited to Pay the total amount received by the customer for the use of the service minus any cancellation, refund, or other fees, as applicable. In no event shall the liability include any additional losses, damages or costs beyond the amount of Gotadi collected for its services.<br><br>Gotadi is not responsible for any errors, omissions or representations on any of its websites, or on any affiliate or linked website.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Safety of downloaded data</span></strong><br><br>Users understand and agree that any material and / or data downloaded or obtained by using the Service is done solely at their own decision and</span><span lang="VI" style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> be</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'> responsible for any damage to your computer system or loss of data as a result of downloading such documents and / or data.<br><br>However, Gotadi will always make every effort to ensure that the content on its websites or other information channels does not contain viruses or malware.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Feedback from customers and solicitation of guests<o:p></o:p></span></strong></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>Users are aware that Gotadi offers a variety of services such as hotel reservations, airline tickets, vacation packages and wants to learn about them, to enhance their travel services. Specifically, the User allows Gotadi to contact him about the provision of various Gotadi services through direct mail, email, phone calls, short message service (SMS). or any other means, at some point. In case the customer chooses not to contact, they will write to Gotadi to service@gotadi.com. Customers should read and understand Gotadi\'s privacy policies on the Gotadi website. Gotadi will contact, solicit User or share the User\'s information in accordance with those privacy policies.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Ownership</span></strong><br><br>Gotadi may provide Users with content such as audio, images, graphics, videos or other materials contained in advertisements or information. This material may be protected by copyright, trademark, or other intellectual property rights and laws.<br><br>Users may use this material only with express permission from Gotadi and will not copy, transmit or create derivative works of such materials without explicit permission.<br><br>Users acknowledge and agree that they will not upload, copy or post any content contained on or through the Services that are protected by copyright or other proprietary rights of a third party, which There is no written permission of the owner of that right.<br><br>Any other proprietary or copyrighted content submitted with the owner\'s consent must contain the appropriate notice of ownership. Uploading or submitting copyrighted or other proprietary content without permission is illegal and may subject the User to personal liability or prosecution.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>User\'s responsibility for VISA</span></strong><br><br>The travel arrangements made by Gotadi also depend on the Visa requirements that each individual traveler must has</span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'>by himself. Gotadi is not responsible for any issues, including being unable to travel, arising from such Visa requirements and nor is it responsible for refunding bookings that have not been used for any reason like that.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Limited Personal and Non-commercial Use</span></strong><br><br>Unless otherwise specified, Gotadi\'s services are for User\'s personal and non-commercial use. Users may not alter, copy, distribute, transmit, display, perform, reproduce, publish, license or create derivative works, transfer or sell any information, parts software, product, or service is obtained from the Gotadi website without the express written consent of Gotadi.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Indemnify</span></strong><br><br>The User agrees to indemnify, defend and</span><span lang="VI" style=\'font-size:\n\t\t\t10.5pt;font-family:"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'> keep</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'> Gotadi and / or its affiliates, websites and their successors / rights of successor harmless from any and all losses, obligations, claims, damages and expenses (including applicable legal fees and applicable interest rates) that Gotadi and / or its affiliates, partner websites and heirs / legal rights claimed or incurred arising out of, as a result of, or possibly payable for breach of or failure to make any statements, warranties, covenants or agreements made or any obligations that will be fulfilled by Users under this agreement.<br><br>Users will be</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;mso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444\'>solely responsible for any breach of any country-specific rules or code of conduct and Gotadi is not responsible for the same breach.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Right to refuse</span></strong><br><br>Gotadi, in its sole discretion, reserves the right not to accept any order without having to explain any reason. Any contract to provide any of Gotadi\'s services is considered unfinished until the entire amount of the service has been received and approved by Gotadi.<br><br>Without prejudice to other remedies available to Gotadi under this agreement, under certain terms of service (TOS) or applicable law, Gotadi may restrict User activity, or terminate listing of listings. service section for the User, alerting other Users about the actions of a User, immediately and temporarily / indefinitely suspending or terminating the User\'s registration, and / or deny Users access to the website if:<br><br>- User violates this agreement, some terms of service (TOS) and / or accompanying references;<br>- Gotadi cannot verify or authenticate any information provided by the User; or<br>- </span><span style="color:black;mso-color-alt:windowtext">Gotadi believes that User\'s actions may violate the rights of third parties or violate any applicable laws or lead to any liability to the User, to other Users of the site. and / or for Gotadi.</span><span style=\'font-size:10.5pt;font-family:\n\t\t\t"Arial",sans-serif;color:#444444\'><br><br>Gotadi may resume activity for Suspended Users at any time, at its sole discretion. Once suspended for an indefinite term, the User will not register or attempt to register with Gotadi or use the site in any way until it is restored by Gotadi.<br><br>Notwithstanding the foregoing, if User violates this agreement, certain terms of service (TOS) or accompanying references, Gotadi reserves the right to recover any appropriate amount that the User must pay to Gotadi and / or service provider and can sue if Gotadi deems it necessary.<br><br><strong><span style=\'font-family:"Arial",sans-serif\'>Gotadi\'s right to cancel in the case of Invalid User Information</span></strong><br><br>Users warrant that only accurate and valid information is provided to Gotadi</span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444;\n\t\t\tmso-ansi-language:VI\'> </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>in the process of requesting any service under this Agreement. Any false information from the User will invalidate this agreement and will void the User\'s rights to use the Gotadi services.<br><br>At any time during or after receiving a request to provide services from a User, if Gotadi discovers or has reason to believe that such request is unauthorized or that / the user provided is inaccurate or any facts have been misrepresented by the User, Gotadi, in its sole discretion, has an unrestricted right to perform any action against the User (s), including cancellation of reservation, without prior notice to Users. In such event, Gotadi is not responsible or liable for any loss or damage a User may incur as a result of such reservation or service cancellation.<br><br>The user expressly indemnifies Gotadi for any such claim or liability and shall not hold Gotadi liable for any loss or damage arising from the measures taken by Gotadi to protect. interests and honest customers. This also includes Gotadi\'s denial / cancellation of any bookings due to suspected fraudulent transactions.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Splits</span></strong><br>&nbsp;<br>If any provision of this Agreement is found to be invalid or unenforceable in whole or in part, such nullity or unenforceability will only apply to such provision or portion thereof</span><span lang="VI" style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444;mso-ansi-language:VI\'>. </span><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;color:#444444\'>The remainder of that provision and all other provisions of this Agreement will continue to be valid and fully enforceable.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Headings</span></strong><br><br>The headings and subsections presented here are for convenience only and are not easily identifiable and are not intended to describe, explain, define or limit the scope, extent or purpose of this Agreement, of the Articles User\'s terms and conditions, notices, or rights to use this website are set forth herein or any other part or page of the Gotadi Website or its partner websites or any terms of this Agreement in any way.<br><br>In case any of the terms, conditions and notices herein conflict with the Additional Terms or other terms and instructions on any Gotadi website, these terms will be</span><span lang="VI" style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;mso-ansi-language:VI\'> applied.</span><span style=\'font-size:\n\t\t\t10.5pt;font-family:"Arial",sans-serif;color:#444444\'><br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Relationship</span></strong><br><br>There is no provision in any agreement, terms and conditions or notice, or the User\'s right to use this website as set forth herein or any part or page of Gotadi\'s web sites or Partner websites, which are deemed to form a partnership between the User and Gotadi, and neither party has any binding rights or is deemed to be the agent of the other party in any way.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Updated information by Gotadi</span></strong><br><br>The user acknowledges that Gotadi provides services with reasonable diligence and care. Gotadi makes every effort to ensure that Users do not encounter any inconvenience. However, from time to time, the information, software, products and services included or available on Gotadi\'s websites or other sales channels and promotional materials may be inaccurate. or typographical errors, will be corrected immediately after Gotadi realized. Changes are / may be made periodically or in addition to the provided information. Gotadi may make improvements and / or changes on its sites at any time without notice to the User. Any advice received without going through Gotadi\'s authorized representative through Gotadi\'s websites should not be used as a basis for making decisions.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Change the Terms of Use</span></strong><br><br>Gotadi reserves the right to change the terms, conditions, and notices provided on Gotadi\'s website. It is the responsibility of the user to regularly review these terms and conditions.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Competence</span></strong><br>&nbsp;<br>Gotadi expressly disclaims any implied warranties granted by the laws of any jurisdiction or country other than where Gotadi offices are operating. Gotadi considers itself and intends to be the sole authority of the courts in Vietnam.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>User\'s Responsibility for this Agreement</span></strong><br><br>Users fully agree that they are solely at their own risk in using the services. To the extent that Gotadi is only a booking agent on behalf of third party service providers, Gotadi will not have any responsibility for any aspect of the service standards provided by the service Provider. In all cases, Gotadi is not responsible for the services provided by the service providers.<br><br>Gotadi completely disclaims all types of warranties, whether express or implied. No advice or information, whether oral or written, that the User obtains from Gotadi or through the services, will constitute any warranties not expressly set forth herein. or in terms and conditions of service. If the User disagrees with any of the above, they are advised not to read the materials on any of Gotadi\'s pages or use any content, pages, information or any other materials. powered by Gotadi. The only remedy of the User\'s failure to agree, in whole or in part, of this Terms of Use, is to stop using the services after giving Gotadi written notice.<o:p></o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>&nbsp;<o:p></o:p></span></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><b><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>B. Privacy agreement<o:p></o:p></span></b></p><p style="margin-top:0in;margin-right:0in;margin-bottom:15.0pt;margin-left:\n\t\t\t0in;background:#F0F0F0"><span style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444\'>This Privacy Policy describes how we collect, use, disclose, or process the personal information we collect from individuals who use the Gotadi.com website (&quot;Data&quot; Personal Data &quot;) regarding the services we provide via the Gotadi.com website (&quot; Website &quot;). By accessing this Website, the user agrees to the collection, use, disclosure and processing of his Personal Data in the manner described in this Privacy Policy and agrees to waive all rights claim damages on this Personal Data in competent jurisdictions and jurisdictions. All data that we collect and process is stored on servers located in Vietnam, and will be stored on the system until we continue to provide services on the Website.<br>&nbsp;<br>We reserve the right to modify this Privacy Policy to reflect changes in the law, the practice of collecting and using Personal Data, about the features of the Website or advances in technology. If there are adjustments that change the way we collect or use users\' Personal Data, those changes will be posted in this Privacy Policy and the effective date will be noted at the beginning. of this Privacy Policy. Therefore, users should review this Privacy Policy periodically to stay updated on our latest policies and practices. Gotadi will also highlight these important changes before making them.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Information we collect</span></strong><br>&nbsp;<br>We collect the Personal Data that the User provides us when using this Website. Personal Data may include name, address, telephone number, credit card number or e-mail address. We also collect information that is not personally identifiable, but may be related to a User\'s Personal Data, including username, IP address and password, as well as search for departments likes related to specific User searches.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Protecting User Personal Data</span></strong><br>&nbsp;<br>To prevent unauthorized access, we maintain procedures both offline and online, to the extent appropriate to protect Personal Data against accidental or unlawful destruction, or due to data loss. , unexpected data changes, unauthorized disclosure or data access. To protect credit card transactions, Gotadi currently uses SSL (Secure Socket Layer) Technology to encrypt credit card information in the transfer process..<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>How do we use the information we collect?</span></strong><br>&nbsp;<br>We use Personal Data and other information collected through this Website to register Users on our Website and Rewards Program, to provide Users with the following products and services. request, to build features that make the services available on this Website easier to use, and to contact the User about these services. Personal Data is important for us to help customers book faster, better support customers and timely notice of new services and special offers. From time to time, Gotadi may contact the User to request User feedback about the use of this Website, to help us improve the Website, or to introduce the User to special savings plans or promotions. The User is a User of the Website, where the User has agreed to recognize such communications. If the User does not wish to receive notices of savings plans or special promotions, the User simply refuses to receive them by replying to Gotadi via the link provided in such notices.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Sharing User Personal Data</span></strong><br>&nbsp;<br>Gotadi may share User Personal Data with third parties that we hire to perform services on our behalf, to promote our products and services, to handle transactions. translate credit cards or provide Customer Service Users. All such third parties will be obligated to maintain the security and confidentiality of Personal Data, and only process Personal Data in accordance with our instructions.<br>&nbsp;<br>In some cases, Gotadi may require the User to deal directly with a third party to obtain services, or when the User uses this Website to book a hotel or to obtain a good product. Other services, we may provide User Personal Data to that hotel or other relevant third parties.<br>&nbsp;<br>Gotadi may disclose Personal Data in order to protect itself from legal obligations, to meet court requests, legal proceedings, and legal requirements of law enforcement officers. in accordance with applicable law. We may also disclose to buyers related to any sale, transfer, or cession of all or part of our business or company. We may also disclose Personal Data to enforce or apply terms and conditions that apply to our products and services, or to protect our rights, property</span><span lang="VI" style=\'font-size:10.5pt;font-family:"Arial",sans-serif;\n\t\t\tcolor:#444444;mso-ansi-language:VI\'>,</span><span style=\'font-size:10.5pt;\n\t\t\tfont-family:"Arial",sans-serif;color:#444444\'> our Website users, or others.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>Our policy on Cookies</span></strong><br>&nbsp;<br>To serve Users faster and with better quality, we use &quot;cookie&quot; technology on our Website. Cookies are small sets of code, usually stored on a user\'s computer hard drive, allowing a Web site to &quot;personalize&quot; itself to each user by remembering information about that user\'s visit. go to that Website. Cookies can store a variety of information, including IP addresses, navigation data, server information, data transmission times, user preferences, and e-mail addresses and passwords. set up to access the Website. The &quot;Help&quot; section on the toolbar of most Internet browsers will tell the User how to prevent the User\'s browser from accepting new cookies or how to configure the User\'s browser to completely refuse cookies. If you disable cookies, you may not be able to access important functions or features of this Website and its use may be restricted. The cookies used on this Website are related to the user\'s Personal Data.<br>&nbsp;<br><strong><span style=\'font-family:"Arial",sans-serif\'>How can Users access or change their personally identifiable information?</span></strong><br>&nbsp;<br>If the User wishes to update any Personal Data that the User has previously provided, or exercise any right to access, correct, delete, or object to the processing of the User\'s Personal Data Use is subject to applicable laws, please email us at service@gotadi.com. To protect the User\'s privacy and security, we will verify the User\'s identity before granting access to or altering User\'s Personal Data. Any request to access User\'s Personal Data will be answered within 30 days.<o:p></o:p></span></p><p class="MsoNormal"><o:p>&nbsp;</o:p></p></div></div>');
        $templateCache.put('app/home/viettel_home.html', '<div class="history-button"><a ui-sref="user-profile-booking" class="btn"><i class="fa fa-history fa-3"></i></a></div><div class="formSearch"><div class="container reset-container home"><div class="flight-search-home"><div class="tab-content"><div class="tab-pane active" id="flight"><div><div><div class="mainFormSearch"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearchFlight($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div></div></div><div class="tab-pane" id="hotel"><div class="row"><div class="col-md-8"><gtd-hotel-home-search-header search-options="vm.hotelSearchOptions" do-search="vm.doSearchHotel($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div></div></div></div></div></div>');
        $templateCache.put('app/hotels/hotel.chooseroom.html', '<div class="flight-search-loading"><div class="modal-body"><form role="form" name="roomForm" novalidate><div class="row margin-bottom-10 gtd-shadow" ng-repeat="pax in vm.chooseRoomSearchOptions"><div class="row"><div class="col-xs-12" style="padding-top: 5px"><div class="col-xs-10"><label class="bold">{{ "hotel.search.header.room" | translate }} {{ $index + 1 }}:</label></div><div class="form-group col-xs-2" style="padding-right: 5px"><div class="width-100pc" style="text-align: right"><!-- <span class="hand bold"\n                                      ng-show="vm.chooseRoomSearchOptions.length > 1"\n                                      ng-click="vm.removePax($index);">X</span> --> <button type="button" class="btn btn-danger btn-xs" ng-show="vm.chooseRoomSearchOptions.length > 1" ng-click="vm.removePax($index)"><span class="fa fa-close"></span></button></div></div></div></div><div class="row"><div class="col-sm-12"><div class="row margin-left-15 margin-right-15" style="padding: 10px 0px 8px 0px"><div class="col-sm-2 control-label" style="vertical-align: middle"><span data-translate="hotel.search.header.adult">Ng\u01B0\u1EDDi l\u1EDBn:</span></div><div class="col-sm-4"><!-- <select class="form-control" ng-model="pax.adultNo">\n                                    <option value="{{item + 1}}" required ng-repeat="item in [8] | makeRange">{{item + 1}} {{\'hotel.search.header.guest\' | translate}}</option>\n                                </select> --><div class="input-group"><span class="input-group-btn"><button ng-click="vm.decreaseAdult(pax)" type="button" class="btn btn-danger btn-number" data-type="minus" data-field="quant[2]"><span class="glyphicon glyphicon-minus"></span></button> </span><input type="text" name="quant[2]" class="form-control input-number" min="1" max="8" ng-model="pax.adultQuantity" ng-change="vm.limitInput($event, pax, \'adultQuantity\', 8)"> <span class="input-group-btn"><button ng-click="vm.increaseAdult(pax)" type="button" class="btn btn-success btn-number" data-type="plus" data-field="quant[2]"><span class="glyphicon glyphicon-plus"></span></button></span></div></div><div class="col-sm-2 control-label" style="vertical-align: middle"><span data-translate="hotel.search.header.children">Tr\u1EBB em:</span></div><div class="col-sm-4"><!-- <select class="form-control" ng-model="pax.childrenNo">\n                                     <option value="{{item}}" ng-repeat="item in [5] | makeRange">{{item}} {{\'hotel.search.header.guest\' | translate}}</option>\n                                </select> --><div class="input-group"><span class="input-group-btn"><button ng-click="vm.decreaseChild(pax)" type="button" class="btn btn-danger btn-number" data-type="minus" data-field="quant[2]"><span class="glyphicon glyphicon-minus"></span></button> </span><input type="text" name="" class="form-control input-number" ng-model="pax.childQuantity" min="1" max="4" ng-change="vm.limitInput($event, pax, \'childQuantity\', 4)"> <span class="input-group-btn"><button ng-click="vm.increaseChild(pax)" type="button" class="btn btn-success btn-number" data-type="plus" data-field="quant[2]"><span class="glyphicon glyphicon-plus"></span></button></span></div></div></div></div></div><div class="col-xs-12 margin-top-10" style="margin-bottom: 10px" ng-show="pax.childQuantity > 0"><div class="col-xs-3 no-margin-left no-padding-left" ng-repeat="item in [pax.childQuantity] | makeRange track by $index"><div><span data-translate="hotel.search.childnge"></span>&nbsp;{{ $index + 1 }}</div><select class="form-control inline-block width-100pc margin-right-15" style="width: 90%" ng-model="pax.childrenAges[$index]"><option value="0">&lt; 1 {{ "hotel.search.header.yrs" | translate }}</option><option ng-repeat="age in vm.ageOptions" value="{{ age }}">{{ age }}</option></select></div></div></div><div class="row" style="margin-top: 10px"><div class="col-xs-6" style="vertical-align: middle;margin-top: 6px" ng-click="vm.addPax();"><span class="text-color3-em hand" data-translate="hotel.search.addroom"></span>&nbsp; <span class="fa fa-plus-circle text-color3 hand"></span></div><div class="col-xs-6"><div class="btn gtd-btn-default pull-right" ng-disabled="roomForm.$invalid" ng-click="vm.cancel();"><span data-translate="hotel.search.done"></span></div></div></div></form></div></div>');
        $templateCache.put('app/account/activate/activate.html', '<div><div class="row"><div class="col-md-8 col-md-offset-2"><h1 data-translate="activate.title">Activation</h1><div class="alert alert-success" ng-show="vm.success" data-translate="activate.messages.success" translate-compile><strong>Your user has been activated.</strong> Please <a class="alert-link" href="" ng-click="vm.login()">sign in</a>.</div><div class="alert alert-danger" ng-show="vm.error" data-translate="activate.messages.error"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');
        $templateCache.put('app/account/password/password.dialog.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="row"><div class="col-md-8 gtd-form" style="margin-top: 30px;margin-bottom: 30px"><div class="form-title text-gtd-3">\u0110\u1ED5i m\u1EADt kh\u1EA9u</div><!--<div class="form-title" data-translate="password.title" translate-values="{username: \'{{vm.account.login}}\'}">Password for [<b>{{vm.account.login}}</b>]</div>--><div style="width: 80%"><div class="alert alert-danger" ng-show="vm.error" data-translate="password.messages.error"><strong>An error has occurred!</strong> The password could not be changed.</div><div class="alert alert-danger" ng-show="vm.doNotMatch" data-translate="global.messages.error.dontmatch">The password and its confirmation do not match!</div><div class="alert alert-danger" ng-show="vm.samePassword" data-translate="global.messages.error.samepass">SamePassowrd!</div><div class="" ng-hide="vm.success"><p><!--Vui l\xF2ng nh\u1EADp m\u1EADt kh\u1EA9u m\u1EDBi c\u1EE7a b\u1EA1n t\u1EA1i \u0111\xE2y--></p></div><div class="" ng-show="vm.success == \'OK\'"><p>M\u1EADt kh\u1EA9u t\xE0i kho\u1EA3n <span class="hand text-color3 text-bold">{{vm.account.login}}</span> \u0111\xE3 \u0111\u01B0\u1EE3c c\u1EADp nh\u1EADt th\xE0nh c\xF4ng.<br>N\u1EBFu b\u1EA1n c\xF3 th\u1EAFc m\xE1c n\xE0o v\u1EC1 Gotadi.com, xin vui l\xF2ng li\xEAn h\u1EC7 b\u1ED9 ph\u1EADn ch\u0103m s\xF3c kh\xE1ch h\xE0ng c\u1EE7a Gotadi v\u1EDBi <b>Hotline 1900 9002</b></p><p><!--\u0110\u0103ng nh\u1EADp t\xE0i kho\u1EA3n. <span class="hand text-color3 text-underlined" ng-click="vm.login()">Click</span>--> <button class="btn gtd-btn-default gtd-btn-medium btn-grey-em" type="button" ng-click="vm.cancel();"><span class="uppercase ng-scope">OK</span></button></p></div></div><form name="form" ng-show="!vm.success" role="form" novalidate ng-submit="vm.changePassword()" show-validation><div class="form-group"><div class="row"><div class="col-md-4"><label for="oldpassword">Nh\u1EADp m\u1EADt kh\u1EA9u c\u0169</label></div><div class="col-md-8 no-padding-left"><input style="width: 250px" type="password" class="form-control" id="oldpassword" name="oldpassword" placeholder="M\u1EADt kh\u1EA9u c\u1EE7a b\u1EA1n" ng-model="vm.oldPassword" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required></div></div><div class="row no-padding-left"><div class="col-md-4 no-padding-left"></div><div class="col-md-8 no-padding-left" ng-show="form.oldpassword.$dirty && form.oldpassword.$invalid"><p class="help-block" ng-show="form.oldpassword.$error.required" data-translate="global.messages.validate.newpassword.required">Your password is required.</p><p class="help-block" ng-show="form.oldpassword.$error.minlength" data-translate="global.messages.validate.newpassword.minlength">Your password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.oldpassword.$error.maxlength" data-translate="global.messages.validate.newpassword.maxlength">Your password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.oldpassword.$error.pattern && !form.oldpassword.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div></div><div class="form-group"><div class="row"><div class="col-md-4"><label for="password" data-translate="global.form.newpassword">New password</label></div><div class="col-md-8 no-padding-left"><input style="width: 250px" type="password" class="form-control" id="password" name="password" placeholder="{{\'global.form.newpassword.placeholder\' | translate}}" ng-model="vm.password" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required></div></div><div class="row no-padding-left"><div class="col-md-4 no-padding-left"></div><div class="col-md-8 no-padding-left" ng-show="form.password.$dirty && form.password.$invalid"><p class="help-block" ng-show="form.password.$error.required" data-translate="global.messages.validate.newpassword.required">Your password is required.</p><p class="help-block" ng-show="form.password.$error.minlength" data-translate="global.messages.validate.newpassword.minlength">Your password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.password.$error.maxlength" data-translate="global.messages.validate.newpassword.maxlength">Your password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.password.$error.pattern && !form.password.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div><!--<password-strength-bar password-to-check="vm.password"></password-strength-bar>--></div><div class="form-group"><div class="row"><div class="col-md-4"><label for="confirmPassword" data-translate="global.form.confirmpassword">New password confirmation</label></div><div class="col-md-8 no-padding-left"><input style="width: 250px" type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="{{\'global.form.confirmpassword.placeholder\' | translate}}" ng-model="vm.confirmPassword" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required></div></div><div class="row no-padding-left"><div class="col-md-4 no-padding-left"></div><div class="col-md-8 no-padding-left" ng-show="form.confirmPassword.$dirty && form.confirmPassword.$invalid"><p class="help-block" ng-show="form.confirmPassword.$error.required" data-translate="global.messages.validate.confirmpassword.required">Your confirmation password is required.</p><p class="help-block" ng-show="form.confirmPassword.$error.minlength" data-translate="global.messages.validate.confirmpassword.minlength">Your confirmation password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.maxlength" data-translate="global.messages.validate.confirmpassword.maxlength">Your confirmation password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.pattern && !form.confirmPassword.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div></div><button type="submit" ng-disabled="form.$invalid" class="btn btn-green-em gtd-btn-small"><span class="fa fa-floppy-o" style="margin-right: 5px"></span> <span data-translate="password.form.button"></span></button> <button class="btn gtd-btn-default gtd-btn-small btn-grey-em" type="button" ng-click="vm.cancel();"><span class="uppercase ng-scope">Hu\u1EF7</span></button></form></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/account/password/password.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="row"><div class="col-md-8 col-md-offset-2 gtd-form"><div class="form-title">\u0110\u1EB7t l\u1EA1i m\u1EADt kh\u1EA9u m\u1EDBi</div><!--<div class="form-title" data-translate="password.title" translate-values="{username: \'{{vm.account.login}}\'}">Password for [<b>{{vm.account.login}}</b>]</div>--><div class="alert alert-danger" ng-show="vm.error" data-translate="password.messages.error"><strong>An error has occurred!</strong> The password could not be changed.</div><div class="alert alert-danger" ng-show="vm.doNotMatch" data-translate="global.messages.error.dontmatch">The password and its confirmation do not match!</div><div class="alert alert-danger" ng-show="vm.samePassword" data-translate="global.messages.error.samepass">SamePassowrd!</div><div class="" ng-hide="vm.success"><p>Vui l\xF2ng nh\u1EADp m\u1EADt kh\u1EA9u m\u1EDBi c\u1EE7a b\u1EA1n t\u1EA1i \u0111\xE2y</p></div><div class="" ng-show="vm.success == \'OK\'"><p>M\u1EADt kh\u1EA9u t\xE0i kho\u1EA3n <span class="hand text-color3 text-bold">{{vm.account.login}}</span> \u0111\xE3 \u0111\u01B0\u1EE3c c\u1EADp nh\u1EADt th\xE0nh c\xF4ng.<br>N\u1EBFu b\u1EA1n c\xF3 th\u1EAFc m\xE1c n\xE0o v\u1EC1 Gotadi.com, xin vui l\xF2ng li\xEAn h\u1EC7 b\u1ED9 ph\u1EADn ch\u0103m s\xF3c kh\xE1ch h\xE0ng c\u1EE7a Gotadi v\u1EDBi <b>Hotline 1900 9002</b></p><p>\u0110\u0103ng nh\u1EADp t\xE0i kho\u1EA3n. <span class="hand text-color3 text-underlined" ng-click="vm.login()">Click</span></p></div><form name="form" ng-show="!vm.success" role="form" novalidate ng-submit="vm.changePassword()" show-validation><div class="form-group"><label class="control-label" for="oldpassword">M\u1EADt kh\u1EA9u hi\u1EC7n t\u1EA1i</label><input style="width: 250px" type="password" class="form-control" id="oldpassword" name="oldpassword" placeholder="M\u1EADt kh\u1EA9u c\u1EE7a b\u1EA1n" ng-model="vm.oldPassword" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required><div ng-show="form.oldpassword.$dirty && form.oldpassword.$invalid"><p class="help-block" ng-show="form.oldpassword.$error.required" data-translate="global.messages.validate.newpassword.required">Your password is required.</p><p class="help-block" ng-show="form.oldpassword.$error.minlength" data-translate="global.messages.validate.newpassword.minlength">Your password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.oldpassword.$error.maxlength" data-translate="global.messages.validate.newpassword.maxlength">Your password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.oldpassword.$error.pattern && !form.oldpassword.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div><div class="form-group"><label class="control-label" for="password" data-translate="global.form.newpassword">New password</label><input style="width: 250px" type="password" class="form-control" id="password" name="password" placeholder="{{\'global.form.newpassword.placeholder\' | translate}}" ng-model="vm.password" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required><div ng-show="form.password.$dirty && form.password.$invalid"><p class="help-block" ng-show="form.password.$error.required" data-translate="global.messages.validate.newpassword.required">Your password is required.</p><p class="help-block" ng-show="form.password.$error.minlength" data-translate="global.messages.validate.newpassword.minlength">Your password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.password.$error.maxlength" data-translate="global.messages.validate.newpassword.maxlength">Your password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.newpassword.$error.pattern && !form.newpassword.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div><!--<password-strength-bar password-to-check="vm.password"></password-strength-bar>--></div><div class="form-group"><label class="control-label" for="confirmPassword" data-translate="global.form.confirmpassword">New password confirmation</label><input style="width: 250px" type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="{{\'global.form.confirmpassword.placeholder\' | translate}}" ng-model="vm.confirmPassword" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required><div ng-show="form.confirmPassword.$dirty && form.confirmPassword.$invalid"><p class="help-block" ng-show="form.confirmPassword.$error.required" data-translate="global.messages.validate.confirmpassword.required">Your confirmation password is required.</p><p class="help-block" ng-show="form.confirmPassword.$error.minlength" data-translate="global.messages.validate.confirmpassword.minlength">Your confirmation password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.maxlength" data-translate="global.messages.validate.confirmpassword.maxlength">Your confirmation password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.pattern && !form.confirmPassword.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div><button type="submit" ng-disabled="form.$invalid" class="btn btn-green-em gtd-btn-medium" data-translate="password.form.button">Save</button> <button class="btn gtd-btn-default gtd-btn-medium btn-grey-em" type="button" ng-click="vm.cancel();"><span class="uppercase ng-scope">Hu\u1EF7</span></button></form></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/account/profile/profile.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content"><div class="row"><form role="form" name="userprofileform" novalidate><div class="col-sm-12"><!-- USER INFO --><gtd-profile-user-info profile-model="vm.profileModel" short-profile="vm.shortProfile"></gtd-profile-user-info><!-- END USER INFO --><!-- DOC INFO --><gtd-profile-doc-info profile-model="vm.profileModel"></gtd-profile-doc-info><!-- END DOC INFO --><!-- INVOICE INFO --><gtd-profile-invoice-info profile-model="vm.profileModel" short-profile="vm.shortProfile"></gtd-profile-invoice-info><!-- END INVOICE INFO --><!-- Action button --><div ng-show="vm.profileModel.mode === \'edit\'"><button class="btn gtd-btn-default gtd-btn-small btn-green" type="submit" ng-click="vm.saveUserInfo(userprofileform)"><span class="uppercase ng-scope">{{\'global.menu.account.profiles.save\'| translate}}</span></button> <button class="btn gtd-btn-default gtd-btn-small btn-grey-em" type="button" ng-click="vm.cancel()"><span class="uppercase ng-scope">{{\'global.menu.account.profiles.cancel\'| translate}}</span></button></div><div ng-show="vm.profileModel.mode === \'view\'"><button id="button" class="btn gtd-btn-default btn-green" type="button" ng-click="vm.profileModel.mode = \'edit\'"><span class="fa fa-pencil-square-o"></span> <span class="uppercase ng-scope">{{\'global.menu.account.profiles.edit\'| translate}}</span></button></div><!-- END Action button --></div></form></div></div><!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/account/profile/profile.membercard.delete.html', '<div class="portlet delete-card-dialog light no-border"><div class="portlet-title"><div class="caption"><span class="caption-subject bold text-gtd-3 uppercase">Xo\xE1 th\u1EBB kh\xE1ch h\xE0ng th\u01B0\u1EDDng xuy\xEAn</span></div></div><div class="portlet-body"><div class="content"><span>B\u1EA1n c\xF3 th\u1EF1c s\u1EF1 mu\u1ED1n x\xF3a th\u1EBB kh\xE1ch h\xE0ng?</span></div><div class="buttons-actions"><div class="btn btn-green" ng-click="vm.submit()"><span class="fa fa-trash"></span><span class="uppercase"> \u0110\u1ED3ng \xFD</span></div><div class="btn btn-grey" ng-click="vm.cancel()"><span class="uppercase">Hu\u1EF7</span></div></div></div></div>');
        $templateCache.put('app/account/register/register.html', '<div class="modal-header login-modal-header"><div class="modal-body bg-login"><div class="row"><div class="col-md-5 login-title"><span class="" data-translate="">\u0110\u0103ng k\xFD th\xE0nh vi\xEAn</span></div><div class="col-md-7"></div></div><div class="row"><div class="alert alert-success" ng-show="vm.success" data-translate="register.messages.success"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class="alert alert-danger" ng-show="vm.error" data-translate="register.messages.error.fail"><strong>Registration failed!</strong> Please try again later.</div><div class="alert alert-danger" ng-show="vm.errorUserExists" data-translate="register.messages.error.userexists"><strong>Login name already registered!</strong> Please choose another one.</div><div class="alert alert-danger" ng-show="vm.errorEmailExists" data-translate="register.messages.error.emailexists"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class="alert alert-danger" ng-show="vm.doNotMatch" data-translate="global.messages.error.dontmatch">The password and its confirmation do not match!</div></div><!--</div>--><div class="row"><div class="col-md-8 col-md-offset-2"><div class="alert alert-danger" ng-show="vm.authenticationError" data-translate="login.messages.error.authentication"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class="col-md-6 content-left"><a href="https://cms.gotadi.com//loi-ich-thanh-vien" style="float:right; color: black; text-decoration: underline" target="_blank" class="text-underlined"><img src="../../../content/images/1x_star-member-icon.png" alt="" style="padding: 10px 4px">Quy\u1EC1n l\u1EE3i th\xE0nh vi\xEAn</a><div style="clear:both"></div><form ng-show="!vm.success" name="form" role="form" novalidate ng-submit="vm.register()" show-validation><div class="form-group"><div class="input-icon"><i class="fa fa-user font-grey"></i> <input type="email" gtd-email class="form-control" id="email" name="email" placeholder="{{\'global.form.email.placeholder\' | translate}}" ng-model="vm.registerAccount.email" ng-minlength="5" ng-maxlength="100" required></div><div ng-show="form.email.$dirty && form.email.$invalid"><p class="help-block" ng-show="form.email.$error.required" data-translate="global.messages.validate.email.required">Your e-mail is required.</p><p class="help-block" ng-show="form.email.$error.email || form.email.$error.emailValidator" data-translate="global.messages.validate.email.invalid">Your e-mail is invalid.</p><p class="help-block" ng-show="form.email.$error.minlength" data-translate="global.messages.validate.email.minlength">Your e-mail is required to be at least 5 characters.</p><p class="help-block" ng-show="form.email.$error.maxlength" data-translate="global.messages.validate.email.maxlength">Your e-mail cannot be longer than 100 characters.</p></div></div><div class="form-group"><div class="input-icon"><i class="fa fa-lock font-grey"></i> <input type="password" class="form-control" id="password" name="password" placeholder="{{\'global.form.newpassword.placeholder\' | translate}}" ng-model="vm.registerAccount.password" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required></div><div ng-show="form.password.$dirty && form.password.$invalid"><p class="help-block" ng-show="form.password.$error.required" data-translate="global.messages.validate.newpassword.required">Your password is required.</p><p class="help-block" ng-show="form.password.$error.minlength" data-translate="global.messages.validate.newpassword.minlength">Your password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.password.$error.maxlength" data-translate="global.messages.validate.newpassword.maxlength">Your password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.password.$error.pattern && !form.password.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div><div class="form-group"><div class="input-icon"><i class="fa fa-lock font-grey"></i> <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="{{\'global.form.confirmpassword.placeholder\' | translate}}" ng-model="vm.confirmPassword" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required></div><div ng-show="form.confirmPassword.$dirty && form.confirmPassword.$invalid"><p class="help-block" ng-show="form.confirmPassword.$error.required" data-translate="global.messages.validate.confirmpassword.required">Your confirmation password is required.</p><p class="help-block" ng-show="form.confirmPassword.$error.minlength" data-translate="global.messages.validate.confirmpassword.minlength">Your confirmation password is required to be at least 4 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.maxlength" data-translate="global.messages.validate.confirmpassword.maxlength">Your confirmation password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.pattern && !form.confirmPassword.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div><div class="form-group"><!--<label for="rememberMe">--> <input type="checkbox" id="rememberMe" ng-model="vm.rememberMe" checked="checked"> <span>Qua vi\u1EC7c \u0111\u0103ng k\xFD t\xE0i kho\u1EA3n, b\u1EA1n \u0111\u1ED3ng \xFD v\u1EDBi c\xE1c <a class="hand text-bold text-underlined" style="color: unset" href="https://cms.gotadi.com/cac-dieu-khoan-su-dung.aspx" target="_blank">\u0110i\u1EC1u Kho\u1EA3n v\xE0 \u0110i\u1EC1u Ki\u1EC7n</a> c\u1EE7a ch\xFAng t\xF4i </span><!--</label>--></div><button type="submit" ng-disabled="form.$invalid || !vm.rememberMe" class="btn btn-green-em"><span data-translate="register.form.button">Register</span> <span class="fa fa-arrow-circle-o-right"></span></button></form><p></p><div class="" ng-hide="vm.success" translate-compile>B\u1EA1n \u0111\xE3 l\xE0 th\xE0nh vi\xEAn ? <a class="register-link" href="" ng-click="vm.login()">\u0110\u0102NG NH\u1EACP</a></div></div><div class="col-md-6"><!--<br/>--><div class="gtd-h3 social-login-header">Ho\u1EB7c \u0111\u0103ng nh\u1EADp v\u1EDBi</div><jh-social ng-provider="facebook" parent="vm.parent"></jh-social><jh-social ng-provider="google" parent="vm.parent"></jh-social><div class="gtd-h6 social-login-footer">- Ch\xFAng t\xF4i s\u1EBD gi\u1EEF th\xF4ng tin c\xE1 nh\xE2n ri\xEAng t\u01B0 c\u1EE7a b\u1EA1n.</div><div class="gtd-h6">- Kh\xF4ng c\xF3 g\xEC \u0111\u01B0\u1EE3c chia s\u1EBB m\xE0 kh\xF4ng c\u1EA7n s\u1EF1 \u0111\u1ED3ng \xFD c\u1EE7a b\u1EA1n.</div><div class="gtd-h6">- Th\u01B0\u1EDFng th\u1EE9c \u0111\u0103ng nh\u1EADp nhanh h\u01A1n.</div><!--<jh-social ng-provider="twitter"></jh-social>--><!-- jhipster-needle-add-social-button --></div></div></div></div>');
        $templateCache.put('app/account/settings/settings.html', '<div><div class="row"><div class="col-md-8 col-md-offset-2"><h2 data-translate="settings.title" translate-values="{username: \'{{vm.settingsAccount.login}}\'}">User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class="alert alert-success" ng-show="vm.success" data-translate="settings.messages.success"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name="form" role="form" novalidate ng-submit="vm.save()" show-validation><div class="form-group"><label class="control-label" for="firstName" data-translate="settings.form.firstname">First Name</label><input type="text" class="form-control" id="firstName" name="firstName" placeholder="{{\'settings.form.firstname.placeholder\' | translate}}" ng-model="vm.settingsAccount.firstName" ng-minlength="1" ng-maxlength="50" required maxlength="50"><div ng-show="form.firstName.$dirty && form.firstName.$invalid"><p class="help-block" ng-show="form.firstName.$error.required" data-translate="settings.messages.validate.firstname.required">Your first name is required.</p><p class="help-block" ng-show="form.firstName.$error.minlength" data-translate="settings.messages.validate.firstname.minlength">Your first name is required to be at least 1 character.</p><p class="help-block" ng-show="form.firstName.$error.maxlength" data-translate="settings.messages.validate.firstname.maxlength">Your first name cannot be longer than 50 characters.</p></div></div><div class="form-group"><label class="control-label" for="lastName" data-translate="settings.form.lastname">Last Name</label><input type="text" class="form-control" id="lastName" name="lastName" placeholder="{{\'settings.form.lastname.placeholder\' | translate}}" ng-model="vm.settingsAccount.lastName" ng-minlength="1" ng-maxlength="50" required maxlength="50"><div ng-show="form.lastName.$dirty && form.lastName.$invalid"><p class="help-block" ng-show="form.lastName.$error.required" data-translate="settings.messages.validate.lastname.required">Your last name is required.</p><p class="help-block" ng-show="form.lastName.$error.minlength" data-translate="settings.messages.validate.lastname.minlength">Your last name is required to be at least 1 character.</p><p class="help-block" ng-show="form.lastName.$error.maxlength" data-translate="settings.messages.validate.lastname.maxlength">Your last name cannot be longer than 50 characters.</p></div></div><div class="form-group"><label class="control-label" for="email" data-translate="global.form.email">Email</label><input type="email" gtd-email class="form-control" id="email" name="email" placeholder="{{\'global.form.email.placeholder\' | translate}}" ng-model="vm.settingsAccount.email" ng-minlength="5" ng-maxlength="100" required maxlength="100"><div ng-show="form.email.$dirty && form.email.$invalid"><p class="help-block" ng-show="form.email.$error.required" data-translate="global.messages.validate.email.required">Your email is required.</p><p class="help-block" ng-show="form.email.$error.email" data-translate="global.messages.validate.email.invalid">Your email is invalid.</p><p class="help-block" ng-show="form.email.$error.minlength" data-translate="global.messages.validate.email.minlength">Your email is required to be at least 5 characters.</p><p class="help-block" ng-show="form.email.$error.maxlength" data-translate="global.messages.validate.email.maxlength">Your email cannot be longer than 100 characters.</p></div></div><div class="form-group"><label for="langKey" data-translate="settings.form.language">Language</label><select id="langKey" name="langKey" class="form-control" ng-model="vm.settingsAccount.langKey" ng-controller="OtaLanguageController as languageVm" ng-options="code as (code | findLanguageFromKey) for code in languageVm.languages"></select></div><button type="submit" ng-disabled="form.$invalid" class="btn btn-primary" data-translate="settings.form.button">Save</button></form></div></div></div>');
        $templateCache.put('app/account/social/social-register.html', '<div><div class="row"><div class="col-md-8 col-md-offset-2"><!--<h1 ng-show="success" data-translate="social.register.title" translate-values="{ label: vm.providerLabel }">Registration with</h1>--><h1 ng-show="error" data-translate="social.register.errorTitle">Registration</h1><!--<div class="alert alert-success" ng-show="vm.success" data-translate="social.register.messages.success">--><!--<strong>Registration saved!</strong> Please check your email for confirmation.--><!--</div>--><div class="alert alert-danger" ng-show="vm.error" data-translate="social.register.messages.error.fail"><strong>Registration failed!</strong> Please try again later.</div><!--<jh-social ng-if="vm.success" ng-provider="{{ vm.provider }}"></jh-social>--><!--<br/>--><!--<div class="alert alert-warning" data-translate="global.messages.info.authenticated">--><!--If you want to <a class="alert-link" href="#/login">sign in</a>--><!--</div>--></div></div></div>');
        $templateCache.put('app/admin/audits/audits.html', '<div><h2 data-translate="audits.title">Audits</h2><div class="row"><div class="col-md-5"><h4 data-translate="audits.filter.title">Filter by date</h4><p class="input-group"><span class="input-group-addon" data-translate="audits.filter.from">from</span> <input type="date" class="input-sm form-control" name="start" ng-model="vm.fromDate" ng-change="vm.onChangeDate()" required> <span class="input-group-addon" data-translate="audits.filter.to">to</span> <input type="date" class="input-sm form-control" name="end" ng-model="vm.toDate" ng-change="vm.onChangeDate()" required></p></div></div><table class="table table-condensed table-striped table-bordered table-responsive"><thead><tr><th ng-click="predicate = \'timestamp\'; reverse=!reverse"><span data-translate="audits.table.header.date">Date</span></th><th ng-click="predicate = \'principal\'; reverse=!reverse"><span data-translate="audits.table.header.principal">User</span></th><th ng-click="predicate = \'type\'; reverse=!reverse"><span data-translate="audits.table.header.status">State</span></th><th ng-click="predicate = \'data.message\'; reverse=!reverse"><span data-translate="audits.table.header.data">Extra data</span></th></tr></thead><tr ng-repeat="audit in vm.audits | filter:filter | orderBy:predicate:reverse" ng-hide="audit.filtered"><td><span>{{audit.timestamp| date:\'medium\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show="audit.data.message">{{audit.data.message}}</span> <span ng-show="audit.data.remoteAddress"><span data-translate="audits.table.data.remoteAddress">Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class="text-center"><uib-pagination class="pagination-sm" total-items="vm.totalItems" ng-model="vm.page" ng-change="vm.loadPage(vm.page)"></uib-pagination></div></div>');
        $templateCache.put('app/admin/configuration/configuration.html', '<div><h2 data-translate="configuration.title">Configuration</h2><span data-translate="configuration.filter">Filter (by prefix)</span> <input type="text" ng-model="filter" class="form-control"><h3 ng-hide="filteredConfig.length === 0">Spring configuration</h3><table class="table table-condensed table-striped table-bordered table-responsive" style="table-layout:fixed" ng-hide="filteredConfig.length === 0"><thead><tr><th ng-click="predicate = \'prefix\'; reverse=!reverse" class="col-sm-4"><span data-translate="configuration.table.prefix">Prefix</span></th><th data-translate="configuration.table.properties" class="col-sm-8">Properties</th></tr></thead><tr ng-repeat="entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)"><td><span>{{entry.prefix}}</span></td><td><div class="row" ng-repeat="(key, value) in entry.properties"><div class="col-md-4">{{key}}</div><div class="col-md-8"><span class="pull-right label label-success break">{{value}}</span></div></div></td></tr></table><div ng-repeat="(key, value) in vm.allConfiguration"><h4 ng-hide="filtered.length === 0"><span>{{key}}</span></h4><table class="table table-condensed table-striped table-bordered table-responsive" style="table-layout:fixed" ng-hide="filtered.length === 0"><thead><tr><th class="col-sm-4">Property</th><th class="col-sm-8">Value</th></tr></thead><tbody><tr ng-repeat="item in filtered = (value | filter:filter)"><td class="break">{{item.key}}</td><td class="break"><span class="pull-right label label-success break">{{item.val}}</span></td></tr></tbody></table></div></div>');
        $templateCache.put('app/admin/gateway/gateway.html', '<div><h2 data-translate="gateway.title">Gateway</h2><h3 data-translate="gateway.routes.title">Current routes</h3><p><button type="button" class="btn btn-primary" ng-click="vm.refresh()" ng-show="vm.updatingRoutes === false"><span class="glyphicon glyphicon-refresh glyphicon-"></span>&nbsp;<span data-translate="gateway.refresh.button">Refresh</span></button> <button type="button" class="btn btn-danger" ng-show="vm.updatingRoutes"><span class="glyphicon glyphicon-refresh"></span>&nbsp;<span data-translate="gateway.refresh.button">Refresh</span></button></p><table class="table table-striped table-responsive"><thead><tr><th data-translate="gateway.routes.url">URL</th><th data-translate="gateway.routes.service">Service</th><th data-translate="gateway.routes.servers">Available servers</th></tr></thead><tr ng-repeat="route in vm.gatewayRoutes"><td>{{route.path}}</td><td>{{route.serviceId}}</td><td><div ng-show="{{route.serviceInstances.length === 0}}" class="label label-danger" data-translate="gateway.routes.error">Warning: no server available!</div><table class="table table-responsive"><tr ng-repeat="instance in route.serviceInstances"><td>{{instance.host}}:{{instance.port}}</td><td ng-show="{{instance.instanceInfo.status === \'UP\'}}"><div class="label label-success">{{instance.instanceInfo.status}}</div></td><td ng-hide="{{instance.instanceInfo.status === \'UP\'}}"><div class="label label-danger">{{instance.instanceInfo.status}}</div></td></tr></table></td></tr></table></div>');
        $templateCache.put('app/admin/docs/docs.html', '<iframe src="swagger-ui/index.html" frameborder="0" marginheight="0" marginwidth="0" width="100%" height="900" scrolling="auto" target="_top" title="Swagger UI"></iframe>');
        $templateCache.put('app/admin/logs/logs.html', '<div class="table-responsive"><h2 data-translate="logs.title">Logs</h2><p data-translate="logs.nbloggers" translate-values="{total: \'{{ vm.loggers.length }}\'}">There are {{ vm.loggers.length }} loggers.</p><span data-translate="logs.filter">Filter</span> <input type="text" ng-model="filter" class="form-control"><table class="table table-condensed table-striped table-bordered"><thead><tr title="click to order"><th ng-click="predicate = \'name\'; reverse=!reverse"><span data-translate="logs.table.name">Name</span></th><th ng-click="predicate = \'level\'; reverse=!reverse"><span data-translate="logs.table.level">Level</span></th></tr></thead><tr ng-repeat="logger in vm.loggers | filter:filter | orderBy:predicate:reverse"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click="vm.changeLevel(logger.name, \'TRACE\')" ng-class="(logger.level==\'TRACE\') ? \'btn-danger\' : \'btn-default\'" class="btn btn-default btn-xs">TRACE</button> <button ng-click="vm.changeLevel(logger.name, \'DEBUG\')" ng-class="(logger.level==\'DEBUG\') ? \'btn-warning\' : \'btn-default\'" class="btn btn-default btn-xs">DEBUG</button> <button ng-click="vm.changeLevel(logger.name, \'INFO\')" ng-class="(logger.level==\'INFO\') ? \'btn-info\' : \'btn-default\'" class="btn btn-default btn-xs">INFO</button> <button ng-click="vm.changeLevel(logger.name, \'WARN\')" ng-class="(logger.level==\'WARN\') ? \'btn-success\' : \'btn-default\'" class="btn btn-default btn-xs">WARN</button> <button ng-click="vm.changeLevel(logger.name, \'ERROR\')" ng-class="(logger.level==\'ERROR\') ? \'btn-primary\' : \'btn-default\'" class="btn btn-default btn-xs">ERROR</button></td></tr></table></div>');
        $templateCache.put('app/admin/health/health.html', '<div><h2 data-translate="health.title">Health Checks</h2><p><button type="button" class="btn btn-primary" ng-click="vm.refresh()"><span class="glyphicon glyphicon-refresh"></span>&nbsp;<span data-translate="health.refresh.button">Refresh</span></button></p><table id="healthCheck" class="table table-striped"><thead><tr><th class="col-md-7" data-translate="health.table.service">Service Name</th><th class="col-md-2 text-center" data-translate="health.table.status">Status</th><th class="col-md-2 text-center" data-translate="health.details.details">Details</th></tr></thead><tbody><tr ng-repeat="health in vm.healthData"><td>{{\'health.indicator.\' + vm.baseName(health.name) | translate}} {{vm.subSystemName(health.name)}}</td><td class="text-center"><span class="label" ng-class="vm.getLabelClass(health.status)">{{\'health.status.\' + health.status | translate}}</span></td><td class="text-center"><a class="hand" ng-click="vm.showHealth(health)" ng-show="health.details || health.error"><i class="glyphicon glyphicon-eye-open"></i></a></td></tr></tbody></table></div>');
        $templateCache.put('app/admin/health/health.modal.html', '<div class="modal-header"><button aria-label="Close" data-dismiss="modal" class="close" type="button" ng-click="vm.cancel()"><span aria-hidden="true">&times;</span></button><h4 class="modal-title" id="showHealthLabel">{{\'health.indicator.\' + vm.baseName(vm.currentHealth.name) | translate}} {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class="modal-body pad"><div ng-show="vm.currentHealth.details"><h4 data-translate="health.details.properties">Properties</h4><table class="table table-striped"><thead><tr><th class="col-md-6 text-left" data-translate="health.details.name">Name</th><th class="col-md-6 text-left" data-translate="health.details.value">Value</th></tr></thead><tbody><tr ng-repeat="(k,v) in vm.currentHealth.details"><td class="col-md-6 text-left">{{k}}</td><td class="col-md-6 text-left">{{v}}</td></tr></tbody></table></div><div ng-show="vm.currentHealth.error"><h4 data-translate="health.details.error">Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class="modal-footer"><button data-dismiss="modal" class="btn btn-default pull-left" type="button" ng-click="vm.cancel()">Done</button></div>');
        $templateCache.put('app/admin/metrics/metrics.html', '<div><h2 data-translate="metrics.title">Application Metrics</h2><p><button type="button" class="btn btn-primary" ng-click="vm.refresh()"><span class="glyphicon glyphicon-refresh"></span>&nbsp;<span data-translate="metrics.refresh.button">Refresh</span></button></p><h3 data-translate="metrics.jvm.title">JVM Metrics</h3><div class="row" ng-hide="vm.updatingMetrics"><div class="col-md-4"><b data-translate="metrics.jvm.memory.title">Memory</b><p><span data-translate="metrics.jvm.memory.total">Total Memory</span> ({{vm.metrics.gauges[\'jvm.memory.total.used\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\'jvm.memory.total.max\'].value / 1000000 | number:0}}M)</p><uib-progressbar min="0" max="vm.metrics.gauges[\'jvm.memory.total.max\'].value" value="vm.metrics.gauges[\'jvm.memory.total.used\'].value" class="progress-striped active" type="success"><span>{{vm.metrics.gauges[\'jvm.memory.total.used\'].value * 100 / vm.metrics.gauges[\'jvm.memory.total.max\'].value | number:0}}%</span></uib-progressbar><p><span data-translate="metrics.jvm.memory.heap">Heap Memory</span> ({{vm.metrics.gauges[\'jvm.memory.heap.used\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\'jvm.memory.heap.max\'].value / 1000000 | number:0}}M)</p><uib-progressbar min="0" max="vm.metrics.gauges[\'jvm.memory.heap.max\'].value" value="vm.metrics.gauges[\'jvm.memory.heap.used\'].value" class="progress-striped active" type="success"><span>{{vm.metrics.gauges[\'jvm.memory.heap.used\'].value * 100 / vm.metrics.gauges[\'jvm.memory.heap.max\'].value | number:0}}%</span></uib-progressbar><p><span data-translate="metrics.jvm.memory.nonheap">Non-Heap Memory</span> ({{vm.metrics.gauges[\'jvm.memory.non-heap.used\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\'jvm.memory.non-heap.committed\'].value / 1000000 | number:0}}M)</p><uib-progressbar min="0" max="vm.metrics.gauges[\'jvm.memory.non-heap.committed\'].value" value="vm.metrics.gauges[\'jvm.memory.non-heap.used\'].value" class="progress-striped active" type="success"><span>{{vm.metrics.gauges[\'jvm.memory.non-heap.used\'].value * 100 / vm.metrics.gauges[\'jvm.memory.non-heap.committed\'].value | number:0}}%</span></uib-progressbar></div><div class="col-md-4"><b data-translate="metrics.jvm.threads.title">Threads</b> (Total: {{vm.metrics.gauges[\'jvm.threads.count\'].value}}) <a class="hand" ng-click="vm.refreshThreadDumpData()" data-toggle="modal" data-target="#threadDump"><i class="glyphicon glyphicon-eye-open"></i></a><p><span data-translate="metrics.jvm.threads.runnable">Runnable</span> {{vm.metrics.gauges[\'jvm.threads.runnable.count\'].value}}</p><uib-progressbar min="0" value="vm.metrics.gauges[\'jvm.threads.runnable.count\'].value" max="vm.metrics.gauges[\'jvm.threads.count\'].value" class="progress-striped active" type="success"><span>{{vm.metrics.gauges[\'jvm.threads.runnable.count\'].value * 100 / vm.metrics.gauges[\'jvm.threads.count\'].value | number:0}}%</span></uib-progressbar><p><span data-translate="metrics.jvm.threads.timedwaiting">Timed Waiting</span> ({{vm.metrics.gauges[\'jvm.threads.timed_waiting.count\'].value}})</p><uib-progressbar min="0" value="vm.metrics.gauges[\'jvm.threads.timed_waiting.count\'].value" max="vm.metrics.gauges[\'jvm.threads.count\'].value" class="progress-striped active" type="warning"><span>{{vm.metrics.gauges[\'jvm.threads.timed_waiting.count\'].value * 100 / vm.metrics.gauges[\'jvm.threads.count\'].value | number:0}}%</span></uib-progressbar><p><span data-translate="metrics.jvm.threads.waiting">Waiting</span> ({{vm.metrics.gauges[\'jvm.threads.waiting.count\'].value}})</p><uib-progressbar min="0" value="vm.metrics.gauges[\'jvm.threads.waiting.count\'].value" max="vm.metrics.gauges[\'jvm.threads.count\'].value" class="progress-striped active" type="warning"><span>{{vm.metrics.gauges[\'jvm.threads.waiting.count\'].value * 100 / vm.metrics.gauges[\'jvm.threads.count\'].value | number:0}}%</span></uib-progressbar><p><span data-translate="metrics.jvm.threads.blocked">Blocked</span> ({{vm.metrics.gauges[\'jvm.threads.blocked.count\'].value}})</p><uib-progressbar min="0" value="vm.metrics.gauges[\'jvm.threads.blocked.count\'].value" max="vm.metrics.gauges[\'jvm.threads.count\'].value" class="progress-striped active" type="success"><span>{{vm.metrics.gauges[\'jvm.threads.blocked.count\'].value * 100 / vm.metrics.gauges[\'jvm.threads.count\'].value | number:0}}%</span></uib-progressbar></div><div class="col-md-4"><b data-translate="metrics.jvm.gc.title">Garbage collections</b><div class="row"><div class="col-md-9" data-translate="metrics.jvm.gc.marksweepcount">Mark Sweep count</div><div class="col-md-3 text-right">{{vm.metrics.gauges[\'jvm.garbage.PS-MarkSweep.count\'].value}}</div></div><div class="row"><div class="col-md-9" data-translate="metrics.jvm.gc.marksweeptime">Mark Sweep time</div><div class="col-md-3 text-right">{{vm.metrics.gauges[\'jvm.garbage.PS-MarkSweep.time\'].value}}ms</div></div><div class="row"><div class="col-md-9" data-translate="metrics.jvm.gc.scavengecount">Scavenge count</div><div class="col-md-3 text-right">{{vm.metrics.gauges[\'jvm.garbage.PS-Scavenge.count\'].value}}</div></div><div class="row"><div class="col-md-9" data-translate="metrics.jvm.gc.scavengetime">Scavenge time</div><div class="col-md-3 text-right">{{vm.metrics.gauges[\'jvm.garbage.PS-Scavenge.time\'].value}}ms</div></div></div></div><div class="well well-lg" ng-show="vm.updatingMetrics" data-translate="metrics.updating">Updating...</div><h3 data-translate="metrics.jvm.http.title">HTTP requests (events per second)</h3><p><span data-translate="metrics.jvm.http.active">Active requests</span> <b>{{vm.metrics.counters[\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\'].count | number:0}}</b> - <span data-translate="metrics.jvm.http.total">Total requests</span> <b>{{vm.metrics.timers[\'com.codahale.metrics.servlet.InstrumentedFilter.requests\'].count | number:0}}</b></p><div class="table-responsive"><table class="table table-striped"><thead><tr><th data-translate="metrics.jvm.http.table.code">Code</th><th data-translate="metrics.jvm.http.table.count">Count</th><th class="text-right" data-translate="metrics.jvm.http.table.mean">Mean</th><th class="text-right"><span data-translate="metrics.jvm.http.table.average">Average</span> (1 min)</th><th class="text-right"><span data-translate="metrics.jvm.http.table.average">Average</span> (5 min)</th><th class="text-right"><span data-translate="metrics.jvm.http.table.average">Average</span> (15 min)</th></tr></thead><tbody><tr><td data-translate="metrics.jvm.http.code.ok">OK</td><td><uib-progressbar min="0" max="vm.metrics.timers[\'com.codahale.metrics.servlet.InstrumentedFilter.requests\'].count" value="vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\'].count" class="progress-striped active" type="success"><span>{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\'].count}}</span></uib-progressbar></td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\'].mean_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\'].m1_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\'].m5_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\'].m15_rate | number:2}}</td></tr><tr><td data-translate="metrics.jvm.http.code.notfound">Not Found</td><td><uib-progressbar min="0" max="vm.metrics.timers[\'com.codahale.metrics.servlet.InstrumentedFilter.requests\'].count" value="vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\'].count" class="progress-striped active" type="success"><span>{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\'].count}}</span></uib-progressbar></td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\'].mean_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\'].m1_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\'].m5_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\'].m15_rate | number:2}}</td></tr><tr><td data-translate="metrics.jvm.http.code.servererror">Server error</td><td><uib-progressbar min="0" max="vm.metrics.timers[\'com.codahale.metrics.servlet.InstrumentedFilter.requests\'].count" value="vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\'].count" class="progress-striped active" type="success"><span>{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\'].count}}</span></uib-progressbar></td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\'].mean_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\'].m1_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\'].m5_rate | number:2}}</td><td class="text-right">{{vm.metrics.meters[\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3 data-translate="metrics.servicesstats.title">Services statistics (time in millisecond)</h3><div class="table-responsive"><table class="table table-striped"><thead><tr><th data-translate="metrics.servicesstats.table.name">Service name</th><th class="text-right" data-translate="metrics.servicesstats.table.count">Count</th><th class="text-right" data-translate="metrics.servicesstats.table.mean">Mean</th><th class="text-right" data-translate="metrics.servicesstats.table.min">Min</th><th class="text-right" data-translate="metrics.servicesstats.table.p50">p50</th><th class="text-right" data-translate="metrics.servicesstats.table.p75">p75</th><th class="text-right" data-translate="metrics.servicesstats.table.p95">p95</th><th class="text-right" data-translate="metrics.servicesstats.table.p99">p99</th><th class="text-right" data-translate="metrics.servicesstats.table.max">Max</th></tr></thead><tbody><tr ng-repeat="(k, v) in vm.servicesStats"><td>{{k}}</td><td class="text-right">{{v.count}}</td><td class="text-right">{{v.mean * 1000 | number:0}}</td><td class="text-right">{{v.min * 1000 | number:0}}</td><td class="text-right">{{v.p50 * 1000 | number:0}}</td><td class="text-right">{{v.p75 * 1000 | number:0}}</td><td class="text-right">{{v.p95 * 1000 | number:0}}</td><td class="text-right">{{v.p99 * 1000 | number:0}}</td><td class="text-right">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3 data-translate="metrics.datasource.title" ng-show="vm.metrics.gauges[\'HikariPool-1.pool.TotalConnections\'].value > 0">DataSource statistics (time in millisecond)</h3><div class="table-responsive" ng-show="vm.metrics.gauges[\'HikariPool-1.pool.TotalConnections\'].value > 0"><table class="table table-striped"><thead><tr><th><span data-translate="metrics.datasource.usage">Usage</span> ({{vm.metrics.gauges[\'HikariPool-1.pool.ActiveConnections\'].value}} / {{vm.metrics.gauges[\'HikariPool-1.pool.TotalConnections\'].value}})</th><th class="text-right" data-translate="metrics.datasource.count">Count</th><th class="text-right" data-translate="metrics.datasource.mean">Mean</th><th class="text-right" data-translate="metrics.datasource.min">Min</th><th class="text-right" data-translate="metrics.datasource.p50">p50</th><th class="text-right" data-translate="metrics.datasource.p75">p75</th><th class="text-right" data-translate="metrics.datasource.p95">p95</th><th class="text-right" data-translate="metrics.datasource.p99">p99</th><th class="text-right" data-translate="metrics.datasource.max">Max</th></tr></thead><tbody><tr><td><div class="progress progress-striped"><uib-progressbar min="0" max="vm.metrics.gauges[\'HikariPool-1.pool.TotalConnections\'].value" value="vm.metrics.gauges[\'HikariPool-1.pool.ActiveConnections\'].value" class="progress-striped active" type="success"><span>{{vm.metrics.gauges[\'HikariPool-1.pool.ActiveConnections\'].value * 100 / vm.metrics.gauges[\'HikariPool-1.pool.TotalConnections\'].value | number:0}}%</span></uib-progressbar></div></td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].count}}</td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].mean | number:2}}</td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].min | number:2}}</td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].p50 | number:2}}</td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].p75 | number:2}}</td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].p95 | number:2}}</td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].p99 | number:2}}</td><td class="text-right">{{vm.metrics.histograms[\'HikariPool-1.pool.Usage\'].max | number:2}}</td></tr></tbody></table></div></div>');
        $templateCache.put('app/admin/metrics/metrics.modal.html', '<!-- Modal used to display the threads dump --><div class="modal-header"><button type="button" class="close" ng-click="vm.cancel()">&times;</button><h4 class="modal-title" data-translate="metrics.jvm.threads.dump.title">Threads dump</h4></div><div class="modal-body pad"><span class="label label-primary" ng-click="threadDumpFilter = {}">All&nbsp;<span class="badge">{{vm.threadDumpAll}}</span></span>&nbsp; <span class="label label-success" ng-click="threadDumpFilter = {threadState: \'RUNNABLE\'}">Runnable&nbsp;<span class="badge">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class="label label-info" ng-click="threadDumpFilter = {threadState: \'WAITING\'}">Waiting&nbsp;<span class="badge">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class="label label-warning" ng-click="threadDumpFilter = {threadState: \'TIMED_WAITING\'}">Timed Waiting&nbsp;<span class="badge">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class="label label-danger" ng-click="threadDumpFilter = {threadState: \'BLOCKED\'}">Blocked&nbsp;<span class="badge">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class="voffset2">&nbsp;</div>Filter <input type="text" ng-model="threadDumpFilter" class="form-control"><div class="row pad" ng-repeat="(k, v) in vm.threadDump | filter:threadDumpFilter"><h5><span class="label" ng-class="vm.getLabelClass(v.threadState)">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click="show = !show"><span ng-show="!show" data-translate="metrics.jvm.threads.dump.show">Show StackTrace</span> <span ng-show="show" data-translate="metrics.jvm.threads.dump.hide">Hide StackTrace</span></a></h5><div class="well" ng-show="show"><div ng-repeat="(stK, stV) in v.stackTrace">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class="voffset1"></span></div></div><table class="table table-condensed"><thead><tr><th class="text-right" data-translate="metrics.jvm.threads.dump.blockedtime">Blocked Time</th><th class="text-right" data-translate="metrics.jvm.threads.dump.blockedcount">Blocked Count</th><th class="text-right" data-translate="metrics.jvm.threads.dump.waitedtime">Waited Time</th><th class="text-right" data-translate="metrics.jvm.threads.dump.waitedcount">Waited Count</th><th data-translate="metrics.jvm.threads.dump.lockname">Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class="modal-footer"><button type="button" class="btn btn-default pull-left" data-dismiss="modal" ng-click="vm.cancel()">Done</button></div>');
        $templateCache.put('app/admin/tracker/tracker.html', '<div><h2 data-translate="tracker.title">Real-time user activities</h2><div class="table-responsive"><table class="table table-striped"><thead><tr><th data-translate="tracker.table.userlogin">User</th><th data-translate="tracker.table.ipaddress">IP Address</th><th data-translate="tracker.table.page">Current page</th><th data-translate="tracker.table.time">Time</th><th></th></tr></thead><tbody><tr ng-repeat="activity in vm.activities"><td>{{activity.userLogin}}</td><td>{{activity.ipAddress}}</td><td>{{activity.page}}</td><td>{{activity.time | date:\'yyyy-MM-dd HH:mm:ss\'}}</td></tr></tbody></table></div></div>');
        $templateCache.put('app/admin/user-management/user-management-delete-dialog.html', '<form name="deleteForm" ng-submit="vm.confirmDelete(vm.user.login)"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="vm.clear()">&times;</button><h4 class="modal-title" data-translate="entity.delete.title">Confirm delete operation</h4></div><div class="modal-body"><jhi-alert-error></jhi-alert-error><p data-translate="userManagement.delete.question" translate-values="{login: \'{{vm.user.login}}\'}">Are you sure you want to delete this User?</p></div><div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal" ng-click="vm.clear()"><span class="glyphicon glyphicon-ban-circle"></span>&nbsp;<span data-translate="entity.action.cancel">Cancel</span></button> <button type="submit" class="btn btn-danger"><span class="glyphicon glyphicon-remove-circle"></span>&nbsp;<span data-translate="entity.action.delete">Delete</span></button></div></form>');
        $templateCache.put('app/admin/user-management/user-management-detail.html', '<div><h2><span data-translate="userManagement.detail.title">User</span> [<b>{{vm.user.login}}</b>]</h2><dl class="dl-horizontal jh-entity-details"><dt><span data-translate="userManagement.login">Login</span></dt><dd><span>{{vm.user.login}}</span> <span class="label label-danger" ng-show="!vm.user.activated" data-translate="userManagement.deactivated">Deactivated</span> <span class="label label-success" ng-show="vm.user.activated" data-translate="userManagement.activated">Activated</span></dd><dt><span data-translate="userManagement.firstName">First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span data-translate="userManagement.lastName">Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span data-translate="userManagement.email">Email</span></dt><dd>{{vm.user.email}}</dd><dt><span data-translate="userManagement.langKey">Lang Key</span></dt><dd>{{vm.user.langKey}}</dd><dt><span data-translate="userManagement.createdBy">Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span data-translate="userManagement.createdDate">Created Date</span></dt><dd>{{vm.user.createdDate | date:\'dd/MM/yy HH:mm\' }}</dd><dt><span data-translate="userManagement.lastModifiedBy">Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span data-translate="userManagement.lastModifiedDate">Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\'dd/MM/yy HH:mm\'}}</dd><dt><span data-translate="userManagement.profiles">Profiles</span></dt><dd><ul class="list-unstyled"><li ng-repeat="authority in vm.user.authorities"><span class="label label-info">{{authority}}</span></li></ul></dd></dl><button type="submit" ui-sref="user-management" class="btn btn-info"><span class="glyphicon glyphicon-arrow-left"></span>&nbsp;<span data-translate="entity.action.back"> Back</span></button></div>');
        $templateCache.put('app/admin/user-management/user-management-dialog.html', '<form name="editForm" role="form" novalidate ng-submit="vm.save()" show-validation><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="vm.clear()">&times;</button><h4 class="modal-title" id="myUserLabel" data-translate="userManagement.home.createOrEditLabel">Create or edit a User</h4></div><div class="modal-body"><jhi-alert-error></jhi-alert-error><div class="form-group" ng-show="vm.user.id"><label data-translate="global.field.id">ID</label><input type="text" class="form-control" name="id" ng-model="vm.user.id" readonly="readonly"></div><div class="form-group"><label class="control-label" data-translate="userManagement.login">Login</label><input type="text" class="form-control" name="login" ng-model="vm.user.login" required ng-minlength="1" ng-maxlength="50" ng-pattern="/^[_\'.@A-Za-z0-9-]*$/"><div ng-show="editForm.login.$invalid"><p class="help-block" ng-show="editForm.login.$error.required" data-translate="entity.validation.required">This field is required.</p><p class="help-block" ng-show="editForm.login.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="50">This field cannot be longer than 50 characters.</p></div></div><div class="form-group"><label class="control-label" data-translate="userManagement.firstName">First Name</label><input type="text" class="form-control" name="firstName" ng-model="vm.user.firstName" ng-maxlength="50"><div ng-show="editForm.firstName.$invalid"><p class="help-block" ng-show="editForm.firstName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="50">This field cannot be longer than 50 characters.</p></div></div><div class="form-group"><label data-translate="userManagement.lastName">Last Name</label><input type="text" class="form-control" name="lastName" ng-model="vm.user.lastName" ng-maxlength="50"><div ng-show="editForm.lastName.$invalid"><p class="help-block" ng-show="editForm.lastName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="50">This field cannot be longer than 50 characters.</p></div></div><div class="form-group"><label class="control-label" data-translate="userManagement.email">Email</label><input type="email" class="form-control" name="email" gtd-email ng-model="vm.user.email" required ng-maxlength="100"><div ng-show="editForm.email.$invalid"><p class="help-block" ng-show="editForm.email.$error.required" data-translate="entity.validation.required">This field is required.</p><p class="help-block" ng-show="editForm.email.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="100">This field cannot be longer than 100 characters.</p><p class="help-block" ng-show="editForm.email.$error.email" data-translate="global.messages.validate.email.invalid">Your email is invalid.</p></div></div><div class="form-group"><label for="activated"><input ng-disabled="vm.user.id === null" type="checkbox" id="activated" name="activated" ng-model="vm.user.activated"> <span data-translate="userManagement.activated">Activated</span></label></div><div class="form-group"><label data-translate="userManagement.langKey">Lang Key</label><select class="form-control" name="langKey" ng-model="vm.user.langKey" ng-options="language as language for language in vm.languages track by language"></select></div><div class="form-group"><label data-translate="userManagement.profiles">Profiles</label><select class="form-control" multiple="multiple" name="authority" ng-model="vm.user.authorities" ng-options="authority for authority in vm.authorities"></select></div></div><div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal" ng-click="vm.clear()"><span class="glyphicon glyphicon-ban-circle"></span>&nbsp;<span data-translate="entity.action.cancel">Cancel</span></button> <button type="submit" ng-disabled="editForm.$invalid || vm.isSaving" class="btn btn-primary"><span class="glyphicon glyphicon-save"></span>&nbsp;<span data-translate="entity.action.save">Save</span></button></div></form>');
        $templateCache.put('app/admin/user-management/user-management.html', '<div><h2 data-translate="userManagement.home.title">Users</h2><jhi-alert></jhi-alert><div class="row"><div class="col-md-4"><button class="btn btn-primary" ui-sref="user-management.new"><span class="glyphicon glyphicon-flash"></span> <span data-translate="userManagement.home.createLabel">Create a new User</span></button></div></div><div class="table-responsive"><table class="jh-table table table-striped"><thead><tr jh-sort="vm.predicate" ascending="vm.reverse" callback="vm.transition()"><th jh-sort-by="id"><span data-translate="global.field.id">ID</span><span class="glyphicon glyphicon-sort"></span></th><th jh-sort-by="login"><span data-translate="userManagement.login">Login</span> <span class="glyphicon glyphicon-sort"></span></th><th jh-sort-by="email"><span data-translate="userManagement.email">Email</span> <span class="glyphicon glyphicon-sort"></span></th><th></th><th jh-sort-by="langKey"><span data-translate="userManagement.langKey">Lang Key</span> <span class="glyphicon glyphicon-sort"></span></th><th><span data-translate="userManagement.profiles">Profiles</span></th><th jh-sort-by="createdDate"><span data-translate="userManagement.createdDate">Created Date</span> <span class="glyphicon glyphicon-sort"></span></th><th jh-sort-by="lastModifiedBy"><span data-translate="userManagement.lastModifiedBy">Last Modified By</span> <span class="glyphicon glyphicon-sort"></span></th><th jh-sort-by="lastModifiedDate"><span data-translate="userManagement.lastModifiedDate">Last Modified Date</span> <span class="glyphicon glyphicon-sort"></span></th><th></th></tr></thead><tbody><tr ng-repeat="user in vm.users track by user.id"><td><a ui-sref="user-management-detail({login:user.login})">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><button class="btn btn-danger btn-xs" ng-click="vm.setActive(user, true)" ng-show="!user.activated" data-translate="userManagement.deactivated">Deactivated</button> <button class="btn btn-success btn-xs" ng-click="vm.setActive(user, false)" ng-show="user.activated" ng-disabled="vm.currentAccount.login === user.login" data-translate="userManagement.activated">Activated</button></td><td>{{user.langKey}}</td><td><div ng-repeat="authority in user.authorities"><span class="label label-info">{{ authority }}</span></div></td><td>{{user.createdDate | date:\'dd/MM/yy HH:mm\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\'dd/MM/yy HH:mm\'}}</td><td class="text-right"><div class="btn-group flex-btn-group-container"><button type="submit" ui-sref="user-management-detail({login:user.login})" class="btn btn-info btn-sm"><span class="glyphicon glyphicon-eye-open"></span> <span class="hidden-xs hidden-sm" data-translate="entity.action.view"></span></button> <button type="submit" ui-sref="user-management.edit({login:user.login})" class="btn btn-primary btn-sm"><span class="glyphicon glyphicon-pencil"></span> <span class="hidden-xs hidden-sm" data-translate="entity.action.edit"></span></button> <button type="submit" ui-sref="user-management.delete({login:user.login})" class="btn btn-danger btn-sm" ng-disabled="vm.currentAccount.login === user.login"><span class="glyphicon glyphicon-remove-circle"></span> <span class="hidden-xs hidden-sm" data-translate="entity.action.delete"></span></button></div></td></tr></tbody></table></div><div class="text-center"><jhi-item-count page="vm.page" total="vm.queryCount" items-per-page="vm.itemsPerPage"></jhi-item-count><uib-pagination class="pagination-sm" total-items="vm.totalItems" ng-model="vm.page" ng-change="vm.transition()"></uib-pagination></div></div>');
        $templateCache.put('app/components/booking/booking-flight-info-details.html', '<div class="portlet"><div class="portlet-body"><!-- BEGIN FORM--><div class="booking-flight-info-wrapper"><table class="flight-table"><tr class="flight-table-row" gtd-popover gtd-template-path="app/components/flight/flight-detail-view.html" argument="$ctrl.bookingModel.departGroupItem" argument2="$ctrl.bookingModel.departPricedItinerary" ng-click="$ctrl.departFlightModel.expand = !$ctrl.departFlightModel.expand"><td class="flight-table-cell1">V\xE9 m\u1ED9t chi\u1EC1u,</td><td class="flight-table-cell2"><span class="loc-text">{{$ctrl.bookingModel.departGroupItem.originLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.departGroupItem.originLocationCode}})</span></td><td class="flight-table-cell3"><span class="fa fa-long-arrow-right"></span></td><td class="flight-table-cell4"><span class="loc-text">{{$ctrl.bookingModel.departGroupItem.destinationLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.departGroupItem.destinationLocationCode}})</span></td><td class="flight-table-cell5">{{$ctrl.bookingModel.departGroupItem.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate}}</td><td class="flight-table-cell6"><ng-switch on="$ctrl.departFlightModel.expand==true"><span class="fa fa-angle-down" ng-switch-when="false"></span> <span class="fa fa-angle-up" ng-switch-when="true"></span></ng-switch></td></tr></table><div class="change-flight-zone">Thay \u0111\u1ED5i h\xE0nh tr\xECnh</div><ng-switch on="$ctrl.isAuthenticated()"><div class="login-zone-wrapper" ng-switch-when="false"><table class="login-zone"><tr class="login-zone-row" ng-click="$ctrl.openLogin()"><td><span class="login-icon fa fa-user"></span> <span class="login-link">\u0110\u0103ng nh\u1EADp,&nbsp;</span> <span class="login-text">\u0111\u1EC3 h\u01B0\u1EDFng nhi\u1EC1u khuy\u1EBFn m\xE3i v\xE0 quy\u1EC1n l\u1EE3i khi s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a b\u1EA1n.</span></td><td class="login-expand-icon"><span class="fa fa-angle-down"></span></td></tr></table></div></ng-switch></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/booking/booking-flight-info.html', '<div class="portlet"><div class="portlet-body"><!-- BEGIN FORM--><div class="booking-flight-info-wrapper"><table class="flight-table"><tr class="flight-table-row" data-toggle="collapse" href="#collapseOne" aria-controls="collapseOne" ng-click="$ctrl.departFlightModel.expand = !$ctrl.departFlightModel.expand"><td class="flight-table-cell1"><span ng-show="$ctrl.searchOptions.searchType == \'oneway\'">V\xE9 m\u1ED9t chi\u1EC1u, </span><span ng-show="$ctrl.searchOptions.searchType != \'oneway\'">V\xE9 chi\u1EC1u \u0111i,</span></td><td class="flight-table-cell2"><span class="loc-text">{{$ctrl.bookingModel.departGroupItem.originLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.departGroupItem.originLocationCode}})</span></td><td class="flight-table-cell3"><span class="fa fa-long-arrow-right"></span></td><td class="flight-table-cell4"><span class="loc-text">{{$ctrl.bookingModel.departGroupItem.destinationLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.departGroupItem.destinationLocationCode}})</span></td><td class="flight-table-cell5">{{$ctrl.bookingModel.departPricedItinerary.originDestinationOptions[0].originDateTime | momentdate:\'date\' | capitalize}}</td><td class="flight-table-cell6"><ng-switch on="$ctrl.departFlightModel.expand==true"><span class="fa fa-angle-down" ng-switch-when="false" data-toggle="collapse" href="#collapseOne" aria-controls="collapseOne"></span> <span class="fa fa-angle-up" ng-switch-when="true" data-toggle="collapse" href="#collapseOne" aria-controls="collapseOne"></span></ng-switch></td></tr></table><div id="collapseOne" class="panel-collapse collapse"><div class="panel-body" gtd-collapse-click gtd-template-path="app/components/flight/flight-detail-view.html" argument="$ctrl.bookingModel.departGroupItem" argument2="$ctrl.bookingModel.departPricedItinerary" argument4="{{$ctrl.searchOptions.dtype}}" ibe-keys="ibeKeys"></div></div></div><!-- END FORM--></div></div><ng-switch on="$ctrl.searchOptions.searchType != \'oneway\'"><div class="portlet" ng-switch-when="true"><div class="portlet-body"><!-- BEGIN FORM--><div class="booking-flight-info-wrapper"><table class="flight-table"><tr class="flight-table-row" data-toggle="collapse" href="#collapseReturn" aria-controls="collapseReturn" ng-click="$ctrl.returnFlightModel.expand = !$ctrl.returnFlightModel.expand"><td class="flight-table-cell1">V\xE9 chi\u1EC1u v\u1EC1,</td><td class="flight-table-cell2"><span ng-if="$ctrl.searchOptions.dtype == \'domestic\'"><span class="loc-text">{{$ctrl.bookingModel.returnGroupItem.originLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.returnGroupItem.originLocationCode}})</span> </span><span ng-if="$ctrl.searchOptions.dtype == \'international\'"><span class="loc-text">{{$ctrl.bookingModel.returnPricedItinerary.originDestinationOptions[1].originLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.returnPricedItinerary.originDestinationOptions[1].originLocationCode}})</span></span></td><td class="flight-table-cell3"><span class="fa fa-long-arrow-right"></span></td><td class="flight-table-cell4"><span ng-if="$ctrl.searchOptions.dtype == \'domestic\'"><span class="loc-text">{{$ctrl.bookingModel.returnGroupItem.destinationLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.returnGroupItem.destinationLocationCode}})</span> </span><span ng-if="$ctrl.searchOptions.dtype == \'international\'"><span class="loc-text">{{$ctrl.bookingModel.returnPricedItinerary.originDestinationOptions[1].destinationLocationCode | airport:\'city\'}} </span><span>&nbsp;({{$ctrl.bookingModel.returnPricedItinerary.originDestinationOptions[1].destinationLocationCode}})</span></span></td><td class="flight-table-cell5"><span ng-if="$ctrl.searchOptions.dtype == \'domestic\'">{{$ctrl.bookingModel.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'date\' | capitalize}}</span> <span ng-if="$ctrl.searchOptions.dtype == \'international\'">{{$ctrl.bookingModel.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].departureDateTime | momentdate:\'date\' | capitalize}}</span></td><td class="flight-table-cell6"><ng-switch on="$ctrl.returnFlightModel.expand==true"><span class="fa fa-angle-down" ng-switch-when="false" data-toggle="collapse" href="#collapseReturn" aria-controls="collapseReturn"></span> <span class="fa fa-angle-up" ng-switch-when="true" data-toggle="collapse" href="#collapseReturn" aria-controls="collapseReturn"></span></ng-switch></td></tr></table><div id="collapseReturn" class="panel-collapse collapse"><div class="panel-body" gtd-collapse-click gtd-template-path="app/components/flight/flight-detail-view.html" argument="$ctrl.bookingModel.returnGroupItem" argument2="$ctrl.bookingModel.returnPricedItinerary" argument3="{{$ctrl.searchOptions.dtype}}-return" argument4="{{$ctrl.searchOptions.dtype}}" ibe-keys="ibeKeys"></div></div></div><!-- END FORM--></div></div></ng-switch><div class="portlet"><div class="portlet-body"><div class="booking-flight-info-wrapper"><div class="change-flight-zone" ng-show="$ctrl.showChangeFlight != \'false\'" ng-click="$ctrl.changeFlight(1);">{{\'global.menu.booking.change\' |translate}}</div></div></div></div><!-- <div class="portlet">\n    <div class="portlet-body">\n        <div class="booking-flight-info-wrapper">\n            <ng-switch on="$ctrl.isAuthenticated()">\n                <div class="login-zone-wrapper" ng-switch-when="false"\n                    ng-show="$ctrl.searchOptions.searchType == \'oneway\' && $ctrl.notShowLoginSection != \'true\'"\n                >\n                    <table class="login-zone">\n                        <tr class="login-zone-row" ng-click="$ctrl.openLogin()">\n                            <td>\n                                <span class="login-icon fa fa-user"></span>\n                                <span class="login-link">\u0110\u0103ng nh\u1EADp,&nbsp;</span>\n                                <span class="login-text">\u0111\u1EC3 h\u01B0\u1EDFng nhi\u1EC1u khuy\u1EBFn m\xE3i v\xE0 quy\u1EC1n l\u1EE3i khi s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a b\u1EA1n.</span>\n                            </td>\n                            <td class="login-expand-icon"><span class="fa fa-angle-down"></span></td>\n                        </tr>\n                    </table>\n                </div>\n            </ng-switch>\n        </div>\n    </div>\n</div> -->');
        $templateCache.put('app/components/booking/booking-hotel-info.html', '<div class="portlet"><div class="portlet-body"><!-- BEGIN FORM--><div class="booking-hotel-info-wrapper hotel-border-radius bg-white hotel-border"><div class="col-xs-12 no-padding-left no-padding-right hotel-name"><div class="hotel-image hotel-image-rs hidden-lg"><img class="hotel-image-icon" src="{{$ctrl.selectedHotel.hotelMeta.image}}"></div><div class="item-name-hotel"><span class="hotel-name-text text-bold">{{$ctrl.selectedHotel.hotelMeta.name}}</span>&nbsp;<!--<span class="hotel-name-icon fa fa-star"></span>--> <span class="hotel-name-icon fa fa-star" ng-repeat="i in [$ctrl.selectedHotel.hotelMeta.stars] | makeRange"></span> <span class="hotel-name-icon fa fa-star fa-star-half-o" ng-repeat="i in [$ctrl.selectedHotel.hotelMeta.stars] | halfRange"></span></div><div class="no-padding-left hotel-location" style="margin-bottom: 20px"><!--<span class="fa fa-map-marker"></span>--> <img src="content/images/location-on-map.png" class="fa-image-icon">&nbsp; <span>{{$ctrl.selectedHotel.hotelMeta.address}}</span></div></div><div class="hotel-table"><div class="row"><div class="col-sm-3 hidden-md hidden-sm hidden-xs"><div class="hotel-image" style="height: unset"><img class="hotel-image-icon" src="{{$ctrl.selectedHotel.hotelMeta.image}}" style="width:90%"></div></div><div class="col-sm-9 no-padding-left"><div class="row no-margin-left"><div class="col-xs-4 label-info-hotel">{{\'hotel.search.result.address\' | translate}}</div><div class="col-xs-8">{{$ctrl.selectedHotel.hotelMeta.address}}</div></div><div class="row no-margin-left"><div class="col-xs-4 label-info-hotel">{{\'hotel.search.header.checkindate\' | translate}}</div><div class="col-xs-8">{{$ctrl.selectedHotel.checkIn | momentdate : \'\' : \'DD-MM-YYYY\'}} : {{$ctrl.selectedHotel.hotelMeta.checkIn}} <a data-toggle="modal" data-target="#checkInModal"><span class="fa fa-question-circle text-gtd-3"></span></a></div></div><div class="row no-margin-left"><div class="col-xs-4 label-info-hotel">{{\'hotel.search.header.checkoutdate\' | translate}}</div><div class="col-xs-8">{{$ctrl.selectedHotel.checkOut | momentdate : \'\' : \'DD-MM-YYYY\'}} : {{$ctrl.selectedHotel.hotelMeta.checkOut}}</div></div><div class="row no-margin-left"><div class="col-xs-4 label-info-hotel">{{\'hotel.search.header.room\' | translate}}</div><div class="col-xs-8" ng-repeat="room in $ctrl.selectedHotel.products"><!--class="room-type-link hand"--> {{$ctrl.selectedHotelProduct.rooms.length}} <span gtd-popover gtd-template-path="app/components/hotel/hotel-detail-view.html">{{room.roomDescription}}</span></div></div><div class="row no-margin-left"><div class="col-xs-4 label-info-hotel">{{\'hotel.search.header.detail\' | translate}}</div><div class="col-xs-8">{{$ctrl.selectedHotelProduct.totalAdultQuantity}} {{\'hotel.search.header.adult\' | translate}}, {{$ctrl.selectedHotelProduct.totalPerson - $ctrl.selectedHotelProduct.totalAdultQuantity}} {{\'hotel.search.header.children\' | translate}}</div></div></div></div></div><!--<div class="hotel-features-icons">--><!--<span class="hotel-feature-icon" >--><!--<img src="../../../content/images/hotel-free-wifi-icon.png"/>--><!--&nbsp; Free Wifi--><!--</span>--><!--<span class="hotel-feature-icon" >--><!--<img src="../../../content/images/hotel-free-gym-icon.png"/>--><!--&nbsp; C\xF3 h\u1ED3 b\u01A1i--><!--</span>--><!--</div>--></div><!-- END FORM--></div></div><div class="portlet"><div class="portlet-body"><!-- BEGIN FORM--><div class="booking-hotel-info-wrapper hotel-border hotel-border-radius"><!--<div class="col-xs-12 no-padding-left hotel-name">--><div style="cursor: pointer" data-toggle="modal" data-target="#hotel-booking-terms"><span data-translate="hotel.booking.terms1.text"></span><!--<span class="fa fa-info-circle text-gtd-3"></span>--> &nbsp;<!-- <a ui-sref="hotel-booking-terms" target="_blank">\n                    <span class="fa fa-info-circle text-gtd-3"></span>\n                </a> --> <span class="fa fa-info-circle text-gtd-3"></span></div><div id="hotel-booking-terms" class="modal fade" role="dialog"><div class="modal-dialog"><!-- Modal content--><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal">&times;</button><h4 class="modal-title"><strong>{{\'hotel.view.term\' | translate}}</strong></h4></div><div class="modal-body"><p>{{\'hotel.view.with\' | translate}}</p><p>{{\'hotel.view.in\' | translate}}</p><p>{{\'hotel.view.room\' | translate}}</p><p>{{\'hotel.view.rate\' | translate}}</p></div><div class="modal-footer"><button type="button" class="btn btn-success" data-dismiss="modal">{{\'hotel.search.result.close\' | translate}}</button></div></div></div></div></div><!-- END FORM--></div></div><div class="portlet"><div class="portlet-body"><div class="booking-flight-info-wrapper"><ng-switch on="$ctrl.isAuthenticated()"><div class="login-zone-wrapper" ng-switch-when="false"><table class="login-zone"><tr class="login-zone-row" ng-click="$ctrl.openLogin()"><td><span class="login-icon fa fa-user"></span> <span class="login-link">{{\'flight.search.result.login\'| translate}},&nbsp;</span> <span class="login-text">{{\'flight.search.result.enjoy\'| translate}}.</span></td><td class="login-expand-icon"><span class="fa fa-angle-down"></span></td></tr></table></div></ng-switch></div></div></div><div id="checkInModal" class="modal fade" tabindex="-1" role="dialog"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">{{\'hotel.search.result.checkin\' | translate}}</h4></div><div class="modal-body"><div class="label-title text-gtd-3" ng-if="$ctrl.selectedHotel.checkInInstructions"><b>{{\'hotel.search.result.check-in-instructions\' | translate}}</b></div><div class="label-content" ng-bind-html="$ctrl.selectedHotel.checkInInstructions"></div><br><div class="label-title text-gtd-3" ng-if="$ctrl.selectedHotel.specialCheckInInstructions"><b>{{\'hotel.search.result.special-check-in-instructions\' | translate}}</b></div><div class="label-content" ng-bind-html="$ctrl.selectedHotel.specialCheckInInstructions"></div></div><div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal">Close</button></div></div><!-- /.modal-content --></div><!-- /.modal-dialog --></div><!-- /.modal -->');
        $templateCache.put('app/components/booking/booking-important-info.html', '<div class="portlet light flight-booking-contact-info hotel-border hotel-border-radius"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span style="font-size: 18px" data-translate="hotel.booking.importantinfo.title"></span></span></div></div><div class="portlet-body form"><!-- BEGIN FORM--><div class="form-body"><div><span ng-bind-html="$ctrl.selectedHotelProduct.policyString"></span></div><p ng-show="$ctrl.selectedHotelProduct.policyString"></p><div class="mt-checkbox-list"><label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px"><input type="checkbox" value="1" name="checkedTerm" class="checkedRuleVJ" ng-model="$ctrl.checkedTerm" , ng-change="$ctrl.termCheckedChanged()"> <span></span></label><span style="margin-left: 30px" data-translate="hotel.booking.importantinfo.text2"></span> <a style="cursor: pointer" ng-click="$ctrl.redirectToTerm()"><span class="text-underlined text-decoration-gtd-3em text-gtd-3-em" data-translate="hotel.booking.importantinfo.text3"></span></a></div></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/booking/booking-payment.html', '<div ng-if="$ctrl.paymentModel.paymentPromo" class="portlet" ng-class="{\'light\': $ctrl.paymentModel.airView}"><div class="portlet-title"><div class="caption" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.payment.title-promo"></span></span></div></div><div class="portlet-body" ng-class="{\'is-mobile-app\': $ctrl.paymentModel.isMobileApp}"><div class="payment-wrapper"><table class="payment-item table" ng-repeat="promo in $ctrl.paymentModel.paymentPromo" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true && promo.promotionType == \'CREDIT_CARD\'" ng-show="(promo.discountValueType == \'FIXED\' && promo.discountAmount < $ctrl.bookingModel.bookingInfo.displayPriceInfo.totalFare) || promo.discountValueType == \'PERCENT\'" ng-switch="$ctrl.selectTypePayment == \'_{{promo.id}}\'"><tr class="table-row"><td class="radio-zone table-cell radio" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><input ng-change="$ctrl.changePromotion()" type="radio" id="payment_option_credit_promo_{{promo.id}}" name="payment_option" ng-model="$ctrl.selectTypePayment" value="_{{promo.id}}" required><label for="payment_option_credit_promo_{{promo.id}}" class="radio-label"></label></td><td class="logo table-cell bg-white"><div class="logoGr"><img src="../../../content/images/payment/visa-pay.png"></div></td><td class="table-cell bg-white seperator-zone"><div class="seperator"></div></td><td class="item-detail-zone table-cell bg-white"><div class="item-header"><span>{{promo.description}} <span data-translate="global.menu.textPromo"></span> {{promo.discountAmount | number}}</span><span ng-if="promo.discountValueType == \'PERCENT\'">%</span><span ng-if="promo.discountValueType != \'PERCENT\'">VND</span></div></td></tr><tr class="table-row" ng-switch-when="true"><td class="radio-zone table-cell" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"></td><td colspan="4" class="child-zone bg-white"><form role="form" name="cardForm" novalidate><div class="form-body"><div class="col-sm-12 padding-left-15"><div class="form-group col-sm-12 no-padding-left" ng-repeat="item in $ctrl.creditCards"><div class="inline-block padding-right-10"><input type="radio" class="inline-block" required ng-model="$ctrl.paymentModel.cardModel.chosenCardNumber" ng-change="$ctrl.selectedCardChanged(item)" value="{{item.cardNumber}}"></div><div class="inline-block card-icon"><img class="inline-block" ng-src="{{\'../../../../content/images/card-\' + item.type + \'.png\'}}"></div><div class="inline-block"><span>{{item.cardNumber | cc}}</span></div></div><div class="form-group col-sm-8 no-padding-left" ng-switch="$ctrl.paymentModel.cardModel.chosenCardNumber == -1"><div class="col-sm-12 no-padding-left"><div class="inline-block padding-right-10"><input type="radio" checked="checked" required ng-model="$ctrl.paymentModel.cardModel.chosenCardNumber" ng-change="$ctrl.selectedCardChanged(item)" value="-1" class="inline-block"></div><span data-translate="flight.booking.payment.addcard">Nh\u1EADp s\u1ED1 th\u1EBB m\u1EDBi </span><span><img src="../../../../content/images/card-VISA.png"> <img src="../../../../content/images/card-MASTER.png"> <img src="../../../../content/images/card-JCB.png"></span></div><div class="col-sm-9 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" name="cardNumber" placeholder="{{\'flight.plchdr.card\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.cardNumber" cc-number ng-maxlength="40" ng-pattern="/^[0-9]{1,40}$/" required><div class="error" ng-show="(cardForm.$submitted || cardForm.cardNumber.$touched) && cardForm.cardNumber.$invalid"><p class="help-block" ng-show="cardForm.cardNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.cardNumber.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="40"></p><p class="help-block" ng-show="cardForm.cardNumber.$error.ccNumberType" data-translate="entity.validation.card"></p></div></div><div class="col-sm-3 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="CVV" ng-model="$ctrl.paymentModel.cardModel.cvNumber" ng-pattern="/^[0-9]/" ng-minlength="3" ng-maxlength="4" cc-cvc name="cvNumber" required><div class="error" ng-show="(cardForm.$submitted || cardForm.cvNumber.$touched) && cardForm.cvNumber.$invalid"><p class="help-block" ng-show="cardForm.cvNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="!cardForm.cvNumber.$error.required" data-translate="entity.validation.format"></p></div></div><div class="col-sm-9 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.namecard\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.fullName" gtd-no-special-char name="fullName" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.fullName.$touched) && cardForm.fullName.$invalid"><p class="help-block" ng-show="cardForm.fullName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.fullName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-3 no-padding-left margin-top-15 {{$ctrl.dateCardClass}}" ng-switch-when="true"><input type="text" class="form-control {{$ctrl.classValid}}" placeholder="mm/yy" name="expireMonthYear" ng-model="$ctrl.monthYear" maxlength="5" ng-keypress="$ctrl.keyPressed($event)" ng-change="$ctrl.expireMonthYear()"></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><span>Billing Address</span></div><!-- show selection choose save passenger --><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><select ng-if="$ctrl.isAuthenticated() == true" class="form-control" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in ($ctrl.customerTravellers | traveller:\'ADT\') track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseContact(item)"><option value="">{{\'flight.booking.info.custinfo.save\' |translate}}</option></select></div><div class="col-sm-6 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.familyname\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.firstName" name="firstName" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.firstName.$touched) && cardForm.firstName.$invalid"><p class="help-block" ng-show="cardForm.firstName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.firstName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-6 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.name2\' | translate}}" ng-maxlength="100" ng-model="$ctrl.paymentModel.cardModel.lastName" name="lastName" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.lastName.$touched) && cardForm.lastName.$invalid"><p class="help-block" ng-show="cardForm.lastName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.lastName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.address\' | translate}}" ng-maxlength="150" ng-model="$ctrl.paymentModel.cardModel.address" name="address" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.address.$touched) && cardForm.address.$invalid"><p class="help-block" ng-show="cardForm.address.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.address.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true" ng-init="$ctrl.paymentModel.cardModel.country= (!$ctrl.paymentModel.cardModel.country)?\'vn\':($ctrl.paymentModel.cardModel.country)"><select class="form-control" placeholder="Qu\u1ED1c gia" ng-model="$ctrl.paymentModel.cardModel.country" name="country" required><option ng-repeat="country in $ctrl.allCountries" value="{{country.code}}">{{country.name}}</option></select><div class="error" ng-show="(cardForm.$submitted || cardForm.country.$touched) && cardForm.country.$invalid"><p class="help-block" ng-show="cardForm.country.$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.city\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.city" name="city" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.city.$touched) && cardForm.city.$invalid"><p class="help-block" ng-show="cardForm.city.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.state.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="State" ng-model="$ctrl.paymentModel.cardModel.state" name="state" ng-maxlength="240"></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="Postal Code" ng-model="$ctrl.paymentModel.cardModel.postalCode" name="postalCode" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.postalCode.$touched) && cardForm.postalCode.$invalid"><p class="help-block" ng-show="cardForm.postalCode.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.postalCode.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="Email" ng-model="$ctrl.paymentModel.cardModel.email" gtd-email name="email" ng-maxlength="120" required><div class="error" ng-show="(cardForm.$submitted || cardForm.email.$touched) && cardForm.email.$invalid"><p class="help-block" ng-show="cardForm.email.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.email.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p><p class="help-block" ng-show="cardForm.email.$error.email" data-translate="entity.validation.email"></p><p class="help-block" ng-show="cardForm.email.$error.emailValidator" data-translate="entity.validation.email"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.phoneNumber" gtd-phone name="phoneNumber" required><div class="error" ng-show="(cardForm.$submitted || cardForm.phoneNumber.$touched) && cardForm.phoneNumber.$invalid"><p class="help-block" ng-show="cardForm.phoneNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.phoneNumber.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20"></p><p class="help-block" ng-show="cardForm.phoneNumber.$error.phoneValidator" data-translate="entity.validation.phoneValidator"></p></div></div><!--\n                                        <div class="col-sm-12 form-group no-padding-left margin-top-15" ng-if="$ctrl.isAuthenticated() == true"\n                                             ng-switch-when="true">\n                                            <div class="mt-checkbox-list">\n                                                <label class="mt-checkbox mt-checkbox-outline"> {{\'flight.booking.payment.add\' | translate}}\n                                                    <input type="checkbox" value="1" name="test" ng-model="$ctrl.paymentModel.cardModel.checked">\n                                                    <span></span>\n                                                </label>\n                                            </div>\n                                        </div>\n                                        <div class="col-md-12 save-message"><span>{{\'flight.booking.payment.save-message\' | translate}}</span></div>\n                                        --></div><div class="form-group col-sm-4"><img src="../../../../content/images/cardccv.png" class="img-responsive"></div></div><div class="error col-md-12" ng-show="$ctrl.wrongPromo"><p class="help-block" ng-show="$ctrl.wrongPromo">Th\u1EBB thanh to\xE1n c\u1EE7a b\u1EA1n kh\xF4ng \u0111\u01B0\u1EE3c h\u1ED5 tr\u1EE3 ch\u01B0\u01A1ng tr\xECnh khuy\u1EBFn m\xE3i n\xE0y</p></div></div></form></td></tr></table><div ng-class="{\'light\': $ctrl.paymentModel.airView}" class="row promosionAirShow" ng-if="$ctrl.bookingModel.bookingInfo.transactionInfos[0].supplierType == \'AIR\'"><div class="AnotherPromo"><span ng-click="$ctrl.open()" class="promotionSelect" data-translate="flight.booking.payment.anotherpromo">Ch\u1ECDn h\xECnh th\u1EE9c khuy\u1EBFn m\xE3i kh\xE1c</span></div><div class="stardust-button" ng-model="$ctrl.selectAirpromotion" ng-if="$ctrl.promotionAirName">Khuy\u1EBFn m\xE3i \u0111ang ch\u1ECDn: <span style="font-weight: bold">{{$ctrl.promotionAirName}} <span data-translate="global.menu.textPromo"></span> {{$ctrl.disAmount}}</span> <span ng-if="$ctrl.discountvalue == \'PERCENT\'">%</span> <span class="pull-right deleteAirpromo" ng-click="$ctrl.deletePromoAir();"><i class="fa fa-close"></i></span></div></div></div><!-- END FORM--></div></div><div class="portlet" ng-class="{\'light\': $ctrl.paymentModel.airView}"><div class="portlet-title"><div class="caption" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.payment.title"></span></span></div></div><div class="portlet-body" ng-class="{\'is-mobile-app\': $ctrl.paymentModel.isMobileApp}"><!-- BEGIN FORM--><div class="payment-wrapper"><table class="payment-item table" ng-show="$ctrl.listPaymentType.indexOf(\'BALANCE\') >-1" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true &&\n            \t((!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false) || ($ctrl.paymentModel.isMobileApp == true && $ctrl.paymentModel.paymentOption == \'BALANCE\'))" ng-switch="$ctrl.selectTypePayment == \'BALANCE\'" has-authority="ROLE_B2B"><tr class="table-row"><td class="radio-zone table-cell radio" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_balance" name="payment_option" ng-model="$ctrl.selectTypePayment" value="BALANCE" required><label for="payment_option_balance" class="radio-label"></label></td><td class="logo table-cell bg-white"><div class="logoGr"><img src="../../../content/images/american-dollar-symbol.png"></div></td><td class="table-cell bg-white seperator-zone"><div class="seperator"></div></td><td class="item-detail-zone table-cell bg-white"><div class="item-header"><span data-translate="flight.booking.payment.balance-header"></span></div><div class="item-content"><span data-translate="flight.booking.payment.balance-content"></span></div></td></tr><tr class="table-row" ng-switch-when="true"><td class="radio-zone table-cell" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"></td><td colspan="3" class="child-zone bg-white"><div class="child-wrapper"><div class="child-title no-margin-bottom gtd-h6"><span data-translate="flight.booking.payment.balance-content"></span></div></div></td></tr></table><table class="payment-item table" ng-show="$ctrl.listPaymentType.indexOf(\'CREDIT\') >-1" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true &&\n            \t((!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false) || ($ctrl.paymentModel.isMobileApp == true && $ctrl.paymentModel.paymentOption == \'CREDIT\'))" ng-switch="$ctrl.selectTypePayment == \'CREDIT\'"><tr class="table-row"><td class="radio-zone table-cell radio" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_credit" name="payment_option" ng-model="$ctrl.selectTypePayment" value="CREDIT" required><label for="payment_option_credit" class="radio-label"></label></td><td class="logo table-cell bg-white"><div class="logoGr"><img src="../../../content/images/payment/visa-pay.png"></div></td><td class="table-cell bg-white seperator-zone"><div class="seperator"></div></td><td class="item-detail-zone table-cell bg-white"><div class="item-header"><span data-translate="flight.booking.payment.visa-header"></span></div><div class="item-content"><span data-translate="flight.booking.payment.visa-content"></span></div></td></tr><tr class="table-row" ng-switch-when="true"><td class="radio-zone table-cell" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"></td><td colspan="4" class="child-zone bg-white"><form role="form" name="cardForm" novalidate><div class="form-body"><div class="col-sm-12 padding-left-15"><div class="form-group col-sm-12 no-padding-left" ng-repeat="item in $ctrl.creditCards"><div class="inline-block padding-right-10"><input type="radio" class="inline-block" required ng-model="$ctrl.paymentModel.cardModel.cardId" value="{{item.id}}"></div><div class="inline-block card-icon"><img class="inline-block" ng-src="{{\'../../../../content/images/card-\' + item.type + \'.png\'}}"></div><div class="inline-block"><span>{{item.cardNumber | cc}}</span></div></div><div class="form-group col-sm-8 no-padding-left" ng-switch="$ctrl.paymentModel.cardModel.cardId == -1"><div class="col-sm-12 no-padding-left"><div class="inline-block padding-right-10"><input type="radio" checked="checked" required ng-model="$ctrl.paymentModel.cardModel.cardId" value="-1" class="inline-block"></div><span data-translate="flight.booking.payment.addcard">Nh\u1EADp s\u1ED1 th\u1EBB m\u1EDBi </span><span><img src="../../../../content/images/card-VISA.png"> <img src="../../../../content/images/card-MASTER.png"> <img src="../../../../content/images/card-JCB.png"></span></div><div class="col-sm-9 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" name="cardNumber" placeholder="{{\'flight.plchdr.card\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.cardNumber" cc-number ng-maxlength="40" ng-pattern="/^[0-9]{1,40}$/" required><div class="error" ng-show="(cardForm.$submitted || cardForm.cardNumber.$touched) && cardForm.cardNumber.$invalid"><p class="help-block" ng-show="cardForm.cardNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.cardNumber.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="40"></p><p class="help-block" ng-show="cardForm.cardNumber.$error.ccNumberType" data-translate="entity.validation.card"></p></div></div><div class="col-sm-3 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="CVV" ng-model="$ctrl.paymentModel.cardModel.cvNumber" ng-pattern="/^[0-9]/" ng-minlength="3" ng-maxlength="4" cc-cvc name="cvNumber" required><div class="error" ng-show="(cardForm.$submitted || cardForm.cvNumber.$touched) && cardForm.cvNumber.$invalid"><p class="help-block" ng-show="cardForm.cvNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="!cardForm.cvNumber.$error.required" data-translate="entity.validation.format"></p></div></div><div class="col-sm-9 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.namecard\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.fullName" gtd-no-special-char name="fullName" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.fullName.$touched) && cardForm.fullName.$invalid"><p class="help-block" ng-show="cardForm.fullName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.fullName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-3 no-padding-left margin-top-15 {{$ctrl.dateCardClass}}" ng-switch-when="true"><input type="text" class="form-control {{$ctrl.classValid}}" placeholder="mm/yy" name="expireMonthYear" ng-model="$ctrl.monthYear" maxlength="5" ng-keypress="$ctrl.keyPressed($event)" ng-change="$ctrl.expireMonthYear()"></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><span>Billing Address</span></div><!-- show selection choose save passenger --><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><select ng-if="$ctrl.isAuthenticated() == true" class="form-control" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in ($ctrl.customerTravellers | traveller:\'ADT\') track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseContact(item)"><option value="">{{\'flight.booking.info.custinfo.save\' |translate}}</option></select></div><div class="col-sm-6 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.familyname\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.firstName" name="firstName" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.firstName.$touched) && cardForm.firstName.$invalid"><p class="help-block" ng-show="cardForm.firstName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.firstName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-6 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.name2\' | translate}}" ng-maxlength="100" ng-model="$ctrl.paymentModel.cardModel.lastName" name="lastName" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.lastName.$touched) && cardForm.lastName.$invalid"><p class="help-block" ng-show="cardForm.lastName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.lastName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.address\' | translate}}" ng-maxlength="150" ng-model="$ctrl.paymentModel.cardModel.address" name="address" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.address.$touched) && cardForm.address.$invalid"><p class="help-block" ng-show="cardForm.address.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.address.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true" ng-init="$ctrl.paymentModel.cardModel.country= (!$ctrl.paymentModel.cardModel.country)?\'vn\':($ctrl.paymentModel.cardModel.country)"><select class="form-control" placeholder="Qu\u1ED1c gia" ng-model="$ctrl.paymentModel.cardModel.country" name="country" required><option ng-repeat="country in $ctrl.allCountries" value="{{country.code}}">{{country.name}}</option></select><div class="error" ng-show="(cardForm.$submitted || cardForm.country.$touched) && cardForm.country.$invalid"><p class="help-block" ng-show="cardForm.country.$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.city\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.city" name="city" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.city.$touched) && cardForm.city.$invalid"><p class="help-block" ng-show="cardForm.city.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.state.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="State" ng-model="$ctrl.paymentModel.cardModel.state" name="state" ng-maxlength="240"></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="Postal Code" ng-model="$ctrl.paymentModel.cardModel.postalCode" name="postalCode" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.postalCode.$touched) && cardForm.postalCode.$invalid"><p class="help-block" ng-show="cardForm.postalCode.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.postalCode.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="Email" ng-model="$ctrl.paymentModel.cardModel.email" gtd-email name="email" ng-maxlength="120" required><div class="error" ng-show="(cardForm.$submitted || cardForm.email.$touched) && cardForm.email.$invalid"><p class="help-block" ng-show="cardForm.email.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.email.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p><p class="help-block" ng-show="cardForm.email.$error.email" data-translate="entity.validation.email"></p><p class="help-block" ng-show="cardForm.email.$error.emailValidator" data-translate="entity.validation.email"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15" ng-switch-when="true"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.phoneNumber" gtd-phone name="phoneNumber" required><div class="error" ng-show="(cardForm.$submitted || cardForm.phoneNumber.$touched) && cardForm.phoneNumber.$invalid"><p class="help-block" ng-show="cardForm.phoneNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.phoneNumber.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20"></p><p class="help-block" ng-show="cardForm.phoneNumber.$error.phoneValidator" data-translate="entity.validation.phoneValidator"></p></div></div><!--\n                                        <div class="col-sm-12 form-group no-padding-left margin-top-15" ng-if="$ctrl.isAuthenticated() == true"\n                                            ng-switch-when="true">\n                                            <div class="mt-checkbox-list">\n                                                <label class="mt-checkbox mt-checkbox-outline"> {{\'flight.booking.payment.add\' | translate}}\n                                                    <input type="checkbox" value="1" name="test" ng-model="$ctrl.paymentModel.cardModel.checked">\n                                                    <span></span>\n                                                </label>\n                                            </div>\n                                        </div>\n                                        <div class="save-message"><span>{{\'flight.booking.payment.save-message\' | translate}}</span></div>\n                                        --></div><div class="form-group col-sm-4"><img src="../../../../content/images/cardccv.png" class="img-responsive"></div></div></div></form></td></tr></table><!-- Disabled ATM for bug --><table class="payment-item table" ng-show="$ctrl.listPaymentType.indexOf(\'ATM_DEBIT\') >-1" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true &&\n            \t((!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false) || ($ctrl.paymentModel.isMobileApp == true && $ctrl.paymentModel.paymentOption == \'ATM_DEBIT\'))" ng-switch="$ctrl.selectTypePayment == \'ATM_DEBIT\'"><tr class="table-row"><td class="radio-zone table-cell radio" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_atm_debit" name="payment_option" ng-model="$ctrl.selectTypePayment" value="ATM_DEBIT" required><label for="payment_option_atm_debit" class="radio-label"></label></td><td class="logo table-cell bg-white"><div class="logoGr"><img src="../../../content/images/payment/atm-pay.png"></div></td><td class="table-cell bg-white seperator-zone"><div class="seperator"></div></td><td class="item-detail-zone table-cell bg-white"><div class="item-header"><span data-translate="flight.booking.payment.atm-header"></span></div><div class="item-content"><span data-translate="flight.booking.payment.atm-content"></span></div></td></tr><tr class="table-row" ng-switch-when="true"><td class="radio-zone table-cell" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"></td><td colspan="4" class="child-zone bg-white"><form role="form" name="atmForm" novalidate><div class="form-body"><div class="col-sm-12 padding-left-15"><div class="col-sm-4 no-padding-left margin-top-15"><span data-translate="flight.booking.payment.bank">Ng\xE2n h\xE0ng</span></div><div class="col-sm-8 no-padding-left margin-top-15"><select class="form-control" placeholder="Ng\xE2n h\xE0ng" ng-model="$ctrl.paymentModel.cardModel.bank" name="bankName" required><option ng-repeat="opt in $ctrl.allDebitOptions" value="{{opt}}">{{\'ota_debit_options.\' + opt | translate}}</option></select><div class="error" ng-show="(atmForm.$submitted || atmForm.bankName.$touched) && atmForm.bankName.$invalid"><p class="help-block" ng-show="atmForm.bankName.$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-4 no-padding-left margin-top-15"><span data-translate="flight.booking.payment.name">H\u1ECD t\xEAn</span></div><div class="col-sm-8 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="{{\'flight.booking.payment.plchdrname\' | translate}}" gtd-no-special-char ng-model="$ctrl.paymentModel.cardModel.fullName" name="fullNameAtm" ng-maxlength="240" required><div class="error" ng-show="(atmForm.$submitted || atmForm.fullNameAtm.$touched) && atmForm.fullNameAtm.$invalid"><p class="help-block" ng-show="atmForm.fullNameAtm.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.fullNameAtm.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-4 no-padding-left margin-top-15"><span>Email</span></div><div class="col-sm-8 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="Email" ng-model="$ctrl.paymentModel.cardModel.email" gtd-email name="emailAtm" ng-maxlength="120" required><div class="error" ng-show="(atmForm.$submitted || atmForm.emailAtm.$touched) && atmForm.emailAtm.$invalid"><p class="help-block" ng-show="atmForm.emailAtm.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.emailAtm.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p><p class="help-block" ng-show="atmForm.emailAtm.$error.email" data-translate="entity.validation.email"></p><p class="help-block" ng-show="atmForm.emailAtm.$error.emailValidator" data-translate="entity.validation.email"></p></div></div><div class="col-sm-4 no-padding-left margin-top-15"><span data-translate="flight.booking.payment.phone">S\u1ED1 \u0111i\u1EC7n tho\u1EA1i</span></div><div class="col-sm-8 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" gtd-vn-phone ng-model="$ctrl.paymentModel.cardModel.mobile" name="mobileAtm" ng-maxlength="20" required><div class="error" ng-show="(atmForm.$submitted || atmForm.mobileAtm.$touched) && atmForm.mobileAtm.$invalid"><p class="help-block" ng-show="atmForm.mobileAtm.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.mobileAtm.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20"></p><p class="help-block" ng-show="atmForm.mobileAtm.$error.phoneValidator" data-translate="entity.validation.phoneValidator"></p></div></div><div class="col-sm-4 no-padding-left margin-top-15"><span data-translate="flight.booking.payment.address">\u0110\u1ECBa ch\u1EC9</span></div><div class="col-sm-8 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="{{\'flight.plchdr.address\' | translate}}" ng-model="$ctrl.paymentModel.cardModel.address" name="addressAtm" ng-maxlength="450" required><div class="error" ng-show="(atmForm.$submitted || atmForm.addressAtm.$touched) && atmForm.addressAtm.$invalid"><p class="help-block" ng-show="atmForm.addressAtm.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.addressAtm.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="450"></p></div></div></div></div></form></td></tr></table><table class="payment-item table" ng-show="$ctrl.listPaymentType.indexOf(\'VNPAYQR\') >-1" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true &&\n                ((!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false) || ($ctrl.paymentModel.isMobileApp == true && $ctrl.paymentModel.paymentOption == \'VNPAYQR\'))" ng-switch="$ctrl.selectTypePayment == \'VNPAYQR\'"><tr class="table-row"><td class="radio-zone table-cell radio" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_vnpqayqr" name="payment_option" ng-model="$ctrl.selectTypePayment" value="VNPAYQR" required><label for="payment_option_vnpqayqr" class="radio-label"></label></td><td class="logo table-cell bg-white"><div class="logoGr"><img src="../../../content/images/payment/qr-code-pay.png"></div></td><td class="table-cell bg-white seperator-zone"><div class="seperator"></div></td><td class="item-detail-zone table-cell bg-white"><div class="item-header"><span data-translate="flight.booking.payment.vnpayqr-header"></span></div><div class="item-content"><span data-translate="flight.booking.payment.vnpayqr-content"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></td></tr></table><table class="payment-item table" ng-show="$ctrl.listPaymentType.indexOf(\'VIETTELPAY\') >-1" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true &&\n            \t((!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false) || ($ctrl.paymentModel.isMobileApp == true && $ctrl.paymentModel.paymentOption == \'VIETTELPAY\'))" ng-switch="$ctrl.selectTypePayment == \'VIETTELPAY\'"><tr class="table-row"><td class="radio-zone table-cell radio" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_viettelpay" name="payment_option" ng-model="$ctrl.selectTypePayment" value="VIETTELPAY" required><label for="payment_option_viettelpay" class="radio-label"></label></td><td class="logo table-cell bg-white"><div class="logoGr"><img src="../../../content/images/payment/viettel-pay.png"></div></td><td class="table-cell bg-white seperator-zone"><div class="seperator"></div></td><td class="item-detail-zone table-cell bg-white"><div class="item-header"><span data-translate="flight.booking.payment.viettelpay-header"></span></div><div class="item-content"><span data-translate="flight.booking.payment.viettelpay-content"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></td></tr></table><!--PaymentMomo--><table class="payment-item table" ng-show="$ctrl.listPaymentType.indexOf(\'MOMO\') >-1" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true &&\n            \t((!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false) || ($ctrl.paymentModel.isMobileApp == true && $ctrl.paymentModel.paymentOption == \'MOMO\'))" ng-switch="$ctrl.selectTypePayment == \'MOMO\'"><tr class="table-row"><td class="radio-zone table-cell radio" ng-if="(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"><input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_momo" name="payment_option" ng-model="$ctrl.selectTypePayment" value="MOMO" required><label for="payment_option_momo" class="radio-label"></label></td><td class="logo table-cell bg-white"><div class="logoGr"><img src="../../../content/images/payment/momo-pay.png"></div></td><td class="table-cell bg-white seperator-zone"><div class="seperator"></div></td><td class="item-detail-zone table-cell bg-white"><div class="item-header"><span data-translate="flight.booking.payment.momopay-header"></span></div><div class="item-content"><span data-translate="flight.booking.payment.momopay-content"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></td></tr></table><!--table class="payment-item table"  ng-show="$ctrl.listPaymentType.indexOf(\'CASH\') >-1" ng-switch="$ctrl.paymentModel.paymentOption == \'CASH\'" ng-if="$ctrl.bookingModel.bookingInfo.showPayLaterOption == true">\n                <tr class="table-row">\n                    <td class="radio-zone table-cell radio" ng-if = "(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)" >\n                        <input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_cash" name="payment_option" ng-click = "$ctrl.deletePromoAir();"\n                            ng-model="$ctrl.selectTypePayment" value="CASH" required />\n                        <label for="payment_option_cash" class="radio-label"></label>\n                    </td>\n\n                    <td class="logo table-cell bg-white">\n                        <div class="logoGr">\n                            <img src="../../../content/images/dollar-symbol.png" />\n                        </div>\n                    </td>\n\n                    <td class="table-cell bg-white seperator-zone">\n                        <div class="seperator"></div>\n                    </td>\n                    <td class="item-detail-zone table-cell bg-white">\n                        <div class="item-header">\n                            <span data-translate="flight.booking.payment.cash-and-reserve-header"></span>\n                        </div>\n                        <div class="item-content">\n                            <span data-translate="flight.booking.payment.cash-and-reserve-content"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                        </div>\n                    </td>\n                </tr>\n                <tr class="table-row" ng-switch-when="true">\n                    <td class="radio-zone table-cell" ng-if = "(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"></td>\n                    <td colspan="3" class="child-zone bg-white">\n                        <div class="child-wrapper">\n                            <table class="cash-table">\n                                <tr class="cash-tr">\n                                    <td class="cash-td"><strong>{{\'flight.booking.payment.hcm\' | translate}}</strong></td>\n                                    <td class="cash-td"><strong>{{\'flight.booking.payment.hn\' | translate}}</strong></td>\n                                </tr>\n\n                                <tr class="cash-tr">\n                                    <td class="cash-td">194 Nguy\u1EC5n Th\u1ECB Minh Khai, P6, Qu\u1EADn 3, TP.HCM</td>\n                                    <td class="cash-td">147 Phan Chu Trinh, Q.Ho\xE0n Ki\u1EBFm, H\xE0 N\u1ED9i, TP.HCM</td>\n                                </tr>\n\n                                <tr class="cash-tr">\n                                    <td class="cash-td">Hotline 1900 9002</td>\n                                    <td class="cash-td">Hotline 1900 9002</td>\n                                </tr>\n\n                                <tr class="cash-tr">\n                                    <td class="cash-td">\u0110T (028) 62 850 850 - (028) 62 857 857</td>\n                                    <td class="cash-td">\u0110T (028) 62 850 850 - (028) 62 857 857</td>\n                                </tr>\n                            </table>\n                        </div>\n                    </td>\n                </tr>\n                <tr class="table-row" ng-switch-when="true">\n                    <td class="radio-zone table-cell" ng-if = "(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)"></td>\n                    <td colspan="3" class="child-zone bg-white">\n                        <form role="form" name="xxxxForm" novalidate>\n                            <div class="child-wrapper">\n                                <table class="child-table">\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/acb-logo.png" />\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.acb-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.acb-branch\' | translate}}</div>\n                                            <div class="child-detail">202706679</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/lienviet-logo.png" />\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.lpb-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.lpb-branch\' | translate}}</div>\n                                            <div class="child-detail">002086929999</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/tcb-logo.png" />\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.tcb-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.tcb-branch\' | translate}}</div>\n                                            <div class="child-detail">19129519140016</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/bidv-logo.png" />\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.bidv-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.bidv-branch\' | translate}}</div>\n                                            <div class="child-detail">14710000160709</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/vcb-logo.png" />\n                                        </td>\n\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.vcb-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.vcb-branch\' | translate}}</div>\n                                            <div class="child-detail">0331000428208</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/vib-logo.png" />\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.vib-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.vib-branch\' | translate}}</div>\n                                            <div class="child-detail">601704060266913</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/hd-logo.png" />\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.hd-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.hd-branch\' | translate}}</div>\n                                            <div class="child-detail">068704070141786</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/vpbank.jpg" style="width:45px; height:18px"/>\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.vp-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.vp-branch\' | translate}}</div>\n                                            <div class="child-detail">107797696</div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/viettinbank.png" style="width:45px; height:18px"/>\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.vtb-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.vtb-branch\' | translate}}</div>\n                                            <div class="child-detail">111002623258 </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/mbbank.png" style="width:45px; height:18px"/>\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.mb-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.mb-branch\' | translate}}</div>\n                                            <div class="child-detail">1121100224009  </div>\n                                        </td>\n                                    </tr>\n\n                                    <tr class="child-row">\n                                        <td class="child-logo">\n                                            <img src="../../../content/images/seabank-logo.png" style="width:45px; height:45px" />\n                                        </td>\n                                        <td class="child-details">\n                                            <div class="child-header">{{\'flight.booking.payment.sea-title\' | translate}}</div>\n                                            <div class="child-detail" >{{\'flight.booking.payment.sea-branch\' | translate}}</div>\n                                            <div class="child-detail">10200014654095</div>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </div>\n                        </form>\n                    </td>\n                </tr>\n\n            </table--><!--PaymentPayoo--><!--table class="payment-item table" ng-show="$ctrl.listPaymentType.indexOf(\'PAYOO\') >-1" ng-if="$ctrl.bookingModel.bookingInfo.showPayNowOption == true &&\n            \t((!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false) || ($ctrl.paymentModel.isMobileApp == true && $ctrl.paymentModel.paymentOption == \'PAYOO\'))"\n                   ng-switch="$ctrl.selectTypePayment == \'PAYOO\'">\n                <tr class="table-row">\n                    <td class="radio-zone table-cell radio" ng-if = "(!$ctrl.paymentModel.isMobileApp || $ctrl.paymentModel.isMobileApp == false)" >\n                        <input ng-change="$ctrl.changeRadio()" type="radio" id="payment_option_payoo" name="payment_option"\n                               ng-model="$ctrl.selectTypePayment" value="PAYOO" required />\n                        <label for="payment_option_payoo" class="radio-label"></label>\n                    </td>\n\n                    <td class="logo table-cell bg-white">\n                        <div class="logoGr">\n                            <img src="../../../content/images/payment/payoo-pay.png" />\n                        </div>\n                    </td>\n\n                    <td class="table-cell bg-white seperator-zone">\n                        <div class="seperator"></div>\n                    </td>\n                    <td class="item-detail-zone table-cell bg-white">\n                        <div class="item-header"><span data-translate="flight.booking.payment.payoopay-header"></span></div>\n                        <div class="item-content">\n                            <span data-translate="flight.booking.payment.payoopay-content"></span>\n                        </div>\n                    </td>\n                </tr>\n            </table--><!-- END FORM--></div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-billing-info-view.html', '<div class="portlet light" ng-show="$ctrl.bookingModel.biCompany != null || $ctrl.bookingModel.biMst != null || $ctrl.bookingModel.biMobile != null || $ctrl.bookingModel.biAddress != null ||  $ctrl.bookingModel.tPCName != null || $ctrl.bookingModel.tPCfName != null || $ctrl.bookingModel.tPCPhone != null || $ctrl.bookingModel.tPCfemail != null || $ctrl.bookingModel.tPCNote !=null"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.billinfo.title"></span></span></div></div><div class="portlet-body form"><div class="portlet-body"><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.company"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biCompany}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mst"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biMst}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mobile"></span></div><!-- <div class="col-md-9 value"> (+{{$ctrl.bookingModel.biMobileCode}})&nbsp;{{$ctrl.bookingModel.biMobile}}</div> --><div class="col-md-9 value">{{$ctrl.bookingModel.biMobile}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.address"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biAddress}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.familyname">H\u1ECD</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCfName}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.name">T\xEAn \u0111\u1EC7m v\xE0 T\xEAn</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCName}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.phone">S\u1ED1 \u0110i\u1EC7n tho\u1EA1i</span></div><div class="col-md-9 value long-value">(+{{$ctrl.bookingModel.tPCPhoneCode}})&nbsp; {{$ctrl.bookingModel.tPCPhone}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>Email</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCemail}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.note">Ghi ch\xFA</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCNote}}</div></div></div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-billing-info.html', '<div class="portlet light flight-booking-billing-info"><div class="portlet-title"><div class="caption"><!--<span class="fa fa-square-o" ng-if="$ctrl.bookingModel.showForm == false" ng-click="$ctrl.doShowForm();"></span>--><!--<span class="fa fa-check-square-o" ng-if="$ctrl.bookingModel.showForm == true" ng-click="$ctrl.doShowForm();"></span>--><div class="mt-checkbox-list" style="padding: 0px"><label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px"><input type="checkbox" ng-model="$ctrl.bookingModel.showForm" ng-click="$ctrl.doShowForm();"> <span>&nbsp;</span></label><span style="margin-left: 30px" class="caption-subject font-dark bold uppercase" data-translate="flight.booking.info.billinfo.title"></span></div><!--<span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.billinfo.title"></span> </span>--></div></div><div class="portlet-body form" ng-if="$ctrl.bookingModel.showForm == true"><!-- BEGIN FORM--><div class="form-body"><div class="form-group"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.billinfo.company"></span>:<div style="color: red">*</div></div></label><input type="text" id="biCompany" name="biCompany" required ng-maxlength="320" class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biCompany" placeholder="{{\'flight.plchdr.company\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biCompany.$touched) && $ctrl.form.biCompany.$invalid"><p class="help-block" ng-show="$ctrl.form.biCompany.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form.biCompany.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="320"></p></div></div><div class="form-group"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.billinfo.mst"></span>:<div style="color: red">*</div></div></label><input type="text" id="biMst" name="biMst" ng-maxlength="80" required class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biMst" placeholder="{{\'flight.plchdr.mst\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biMst.$touched) && $ctrl.form.biMst.$invalid"><p class="help-block" ng-show="$ctrl.form.biMst.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form.biMst.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="80"></p></div></div><!-- <div class="row">\n               <div class="form-group">\n                <div class="col-sm-4 cust-cell">\n                    <label class="control-label"><span data-translate="flight.booking.info.billinfo.mobile"></span></label>\n                            <select class="gtd-text-medium form-control"\n                                    id="biMobileCode" name="biMobileCode"\n                                    ng-model="$ctrl.bookingModel.biMobileCode"\n                                    required \n                                    ng-options="country.phoneCode as (country.name + \' (+\' + country.phoneCode + \')\') for country in $ctrl.allCountries"\n                            />  \n                            <div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biMobileCode.$touched) && $ctrl.form.biMobileCode.$invalid">\n                                <p class="help-block" ng-show="$ctrl.form.biMobileCode.$error.required" data-translate="entity.validation.required"></p>\n                            </div>\n                    </div>  \n                    <div class="col-sm-8 cust-cell">\n                            &nbsp; &nbsp; &nbsp;\n                        <input required type="text"\n                               id="biPhone" name="biPhone"\n                               gtd-phone\n                               class="gtd-text-medium form-control " placeholder="{{\'flight.plchdr.phone\' | translate}}"\n                               ng-model="$ctrl.bookingModel.biMobile">\n                        <div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biPhone.$touched) && $ctrl.form.biPhone.$invalid">\n                            <p class="help-block" ng-show="$ctrl.form.biPhone.$invalid" data-translate="entity.validation.phone"></p>\n                        </div>\n                </div> \n                </div>\n               \n           </div> --><div class="row"><div class="form-group"><div class="col-sm-4 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.contactinfo.mobile"></span>:<div style="color: red">*</div></div><select id="biMobileCode" name="biMobileCode" ng-model="$ctrl.bookingModel.biMobileCode" class="form-control" required ng-options="country.phoneCode as (country.name + \' (+\' + country.phoneCode + \')\') for country in $ctrl.allCountries"></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'biMobileCode\' + $index].$touched) && $ctrl.form[\'biMobileCode\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'biMobileCode\' + $index].$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-8 cust-cell">&nbsp; <input type="text" id="biMobile" name="biMobile" gtd-phone ng-model="$ctrl.bookingModel.biMobile" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'biMobile\' + $index].$touched) && $ctrl.form[\'biMobile\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'biMobile\' + $index].$invalid" data-translate="entity.validation.phone"></p></div></div></div></div><div class="form-group"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.billinfo.address"></span>:<div style="color: red">*</div></div></label><textarea id="biAddress" name="biAddress" ng-maxlength="320" style="resize: none" required class="form-control gtd-textarea-default" ng-model="$ctrl.bookingModel.biAddress" placeholder="{{\'flight.plchdr.address\' | translate}}"></textarea><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biAddress.$touched) && $ctrl.form.biAddress.$invalid"><p class="help-block" ng-show="$ctrl.form.biAddress.$invalid" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form.biAddress.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="320"></p></div></div></div><!-- END FORM--><div style="padding: 0px"><label class="" style="margin-bottom: 0px"><span>&nbsp;</span></label><span class="caption-subject font-dark bold uppercase">{{\'flight.search.result.voice\' | translate}}</span></div><span>&nbsp;</span><div class="row"><div class="form-group hotel-customer" ng-if="$ctrl.isAuthenticated() == true && $ctrl.customerTravellers.length > 0 && ($ctrl.customerTravellers | traveller:\'ADT\').length > 0"><div class="col-sm-4">{{\'flight.booking.info.custinfo.save\' |translate}}</div><div class="col-sm-8"><select ng-if="$ctrl.isAuthenticated() == true" class="form-control regular-cust-select" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in ($ctrl.customerTravellers | traveller:\'ADT\') track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseContact(item)"><option value="">{{\'flight.plchdr.choose\' | translate}}</option></select></div></div></div><div class="row"><div class="form-group"><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.familyname"></span>:<div style="color: red">*</div></div><input id="tPCfName{{$index}}" name="tPCfName{{$index}}" ng-maxlength="130" ng-model="$ctrl.bookingModel.tPCfName" type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.surname\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCfName\' + $index].$touched) && $ctrl.form[\'tPCfName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCfName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'tPCfName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.name"></span>:<div style="color: red">*</div></div><input id="tPCName" name="tPCName" ng-maxlength="130" ng-model="$ctrl.bookingModel.tPCName" type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.name\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCName\' + $index].$touched) && $ctrl.form[\'tPCName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'tPCName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div></div></div><div class="row"><div class="form-group"><div class="col-sm-4 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.contactinfo.mobile"></span>:<div style="color: red">*</div></div><select id="tPCPhoneCode" name="tPCPhoneCode" ng-model="$ctrl.bookingModel.tPCPhoneCode" class="form-control" required ng-options="country.phoneCode as (country.name + \' (+\' + country.phoneCode + \')\') for country in $ctrl.allCountries"></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCPhoneCode\' + $index].$touched) && $ctrl.form[\'tPCPhoneCode\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCPhoneCode\' + $index].$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-8 cust-cell">&nbsp; <input type="text" id="tPCPhone" name="tPCPhone" gtd-phone ng-model="$ctrl.bookingModel.tPCPhone" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCPhone\' + $index].$touched) && $ctrl.form[\'tPCPhone\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCPhone\' + $index].$invalid" data-translate="entity.validation.phone"></p></div></div></div></div><div class="row"><div class="col-sm-12"><div class="form-group"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.contactinfo.email"></span>:<div style="color: red">*</div></div></label><input id="tPCemail" name="tPCemail" ng-maxlength="120" gtd-email type="email" class="form-control" ng-model="$ctrl.bookingModel.tPCemail" required placeholder="{{\'flight.plchdr.email\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCemail\' + $index].$touched) && $ctrl.form[\'tPCemail\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCemail\' + $index].$invalid" data-translate="entity.validation.email"></p><p class="help-block" ng-show="$ctrl.form[\'tPCemail\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p></div></div></div></div><div class="row"><div class="col-sm-12"><div class="form-group"><span>{{\'flight.search.result.note\' | translate}}</span><textarea class="form-control" name="" id="" rows="3" style="resize:none" placeholder="{{\'flight.plchdr.note\' | translate}}" ng-model="$ctrl.bookingModel.tPCNote" id="tPCNote" name="tPCNote"></textarea></div></div></div><!-- TIEN CA TAN --><!-- <div class="portlet-body form">     \n               \n                </div> --><!-- END FORM--></div></div>');
        $templateCache.put('app/components/booking/flight-booking-contact-info-view.html', '<div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.contactinfo.title"></span></span></div></div><div class="portlet-body" ng-repeat="item in $ctrl.bookingModel.contacts"><div class="form-group"><label class="control-label person-header">Ng\u01B0\u1EDDi li\xEAn h\u1EC7 th\u1EE9 {{$index+1}}: <b>{{item.ciFName}}&nbsp;{{item.ciName}}</b></label><span class="fa fa-plus-square-o pull-right" ng-click="$ctrl.showCust(item)" ng-show="item.show != true"></span> <span class="fa fa-minus-square-o pull-right" ng-click="$ctrl.hideCust(item)" ng-show="item.show == true"></span></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.gender"></span></div><div class="col-md-9 value">{{\'\' + item.ciGender | lookupt :\'ota_customer\':\'passenger_gender\' | translate}}</div></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.familyname"></span></div><div class="col-md-9 value long-value">{{item.ciFName}}</div></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.name"></span></div><div class="col-md-9 value long-value">{{item.ciName}}</div></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.contactinfo.mobile"></span></div><!-- <div class="col-md-9 value"> (+{{item.ciMobileCode}})&nbsp;{{item.ciMobile}}\n            </div> --><div class="col-md-9 value">{{item.ciMobile}}</div></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span>Postcode</span></div><div class="col-md-9 value long-value">{{item.postcode}}</div></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.contactinfo.email"></span></div><div class="col-md-9 value long-value">{{item.ciEmail}}</div></div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-contact-info.html', '<div class="portlet light flight-booking-contact-info"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.contactinfo.title"></span></span></div></div><div class="portlet-body form"><!-- BEGIN FORM--><div class="form-body" ng-repeat="item in $ctrl.bookingModel.contacts"><div class="form-group hotel-customer cust-header"><label class="control-label person-header">{{\'flight.booking.info.custinfo.contact\' |translate}} {{$index+1}}</label><div class="cust-header-right hand" ng-click="$ctrl.removeContact($index)" ng-show="$ctrl.bookingModel.contacts.length > 1"><span class="fa fa-minus-square-o"></span> <span>{{\'flight.booking.info.custinfo.del\' |translate}}</span></div></div><div class="row"><div class="form-group hotel-customer" ng-if="$ctrl.isAuthenticated() == true && $ctrl.customerTravellers.length > 0 && ($ctrl.customerTravellers | traveller:\'ADT\').length > 0"><div class="col-sm-4">{{\'flight.booking.info.custinfo.save\' |translate}}</div><div class="col-sm-8"><select ng-if="$ctrl.isAuthenticated() == true" class="form-control regular-cust-select" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in ($ctrl.customerTravellers | traveller:\'ADT\') track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseContact(item)"><option value="">{{\'flight.plchdr.choose\' | translate}}</option></select></div></div></div><div class="row"><div class="form-group"><!--<div class="col-sm-4 cust-cell">--><!--Gi\u1EDBi t\xEDnh--><!--<div class="table-cell">--><!--<select--><!--id="ciGender{{$index}}" name="ciGender{{$index}}"--><!--class="gtd-text-small form-control" ng-model="item.ciGender" required>--><!--<option value="" disabled selected hidden>{{\'flight.plchdr.choose\' | translate}}</option>--><!--<option ng-repeat="title in $ctrl.adultTitleLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option>--><!--</select>--><!--</div>--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciGender\' + $index].$touched) && $ctrl.form[\'ciGender\' + $index].$invalid">--><!--<p class="help-block" ng-show="$ctrl.form[\'ciGender\' + $index].$error.required" data-translate="entity.validation.required"></p>--><!--</div>--><!--</div>--><div class="col-sm-6 cust-cell"><span class="require-label" data-translate="flight.booking.info.custinfo.familyname"></span> <input id="ciFName{{$index}}" name="ciFName{{$index}}" ng-maxlength="130" type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" ng-model="item.ciFName" placeholder="{{\'flight.plchdr.surname\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciFName\' + $index].$touched) && $ctrl.form[\'ciFName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciFName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'ciFName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div><div class="col-sm-6 cust-cell"><span class="require-label" data-translate="flight.booking.info.custinfo.name"></span> <input id="ciName{{$index}}" name="ciName{{$index}}" ng-maxlength="130" type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" ng-model="item.ciName" placeholder="{{\'flight.plchdr.name\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciName\' + $index].$touched) && $ctrl.form[\'ciName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'ciName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div><!--<div class="table-cell cust-cell">Gi\u1EDBi t\xEDnh</div>--><!--<div class="table-cell cust-cell"><span data-translate="flight.booking.info.custinfo.familyname"/></div>--><!--<div class="table-cell cust-cell padding-left-15"><span data-translate="flight.booking.info.custinfo.name"/></div>--><!--<div class="table-cell">--><!--<select class="gtd-text-small form-control" ng-model="item.ciGender" required>--><!--<option ng-repeat="title in $ctrl.adultTitleLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option>--><!--</select>--><!--</div>--><!--<div class="table-cell">--><!--<input type="text" gtd-no-special-char class="gtd-text-medium form-control" ng-model="item.ciFName" required>--><!--</div>--><!--<div class="table-cell">--><!--<input type="text" gtd-no-special-char class="gtd-text-medium form-control margin-left-15" ng-model="item.ciName" required>--><!--</div>--></div></div><div class="row"><div class="form-group"><!-- <div class="col-sm-4 cust-cell">\n                                <span class="require-label" data-translate="flight.booking.info.contactinfo.mobile"></span>\n                                <select\n                                    id="ciMobileCode{{$index}}" name="ciMobileCode{{$index}}"\n                                    class="form-control" ng-model="item.ciMobileCode" required\n                                        ng-options="country.phoneCode as (country.name + \' (+\' + country.phoneCode + \')\') for country in $ctrl.allCountries"\n                                >\n                                </select>\n\n                                <div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciMobileCode\' + $index].$touched) && $ctrl.form[\'ciMobileCode\' + $index].$invalid">\n                                    <p class="help-block" ng-show="$ctrl.form[\'ciMobileCode\' + $index].$error.required" data-translate="entity.validation.required"></p>\n                                </div>\n                            </div> --><div class="col-sm-6 cust-cell">&nbsp; <span class="require-label" data-translate="flight.booking.info.contactinfo.mobile"></span><!--<input type="text"--><!--id="ciMobileVn{{$index}}" name="ciMobileVn{{$index}}"--><!--ng-if="item.ciMobileCode==84"--><!--gtd-vn-phone--><!--class="gtd-text-medium form-control " placeholder="{{\'flight.plchdr.phone\' | translate}}"--><!--ng-model="item.ciMobile" required />--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciMobileVn\' + $index].$touched) && $ctrl.form[\'ciMobileVn\' + $index].$invalid">--><!--<p class="help-block" ng-show="$ctrl.form[\'ciMobileVn\' + $index].$invalid" data-translate="entity.validation.phone"/>--><!--</div>--> <input type="text" id="ciMobile{{$index}}" name="ciMobile{{$index}}" gtd-phone class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" ng-model="item.ciMobile" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciMobile\' + $index].$touched) && $ctrl.form[\'ciMobile\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciMobile\' + $index].$invalid" data-translate="entity.validation.phone"></p></div></div><div ng-show="ctrl.misf = true" class="col-sm-6 custcell"><span>M\xE3 b\u01B0u \u0111i\u1EC7n </span><input type="text" class="gtd-text-medium form-control" placeholder="Postal Code" ng-model="item.postcode" id="postcode{{index}}" name="postcode{{index}}"><!-- <div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciMobile\' + $index].$touched) && $ctrl.form[\'ciMobile\' + $index].$invalid">\n                                            <p class="help-block" ng-show="$ctrl.form[\'ciMobile\' + $index].$invalid" data-translate="entity.validation.postcode"></p>\n                                        </div> --></div></div></div><div class="row"><div class="form-group"><div class="col-sm-12"><label class="control-label require-label"><span data-translate="flight.booking.info.contactinfo.email"></span></label><input id="ciEmail{{$index}}" name="ciEmail{{$index}}" ng-maxlength="120" type="email" class="form-control" ng-model="item.ciEmail" gtd-email required placeholder="{{\'flight.plchdr.email\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciEmail\' + $index].$touched) && $ctrl.form[\'ciEmail\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciEmail\' + $index].$invalid" data-translate="entity.validation.email"></p><p class="help-block" ng-show="$ctrl.form[\'ciEmail\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p></div></div></div></div><!-- <div class="form-group" style="margin-bottom: 0px" ng-if="$ctrl.isAuthenticated() == true">\n                <div class="mt-checkbox-list" style="padding: 0px">\n                    <label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px">\n                        <input type="checkbox" value="1" name="test" ng-model="item.checked">\n                        <span></span>\n                    </label>\n                    <span style="margin-left: 30px">{{\'flight.booking.info.custinfo.saved\' |translate}}</span>\n                </div>\n            </div> --><div class="horizontal-line"></div></div><!-- END FORM--><!--<div class="hand label label-outline green" ng-click="$ctrl.addBlankContacts()">--><!--<span class="fa fa-plus-circle icon"></span>--><!--Th\xEAm li\xEAn h\u1EC7--><!--</div>--><div class="hand label label-outline green" ng-click="$ctrl.addBlankContacts()"><span class="fa fa-plus-circle icon"></span> {{\'flight.booking.info.custinfo.add\' |translate}}</div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-customer-info-view.html', '<div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.custinfo.title"></span></span></div></div><div class="portlet-body"><div class="portlet-body" ng-repeat="item in $ctrl.bookingModel.customers"><div class="form-group"><label class="control-label person-header" ng-show="item.type==\'ADT\'">Ng\u01B0\u1EDDi l\u1EDBn th\u1EE9 {{item.gid+1}}: <b>{{item.cuFamilyName}}&nbsp;{{item.cuName}}</b></label><label class="control-label person-header" ng-show="item.type==\'CHD\'">Tr\u1EBB em th\u1EE9 {{item.gid+1}}: <b>{{item.cuFamilyName}}&nbsp;{{item.cuName}}</b></label><label class="control-label person-header" ng-show="item.type==\'INF\'">Tr\u1EBB s\u01A1 sinh th\u1EE9 {{item.gid+1}}: <b>{{item.cuFamilyName}}&nbsp;{{item.cuName}}</b></label><span class="fa fa-plus-square-o pull-right" ng-click="$ctrl.showCust(item);" ng-show="item.show != true"></span> <span class="fa fa-minus-square-o pull-right" ng-click="$ctrl.hideCust(item);" ng-show="item.show == true"></span> <span class="fa fa-pencil-square-o pull-right" ng-click="$ctrl.doBack();" ng-show="$ctrl.mode == \'flight\'"></span></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.gender"></span></div><div class="col-md-9 value">{{\'\' + item.cuGender | lookupt :\'ota_customer\':\'passenger_gender\' | translate}}</div></div><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.custinfo.fullname"/></div>--><!--<div class="col-md-9 value">--><!--{{item.cuFamilyName}}&nbsp;{{item.cuName}}--><!--</div>--><!--</div>--><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.familyname"></span></div><div class="col-md-9 value long-value">{{item.cuFamilyName}}</div></div><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.name"></span></div><div class="col-md-9 value long-value">{{item.cuName}}</div></div><ng-switch on="!(item.type ==\'ADT\' && $ctrl.searchOptions.dtype == \'domestic\')"><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="$ctrl.searchOptions.dtype == \'international\'"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.document"></span></div><div class="col-md-9 value">{{item.cuPp | lookupt :\'ota_customer\':\'passport_type\' | translate}}</div></div><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="$ctrl.searchOptions.dtype == \'international\'"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.idpp"></span></div><div class="col-md-9 value">{{item.cuId}}</div></div><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="$ctrl.searchOptions.dtype == \'international\'"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.nationality"></span></div><div class="col-md-9 value">{{item.cuNationality | country}}</div></div><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="$ctrl.searchOptions.dtype == \'international\'"><div class="col-md-3 name">Ng\xE0y h\u1EBFt h\u1EA1n</div><div class="col-md-9 value"><!--{{item.cuDobd}}&nbsp;{{item.cuDobm}}&nbsp;-&nbsp;{{item.cuDoby}}--> {{item.cuExpiredDate | momentdate}}</div></div><div class="row static-info" ng-show="item.show == true" ng-switch-when="true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.dob"></span></div><div class="col-md-9 value"><!--{{item.cuDobd}}&nbsp;{{item.cuDobm}}&nbsp;-&nbsp;{{item.cuDoby}}--> {{item.cuDob | momentdate}}</div></div></ng-switch><div class="row static-info" ng-show="item.show == true && item.cuCardType != null && item.cuCardNo != null && item.cuCardNo != \'\'"><div class="col-md-3 name">S\u1ED1 th\u1EBB kh\xE1ch h\xE0ng th\u01B0\u1EDDng xuy\xEAn</div><div class="col-md-9 value"><span ng-show="item.cuCardType != \'\' && item.cuCardType != null">{{item.cuCardType | lookupt :\'air_member_card\':\'\' | translate}}&nbsp;{{item.cuCardNo}}</span></div></div><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.custinfo.dob"/></div>--><!--<div class="col-md-9 value">--><!--{{item.cuDobd}}&nbsp;{{item.cuDobm}}&nbsp;{{item.cuDoby}}--><!--</div>--><!--</div>--><ng-switch on="item.type ==\'CHD\' || item.type==\'ADT\'"><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="item.departServiceRequests != null && item.departServiceRequests[0] != null"><div class="col-md-3 name"><span>H\xE0nh l\xFD chi\u1EC1u \u0111i</span></div><div class="col-md-9 value"><div ng-repeat="baggage in item.departServiceRequests" ng-if="baggage.serviceType ==\'BAGGAGE\'">{{baggage.name}}&nbsp;({{baggage.amount | number}}VN\u0110)</div></div></div><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="item.returnServiceRequests != null && item.returnServiceRequests[0] != null"><div class="col-md-3 name"><span>H\xE0nh l\xFD chi\u1EC1u v\u1EC1</span></div><div class="col-md-9 value"><div ng-repeat="baggage in item.returnServiceRequests" ng-if="baggage.serviceType ==\'BAGGAGE\'">{{baggage.name}}&nbsp;({{baggage.amount | number}}VN\u0110)</div></div></div></ng-switch><ng-switch on="item.type ==\'CHD\' || item.type==\'ADT\'"><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="item.departServiceRequests != null && item.departServiceRequests[1] != null"><div class="col-md-3 name"><span>Th\u1EE9c \u0103n chi\u1EC1u \u0111i</span></div><div class="col-md-9 value"><div ng-repeat="meal in item.departServiceRequests" ng-if="meal.serviceType ==\'MEAL\'">{{meal.name}}&nbsp;({{meal.amount | number}}VN\u0110)</div></div></div><div class="row static-info" ng-show="item.show == true" ng-switch-when="true" ng-if="item.returnServiceRequests != null && item.returnServiceRequests[1] != null"><div class="col-md-3 name"><span>Th\u1EE9c \u0103n chi\u1EC1u v\u1EC1</span></div><div class="col-md-9 value"><div ng-repeat="meal in item.returnServiceRequests" ng-if="meal.serviceType ==\'MEAL\'">{{meal.name}}&nbsp;({{meal.amount | number}}VN\u0110)</div></div></div></ng-switch></div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-customer-info.html', '<div class="portlet light flight-booking-customer-info"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.custinfo.title"></span></span></div></div><div class="portlet-body"><!--<ng-form name="cuForm">--><div class="form-body" ng-repeat="(key, item) in $ctrl.bookingModel.customers"><div class="form-group"><label class="control-label person-header" ng-show="item.type==\'ADT\'">Ng\u01B0\u1EDDi l\u1EDBn th\u1EE9 {{item.gid+1}}</label><label class="control-label person-header" ng-show="item.type==\'CHD\'">Tr\u1EBB em th\u1EE9 {{item.gid+1}}</label><label class="control-label person-header" ng-show="item.type==\'INF\'">Tr\u1EBB s\u01A1 sinh th\u1EE9 {{item.gid+1}}</label></div><div class="row"><div class="form-group hotel-customer" ng-if="$ctrl.isAuthenticated() == true && $ctrl.customerTravellers.length > 0 && ($ctrl.customerTravellers | traveller:item.type).length > 0"><div class="col-sm-4">Ch\u1ECDn kh\xE1ch h\xE0ng \u0111\xE3 l\u01B0u</div><div class="col-sm-8"><select class="form-control regular-cust-select" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in ($ctrl.customerTravellers | traveller:item.type) track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseCustomer(item)" id="bookingcustomerselect"><option value="">{{\'flight.plchdr.choose\' | translate}}</option></select></div></div></div><div class="row"><div class="form-group"><div class="col-sm-4 col-xs-12 cust-cell"><div class="form-input select-gender"><span class="label-select require-label">Gi\u1EDBi t\xEDnh</span><select class="selectGender form-control" ng-change="changeSelect(\'{{$index}}\', item.cuGender)" ng-model="item.cuGender" required placeholder="{{\'flight.plchdr.choose\' | translate}}" id="bookingCuGender{{$index}}" name="bookingCuGender{{$index}}"><option value="" disabled="disabled" selected="selected" hidden>{{\'flight.plchdr.choose\' | translate}}</option><option ng-if="item.type==\'ADT\'" ng-repeat="title in $ctrl.adultTitleLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option><option ng-if="item.type==\'CHD\' || item.type==\'INF\'" ng-repeat="title in $ctrl.childTitleLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'bookingCuGender\' + $index].$touched) && $ctrl.form[\'bookingCuGender\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'bookingCuGender\' + $index].$error.required" data-translate="entity.validation.required"></p></div></div></div><div class="col-sm-4 col-xs-12 cust-cell"><div class="form-input"><span class="require-label" data-translate="flight.booking.info.custinfo.familyname"></span> <input type="text" id="cuFamilyName{{$index}}" name="cuFamilyName{{$index}}" placeholder="{{\'flight.plchdr.surname\' | translate}}" ng-maxlength="130" gtd-no-special-char gtd-capitalize="true" ng-change="changeInput(\'{{$index}}\', \'ciFName\', item.cuFamilyName)" class="gtd-text-medium form-control gtd-required" ng-model="item.cuFamilyName" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuFamilyName\' + $index].$touched) && $ctrl.form[\'cuFamilyName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuFamilyName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'cuFamilyName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div></div><div class="col-sm-4 col-xs-12 cust-cell"><div class="form-input"><span class="require-label" data-translate="flight.booking.info.custinfo.name"></span> <input type="text" id="cuName{{$index}}" name="cuName{{$index}}" placeholder="{{\'flight.plchdr.name\' | translate}}" ng-maxlength="130" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" ng-change="changeInput(\'{{$index}}\', \'ciName\', item.cuName)" ng-model="item.cuName" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuName\' + $index].$touched) && $ctrl.form[\'cuName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'cuName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div></div></div></div><ng-switch on="!(item.type ==\'ADT\' && $ctrl.searchOptions.dtype == \'domestic\')"><div class="row"><div class="form-group" ng-switch-when="true"><div class="row col-sm-12"><div class="cust-cell"><span class="require-label" data-translate="flight.booking.info.custinfo.dob" class="label-custom"></span><div class="row-tk"><gtd-combo-date name="cuDob{{$index}}" index="$index" ng-model="item.cuDob" ng-min-date="{{item.min}}" ng-max-date="{{item.max}}" ng-order="dmy"></gtd-combo-date><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuDob\' + $index + \'Date\'].$touched || $ctrl.form[\'cuDob\' + $index + \'Month\'].$touched || $ctrl.form[\'cuDob\' + $index + \'Year\'].$touched) && ($ctrl.form[\'cuDob\' + $index + \'Date\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Month\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Year\'].$invalid)"><p class="help-block" ng-show="$ctrl.form[\'cuDob\' + $index + \'Date\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Month\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Year\'].$invalid" data-translate="entity.validation.required" ng-if="item.type ==\'ADT\'"></p><p class="help-block" ng-show="$ctrl.form[\'cuDob\' + $index + \'Date\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Month\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Year\'].$invalid" data-translate="entity.validation.childage" ng-if="item.type ==\'CHD\'"></p><p class="help-block" ng-show="$ctrl.form[\'cuDob\' + $index + \'Date\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Month\'].$invalid || $ctrl.form[\'cuDob\' + $index + \'Year\'].$invalid" data-translate="entity.validation.infantage" ng-if="item.type ==\'INF\'"></p></div></div></div></div><div class="row col-sm-12"><div class="cust-cell" ng-if="(item.type != \'CHD\' && item.type != \'INF\') || $ctrl.searchOptions.dtype == \'international\'"><span class="require-label" data-translate="flight.booking.info.custinfo.nationality"></span><select class="form-control" ng-model="item.cuNationality" required id="cuNationality{{$index}}" name="cuNationality{{$index}}"><option ng-repeat="country in $ctrl.allCountries" value="{{country.code}}">{{country.name}}</option></select><div class="error" ng-if="($ctrl.form.$submitted || $ctrl.form[\'cuNationality\' + $index].$touched) && $ctrl.form[\'cuNationality\' + $index].$invalid"><p class="help-block" ng-if="$ctrl.form[\'cuNationality\' + $index].$error.required" data-translate="entity.validation.required"></p></div></div></div></div><div class="form-group" ng-switch-when="true" ng-if="(item.type != \'CHD\' && item.type != \'INF\') || $ctrl.searchOptions.dtype == \'international\'"><div class="row" ng-if="!((item.cuNationality==\'vn\')&&($ctrl.checkPassportForVNToEastSouthAsia()==true) && ($ctrl.flightInternalfn() == true ))"><div class="col-sm-12"><div class="col-sm-2 cust-cell"><span class="require-label">&nbsp;</span><select class="form-control" ng-model="item.cuPp" required id="cuPassportType{{$index}}" name="cuPassportType{{$index}}"><option ng-repeat="passportType in $ctrl.passportTypeLookups" value="{{passportType.lookupValue}}">{{passportType.lang | translate}}</option></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuPassportType\' + $index].$touched) && $ctrl.form[\'cuPassportType\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuPassportType\' + $index].$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-4 cust-cell"><span class="require-label">&nbsp;</span> <input type="text" id="cuId{{$index}}" name="cuId{{$index}}" ng-maxlength="20" placeholder="{{\'flight.plchdr.passport\' | translate}}" gtd-no-special-char class="gtd-text-medium form-control" ng-model="item.cuId" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuId\' + $index].$touched) && $ctrl.form[\'cuId\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuId\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'cuId\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20"></p></div></div><div class="col-sm-6 cust-cell"><span class="require-label">Ng\xE0y h\u1EBFt h\u1EA1n</span><div class="row-tk"><gtd-combo-date name="cuExp{{$index}}" index="$index" ng-model="item.cuExpiredDate" ng-min-date="{{$ctrl.minExp}}" ng-max-date="{{$ctrl.maxExp}}" ng-order="dmy"></gtd-combo-date><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuExp\' + $index + \'Date\'].$touched || $ctrl.form[\'cuExp\' + $index + \'Month\'].$touched || $ctrl.form[\'cuExp\' + $index + \'Year\'].$touched) && ($ctrl.form[\'cuExp\' + $index + \'Date\'].$invalid || $ctrl.form[\'cuExp\' + $index + \'Month\'].$invalid || $ctrl.form[\'cuExp\' + $index + \'Year\'].$invalid)"><p class="help-block" ng-show="$ctrl.form[\'cuExp\' + $index + \'Date\'].$invalid || $ctrl.form[\'cuExp\' + $index + \'Month\'].$invalid || $ctrl.form[\'cuExp\' + $index + \'Year\'].$invalid" data-translate="entity.validation.passportdate"></p></div></div></div></div></div><div class="col-sm-12" ng-if="!((item.cuNationality==\'vn\')&&($ctrl.checkPassportForVNToEastSouthAsia()==true))"><span data-translate="flight.booking.info.custinfo.help" class="terms-text"></span></div></div></div></ng-switch><div class="row"><div class="form-group"><div class="row"><div class="col-sm-12"><div class="col-sm-6 cust-cell"><span class="label-custom">S\u1ED1 th\u1EBB kh\xE1ch h\xE0ng th\u01B0\u1EDDng xuy\xEAn</span><select class="gtd-text-medium form-control" ng-model="item.cuCardType" ng-change="$ctrl.chooseMemberCard(item)"><option value="" selected="selected">{{\'flight.plchdr.choose\' | translate}}</option><option ng-repeat="cardType in $ctrl.cardTypeLookups" value="{{cardType.lookupValue}}">{{cardType.lang | translate}}&nbsp;({{cardType.lookupValue}})</option></select></div><div class="col-sm-6 cust-cell"><span class="hidden-sm-up">&nbsp;</span> <input type="text" id="cuCardNo{{$index}}" name="cuCardNo{{$index}}" ng-maxlength="40" placeholder="{{\'flight.plchdr.membercard\' | translate}}" gtd-no-special-char class="gtd-text-medium form-control" ng-model="item.cuCardNo" ng-required="item.cuCardType"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuCardNo\' + $index].$touched) && $ctrl.form[\'cuCardNo\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuCardNo\' + $index].$invalid" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'cuCardNo\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="40"></p></div></div></div></div></div></div><div class="row"><!--div class="col-md-6" ng-if="$ctrl.isAuthenticated() == true && !$ctrl.liteEmbed">\n                        <div class="form-group" style="margin-bottom: 0px">\n                            <div class="mt-checkbox-list" style="padding: 0px">\n                                <label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px">\n                                    <input type="checkbox" value="1" name="test" ng-model="item.checked">\n                                    <span></span>\n                                </label>\n                                <span style="margin-left: 30px">L\u01B0u th\xF4ng tin h\xE0nh kh\xE1ch n\xE0y</span>\n                            </div>\n                        </div>\n                    </div--><div class="col-md-6"><div class="form-group" style="margin-bottom: 0px"><div class="mt-checkbox-list checkRadio{{$index}}" style="padding: 0px"><label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px"><input type="checkbox" value="1" name="selectContact" class="checkedSelectContact selectContact{{$index}}" ng-model="checkedSelectContact" ng-click="fooChanged($index)"> <span></span></label><span style="margin-left: 30px">Ch\u1ECDn l\xE0m th\xF4ng tin li\xEAn h\u1EC7</span></div></div></div></div><ng-switch on="item.type ==\'CHD\' || item.type==\'ADT\'"><div class="horizontal-line" ng-switch-when="true"></div><div class="row"><div class="form-group" ng-switch-when="true"><div class="row"><div class="col-sm-12"><div class="col-sm-6 cust-cell" ng-if="$ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems.length > 0"><div class="form-input select-gender"><span class="select-baggage" ng-if="$ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems[0].code.lastIndexOf(\'MF_PER_PAX_ROUNDTRIP\') != -1" class="label-custom" data-translate="flight.booking.info.custinfo.luggage-departure-rt"></span> <span class="select-baggage" ng-if="$ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems[0].code.lastIndexOf(\'MF_PER_PAX_ROUNDTRIP\') == -1" class="label-custom" data-translate="flight.booking.info.custinfo.luggage-departure"></span><div class="form-input select-gender" ng-if="$ctrl.merchantCode == \'FSOFT\'"><select class="selectGender gtd-text-medium form-control" ng-model="item.cuLuggageDeparture" required id="cuLuggageDeparture{{$index}}" name="cuLuggageDeparture{{$index}}" ng-if="$ctrl.merchantCode == \'FSOFT\'" ng-change="$ctrl.chooseLuggagePackage(\'depart\', key)"><option value="" selected="selected">{{\'flight.plchdr.choose\' | translate}}</option><option value="0">Kh\xF4ng c\xF3</option><option value="{{ssr.id}}" ng-repeat="ssr in $ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems | orderBy:\'amount\'" ng-if="$ctrl.checkListBaggage(ssr)">{{ssr.name}}&nbsp;({{ssr.amount | number}}&nbsp;VN\u0110)</option></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuLuggageDeparture\' + $index].$touched) && $ctrl.form[\'cuLuggageDeparture\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuLuggageDeparture\' + $index].$invalid" data-translate="entity.validation.required"></p></div></div><div class="form-input select-gender" ng-if="$ctrl.merchantCode != \'FSOFT\'"><select class="selectGender gtd-text-medium form-control" ng-model="item.cuLuggageDeparture" id="cuLuggageDeparture{{$index}}" name="cuLuggageDeparture{{$index}}" ng-change="$ctrl.chooseLuggagePackage(\'depart\', key)"><option value="" selected="selected">{{\'flight.plchdr.choose\' | translate}}</option><option value="{{ssr.id}}" ng-repeat="ssr in $ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems | orderBy:\'amount\'" ng-if="$ctrl.checkListBaggage(ssr)">{{ssr.name}}&nbsp;({{ssr.amount | number}}&nbsp;VN\u0110)</option></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuLuggageDeparture\' + $index].$touched) && $ctrl.form[\'cuLuggageDeparture\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuLuggageDeparture\' + $index].$invalid" data-translate="entity.validation.required"></p></div></div></div></div><div class="col-sm-6 cust-cell" ng-if="$ctrl.searchOptions.searchType!=\'oneway\' && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems.length > 0"><div class="form-input select-gender" ng-if="$ctrl.merchantCode != \'FSOFT\'"><span class="select-baggage" data-translate="flight.booking.info.custinfo.luggage-return"></span> <span class="select-baggage" ng-if="!($ctrl.searchOptions.searchType!=\'oneway\' && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems.length > 0)">&nbsp;</span><select class="gtd-text-medium selectGender form-control" ng-model="item.cuLuggageReturn" name="cuLuggageReturn{{$index}}" id="cuLuggageReturn{{$index}}" ng-change="$ctrl.chooseLuggagePackage(\'return\', key)"><option value="" selected="selected">{{\'flight.plchdr.choose\' | translate}}</option><option value="{{ssr.id}}" ng-repeat="ssr in $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems | orderBy:\'amount\'" ng-if="$ctrl.checkListBaggage(ssr)">{{ssr.name}}&nbsp;({{ssr.amount | number}}&nbsp;VN\u0110)</option></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuLuggageReturn\' + $index].$touched) && $ctrl.form[\'cuLuggageReturn\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuLuggageReturn\' + $index].$invalid" data-translate="entity.validation.required"></p></div></div><div class="form-input select-gender" ng-if="$ctrl.merchantCode == \'FSOFT\'"><span class="require-label" data-translate="flight.booking.info.custinfo.luggage-return"></span> <span ng-if="!($ctrl.searchOptions.searchType!=\'oneway\' && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems.length > 0)">&nbsp;</span><select class="gtd-text-medium selectGender form-control" ng-model="item.cuLuggageReturn" required name="cuLuggageReturn{{$index}}" id="cuLuggageReturn{{$index}}" ng-change="$ctrl.chooseLuggagePackage(\'return\', key)"><option value="" selected="selected">{{\'flight.plchdr.choose\' | translate}}</option><option value="0">Kh\xF4ng c\xF3</option><option value="{{ssr.id}}" ng-repeat="ssr in $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems | orderBy:\'amount\'" ng-if="$ctrl.checkListBaggage(ssr)">{{ssr.name}}&nbsp;({{ssr.amount | number}}&nbsp;VN\u0110)</option></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuLuggageReturn\' + $index].$touched) && $ctrl.form[\'cuLuggageReturn\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuLuggageReturn\' + $index].$invalid" data-translate="entity.validation.required"></p></div></div></div></div><div class="col-sm-12" ng-if="$ctrl.bookingModel.bookingInfo.airline == \'BL\'"><div ng-if="item.type ==\'CHD\' || item.type==\'ADT\'"><div class="col-sm-6 cust-cell" ng-if="$ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems.length > 0"><div class="form-input select-gender" ng-init="$ctrl.setMeal();"><span class="select-Meal" ng-if="$ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems[0].code.lastIndexOf(\'MF_PER_PAX_ROUNDTRIP\') != -1" class="label-custom">Th\u1EE9c \u0103n chi\u1EC1u \u0111i</span> <span class="select-Meal" ng-if="$ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems[0].code.lastIndexOf(\'MF_PER_PAX_ROUNDTRIP\') == -1" class="label-custom">Th\u1EE9c \u0103n chi\u1EC1u \u0111i</span><select multiple="multiple" class="selectGender-meal selectGender gtd-text-medium form-control" ng-model="item.cuMealDeparture" id="selectGender-meal" ng-change="$ctrl.chooseMealPackage(\'depart\', key)"><!-- <option value="" selected>{{\'flight.plchdr.choose\' | translate}}</option> --><option value="{{ssr.id}}" ng-repeat="ssr in $ctrl.searchOptions.ssrOfferItemsDepart[0].ssrItems | orderBy:\'amount\'" ng-if="ssr.serviceType==\'MEAL\'">{{ssr.name}}({{ssr.amount | number}}&nbsp;VN\u0110)</option></select></div></div></div><div ng-if="item.type ==\'CHD\' || item.type==\'ADT\'"><div class="col-sm-6 cust-cell cust-cell1"><div class="form-input select-gender"><span class="select-Meal" ng-if="$ctrl.searchOptions.searchType!=\'oneway\' && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems.length > 0">Th\u1EE9c \u0103n chi\u1EC1u v\u1EC1</span> <span class="select-Meal" ng-if="!($ctrl.searchOptions.searchType!=\'oneway\' && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems.length > 0)">&nbsp;</span><select multiple="multiple" class="selectGender-meal gtd-text-medium selectGender form-control" ng-model="item.cuMealReturn" ng-change="$ctrl.chooseMealPackage(\'return\', key)" id="selectGender-meal" ng-if="$ctrl.searchOptions.searchType!=\'oneway\' && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems != null && $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems.length > 0"><!-- <option value="" selected>{{\'flight.plchdr.choose\' | translate}}</option> --><option value="{{ssr.id}}" ng-repeat="ssr in $ctrl.searchOptions.ssrOfferItemsReturn[0].ssrItems | orderBy:\'amount\'" ng-if="ssr.serviceType==\'MEAL\'">{{ssr.name}}({{ssr.amount | number}}&nbsp;VN\u0110)</option></select></div></div></div></div></div></div></div></ng-switch></div><!--</ng-form>--></div></div>');
        $templateCache.put('app/components/booking/flight-booking-history-billing-info-view.html', '<div class="portlet light" ng-show="$ctrl.bookingModel.biCompany != null || $ctrl.bookingModel.biMst != null || $ctrl.bookingModel.biMobile != null || $ctrl.bookingModel.biAddress != null ||  $ctrl.bookingModel.tPCName != null || $ctrl.bookingModel.tPCfName != null || $ctrl.bookingModel.tPCPhone != null || $ctrl.bookingModel.tPCfemail != null || $ctrl.bookingModel.tPCNote !=null"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.billinfo.title"></span></span></div></div><div class="portlet-body form"><div class="portlet-body"><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.company"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biCompany}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mst"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biMst}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mobile"></span></div><!-- <div class="col-md-9 value"> (+{{$ctrl.bookingModel.biMobileCode}})&nbsp;{{$ctrl.bookingModel.biMobile}}</div> --><div class="col-md-9 value">{{$ctrl.bookingModel.biMobile}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.address"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biAddress}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>H\u1ECD</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.fname}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>T\xEAn \u0111\u1EC7m v\xE0 T\xEAn</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.name}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>S\u1ED1 \u0110i\u1EC7n tho\u1EA1i</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.phone}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>Email</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.email1}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>Ghi ch\xFA</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.note}}</div></div></div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-progress.html', '<div class="booking-progress-bar-wrapper"><!--<div class="portlet portlet-fit">--><div class="portlet-body booking-progress-bar-wrapper"><div class="mt-element-step"><div class="row step-line"><div class="col-xs-4 mt-step-col first" ng-class="{\'done\':$ctrl.bookingModel.curStep >= 1}"><div class="mt-step-number bg-white">1</div><div class="mt-step-title uppercase font-grey-cascade"><span data-translate="flight.booking.progress.info" ng-show="$ctrl.mode != \'hotel\'"></span> <span data-translate="flight.booking.progress.hotelinfo" ng-show="$ctrl.mode == \'hotel\'"></span></div></div><div class="col-xs-4 mt-step-col" ng-class="{\'done\':$ctrl.bookingModel.curStep >= 2}"><div class="mt-step-number bg-white">2</div><div class="mt-step-title uppercase font-grey-cascade"><span data-translate="flight.booking.progress.confirm" ng-show="$ctrl.mode != \'hotel\'"></span> <span data-translate="flight.booking.progress.hotelconfirm" ng-show="$ctrl.mode == \'hotel\'"></span></div></div><div class="col-xs-4 mt-step-col last" ng-class="{\'done\':$ctrl.bookingModel.curStep >= 3}"><div class="mt-step-number bg-white">3</div><div class="mt-step-title uppercase font-grey-cascade"><span data-translate="flight.booking.progress.payment"></span></div></div></div></div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-summary-details-item.html', '<div class="portlet-body"><!-- Header --><div class="row static-info"><div class="col-md-12"><span class="fa fa-plane rotate-45" style="margin-right: 10px"></span><ng-switch on="$ctrl.groupItem.flightType == \'INTERNATIONAL\'"><span class="bold" ng-switch-when="true" ng-show="$ctrl.pricedItinerary.directionInd == \'RETURN\'" data-translate="global.menu.account.profiles.round">V\xE9 kh\u1EE9 h\u1ED3i </span><span class="bold" ng-switch-when="true" ng-show="!($ctrl.pricedItinerary.directionInd == \'RETURN\')">V\xE9 m\u1ED9t chi\u1EC1u</span></ng-switch><ng-switch on="$ctrl.groupItem.flightType == \'DOMESTIC\'"><span class="bold" ng-switch-when="true" ng-show="$ctrl.flightIdx == \'0\'" data-translate="global.menu.account.profiles.oneway">V\xE9 m\u1ED9t chi\u1EC1u </span><span class="bold" ng-switch-when="true" ng-show="$ctrl.flightIdx == \'1\'">V\xE9 chi\u1EC1u \u0111i </span><span class="bold" ng-switch-when="true" ng-show="$ctrl.flightIdx == \'2\'">V\xE9 chi\u1EC1u v\u1EC1</span></ng-switch></div></div><div class="row static-info"><div class="col-md-12"><span>{{$ctrl.groupItem.originCity}} ({{$ctrl.groupItem.originLocationCode}}) </span>&nbsp;-&nbsp; <span>{{$ctrl.groupItem.destinationCity}} ({{$ctrl.groupItem.destinationLocationCode}})</span></div></div><!-- ADULT --><ng-switch on="$ctrl.pricedItinerary.airItineraryPricingInfo.adultFare != null"><div ng-switch-when="true"><div class="row static-info"><div class="col-xs-5 name"><span data-translate="flight.booking.summary.adult"></span></div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'adult\':\'fare\' | number}} VN\u0110&nbsp; </span>*&nbsp;{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'adult\':\'quantities\'}}</div></div><div class="row static-info"><div class="col-xs-5 name"><span data-translate="flight.booking.summary.fee"></span></div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'adult\':\'tax\' | number}} VN\u0110&nbsp; </span>*&nbsp;{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'adult\':\'quantities\'}}</div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-xs-5 name">T\u1ED5ng</div><div class="col-xs-7 value pull-right text-right"><span class="price-text-sm">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'adult\':\'netprice\' | number}} VN\u0110&nbsp;</span></div></div><div class="horizontal-line"></div></div></ng-switch><!-- CHILD --><ng-switch on="$ctrl.pricedItinerary.airItineraryPricingInfo.childFare != null"><div ng-switch-when="true"><div class="row static-info"><div class="col-xs-5 name">Tr\u1EBB em</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'child\':\'fare\' | number}} VN\u0110&nbsp; </span>*&nbsp;{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'child\':\'quantities\'}}</div></div><div class="row static-info"><div class="col-xs-5 name"><span data-translate="flight.booking.summary.fee"></span></div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'child\':\'tax\' | number}} VN\u0110&nbsp; </span>*&nbsp;{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'child\':\'quantities\'}}</div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-xs-5 name">T\u1ED5ng</div><div class="col-xs-7 value pull-right text-right"><span class="price-text-sm">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'child\':\'netprice\' | number}} VN\u0110&nbsp;</span></div></div><div class="horizontal-line"></div></div></ng-switch><!-- INFANTS --><ng-switch on="$ctrl.pricedItinerary.airItineraryPricingInfo.infantFare != null"><div ng-switch-when="true"><div class="row static-info"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.infant">S\u01A1 sinh</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'infant\':\'fare\' | number}} VN\u0110&nbsp; </span>*&nbsp;{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'infant\':\'quantities\'}}</div></div><div class="row static-info"><div class="col-xs-5 name"><span data-translate="flight.booking.summary.fee"></span></div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'infant\':\'tax\' | number}} VN\u0110&nbsp; </span>*&nbsp;{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'infant\':\'quantities\'}}</div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.total">T\u1ED5ng</div><div class="col-xs-7 value pull-right text-right"><span class="price-text-sm">{{$ctrl.pricedItinerary | bookingAirPricedItinerary:\'infant\':\'netprice\' | number}} VN\u0110&nbsp;</span></div></div><div class="horizontal-line"></div></div></ng-switch><div class="row static-info"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.Luggage">Ph\xED h\xE0nh l\xFD</div><div class="col-xs-7 value pull-right text-right"><ng-switch on="$ctrl.groupItem.flightType == \'INTERNATIONAL\'"><span class="bold" ng-switch-when="true">{{$ctrl.bookingModel | bookingPriceInfo:\'luggage_price\' | number}} VN\u0110&nbsp;</span></ng-switch><ng-switch on="$ctrl.groupItem.flightType == \'DOMESTIC\'"><span class="bold" ng-if="$ctrl.flightIdx == \'2\'" ng-switch-when="true">{{$ctrl.bookingModel | bookingPriceInfo:\'luggage_price\':\'return\' | number}} VN\u0110&nbsp; </span><span class="bold" ng-if="$ctrl.flightIdx != \'2\'" ng-switch-when="true">{{$ctrl.bookingModel | bookingPriceInfo:\'luggage_price\':\'depart\' | number}} VN\u0110&nbsp;</span></ng-switch></div></div><div class="row static-info"><div class="col-xs-5 name">Ph\xED Th\u1EE9c \u0102n</div><div class="col-xs-7 value pull-right text-right"><ng-switch on="$ctrl.groupItem.flightType == \'INTERNATIONAL\'"><span class="bold" ng-switch-when="true">{{$ctrl.bookingModel | bookingPriceInfo:\'meal_price\' | number}} VN\u0110&nbsp;</span></ng-switch><ng-switch on="$ctrl.groupItem.flightType == \'DOMESTIC\'"><span class="bold" ng-if="$ctrl.flightIdx == \'2\'" ng-switch-when="true">{{$ctrl.bookingModel | bookingPriceInfo:\'meal_price\':\'return\' | number}} VN\u0110&nbsp; </span><span class="bold" ng-if="$ctrl.flightIdx != \'2\'" ng-switch-when="true">{{$ctrl.bookingModel | bookingPriceInfo:\'meal_price\':\'depart\' | number}} VN\u0110&nbsp;</span></ng-switch></div></div></div>');
        $templateCache.put('app/components/booking/flight-booking-summary-details.html', '<ng-switch on="$ctrl.bookingModel.showSummaryDetails"><div class="portlet light" ng-switch-when="true"><ng-switch on="$ctrl.searchOptions.searchType == \'oneway\'"><gtd-flight-booking-summary-details-item group-item="$ctrl.bookingModel.departGroupItem" priced-itinerary="$ctrl.bookingModel.departPricedItinerary" itin-total-fare-info="$ctrl.bookingModel.departItinTotalFare" search-options="$ctrl.searchOptions" flight-idx="0" booking-model="$ctrl.bookingModel" ng-switch-when="true"></gtd-flight-booking-summary-details-item><gtd-flight-booking-summary-details-item group-item="$ctrl.bookingModel.departGroupItem" priced-itinerary="$ctrl.bookingModel.departPricedItinerary" itin-total-fare-info="$ctrl.bookingModel.departItinTotalFare" search-options="$ctrl.searchOptions" flight-idx="1" booking-model="$ctrl.bookingModel" ng-switch-when="false"></gtd-flight-booking-summary-details-item></ng-switch><ng-switch on="$ctrl.searchOptions.searchType != \'oneway\' && $ctrl.searchOptions.dtype == \'domestic\'"><gtd-flight-booking-summary-details-item group-item="$ctrl.bookingModel.returnGroupItem" priced-itinerary="$ctrl.bookingModel.returnPricedItinerary" itin-total-fare-info="$ctrl.bookingModel.returnItinTotalFare" search-options="$ctrl.searchOptions" flight-idx="2" booking-model="$ctrl.bookingModel" ng-switch-when="true"></gtd-flight-booking-summary-details-item></ng-switch><!-- SUMMARY - ONLY show this value for DOME, RoundTrip and MarkupType=Per_Booking --><div class="summary"><div class="portlet-body"><div class="horizontal-line"></div><!-- Header --><div class="row static-info"><div class="col-xs-5 name bold" data-translate="global.menu.account.profiles.charge">Ph\xED d\u1ECBch v\u1EE5</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.bookingModel | bookingPriceInfo:\'total_service_fee\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info" ng-show="$ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\') || ($ctrl.bookingModel.bookingInfo.paymentStatus == \'SUCCEEDED\' && $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0)"><div class="col-xs-5 name" ng-show="($ctrl.bookingModel.voucher.discountAmount > 0 || $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0)">M\xE3 gi\u1EA3m gi\xE1</div><div class="col-xs-7 value pull-right text-right" ng-show="($ctrl.bookingModel.voucher.discountAmount > 0 || $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0)"><span class="bold">- {{$ctrl.bookingModel | bookingPriceInfo:\'discount\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info"><div class="col-xs-5 name bold" data-translate="global.menu.account.profiles.totalpay">T\u1ED5ng thanh to\xE1n</div><div class="col-xs-7 value pull-right text-right"><span class="price-text">{{$ctrl.bookingModel | bookingPriceInfo:\'total_price\' | number}} VN\u0110&nbsp;</span></div></div></div></div></div></ng-switch>');
        $templateCache.put('app/components/booking/flight-booking-summary.html', '<div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.summary.title"></span></span></div></div><div class="portlet-body"><!-- Total --><div class="row static-info"><div class="col-xs-5 name">Gi\xE1 v\xE9</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.bookingModel | bookingPriceInfo:\'total_fare\' | number}} VN\u0110&nbsp;</span></div></div><!-- Service Tax --><div class="row static-info"><div class="col-xs-5 name">Thu\u1EBF v\xE0 Ph\xED</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.bookingModel | bookingPriceInfo:\'total_tax\' | number}} VN\u0110&nbsp;</span></div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.total">T\u1ED5ng</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.bookingModel | bookingPriceInfo:\'total_netprice\' | number}} VN\u0110&nbsp;</span></div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.charge">Ph\xED D\u1ECBch V\u1EE5</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.bookingModel | bookingPriceInfo:\'total_service_fee\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.Luggage">Ph\xED H\xE0nh L\xFD</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.bookingModel | bookingPriceInfo:\'luggage_price\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info"><div class="col-xs-5 name">Ph\xED Th\u1EE9c \u0102n</div><div class="col-xs-7 value pull-right text-right"><span class="bold">{{$ctrl.bookingModel | bookingPriceInfo:\'meal_price\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info" ng-show="$ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\') || ($ctrl.bookingModel.bookingInfo.paymentStatus == \'SUCCEEDED\' && $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0)"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.Promotion">M\xE3 gi\u1EA3m gi\xE1</div><div class="col-xs-7 value pull-right text-right" ng-show="($ctrl.bookingModel.voucher.discountAmount > 0 || $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0)"><span class="bold">- {{$ctrl.bookingModel | bookingPriceInfo:\'discount\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info" ng-show="$ctrl.showPriceCoupon"><div class="col-xs-5 name" data-translate="global.menu.account.profiles.Promotion">M\xE3 gi\u1EA3m gi\xE1</div><div class="col-xs-7 value pull-right text-right" ng-show="($ctrl.bookingModel.voucher.discountAmount > 0 || $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0)"><span class="bold">- {{$ctrl.bookingModel | bookingPriceInfo:\'discount\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info" ng-show="$ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\')"><div class="col-xs-5 name"><input type="text" ng-model="$ctrl.bookingModel.voucher.voucherCode"></div><div class="col-xs-7 value pull-right text-right"><span class="bold"><button class="btn btn-green btn-voucher" ng-click="$ctrl.validateVoucher()" ng-disabled="!$ctrl.bookingModel.voucher.voucherCode" data-translate="global.menu.account.profiles.redeem">\xC1p d\u1EE5ng</button></span></div><div class="error col-md-12" ng-show="$ctrl.wrongVoucher"><p class="help-block" ng-show="$ctrl.wrongVoucher" data-translate="global.menu.account.profiles.promotion1">M\xE3 gi\u1EA3m gi\xE1 kh\xF4ng \u0111\xFAng</p></div></div><!-- TOTAL FEE --><div class="row static-info"><div class="col-md-12 value pull-right text-right"><span class="price-text">{{$ctrl.bookingModel | bookingPriceInfo:\'total_price\' | number}} VN\u0110&nbsp;</span></div></div><div class="row static-info" ng-show="!$ctrl.bookingModel.airView"><div class="col-xs-5 name">&nbsp;</div><div class="col-xs-7 value pull-right text-right text-color3 hand" ng-click="$ctrl.bookingModel.showSummaryDetails=!$ctrl.bookingModel.showSummaryDetails"><span ng-show="!$ctrl.bookingModel.showSummaryDetails" data-translate="global.menu.account.profiles.detail1">Xem chi ti\u1EBFt </span><span ng-show="$ctrl.bookingModel.showSummaryDetails" data-translate="global.menu.account.profiles.detail2">\u1EA8n chi ti\u1EBFt </span><span class="fa fa-info-circle"></span></div></div><div class="row static-info"><div class="col-sm-12" ng-show="$ctrl.bookingModel.airView"><div class="btn btn-green" style="width: 100%" data-translate="global.menu.account.profiles.pay">Thanh to\xE1n</div></div></div></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-billing-info-view.html', '<div class="portlet light" ng-show="$ctrl.bookingModel.biCompany != null || $ctrl.bookingModel.biMst != null || $ctrl.bookingModel.biMobile != null || $ctrl.bookingModel.biAddress != null || $ctrl.bookingModel.tPCName != null || $ctrl.bookingModel.tPCfName != null || $ctrl.bookingModel.tPCPhone != null || $ctrl.bookingModel.tPCfemail != null || $ctrl.bookingModel.tPCNote !=null"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.billinfo.title"></span></span></div></div><div class="portlet-body form"><div class="portlet-body"><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.company"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biCompany}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mst"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biMst}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mobile"></span></div><div class="col-md-9 value">(+{{$ctrl.bookingModel.biMobileCode}})&nbsp;{{$ctrl.bookingModel.biMobile}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.address"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biAddress}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="hotel.booking.info.custinfo.familyname">H\u1ECD</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCfName}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="hotel.booking.info.custinfo.name">T\xEAn \u0111\u1EC7m v\xE0 T\xEAn</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCName}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="hotel.booking.info.custinfo.phone">S\u1ED1 \u0110i\u1EC7n tho\u1EA1i</span></div><div class="col-md-9 value long-value">(+{{$ctrl.bookingModel.tPCPhoneCode}})&nbsp; {{$ctrl.bookingModel.tPCPhone}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>Email</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCemail}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="hotel.booking.info.custinfo.note">Ghi ch\xFA</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.tPCNote}}</div></div></div><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.billinfo.address"></span> </div>--><!--<div class="col-md-9 value"> {{$ctrl.bookingModel.biAddress}}--><!--</div>--><!--</div>--><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.billinfo.address"></span> </div>--><!--<div class="col-md-9 value"> {{$ctrl.bookingModel.biAddress}}--><!--</div>--><!--</div>--><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.billinfo.address"></span> </div>--><!--<div class="col-md-9 value"> {{$ctrl.bookingModel.biAddress}}--><!--</div>--><!--</div>--><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.billinfo.address"></span> </div>--><!--<div class="col-md-9 value"> {{$ctrl.bookingModel.biAddress}}--><!--</div>--><!--</div>--></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-billing-info.html', '<div class="portlet light flight-booking-billing-info hotel-border hotel-border-radius"><div class="portlet-title"><div class="caption"><!--<span class="fa fa-square-o" ng-if="$ctrl.bookingModel.showForm == false" ng-click="$ctrl.doShowForm();"></span>--><!--<span class="fa fa-check-square-o" ng-if="$ctrl.bookingModel.showForm == true" ng-click="$ctrl.doShowForm();"></span>--><div class="mt-checkbox-list" style="padding: 0px"><label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px"><input type="checkbox" ng-model="$ctrl.bookingModel.showForm" ng-click="$ctrl.doShowForm();"> <span>&nbsp;</span></label><span style="margin-left: 30px" class="caption-subject font-dark bold uppercase" data-translate="flight.booking.info.billinfo.title"></span></div><!--<span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.billinfo.title"></span> </span>--></div></div><div class="portlet-body form" ng-if="$ctrl.bookingModel.showForm == true"><!-- BEGIN FORM--><div class="form-body"><div class="form-group"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.billinfo.company"></span>:<div style="color: red">*</div></div></label><input type="text" id="biCompany" name="biCompany" required ng-maxlength="320" class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biCompany" placeholder="{{\'flight.plchdr.company\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biCompany.$touched) && $ctrl.form.biCompany.$invalid"><p class="help-block" ng-show="$ctrl.form.biCompany.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form.biCompany.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="320"></p></div></div><div class="form-group"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.billinfo.mst"></span>:<div style="color: red">*</div></div></label><input type="text" id="biMst" name="biMst" ng-maxlength="80" required class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biMst" placeholder="{{\'flight.plchdr.mst\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biMst.$touched) && $ctrl.form.biMst.$invalid"><p class="help-block" ng-show="$ctrl.form.biMst.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form.biMst.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="80"></p></div></div><div class="form-group"><label class="control-label"><div style="display: flex"><span>{{\'hotel.search.result.company\' | translate}}</span>:<div style="color: red">*</div></div></label><textarea id="biAddress" name="biAddress" ng-maxlength="320" required class="form-control gtd-textarea-default" ng-model="$ctrl.bookingModel.biAddress" placeholder="{{\'flight.plchdr.address\' | translate}}" style="resize:none"></textarea><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biAddress.$touched) && $ctrl.form.biAddress.$invalid"><p class="help-block" ng-show="$ctrl.form.biAddress.$invalid" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form.biAddress.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="320"></p></div></div><!--<div class="row">--><!--<div class="col-sm-6 margin-bottom-10">--><!--<span class="bold" style="font-size: 18px">Th\xF4ng tin g\u1EEDi h\xF3a \u0111\u01A1n</span>--><!--</div>--><!--<div class="col-sm-6 margin-bottom-10" style="text-align: right">--><!--<input ng-model="$ctrl.bookingModel.biChecked" ng-click="$ctrl.updateBillingInfo()" type="checkbox" />--><!--<span class="text-right">L\u1EA5y th\xF4ng tin ng\u01B0\u1EDDi li\xEAn h\u1EC7</span>--><!--</div>--><!--</div>--><!--<div class="form-group">--><!--<label class="control-label"><span>H\u1ECD ng\u01B0\u1EDDi nh\u1EADn</span></label>--><!--<input type="text" maxlength="130"--><!--id="biFName" name="biFName" required class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biFName" placeholder="H\u1ECD ng\u01B0\u1EDDi nh\u1EADn">--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biFName.$touched) && $ctrl.form.biFName.$invalid">--><!--<p class="help-block" ng-show="$ctrl.form.biFName.$error.required" data-translate="entity.validation.required"></p>--><!--</div>--><!--</div>--><!--<div class="form-group">--><!--<label class="control-label"><span>T\xEAn \u0111\u1EC7m v\xE0 t\xEAn</span></label>--><!--<input type="text" maxlength="130"--><!--id="biLName" name="biLName" required class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biLName" placeholder="T\xEAn \u0111\u1EC7m v\xE0 t\xEAn">--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biLName.$touched) && $ctrl.form.biLName.$invalid">--><!--<p class="help-block" ng-show="$ctrl.form.biLName.$error.required" data-translate="entity.validation.required"></p>--><!--</div>--><!--</div>--><!--<div class="form-group">--><!--<label class="control-label"><span>Email</span></label>--><!--<input type="text" maxlength="120"--><!--gtd-email--><!--id="biEmail" name="biEmail" required class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biEmail" placeholder="Email">--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biEmail.$touched) && $ctrl.form.biEmail.$invalid">--><!--<p class="help-block" ng-show="$ctrl.form.biEmail.$error.required" data-translate="entity.validation.email"></p>--><!--</div>--><!--</div>--><!--<div class="form-group">--><!--<label class="control-label"><span>\u0110\u1ECBa ch\u1EC9 nh\u1EADn</span></label>--><!--<input type="text" maxlength="320"--><!--id="biPersonAddress" name="biPersonAddress" required class="gtd-text-large form-control" ng-model="$ctrl.bookingModel.biPersonAddress" placeholder="\u0110\u1ECBa ch\u1EC9 nh\u1EADn">--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biPersonAddress.$touched) && $ctrl.form.biPersonAddress.$invalid">--><!--<p class="help-block" ng-show="$ctrl.form.biPersonAddress.$error.required" data-translate="entity.validation.required"></p>--><!--</div>--><!--</div>--><div class="row"><div class="form-group"><div class="col-sm-4 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.billinfo.mobile"></span>:<div style="color: red">*</div></div><!--<select required class="gtd-text-small form-control" ng-model="$ctrl.bookingModel.biMobileCode">--><!--<option ng-repeat="country in $ctrl.allCountries" value="{{country.phoneCode}}">{{country.name}} (+{{country.phoneCode}})</option>--><!--</select>--><select class="form-control" id="biMobileCode" name="biMobileCode" ng-model="$ctrl.bookingModel.biMobileCode" required ng-options="country.phoneCode as (country.name + \' (+\' + country.phoneCode + \')\') for country in $ctrl.allCountries"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biMobileCode.$touched) && $ctrl.form.biMobileCode.$invalid"><p class="help-block" ng-show="$ctrl.form.biMobileCode.$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-8 cust-cell"><!-- >input required type="text"\n                               style="margin-bottom: 10px !important;"\n                               ng-if="$ctrl.bookingModel.biMobileCode==84"\n                               id="biVnPhone" name="biVnPhone"\n                               gtd-vn-phone maxlength="20"\n                               class="gtd-text-medium form-control " placeholder="{{\'flight.plchdr.phone\' | translate}}"\n                               ng-model="$ctrl.bookingModel.biMobile">\n\n                        <div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biVnPhone.$touched) && $ctrl.form.biVnPhone.$invalid">\n                            <p class="help-block" ng-show="$ctrl.form.biVnPhone.$invalid" data-translate="entity.validation.vnphone"></p>\n                        </div>\n\n                        <input required type="text"\n                               id="biPhone" name="biPhone"\n                               style="margin-bottom: 10px !important;"\n                               ng-if="!($ctrl.bookingModel.biMobileCode==84)"\n                               gtd-phone maxlength="20"\n                               class="gtd-text-medium form-control " placeholder="{{\'flight.plchdr.phone\' | translate}}"\n                               ng-model="$ctrl.bookingModel.biMobile">\n                        <div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biPhone.$touched) && $ctrl.form.biPhone.$invalid">\n                            <p class="help-block" ng-show="$ctrl.form.biPhone.$invalid" data-translate="entity.validation.phone"></p>\n                        </div --> &nbsp; <input required type="text" id="biPhone" name="biPhone" style="margin-bottom: 10px !important" gtd-phone maxlength="20" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" ng-model="$ctrl.bookingModel.biMobile"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form.biPhone.$touched) && $ctrl.form.biPhone.$invalid"><p class="help-block" ng-show="$ctrl.form.biPhone.$invalid" data-translate="entity.validation.phone"></p></div></div></div></div></div><!-- END FORM--><div style="padding: 0px"><label class="" style="margin-bottom: 0px"><span>&nbsp;</span></label><span class="caption-subject font-dark bold uppercase">{{\'hotel.search.result.voice\' | translate}}</span></div><span>&nbsp;</span><div class="row"><div class="form-group hotel-customer" ng-if="$ctrl.isAuthenticated() == true && $ctrl.customerTravellers.length > 0 && ($ctrl.customerTravellers | traveller:\'ADT\').length > 0"><div class="col-sm-4">{{\'flight.booking.info.custinfo.save\' |translate}}</div><div class="col-sm-8"><select ng-if="$ctrl.isAuthenticated() == true" class="form-control regular-cust-select" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in ($ctrl.customerTravellers | traveller:\'ADT\') track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseContact(item)"><option value="">{{\'flight.plchdr.choose\' | translate}}</option></select></div></div></div><div class="row"><div class="form-group"><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.familyname"></span>:<div style="color: red">*</div></div><input id="tPCfName{{$index}}" name="tPCfName{{$index}}" ng-maxlength="130" ng-model="$ctrl.bookingModel.tPCfName" type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.surname\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCfName\' + $index].$touched) && $ctrl.form[\'tPCfName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCfName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'tPCfName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.name"></span>:<div style="color: red">*</div></div><input id="tPCName" name="tPCName" ng-maxlength="130" ng-model="$ctrl.bookingModel.tPCName" type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.name\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCName\' + $index].$touched) && $ctrl.form[\'tPCName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'tPCName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p></div></div></div></div><div class="row"><div class="form-group"><div class="col-sm-4 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.contactinfo.mobile"></span>:<div style="color: red">*</div></div><select id="tPCPhoneCode" name="tPCPhoneCode" ng-model="$ctrl.bookingModel.tPCPhoneCode" class="form-control" required ng-options="country.phoneCode as (country.name + \' (+\' + country.phoneCode + \')\') for country in $ctrl.allCountries"></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCPhoneCode\' + $index].$touched) && $ctrl.form[\'tPCPhoneCode\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCPhoneCode\' + $index].$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-8 cust-cell">&nbsp; <input type="text" id="tPCPhone" name="tPCPhone" gtd-phone ng-model="$ctrl.bookingModel.tPCPhone" class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCPhone\' + $index].$touched) && $ctrl.form[\'tPCPhone\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCPhone\' + $index].$invalid" data-translate="entity.validation.phone"></p></div></div></div></div><div class="row"><div class="col-sm-12"><div class="form-group"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.contactinfo.email"></span>:<div style="color: red">*</div></div></label><input id="tPCemail" name="tPCemail" ng-maxlength="120" type="email" class="form-control" gtd-email ng-model="$ctrl.bookingModel.tPCemail" required placeholder="{{\'flight.plchdr.email\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'tPCemail\' + $index].$touched) && $ctrl.form[\'tPCemail\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'tPCemail\' + $index].$invalid" data-translate="entity.validation.email"></p><p class="help-block" ng-show="$ctrl.form[\'tPCemail\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p></div></div></div></div><div class="row"><div class="col-sm-12"><div class="form-group"><span data-translate="hotel.booking.info.custinfo.note">Ghi ch\xFA</span><textarea class="form-control" name="" id="" rows="3" style="resize:none" ng-model="$ctrl.bookingModel.tPCNote" id="tPCNote" name="tPCNote" placeholder="{{\'hotel.plchdr.note\' | translate}}"></textarea></div></div></div></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-contact-info-view.html', '<div class="portlet light hotel-border hotel-border-radius"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.contactinfo.title"></span></span></div></div><div class="portlet-body" ng-repeat="item in $ctrl.bookingModel.contacts"><div class="form-group"><label class="control-label person-header uppercase"><b>{{\'hotel.search.result.contact\' | translate}}</b></label><!--<span class="fa fa-plus-square-o pull-right" ng-click="$ctrl.showCust(item)" ng-show="item.show != true"></span>--><!--<span class="fa fa-minus-square-o pull-right" ng-click="$ctrl.hideCust(item)"  ng-show="item.show == true"></span>--></div><!--<div class="row static-info" ng-show="item.show == true">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.custinfo.gender"></span></div>--><!--<div class="col-md-9 value">--><!--{{\'\' + item.ciGender | lookupt :\'ota_customer\':\'passenger_gender\' | translate}}--><!--</div>--><!--</div>--><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.familyname"></span></div><div class="col-md-9 value long-value">{{item.ciFName}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.name"></span></div><div class="col-md-9 value long-value">{{item.ciName}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.contactinfo.mobile"></span></div><div class="col-md-9 value">(+{{item.ciMobileCode}})&nbsp;{{item.ciMobile}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.contactinfo.email"></span></div><div class="col-md-9 value long-value">{{item.ciEmail}}</div></div></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-contact-info.html', '<div class="portlet light flight-booking-contact-info hotel-border hotel-border-radius"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.contactinfo.title"></span></span></div></div><div class="portlet-body form"><!-- BEGIN FORM--><div class="form-body" ng-repeat="item in $ctrl.bookingModel.contacts"><div class="form-group hotel-customer cust-header"><label class="control-label person-header">{{\'hotel.search.result.contact\' | translate}}</label><div class="cust-header-right hand" ng-click="$ctrl.removeContact($index)" ng-show="$ctrl.bookingModel.contacts.length > 1"><span class="fa fa-minus-square-o"></span> <span>Xo\xE1</span></div></div><div class="row"><div class="form-group hotel-customer" ng-if="$ctrl.isAuthenticated() == true && $ctrl.customerTravellers.length > 0 && ($ctrl.customerTravellers | traveller:\'ADT\').length > 0"><div class="col-sm-4" data-translate="hotel.booking.info.custinfo.save">Ch\u1ECDn kh\xE1ch h\xE0ng \u0111\xE3 l\u01B0u</div><div class="col-sm-8"><select ng-if="$ctrl.isAuthenticated() == true" class="form-control regular-cust-select" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in ($ctrl.customerTravellers | traveller:\'ADT\') track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseContact(item)"><option value="">{{\'flight.plchdr.choose\' | translate}}</option></select></div></div></div><div class="row"><div class="form-group"><!--<div class="col-sm-4 cust-cell">--><!--Gi\u1EDBi t\xEDnh--><!--<div class="table-cell">--><!--<select--><!--id="ciGender{{$index}}" name="ciGender{{$index}}"--><!--class="gtd-text-small form-control" ng-model="item.ciGender" required>--><!--<option value="" disabled selected hidden>{{\'flight.plchdr.choose\' | translate}}</option>--><!--<option ng-repeat="title in $ctrl.adultTitleLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option>--><!--</select>--><!--</div>--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciGender\' + $index].$touched) && $ctrl.form[\'ciGender\' + $index].$invalid">--><!--<p class="help-block" ng-show="$ctrl.form[\'ciGender\' + $index].$error.required" data-translate="entity.validation.required"></p>--><!--</div>--><!--</div>--><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.familyname"></span>:<div style="color: red">*</div></div><input id="ciFName{{$index}}" name="ciFName{{$index}}" ng-maxlength="130" gtd-no-number="" type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" ng-model="item.ciFName" placeholder="{{\'flight.plchdr.surname\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciFName\' + $index].$touched) && $ctrl.form[\'ciFName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciFName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'ciFName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p><p class="help-block" ng-show="$ctrl.form[\'ciFName\' + $index].$error.noNumber" data-translate="entity.validation.noNumber"></p></div></div><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.name"></span>:<div style="color: red">*</div></div><input id="ciName{{$index}}" name="ciName{{$index}}" ng-maxlength="130" gtd-no-number type="text" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" ng-model="item.ciName" placeholder="{{\'flight.plchdr.name\' | translate}}" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciName\' + $index].$touched) && $ctrl.form[\'ciName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'ciName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p><p class="help-block" ng-show="$ctrl.form[\'ciName\' + $index].$error.noNumber" data-translate="entity.validation.noNumber"></p></div></div><!--<div class="table-cell cust-cell">Gi\u1EDBi t\xEDnh</div>--><!--<div class="table-cell cust-cell"><span data-translate="flight.booking.info.custinfo.familyname"/></div>--><!--<div class="table-cell cust-cell padding-left-15"><span data-translate="flight.booking.info.custinfo.name"/></div>--><!--<div class="table-cell">--><!--<select class="gtd-text-small form-control" ng-model="item.ciGender" required>--><!--<option ng-repeat="title in $ctrl.adultTitleLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option>--><!--</select>--><!--</div>--><!--<div class="table-cell">--><!--<input type="text" gtd-no-special-char class="gtd-text-medium form-control" ng-model="item.ciFName" required>--><!--</div>--><!--<div class="table-cell">--><!--<input type="text" gtd-no-special-char class="gtd-text-medium form-control margin-left-15" ng-model="item.ciName" required>--><!--</div>--></div></div><div class="row"><div class="form-group"><div class="col-sm-4 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.contactinfo.mobile"></span>:<div style="color: red">*</div></div><select id="ciMobileCode{{$index}}" name="ciMobileCode{{$index}}" class="form-control" ng-model="item.ciMobileCode" required ng-options="country.phoneCode as (country.name + \' (+\' + country.phoneCode + \')\') for country in $ctrl.allCountries"><!--<option ng-repeat="country in $ctrl.allCountries" value="{{country.phoneCode}}">{{country.name}} (+{{country.phoneCode}})</option>--></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciMobileCode\' + $index].$touched) && $ctrl.form[\'ciMobileCode\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciMobileCode\' + $index].$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-8 cust-cell">&nbsp;<!--<input type="text"--><!--id="ciMobileVn{{$index}}" name="ciMobileVn{{$index}}"--><!--ng-if="item.ciMobileCode==84"--><!--gtd-vn-phone--><!--class="gtd-text-medium form-control " placeholder="{{\'flight.plchdr.phone\' | translate}}"--><!--ng-model="item.ciMobile" required />--><!--<div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciMobileVn\' + $index].$touched) && $ctrl.form[\'ciMobileVn\' + $index].$invalid">--><!--<p class="help-block" ng-show="$ctrl.form[\'ciMobileVn\' + $index].$invalid" data-translate="entity.validation.phone"/>--><!--</div>--> <input type="text" id="ciMobile{{$index}}" name="ciMobile{{$index}}" gtd-phone class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" ng-model="item.ciMobile" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciMobile\' + $index].$touched) && $ctrl.form[\'ciMobile\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciMobile\' + $index].$invalid" data-translate="entity.validation.phone"></p></div></div></div></div><div class="row"><div class="form-group"><div class="col-sm-12"><label class="control-label"><div style="display: flex"><span data-translate="flight.booking.info.contactinfo.email"></span>:<div style="color: red">*</div></div></label><input id="ciEmail{{$index}}" name="ciEmail{{$index}}" ng-maxlength="120" type="email" class="form-control" ng-model="item.ciEmail" gtd-email required placeholder="{{\'flight.plchdr.email\' | translate}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'ciEmail\' + $index].$touched) && $ctrl.form[\'ciEmail\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'ciEmail\' + $index].$invalid" data-translate="entity.validation.email"></p><p class="help-block" ng-show="$ctrl.form[\'ciEmail\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p></div></div></div></div><div class="form-group" style="margin-bottom: 0px" ng-if="$ctrl.isAuthenticated() == true"><div class="mt-checkbox-list" style="padding: 0px"><label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px"><input type="checkbox" value="1" name="test" ng-model="item.checked"> <span></span></label><span style="margin-left: 30px" data-translate="hotel.booking.info.custinfo.saved">L\u01B0u th\xF4ng tin h\xE0nh kh\xE1ch n\xE0y</span></div></div></div><!-- END FORM--><!--<div class="hand label label-outline green" ng-click="$ctrl.addBlankContacts()">--><!--<span class="fa fa-plus-circle icon"></span>--><!--Th\xEAm li\xEAn h\u1EC7--><!--</div>--></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-customer-info-view.html', '<div class="portlet light hotel-customer hotel-border hotel-border-radius"><div ng-repeat="item in $ctrl.selectedHotelProduct.rooms"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">{{\'hotel.booking.info.custinfo.room\' | translate }} {{$index + 1}} - </span><span class="text-color2-em">{{item.pax.adultQuantity}} {{\'hotel.booking.info.custinfo.Adult\' | translate }}</span> <span class="text-color2-em" ng-show="item.pax.childQuantity > 0">, {{item.pax.childQuantity}} {{\'hotel.booking.info.custinfo.Child\' | translate }}</span> <span class="text-color2-em" ng-if="item.pax.childrenAges">(<span ng-repeat="age in item.pax.childrenAges">{{ age }}<span ng-if="!$last">, </span></span>{{\'hotel.booking.info.custinfo.yearold\' | translate }})</span></div><div class="caption"><span class="uppercase bold">{{\'hotel.search.result.contact\' | translate}}</span> <span class="fa fa-plus-square-o pull-right" ng-click="$ctrl.showCust(item);" ng-show="item.show != true"></span> <span class="fa fa-minus-square-o pull-right" ng-click="$ctrl.hideCust(item);" ng-show="item.show == true"></span> <span class="fa fa-pencil-square-o pull-right" ng-click="$ctrl.doBack();"></span></div></div><div class="portlet-body" style="margin-bottom: 30px"><div class="form-body"><div class="row static-info" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.familyname"></span></div><div class="col-md-9 value uppercase long-value">{{item.cuFamilyName}}</div></div><div class="row static-info uppercase" ng-show="item.show == true"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.name"></span></div><div class="col-md-9 value long-value">{{item.cuName}}</div></div></div></div></div><!--<div class="portlet-title">--><!--<div class="caption">--><!--<span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.custinfo.title"></span> </span>--><!--</div>--><!--</div>--><!--<div class="portlet-body">--><!--<div class="form-body" ng-repeat="item in $ctrl.bookingModel.customers">--><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.custinfo.fullname"></span></div>--><!--<div class="col-md-9 value">--><!--{{item.cuFamilyName}}&nbsp;{{item.cuName}}--><!--</div>--><!--</div>--><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.custinfo.fullname"></span></div>--><!--<div class="col-md-9 value">--><!--{{item.cuFamilyName}}&nbsp;{{item.cuName}}--><!--</div>--><!--</div>--><!--</div>--><!--</div>--></div>');
        $templateCache.put('app/components/booking/hotel-booking-customer-info.html', '<div class="portlet light hotel-customer flight-booking-customer-info hotel-border-radius hotel-border"><div ng-repeat="item in $ctrl.selectedHotelProduct.rooms"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">{{\'hotel.booking.info.custinfo.room\' | translate}} {{$index + 1}} - </span><span class="">{{item.pax.adultQuantity}} {{\'hotel.booking.info.custinfo.Adult\' | translate}}</span> <span class="" ng-show="item.pax.childQuantity > 0">, {{item.pax.childQuantity}} {{\'hotel.booking.info.custinfo.Child\' | translate}}</span> <span class="" ng-if="item.pax.childrenAges">(<span ng-repeat="age in item.pax.childrenAges">{{ age }}<span ng-if="!$last">, </span></span>{{\'hotel.booking.info.custinfo.yearold\' | translate }})</span></div></div><div class="portlet-body"><div class="form-body"><div class="bold uppercase">{{\'hotel.search.result.guest\' | translate}}</div><div class="row"><div class="form-group hotel-customer" ng-if="$ctrl.isAuthenticated() == true"><div class="col-sm-4" data-translate="hotel.booking.info.custinfo.save">Ch\u1ECDn kh\xE1ch h\xE0ng \u0111\xE3 l\u01B0u</div><div class="col-sm-8"><select ng-if="$ctrl.isAuthenticated() == true" class="form-control regular-cust-select" ng-options="traveller as (traveller.surName + \' \' + traveller.firstName) for traveller in $ctrl.customerTravellers track by traveller.id" ng-model="item.selectedTraveller" ng-change="$ctrl.chooseCustomer(item)" id="bookingcustomerselect"><option value="">{{\'flight.plchdr.choose\' | translate}}</option></select></div></div></div><div class="row"><div class="form-group"><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.familyname"></span>:<div style="color: red">*</div></div><div class="text-italic text-color2-em">{{\'hotel.search.result.input\' | translate}}</div><input type="text" id="cuFamilyName{{$index}}" name="cuFamilyName{{$index}}" ng-maxlength="130" gtd-no-number="" placeholder="{{\'flight.plchdr.surname\' | translate}}" ng-change="$ctrl.syncContactInfo($ctrl.selectedHotelProduct.rooms)" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" ng-model="item.cuFamilyName" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuFamilyName\' + $index].$touched) && $ctrl.form[\'cuFamilyName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuFamilyName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'cuFamilyName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p><p class="help-block" ng-show="$ctrl.form[\'cuFamilyName\' + $index].$error.noNumber" data-translate="entity.validation.noNumber"></p></div></div><div class="col-sm-6 cust-cell"><div style="display: flex"><span data-translate="flight.booking.info.custinfo.name"></span>:<div style="color: red">*</div></div><div class="text-italic text-color2-em">{{\'hotel.search.result.input\' | translate}}</div><input type="text" id="cuName{{$index}}" name="cuName{{$index}}" ng-maxlength="130" gtd-no-number placeholder="{{\'flight.plchdr.name\' | translate}}" ng-change="$ctrl.syncContactInfo($ctrl.selectedHotelProduct.rooms)" gtd-no-special-char gtd-capitalize="true" class="gtd-text-medium form-control" ng-model="item.cuName" required><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'cuName\' + $index].$touched) && $ctrl.form[\'cuName\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'cuName\' + $index].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'cuName\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="130"></p><p class="help-block" ng-show="$ctrl.form[\'cuName\' + $index].$error.noNumber" data-translate="entity.validation.noNumber"></p></div></div></div></div><div class="row"><div class="col-sm-12"><div class="mt-checkbox-list" style="padding: 0px;margin-bottom: 30px"><label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px"><input ng-model="item.checked" ng-click="$ctrl.updateSelection($index, $ctrl.selectedHotelProduct.rooms)" type="checkbox"> <span></span></label><span style="margin-left: 30px" data-translate="hotel.booking.info.custinfo.choose">D\xF9ng l\xE0m th\xF4ng tin li\xEAn h\u1EC7</span></div></div></div></div></div></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-history-billing-info-view.html', '<div class="portlet light" ng-show="$ctrl.bookingModel.biCompany != null || $ctrl.bookingModel.biMst != null || $ctrl.bookingModel.biMobile != null || $ctrl.bookingModel.biAddress != null || $ctrl.bookingModel.tPCName != null || $ctrl.bookingModel.tPCfName != null || $ctrl.bookingModel.tPCPhone != null || $ctrl.bookingModel.tPCfemail != null || $ctrl.bookingModel.tPCNote !=null"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.billinfo.title"></span></span></div></div><div class="portlet-body form"><div class="portlet-body"><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.company"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biCompany}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mst"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biMst}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.mobile"></span></div><!-- <div class="col-md-9 value"> (+{{$ctrl.bookingModel.biMobileCode}})&nbsp;{{$ctrl.bookingModel.biMobile}}</div> --><div class="col-md-9 value">{{$ctrl.bookingModel.biMobile}}</div></div><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.billinfo.address"></span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.biAddress}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>H\u1ECD</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.fname}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>T\xEAn \u0111\u1EC7m v\xE0 T\xEAn</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.name}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>S\u1ED1 \u0110i\u1EC7n tho\u1EA1i</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.phone}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>Email</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.email1}}</div></div><div class="row static-info"><div class="col-md-3 name"><span>Ghi ch\xFA</span></div><div class="col-md-9 value long-value">{{$ctrl.bookingModel.bookingInfo.taxPersonalInfoContact.note}}</div></div></div></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-summary-details-item.html', '<!-- Header --><div class="row static-info"><div class="col-md-12"><span class="bold uppercase">{{ $ctrl.room.roomCategory }}</span></div></div><div><div class="row static-info"><div class="col-md-5 bold name text-color3">{{ "hotel.booking.summary.room" | translate }} {{ $ctrl.index + 1 }}:</div><div class="col-md-7 value pull-right text-right">/ <span class="">{{ ($ctrl.room.ratesPerNight | filter: {\'id\':\'base_rate\'}).length }} {{ "hotel.booking.summary.night" | translate }}</span></div></div><div class="row static-info"><div class="col-md-12"><span>{{ $ctrl.room.pax.adultQuantity }} {{ "hotel.booking.summary.adult" | translate }}</span> <span ng-show="$ctrl.room.pax.childQuantity > 0">, {{ $ctrl.room.pax.childQuantity }} {{ "hotel.booking.summary.children" | translate }}</span> <span ng-show="$ctrl.room.pax.childrenAges.length > 0">(<span ng-repeat="age in $ctrl.room.pax.childrenAges">{{ age }}<span ng-if="!$last">, </span></span>{{\'hotel.booking.info.custinfo.yearold\' | translate }})</span></div></div><div ng-repeat="night in $ctrl.orderedDate"><div class="row static-info"><div class="col-md-6 name"><span style="text-transform: capitalize; font-weight: bold">{{ night | momentdate: "date":"DD-MM-YYYY" }}</span></div><div class="col-md-6 value pull-right text-right"><span class="">{{ $ctrl.nightlyFee[night][$ctrl.BASE_RATE] | number }} </span><span class="text-color2-em">VN\u0110</span></div></div><div style="margin-left: 5px" class="row static-info" ng-repeat="feeType in $ctrl.feeTypes" ng-style="!$ctrl.nightlyFee[night][feeType] && {\'display\':\'none\'}"><div class="col-md-6 name"><span style="text-transform: capitalize">{{ "hotel.search.surcharges." + feeType | translate }}</span></div><div class="col-md-6 value pull-right text-right"><span class="">{{ $ctrl.nightlyFee[night][feeType] | number }} </span><span class="text-color2-em">VN\u0110</span></div></div><div ng-if="$last" class="horizontal-line"></div></div></div>');
        $templateCache.put('app/components/booking/hotel-booking-summary-details.html', '<ng-switch on="$ctrl.bookingModel.showSummaryDetails"><div class="portlet light" ng-switch-when="true"><div class="portlet-body"><gtd-hotel-booking-summary-details-item ng-repeat="room in $ctrl.selectedHotelProduct.rooms" room="room" index="$index"></gtd-hotel-booking-summary-details-item></div><div class="row static-info" ng-repeat="item in $ctrl.selectedHotelProduct.surcharges"><div class="col-md-6 name"><span class="bold">{{ "hotel.search.surcharges." + item.description | translate }}</span></div><div class="col-md-6 value pull-right text-right"><span class="bold">{{ item.amount | number }} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-md-5 name bold text-color3">{{ "hotel.booking.summary.sub" | translate }}</div><div class="col-md-7 value pull-right text-right"><span class="bold">{{ $ctrl.bjson | bookingPriceInfo: "total_netprice" | number }} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-md-5 name">{{ "hotel.booking.summary.service" | translate }}</div><div class="col-md-7 value pull-right text-right"><span class="">{{ $ctrl.bjson | bookingPriceInfo: "total_service_fee" | number }} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="row static-info" ng-show="$ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\' || $ctrl.paymentModel.paymentOption == \'MOMO\') || ($ctrl.bookingModel.bookingInfo.paymentStatus == \'SUCCEEDED\' && $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0) || $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount"><div class="col-md-5 name bold">{{ "hotel.booking.summary.coupon" | translate }}</div><div class="col-md-7 value pull-right text-right" ng-show="($ctrl.bjson.voucher.discountAmount > 0 || $ctrl.bjson.bookingInfo.displayPriceInfo.discountAmount > 0)"><span class="bold">- {{ $ctrl.bjson | bookingPriceInfo: "discount" | number }} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="gr-voucher" ng-show="$ctrl.promoSelect != true"><div class="row static-info" ng-show="$ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\' || $ctrl.paymentModel.paymentOption == \'MOMO\')"><div class="col-md-5 name"><input type="text" ng-model="$ctrl.bookingModel.voucher.voucherCode"></div><div class="col-md-7 value pull-right text-right"><span class="bold"><button class="btn btn-green btn-voucher" ng-click="$ctrl.validateVoucher()" ng-disabled="!$ctrl.bookingModel.voucher.voucherCode" data-translate="global.menu.account.profiles.redeem">\xC1p d\u1EE5ng</button></span></div><div class="error col-md-12" ng-show="$ctrl.wrongVoucher"><p class="help-block" ng-show="$ctrl.wrongVoucher">M\xE3 gi\u1EA3m gi\xE1 kh\xF4ng \u0111\xFAng</p></div></div></div><div class="horizontal-line" ng-show="\n            ($ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\') || ($ctrl.bookingModel.bookingInfo.paymentStatus == \'SUCCEEDED\' && $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0))\n            || ($ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\'))"></div><div class="row static-info"><div class="col-md-5 name bold text-color3">{{ "hotel.booking.summary.total" | translate }}</div><div class="col-md-7 value pull-right text-right"><span class="price-text-sm">{{ $ctrl.bjson | bookingPriceInfo: "total_price" | number }} </span><span class="text-color2-em">VN\u0110</span></div><div class="col-md-12 text-italic">({{ $ctrl.selectedHotelProduct.totalPerson }} {{ "hotel.booking.summary.guest" | translate }} / {{ ($ctrl.selectedHotelProduct.rooms[0].ratesPerNight | filter: {\'id\':\'base_rate\'}).length }} {{ "hotel.booking.summary.night" | translate }})</div></div></div></ng-switch>');
        $templateCache.put('app/components/booking/hotel-booking-summary.html', '<div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.summary.title"></span></span></div></div><div class="portlet-body"><!-- FARE --><div><div class="row static-info"><div class="col-md-6 name">{{$ctrl.selectedHotelProduct.rooms.length}} {{\'hotel.booking.info.custinfo.room\' | translate}}/ {{($ctrl.selectedHotelProduct.rooms[0].ratesPerNight | filter: {\'id\':\'base_rate\'}).length}} {{\'hotel.booking.info.custinfo.night\' | translate}}</div><div class="col-md-6 value pull-right text-right"><span class="">{{$ctrl.bjson | bookingPriceInfo:\'total_fare\' | number}} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="row static-info"><div class="col-md-6 name">{{\'hotel.search.result.taxfee\' | translate}}</div><div class="col-md-6 value pull-right text-right"><span class="">{{$ctrl.bjson | bookingPriceInfo:\'total_tax\' | number}} </span><span class="text-color2-em">VN\u0110</span></div><!--<div class="col-md-5 name">--><!--Thu\u1EBF & Ph\xED--><!--</div>--><!--<div class="col-md-7 value pull-right">--><!--<span class="">--><!--{{$ctrl.selectedHotelProduct.price | number}}--><!--</span>--><!--<span class="text-color2-em">VN\u0110</span>--><!--</div>--></div><!--<div class="row static-info">--><!--<div class="col-md-5 name">--><!--Ph\xED d\u1ECBch v\u1EE5--><!--</div>--><!--<div class="col-md-7 value pull-right">--><!--<span class="">--><!--{{$ctrl.selectedHotelProduct.totalPrice | number}}--><!--</span>--><!--<span class="text-color2-em">VN\u0110</span>--><!--</div>--><!--</div>--><div class="horizontal-line"></div><div class="row static-info"><div class="col-md-6 name bold">{{\'hotel.booking.summary.sub\' | translate}}</div><div class="col-md-6 value pull-right text-right"><span class="bold">{{$ctrl.bjson | bookingPriceInfo:\'total_netprice\' | number}} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="horizontal-line"></div><div class="row static-info"><div class="col-md-5 name">{{\'hotel.booking.summary.service\' | translate}}</div><div class="col-md-7 value pull-right text-right"><span class="">{{$ctrl.bjson | bookingPriceInfo:\'total_service_fee\' | number}} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="row static-info" ng-show="($ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\') || $ctrl.paymentModel.paymentOption == \'MOMO\' || ($ctrl.bookingModel.bookingInfo.paymentStatus == \'SUCCEEDED\' && $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0)) || $ctrl.bjson.bookingInfo.displayPriceInfo.discountAmount"><div class="col-md-6 name bold">{{\'hotel.booking.summary.coupon\' | translate}}</div><div class="col-md-6 value pull-right text-right" ng-show="($ctrl.bjson.voucher.discountAmount > 0 || $ctrl.bjson.bookingInfo.displayPriceInfo.discountAmount > 0) || $ctrl.bjson.bookingInfo.displayPriceInfo.discountAmount"><span class="bold">- {{$ctrl.bjson | bookingPriceInfo:\'discount\' | number}} </span><span class="text-color2-em">VN\u0110</span></div></div><div class="row static-info" ng-show="$ctrl.showPriceCoupon"><div class="col-md-6 name bold">M\xE3 gi\u1EA3m gi\xE1</div><div class="col-md-6 value pull-right text-right" ng-show="($ctrl.bjson.voucher.discountAmount > 0 || $ctrl.bjson.bookingInfo.displayPriceInfo.discountAmount > 0) || $ctrl.bjson.bookingInfo.displayPriceInfo.discountAmount"><span class="bold">- {{$ctrl.bjson | bookingPriceInfo:\'discount\' | number}} </span><span class="text-color2-em">VN\u0110</span></div></div><!--$ctrl.showCoupon{{$ctrl.showCoupon}},$ctrl.paymentModel.paymentOption{{$ctrl.paymentModel.paymentOption}}--><div class="gr-voucher" ng-show="$ctrl.promoSelect != true"><div class="row static-info" ng-show="$ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\' || $ctrl.paymentModel.paymentOption == \'MOMO\')"><div class="col-md-6 name"><input type="text" ng-model="$ctrl.bookingModel.voucher.voucherCode"></div><div class="col-md-6 value pull-right text-right"><span class="bold"><button class="btn btn-green btn-voucher" ng-click="$ctrl.validateVoucher()" ng-disabled="!$ctrl.bookingModel.voucher.voucherCode">{{\'hotel.booking.summary.redeem\'| translate}}</button></span></div><div class="error col-md-12" ng-show="$ctrl.wrongVoucher"><p class="help-block" ng-show="$ctrl.wrongVoucher">M\xE3 gi\u1EA3m gi\xE1 kh\xF4ng \u0111\xFAng</p></div><div class="error col-md-12" ng-show="$ctrl.beyondQuota"><p class="help-block" ng-show="$ctrl.beyondQuota">B\u1EA1n \u0111\xE3 \u0111\u01B0\u1EE3c khuy\u1EBFn m\xE3i trong ch\u01B0\u01A1ng tr\xECnh n\xE0y</p></div></div></div><div class="horizontal-line" ng-show="\n            ($ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\') || $ctrl.paymentModel.paymentOption == \'MOMO\' || ($ctrl.bookingModel.bookingInfo.paymentStatus == \'SUCCEEDED\' && $ctrl.bookingModel.bookingInfo.displayPriceInfo.discountAmount > 0))\n            || ($ctrl.showCoupon && ($ctrl.paymentModel.paymentOption == \'ATM_DEBIT\' || $ctrl.paymentModel.paymentOption == \'CREDIT\' || $ctrl.paymentModel.paymentOption == \'BALANCE\' || $ctrl.paymentModel.paymentOption == \'VNPAYQR\' || $ctrl.paymentModel.paymentOption == \'VIETTELPAY\' || $ctrl.paymentModel.paymentOption == \'MOMO\'))"></div><div class="row static-info"><div class="col-md-6 name bold">{{\'hotel.booking.summary.total\' | translate}}</div><div class="col-md-6 value pull-right text-right"><span class="price-text-sm">{{$ctrl.bjson | bookingPriceInfo:\'total_price\' | number}} </span><span class="text-color2-em">VN\u0110</span></div><div class="col-md-12 text-italic">({{$ctrl.selectedHotelProduct.totalPerson}} {{\'hotel.booking.summary.guest\' | translate}} / {{($ctrl.selectedHotelProduct.rooms[0].ratesPerNight | filter: {\'id\':\'base_rate\'}).length}} {{\'hotel.booking.summary.night\' | translate}})</div></div></div><!-- Service Tax --><!--<div class="row static-info">--><!--<div class="col-md-5 name"> Ph\xED d\u1ECBch v\u1EE5 </div>--><!--<div class="col-md-7 value pull-right">--><!--VN\u0110--><!--<span class="bold">--><!--{{$ctrl.bookingModel.departPricedItinerary.airItineraryPricingInfo.itinTotalFare.serviceTax.amount | number}}--><!--</span> * 1--><!--</div>--><!--</div>--><!--<div class="horizontal-line"/>--><!-- TOTAL FEE --><!--<div class="row static-info">--><!--<div class="col-md-5 name"> &nbsp; </div>--><!--<div class="col-md-7 value pull-right"> VN\u0110&nbsp;--><!--<span class="price-text">--><!--{{$ctrl.selectedHotelProduct.price | number}}--><!--</span>--><!--</div>--><!--</div>--><div class="row static-info" ng-show="!$ctrl.bookingModel.airView"><div class="col-md-6 name">&nbsp;</div><div class="col-md-6 value pull-right text-right text-color3 hand" ng-click="$ctrl.bookingModel.showSummaryDetails=!$ctrl.bookingModel.showSummaryDetails"><span ng-show="!$ctrl.bookingModel.showSummaryDetails">{{\'hotel.booking.summary.detail\' | translate}}</span> <span ng-show="$ctrl.bookingModel.showSummaryDetails">{{\'hotel.booking.summary.hide\' | translate}} </span><span class="fa fa-info-circle"></span></div></div><div class="row static-info"><div class="col-md-12 name">{{\'hotel.booking.summary.full-payment\' | translate}}</div></div><div class="col-sm-12" ng-show="$ctrl.bookingModel.airView"><div class="btn btn-green" style="width: 100%">Thanh to\xE1n</div></div></div></div>');
        $templateCache.put('app/components/booking/hotel-profile-booking-customer-info-view.html', '<div class="portlet light hotel-customer"><div ng-repeat="item in $ctrl.bookingModel.travelerInfo.airTravelers"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">{{\'hotel.booking.info.custinfo.room\' | translate}} {{$index + 1}} - </span><span class="">{{$ctrl.selectedHotelProduct.rooms[$index].pax.adultQuantity}} {{\'hotel.booking.info.custinfo.Adult\' | translate}}</span> <span class="" ng-show="item.pax.childQuantity > 0">, {{$ctrl.selectedHotelProduct.rooms[$index].pax.childQuantity}} {{\'hotel.booking.info.custinfo.Child\' | translate}}</span> <span class="" ng-if="item.pax.childrenAges">(<span ng-repeat="age in $ctrl.selectedHotelProduct.rooms[$index].pax.childrenAges">{{ age }}<span ng-if="!$last">, </span></span>{{\'hotel.booking.info.custinfo.yearold\' | translate }})</span></div><div class="caption"><span class="uppercase bold">{{\'hotel.search.result.contact\' | translate}}</span></div></div><div class="portlet-body" style="margin-bottom: 30px"><div class="form-body"><div class="row static-info"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.familyname"></span></div><div class="col-md-9 value uppercase long-value">{{item.passengerName.lastName}}</div></div><div class="row static-info uppercase"><div class="col-md-3 name"><span data-translate="flight.booking.info.custinfo.name"></span></div><div class="col-md-9 value long-value">{{item.passengerName.firstName}}</div></div></div></div></div><!--<div class="portlet-title">--><!--<div class="caption">--><!--<span class="caption-subject font-dark bold uppercase"><span data-translate="flight.booking.info.custinfo.title"></span> </span>--><!--</div>--><!--</div>--><!--<div class="portlet-body">--><!--<div class="form-body" ng-repeat="item in $ctrl.bookingModel.customers">--><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.custinfo.fullname"></span></div>--><!--<div class="col-md-9 value">--><!--{{item.cuFamilyName}}&nbsp;{{item.cuName}}--><!--</div>--><!--</div>--><!--<div class="row static-info">--><!--<div class="col-md-3 name"> <span data-translate="flight.booking.info.custinfo.fullname"></span></div>--><!--<div class="col-md-9 value">--><!--{{item.cuFamilyName}}&nbsp;{{item.cuName}}--><!--</div>--><!--</div>--><!--</div>--><!--</div>--></div>');
        $templateCache.put('app/components/flight/flight-detail-view-inter-transit.html', '<!-- flight-detail-view-inter-transit.html --><div class="portlet" style="border: none;margin-bottom: 0px"><div class="portlet-body"><!-- BEGIN FORM--><div class="flight-detail-table-wrapper flight-detail-popup"><div class="flight-detail-table"><div class="" ng-repeat="item in argument2.originDestinationOptions[0].flightSegments"><div class="row margin-bottom-15 margin-top-10" ng-if="item.stopQuantityInfo.duration > 0"><div class="col-xs-2">&nbsp;</div><div class="col-xs-10 text-center"><span class="label label-white label-duration">Qu\xE1 c\u1EA3nh \u1EDF {{item.stopQuantityInfo.locationName}} - {{item.stopQuantityInfo.duration | duration:\'short\'}}<!--<span ng-show="argument2.originDestinationOptions[0].flightSegments.length == 1"> - Bay th\u1EB3ng</span>--><!--<span ng-show="argument2.originDestinationOptions[0].flightSegments.length > 1"> - {{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments.length}} ch\u1EB7ng</span>--></span></div></div><div class="row margin-bottom-15"><div class="col-xs-2"><div><!--<span class="airline-image">--> <img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.operatingAirline.code+ \'.gif\'}}" class="logo-airline"><!--</span>--></div><div><span>{{item.operatingAirline.name}} {{item.operatingAirline.flightNumber}}</span></div></div><div class="col-xs-4"><div class="text-center"><span class="bold"><!--{{argument.originLocationCode | airport:\'city\'}}&nbsp;({{argument.originLocationCode}})--> {{item.departureCity}}&nbsp;({{item.departureAirportLocationCode}})</span></div><div class="text-center"><span><!--{{argument.originLocationCode | airport:\'name\'}}--> {{item.departureAirportLocationName}}</span></div><div class="text-center"><span class="gtd-h3">{{item.departureDateTime | momentdate:\'hour\'}} </span><span class="">{{item.departureDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="col-xs-2"><div>{{item.journeyDuration | duration}}</div><img src="../../../content/images/aeroplane-path.png" class="" style="width: 100%;height: 20px"></div><div class="col-xs-4"><div class="text-center"><span class="bold"><!--{{argument.destinationLocationCode | airport:\'city\'}}&nbsp;({{argument.destinationLocationCode}})--> {{item.arrivalCity}}&nbsp;({{item.arrivalAirportLocationCode}})</span></div><div class="text-center"><span>{{item.arrivalAirportLocationName}}</span></div><div class="text-center"><span class="gtd-h3">{{item.arrivalDateTime | momentdate:\'hour\'}} </span><span class="">{{item.arrivalDateTime | momentdate:\'date\' | capitalize}}</span></div></div></div></div></div><div class="flight-detail-table margin-top-30" ng-show="argument2.originDestinationOptions.length > 1"><div class="" ng-repeat="item in argument2.originDestinationOptions[1].flightSegments"><div class="row margin-bottom-15 margin-top-10" ng-if="item.stopQuantityInfo.duration > 0"><div class="col-xs-2">&nbsp;</div><div class="col-xs-10 text-center"><span class="label label-white label-duration">Qu\xE1 c\u1EA3nh \u1EDF {{item.stopQuantityInfo.locationName}} - {{item.stopQuantityInfo.duration | duration:\'short\'}}<!--<span ng-show="argument2.originDestinationOptions[1].flightSegments.length == 1"> - Bay th\u1EB3ng</span>--><!--<span ng-show="argument2.originDestinationOptions[1].flightSegments.length > 1"> - {{argument.pricedItineraries[0].originDestinationOptions[1].flightSegments.length}} ch\u1EB7ng</span>--></span></div></div><div class="row margin-bottom-15"><div class="col-xs-2"><div><!--<span class="airline-image">--> <img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.operatingAirline.code+ \'.gif\'}}" class="logo-airline"><!--</span>--></div><div><span>{{item.operatingAirline.name}} {{item.operatingAirline.flightNumber}}</span></div></div><div class="col-xs-4"><div class="text-center"><span class="bold">{{item.departureCity}}&nbsp;({{item.departureAirportLocationCode}})</span></div><div class="text-center"><span><!--{{argument.originLocationCode | airport:\'name\'}}--> {{item.departureAirportLocationName}}</span></div><div class="text-center text-capitalize"><span class="gtd-h3">{{item.departureDateTime | momentdate:\'hour\'}} </span><span class="">{{item.departureDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="col-xs-2"><div>{{item.journeyDuration | duration}}</div><img src="../../../content/images/aeroplane-path.png" class="" style="width: 100%;height: 20px"></div><div class="col-xs-4"><div class="text-center"><span class="bold"><!--{{argument.destinationLocationCode | airport:\'city\'}}&nbsp;({{argument.destinationLocationCode}})--> {{item.arrivalCity}}&nbsp;({{item.arrivalAirportLocationCode}})</span></div><div class="text-center"><span><!--{{argument.destinationLocationCode | airport:\'name\'}}--> {{item.arrivalAirportLocationName}}</span></div><div class="text-center text-capitalize"><span class="gtd-h3">{{item.arrivalDateTime | momentdate:\'hour\'}} </span><span class="">{{item.arrivalDateTime | momentdate:\'date\' | capitalize}}</span></div></div></div></div></div></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/flight/flight-detail-view-inter.html', '<!-- flight-detail-view-inter.html --><div class="portlet" style="border: none;margin-bottom: 0px"><div class="portlet-body"><!-- BEGIN FORM--><div class="flight-detail-table-wrapper flight-detail-popup"><div class="flight-detail-table" ng-show="argument3 == \'1\'"><div class="" ng-repeat="item in argument2.originDestinationOptions[0].flightSegments"><div class="row margin-bottom-15 margin-top-10" ng-if="item.stopQuantityInfo.duration > 0"><div class="col-xs-2">&nbsp;</div><div class="col-xs-10 text-center"><span class="label label-white label-duration" style="padding: unset;display: inline-block;width: 90%">Qu\xE1 c\u1EA3nh \u1EDF {{item.stopQuantityInfo.locationName}} - {{item.stopQuantityInfo.duration | duration:\'short\'}}<!--<span ng-show="argument2.originDestinationOptions[0].flightSegments.length == 1"> - Bay th\u1EB3ng</span>--><!--<span ng-show="argument2.originDestinationOptions[0].flightSegments.length > 1"> - {{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments.length}} ch\u1EB7ng</span>--></span></div></div><div class="row margin-bottom-15"><div class="col-xs-2"><div><!--<span class="airline-image">--> <img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.operatingAirline.code+ \'.gif\'}}" class="logo-airline-small"><!--</span>--></div><div><span>{{item.operatingAirline.name}} {{item.operatingAirline.flightNumber}}</span></div></div><div class="col-xs-4"><div class="text-center"><span class="bold"><!--{{argument.originLocationCode | airport:\'city\'}}&nbsp;({{argument.originLocationCode}})--> {{item.departureCity}}&nbsp;({{item.departureAirportLocationCode}})</span></div><div class="text-center"><span><!--{{argument.originLocationCode | airport:\'name\'}}--> {{item.departureAirportLocationName}}</span></div><div class="text-center"><span class="gtd-h3">{{item.departureDateTime | momentdate:\'hour\'}} </span><span class="">{{item.departureDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="col-xs-2 popover-img"><div ng-show="argument2.originDestinationOptions[0].flightSegments.length > 1">{{item.journeyDuration | duration:\'defvn\'}}</div><img src="../../../content/images/icon-hanhtrinh.png" class="" style="width: 60%;height: auto; text-align: center"></div><div class="col-xs-4"><div class="text-center"><span class="bold"><!--{{argument.destinationLocationCode | airport:\'city\'}}&nbsp;({{argument.destinationLocationCode}})--> {{item.arrivalCity}}&nbsp;({{item.arrivalAirportLocationCode}})</span></div><div class="text-center"><span>{{item.arrivalAirportLocationName}}</span></div><div class="text-center"><span class="gtd-h3">{{item.arrivalDateTime | momentdate:\'hour\'}} </span><span class="">{{item.arrivalDateTime | momentdate:\'date\' | capitalize}}</span></div></div></div><div class="row margin-bottom-15 margin-top-10" ng-if="$last"><div class="col-xs-2">&nbsp;</div><div class="col-xs-10 text-center"><span class="label label-white label-duration">{{argument2.originDestinationOptions[0].journeyDuration | duration:\'short\'}} <span ng-show="argument2.originDestinationOptions[0].flightSegments.length == 1">- Bay th\u1EB3ng</span> <span ng-show="argument2.originDestinationOptions[0].flightSegments.length > 1">- {{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments.length}} ch\u1EB7ng</span></span></div></div></div></div><div class="flight-detail-table" ng-show="argument2.originDestinationOptions.length > 1 && argument3 == \'2\'"><div class="" ng-repeat="item in argument2.originDestinationOptions[1].flightSegments"><div class="row margin-bottom-15 margin-top-10" ng-if="item.stopQuantityInfo.duration > 0"><div class="col-xs-2">&nbsp;</div><div class="col-xs-10 text-center"><span class="label label-white label-duration" style="padding: unset;display: inline-block;width: 90%">Qu\xE1 c\u1EA3nh \u1EDF {{item.stopQuantityInfo.locationName}} - {{item.stopQuantityInfo.duration | duration:\'short\'}}<!--<span ng-show="argument2.originDestinationOptions[1].flightSegments.length == 1"> - Bay th\u1EB3ng</span>--><!--<span ng-show="argument2.originDestinationOptions[1].flightSegments.length > 1"> - {{argument.pricedItineraries[0].originDestinationOptions[1].flightSegments.length}} ch\u1EB7ng</span>--></span></div></div><div class="row margin-bottom-15"><div class="col-xs-2"><div><!--<span class="airline-image">--> <img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.operatingAirline.code+ \'.gif\'}}" class="logo-airline-small"><!--</span>--></div><div><span>{{item.operatingAirline.name}} {{item.operatingAirline.flightNumber}}</span></div></div><div class="col-xs-4"><div class="text-center"><span class="bold">{{item.departureCity}}&nbsp;({{item.departureAirportLocationCode}})</span></div><div class="text-center"><span><!--{{argument.originLocationCode | airport:\'name\'}}--> {{item.departureAirportLocationName}}</span></div><div class="text-center text-capitalize"><span class="gtd-h3">{{item.departureDateTime | momentdate:\'hour\'}} </span><span class="">{{item.departureDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="col-xs-2"><div ng-show="argument2.originDestinationOptions[0].flightSegments.length > 1">{{item.journeyDuration | duration:\'defvn\'}}</div><img src="../../../content/images/aeroplane-path.png" class="" style="width: 100%;height: 20px"></div><div class="col-xs-4"><div class="text-center"><span class="bold"><!--{{argument.destinationLocationCode | airport:\'city\'}}&nbsp;({{argument.destinationLocationCode}})--> {{item.arrivalCity}}&nbsp;({{item.arrivalAirportLocationCode}})</span></div><div class="text-center"><span><!--{{argument.destinationLocationCode | airport:\'name\'}}--> {{item.arrivalAirportLocationName}}</span></div><div class="text-center text-capitalize"><span class="gtd-h3">{{item.arrivalDateTime | momentdate:\'hour\'}} </span><span class="">{{item.arrivalDateTime | momentdate:\'date\' | capitalize}}</span></div></div></div><div class="row margin-bottom-15 margin-top-10" ng-if="$last"><div class="col-xs-2">&nbsp;</div><div class="col-xs-10 text-center"><span class="label label-white label-duration">{{argument2.originDestinationOptions[1].journeyDuration | duration:\'short\'}} <span ng-show="argument2.originDestinationOptions[1].flightSegments.length == 1">- Bay th\u1EB3ng</span> <span ng-show="argument2.originDestinationOptions[1].flightSegments.length > 1">- {{argument.pricedItineraries[0].originDestinationOptions[1].flightSegments.length}} ch\u1EB7ng</span></span></div></div></div></div></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/flight/flight-detail-view.html', '<div class="portlet"><div class="portlet-body"><!-- BEGIN FORM--><div class="flight-detail-table-wrapper"><!-- Domestic view --><table class="flight-detail-table" ng-if="argument4 == \'domestic\'"><tr class="flight-detail-table-row"><td class="flight-detail-table-cell1"><div><span class="airline-image"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + argument.airline+ \'.gif\'}}" class="logo-airline"></span></div><div><span>{{argument.airlineName}} {{argument.fightNo}}</span></div></td><td class="flight-detail-table-cell2"><div class="fromNode">&nbsp;</div><div class="vertical-line">&nbsp;</div><div class="toNode">&nbsp;</div></td><td class="flight-detail-table-cell3"><table class="child-table" style="margin-bottom: 20px;width: 100%"><tr class="child-table-row"><td class="child-table-col1"><div class="bold"><span>{{argument.originLocationCode | airport:\'city\'}}&nbsp;({{argument.originLocationCode}})</span></div></td><td class="child-table-col2"><div class="time-text"><span ng-show="argument3 == \'international-return\'">{{argument2.originDestinationOptions[1].originDateTime | momentdate:\'hour\'}}</span> <span ng-show="argument3 != \'international-return\'">{{argument2.originDestinationOptions[0].originDateTime | momentdate:\'hour\'}}</span></div></td><td class="child-table-col3"><div><span><span ng-show="argument3 == \'international-return\'">{{argument2.originDestinationOptions[1].originDateTime | momentdate}}</span> <span ng-show="argument3 != \'international-return\'">{{argument2.originDestinationOptions[0].originDateTime | momentdate}}</span><!--{{argument2.originDestinationOptions[0].flightSegments[0].departureDateTime | date:\'dd-MM-yyyy\'}}--></span></div></td></tr><tr class="child-table-row"><td colspan="3"><div><span>{{argument.originLocationCode | airport:\'name\'}}</span></div></td></tr><tr class="child-table-row"><td colspan="3"><div class="flight-type"><span>{{argument2.originDestinationOptions[0].journeyDuration | duration}}</span></div></td></tr><tr class="child-table-row"><td class="child-table-col1"><div class="bold"><span>{{argument.destinationLocationCode | airport:\'city\'}}&nbsp;({{argument.destinationLocationCode}})</span></div></td><td class="child-table-col2"><div class="time-text"><span ng-show="argument3 == \'international-return\'">{{argument2.originDestinationOptions[1].destinationDateTime | momentdate:\'hour\'}}</span> <span ng-show="argument3 != \'international-return\'">{{argument2.originDestinationOptions[0].destinationDateTime | momentdate:\'hour\'}}</span><!--{{argument2.originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate:\'hour\'}}--></div></td><td class="child-table-col3"><div><span ng-show="argument3 == \'international-return\'">{{argument2.originDestinationOptions[1].destinationDateTime | momentdate}}</span> <span ng-show="argument3 != \'international-return\'">{{argument2.originDestinationOptions[0].destinationDateTime | momentdate}}</span><!--{{argument2.originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate}}--></div></td></tr><tr class="child-table-row"><td colspan="3"><div><span>{{argument.destinationLocationCode | airport:\'name\'}}</span></div></td></tr></table></td><!--<td class="flight-detail-table-cell4">--><!--<div class="vertical-line">&nbsp;</div>--><!--</td>--><!--<td class="flight-detail-table-cell5">--><!--<div class="feature-item" ng-repeat="item in $ctrl.departFlightModel.features">--><!--{{item.text}}--><!--</div>--><!--<div class="ticket-type">{{$ctrl.departFlightModel.ticketType}}</div>--><!--</td>--></tr></table><!-- Multi segment view --><table class="flight-detail-table" ng-if="argument4 == \'international\' && argument3 != \'international-return\'"><tr class="flight-detail-table-row" ng-repeat="segment in argument2.originDestinationOptions[0].flightSegments"><td class="flight-detail-table-cell1"><div><span class="airline-image"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + segment.operatingAirline.code+ \'.gif\'}}" class="logo-airline"></span></div><div><span>{{segment.operatingAirline.name}} {{segment.operatingAirline.flightNumber}}</span></div></td><td class="flight-detail-table-cell2"><div class="fromNode">&nbsp;</div><div class="vertical-line">&nbsp;</div><div class="toNode">&nbsp;</div></td><td class="flight-detail-table-cell3"><table class="child-table" style="margin-bottom: 20px;width: 100%" ng-if="argument3 != \'international-return\'"><tr class="child-table-row"><td class="child-table-col1"><div class="bold"><span>{{segment.departureCity}}&nbsp;({{segment.departureAirportLocationCode}})</span></div></td><td class="child-table-col2"><div class="time-text"><span>{{segment.departureDateTime | momentdate:\'hour\'}}</span></div></td><td class="child-table-col3"><div><span><span>{{segment.departureDateTime | momentdate}}</span></span></div></td></tr><tr class="child-table-row"><td colspan="3"><div><span>{{segment.departureAirportLocationName}}</span></div></td></tr><tr class="child-table-row"><td colspan="3"><div class="flight-type"><span>{{segment.journeyDuration | duration}}</span></div></td></tr><tr class="child-table-row"><td class="child-table-col1"><div class="bold"><span>{{segment.arrivalCity}}&nbsp;({{segment.arrivalAirportLocationCode}})</span></div></td><td class="child-table-col2"><div class="time-text"><span>{{segment.arrivalDateTime | momentdate:\'hour\'}}</span></div></td><td class="child-table-col3"><div><span>{{segment.arrivalDateTime | momentdate}}</span></div></td></tr><tr class="child-table-row"><td colspan="3"><div><span>{{segment.arrivalAirportLocationName}}</span></div></td></tr></table></td></tr></table><table class="flight-detail-table" ng-if="argument4 == \'international\' && argument3 == \'international-return\'"><tr class="flight-detail-table-row" ng-repeat="segment in argument2.originDestinationOptions[1].flightSegments"><td class="flight-detail-table-cell1"><div><span class="airline-image"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + segment.operatingAirline.code+ \'.gif\'}}" class="logo-airline"></span></div><div><span>{{segment.operatingAirline.name}} {{segment.operatingAirline.flightNumber}}</span></div></td><td class="flight-detail-table-cell2"><div class="fromNode">&nbsp;</div><div class="vertical-line">&nbsp;</div><div class="toNode">&nbsp;</div></td><td class="flight-detail-table-cell3"><table class="child-table" style="margin-bottom: 20px;width: 100%" ng-if="argument3 == \'international-return\'"><tr class="child-table-row"><td class="child-table-col1"><div class="bold"><span>{{segment.departureCity}}&nbsp;({{segment.departureAirportLocationCode}})</span></div></td><td class="child-table-col2"><div class="time-text"><span>{{segment.departureDateTime | momentdate:\'hour\'}}</span></div></td><td class="child-table-col3"><div><span><span>{{segment.departureDateTime | momentdate}}</span></span></div></td></tr><tr class="child-table-row"><td colspan="3"><div><span>{{segment.departureAirportLocationName}}</span></div></td></tr><tr class="child-table-row"><td colspan="3"><div class="flight-type"><span>{{segment.journeyDuration | duration}}</span></div></td></tr><tr class="child-table-row"><td class="child-table-col1"><div class="bold"><span>{{segment.arrivalCity}}&nbsp;({{segment.arrivalAirportLocationCode}})</span></div></td><td class="child-table-col2"><div class="time-text"><span>{{segment.arrivalDateTime | momentdate:\'hour\'}}</span></div></td><td class="child-table-col3"><div><span>{{segment.arrivalDateTime | momentdate}}</span></div></td></tr><tr class="child-table-row"><td colspan="3"><div><span>{{segment.arrivalAirportLocationName}}</span></div></td></tr></table></td></tr></table></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/flight/flight-detail-view1.html', '<!-- flight-detail-view1.html --><div class="portlet" style="border: none;margin-bottom: 0px"><div class="portlet-body"><!-- BEGIN FORM--><div class="flight-detail-table-wrapper flight-detail-popup"><div class="flight-detail-table"><div class="group-info-detail"><div class="Airline-name"><div class="img-airline"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + argument.airline+ \'.gif\'}}" class="logo-airline-small"></div><div class="name-airline-item"><span class="name-al">{{argument.airlineName}}</span> <span class="code-al">{{argument.fightNo}}</span></div></div><div class="airline-detail"><div class="flight-detail-from"><div class="text-center"><span class="bold">{{argument.originCity}}&nbsp;({{argument.originLocationCode}})</span></div><div class="text-center"><span>{{argument.originLocationName}}</span></div><div class="text-center"><span class="gtd-h3">{{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}} </span><span class="">{{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="icon-from-to"><span class="fa fa-long-arrow-right"></span></div><div class="flight-detail-to"><div class="text-center"><span class="bold">{{argument.destinationCity}}&nbsp;({{argument.destinationLocationCode}})</span></div><div class="text-center"><span>{{argument.destinationLocationName}}</span></div><div class="text-center"><span class="gtd-h3">{{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate:\'hour\'}} </span><span class="">{{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate:\'date\' | capitalize}}</span></div></div></div></div><!-- <div class="duration-flight">\n                    {{argument.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].journeyDuration | duration}} - Bay th\u1EB3ng\n                </div> --></div></div><div ng-if="argument.airline == \'0V\'" style="font-size: 11px; padding-left: 12px; margin-top: -5px; color: #D84A38">H\xE3ng khai th\xE1c Vietnam Air Service</div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/flight/flight-fare-rules.html', '{{argument4}}');
        $templateCache.put('app/components/flight/flight-info.html', '<div class="header-table"><div class="row header-table-row flight-info-header-curve" ng-show="$ctrl.gtdShowHeader != \'false\'"><div class="col-xs-1 header-table-base"><img src="../../../content/images/plane-taking-off-white.png"></div><div class="col-xs-3 header-table-base" style="text-align: center;border-right: 1px solid;border-color: rgb(160,200,200)"><span ng-show="$ctrl.flightModel.searchType == \'oneway\'">V\xE9 m\u1ED9t chi\u1EC1u</span> <span ng-show="$ctrl.flightModel.searchType == \'roundtrip\' && $ctrl.flightModel.flightIdx == 1">V\xE9 chi\u1EC1u \u0111i</span> <span ng-show="$ctrl.flightModel.searchType == \'roundtrip\' && $ctrl.flightModel.flightIdx == 2">V\xE9 chi\u1EC1u v\u1EC1</span></div><div class="col-xs-4 header-table-base text-capitalize" style="text-align: center;border-right: 1px solid;border-color: rgb(160,200,200)">{{$ctrl.flightModel.checkIn | momentdate:\'date\'}}</div><div class="col-xs-4 header-table-base" style="text-align: center"><span ng-show="$ctrl.flightModel.passengerNameRecords != null && $ctrl.flightModel.passengerNameRecords != \'\'">M\xE3 \u0111\u1EB7t ch\u1ED7 </span><span class="refno-text">{{$ctrl.flightModel.passengerNameRecords}}</span></div></div><div class="row row-eq-height bg-color2"><div class="col-xs-10"><div class="row margin-bottom-5 margin-top-5" ng-repeat="segment in $ctrl.flightModel.flightSegments"><div class="col-xs-2 detail-table-col-base"><div><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + segment.operatingAirline.code+ \'.gif\'}}"></div><div><span>{{segment.operatingAirline.name}}</span>&nbsp; <span>{{segment.operatingAirline.flightNumber}}</span></div></div><div class="col-xs-4 detail-table-col-base"><div><span class="time-text">{{segment.departureDateTime | unixtime | momentdate:\'hour\'}}</span></div><div><span class="loc-text">{{segment.departureCity}}&nbsp;({{segment.departureAirportLocationCode}})</span></div><div><span>{{segment.departureAirportLocationName}}</span></div><div><span>{{segment.departureDateTime | unixtime | momentdate}}</span></div></div><div class="col-xs-2 detail-table-col-base"><div ng-show="$ctrl.flightModel.noOfTransit == 1"><span>{{$ctrl.flightModel.duration | duration:\'short\'}}</span></div><div ng-show="$ctrl.flightModel.noOfTransit > 1"><span>{{segment.journeyDuration | duration:\'short\'}}</span></div><div><span class="fa fa-long-arrow-right"></span></div><div ng-show="$ctrl.flightModel.noOfTransit == 1"><span ng-show="$ctrl.flightModel.noOfTransit == 1">Bay th\u1EB3ng</span> <span ng-show="$ctrl.flightModel.noOfTransit > 1">Qu\xE1 c\u1EA3nh</span></div></div><div class="col-xs-4 detail-table-col-base"><div><span class="time-text">{{segment.arrivalDateTime | unixtime | momentdate:\'hour\'}}</span></div><div><span class="loc-text">{{segment.arrivalCity}}&nbsp;({{segment.arrivalAirportLocationCode}})</span></div><div><span>{{segment.arrivalAirportLocationName}}</span></div><div><span>{{segment.arrivalDateTime | unixtime | momentdate}}</span></div></div></div></div><div class="col-xs-2 detail-table-col-base" style="position: relative"><!--<div>--><div class="" style="position: absolute;top: 40%; left: 5%"><div>{{$ctrl.flightModel.cabinClassName == null ? \'promo\' : $ctrl.flightModel.cabinClassName | gender:\'cabinclass\'}}</div><div class="" ng-show="$ctrl.flightModel.noOfTransit > 1"><span>{{$ctrl.flightModel.duration | duration:\'short\'}}</span></div><div class="" ng-show="$ctrl.flightModel.noOfTransit > 1"><span ng-show="$ctrl.flightModel.noOfTransit > 1">Qu\xE1 c\u1EA3nh</span></div></div><!--</div>--></div></div><div class="row bg-color2 detail-table-row margin-left-m15" ng-show="$ctrl.gtdShowCustomer != \'false\'"><div colspan="col-xs-12"><span class="padding-left-15">H\xE0nh kh\xE1ch: &nbsp;</span> <span class="name-text" ng-repeat="item in $ctrl.flightModel.travelerInfo.airTravelers">{{item.passengerName.lastName}}&nbsp;{{item.passengerName.firstName}} <span ng-if="!$last">,</span></span></div></div><div class="row header-table-row flight-info-footer-curve" ng-show="!($ctrl.flightModel.searchType == \'roundtrip\' && $ctrl.flightModel.flightIdx == 1)"><div class="col-xs-12">&nbsp;</div></div></div>');
        $templateCache.put('app/components/flight/flight-search-adv.html', '<div class="row"><div class="col-md-12 flight-search-filter"><div class="search-filter"><div class="search-header"><span class="header-text" translate="flight.search.advsearch.filter"></span>&nbsp; <span class="fa fa-minus-square-o" ng-show="$ctrl.showAdv && $ctrl.isMobile" ng-click="$ctrl.showAdv = false;"></span> <span class="fa fa-plus-square-o" ng-show="(!$ctrl.showAdv) && $ctrl.isMobile" ng-click="$ctrl.showAdv = true;">--></span> <a ng-click="$ctrl.resetFilter();"><span class="pull-right" translate="flight.search.advsearch.cancel"></span> <span class="pull-right fa fa-refresh refresh-icon"></span></a></div><div ng-show="$ctrl.showAdv"><ng-switch on="$ctrl.searchOptions.dtype != \'domestic\'"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.transit"></span></div><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.transitCarouselArrays">{{item.text}} <input type="checkbox" name="tranitOpts" value="{{item.id}}" ng-model="$ctrl.transitCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></ng-switch><ng-switch on="!($ctrl.searchOptions.dtype == \'international\' && $ctrl.searchOptions.searchType != \'oneway\' && $ctrl.searchOptions.selectStep == 2)"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.departuretime"></span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.fromTimeCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6:00</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>18:00</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.arrivaltime"></span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-repeat="item in $ctrl.toTimeCarouselArrays" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.toTimeCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6:00</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>18:00</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div></ng-switch><!-- RETURN TIME --><ng-switch on="$ctrl.searchOptions.dtype == \'international\' && $ctrl.searchOptions.searchType != \'oneway\' && $ctrl.searchOptions.selectStep == 2"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">Gi\u1EDD kh\u1EDFi h\xE0nh chi\u1EC1u v\u1EC1</span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.fromTimeReturnCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6:00</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>18:00</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">Gi\u1EDD \u0111\u1EBFn chi\u1EC1u v\u1EC1</span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.toTimeReturnCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6:00</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>18:00</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div></ng-switch><!-- Airlines --><ng-switch on="!($ctrl.searchOptions.searchType == \'roundtrip\' && $ctrl.searchOptions.selectStep == 2)" ng-if="$ctrl.airlineCarouselArrays != null && $ctrl.airlineCarouselArrays.length>0"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.airlines"></span></div><div class="mt-checkbox-list"><div class="checkbox-wrapper" ng-repeat="item in $ctrl.airlineCarouselArrays track by $index" ng-if="($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\' && item.id == $ctrl.searchResult.groupPricedItineraries[0].airline) || !($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\')" ng-show="$ctrl.loadMore || $index <= 4"><label class="mt-checkbox mt-checkbox-outline"><input class="airline-{{item.id}}" type="checkbox" name="airlineOpts" value="{{item.id}} {{item.checked}}" ng-model="$ctrl.airlineCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"><div style="display: inline-block"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.id+ \'.gif\'}}" class="logo-airline-small"> {{item.text}}</div><span></span></label></div></div><div class="pull-right text-underlined" style="margin-top: -10px"><span ng-show="$ctrl.loadMore == false && $ctrl.airlineCarouselArrays.length > 5" ng-click="$ctrl.loadMore = !$ctrl.loadMore">Xem t\u1EA5t c\u1EA3</span> <span ng-show="$ctrl.loadMore && $ctrl.airlineCarouselArrays.length > 5" ng-click="$ctrl.loadMore = !$ctrl.loadMore">Thu g\u1ECDn</span></div></div></ng-switch><div class="search-filter-divider"></div><div class="search-detail"><div><span class="search-label-text" translate="flight.search.advsearch.class"></span></div><div class="search-detail"><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.classCarouselArrays">{{item.text | translate}} <input type="checkbox" name="classOpts" value="{{item.id}}" ng-model="$ctrl.classCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></div><ng-switch on="$ctrl.searchOptions.dtype == \'domestic\'"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">{{\'flight.search.header.conditions\' |translate}}</span></div><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.policyArrays">{{item.text}} <input type="checkbox" name="policyOpts" value="{{item.id}}" ng-model="$ctrl.policyArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></ng-switch></div></div></div></div>');
        $templateCache.put('app/components/flight/flight-search-date-paginator.html', '<div ng-switch="$ctrl.dateCarouselArrays.length > 0"><div class="flight-search-paginator" style="display: inline-block"><div class="arrow" style="display: inline-block"><span class="fa fa-angle-left"></span></div><div class="pagination" style="display: inline-block"><div ng-repeat="item in $ctrl.dateCarouselArrays" class="date-box" ng-class="{active: $ctrl.activeDateIdx==$index}" ng-click="$ctrl.activeDateIdx=$index" style="display: inline-block"><div>{{item.text}}</div><div><span class="price-text"><b>{{item.price}}</b></span> <span>{{item.unit}}</span></div></div></div><div class="arrow" style="display: inline-block"><span class="fa fa-angle-right"></span></div><!--<div class="date-carousel">--><!--<div ng-repeat="item in $ctrl.dateCarouselArrays" class="date-box">--><!--<div>{{item.text}}</div>--><!--<div>--><!--<span class="price-text"><b>{{item.price}}</b></span>--><!--<span>{{item.unit}}</span>--><!--</div>--><!--</div>--><!--</div>--><div style="clear:both"></div></div><!--<div class="flight-search-paginator-other" ng-switch-when="true">--><!--<a class="clickable">--><!--<span class="fa fa-calendar-plus-o text-calendar"></span>--><!--<span class="text-detail" data-translate="flight.search.result.otherdateopt">Ve ngay khac</span>--><!--</a>--><!--</div>--></div>');
        $templateCache.put('app/components/flight/flight-search-footer.html', '<div class="container reset-container"><div class="row"><!--<div class="col-lg-12">--><div class="footer-popular-place-box"><div class="flight-footer-title uppercase"><b><span data-translate="flight.search.footer.popular-place"></span></b></div><div class="flight-footer-detail"><span ng-repeat="item in $ctrl.popularPlaces"><a>{{item}}</a> <span ng-class="{\'footer-last\': $last}">|</span></span></div></div><div class="footer-popular-flight-box"><div class="flight-footer-title uppercase"><b><span data-translate="flight.search.footer.popular-flight"></span></b></div><div class="flight-footer-detail"><span ng-repeat="item in $ctrl.popularFlights"><a>{{item}}</a> <span ng-class="{\'footer-last\': $last}">|</span></span></div></div><div class="footer-popular-hotel-box"><div class="flight-footer-title uppercase"><b><span data-translate="flight.search.footer.popular-hotel"></span></b></div><div class="flight-footer-detail"><span ng-repeat="item in $ctrl.popularHotels"><a>{{item}}</a> <span ng-class="{\'footer-last\': $last}">|</span></span></div></div><!--</div>--></div></div>');
        $templateCache.put('app/components/flight/flight-search-header.html', '<form name="airSearchForm" novalidate><input type="hidden" ng-model="$ctrl.searchOptions.page"> <input type="hidden" ng-model="$ctrl.searchOptions.size"><div class="flight-search-header" gtd-spinner-passenger-quantity search-options="$ctrl.searchOptions"><div class="container reset-container"><input type="hidden" ng-model="$ctrl.searchOptions.searchType"> <input type="hidden" ng-model="$ctrl.searchOptions.dtype"><div class="row" ng-switch="$ctrl.searchOptions.searchType == \'roundtrip\'"><div class="no-margin-left no-padding-left col-md-4 col-sm-12"><div class="header-destination-box header-destination-box-no-margin"><div class="uppercase"><span id="oneway" data-translate="flight.search.header.oneway" class="selectType select-oneway" ng-click="changeSelect(\'oneway\')" ng-class="{true:\'\', false:\'selected\'}[$ctrl.searchOptions.searchType == \'roundtrip\']"></span> <span id="roundtrip" data-translate="flight.search.header.rountrip" class="selectType select-roundtrip" ng-click="changeSelect(\'roundtrip\')" ng-class="{true:\'selected\', false:\'\'}[$ctrl.searchOptions.searchType == \'roundtrip\']"></span></div><div class="form-group" ng-switch="$ctrl.searchOptions.dtype == \'domestic\'"><!--<div class="input-group select2-bootstrap-prepend">--><div class="col-md-5 col-sm-5 col-xs-5 no-margin no-padding"><select id="fromAirPort" name="fromAirPort" ng-model="$ctrl.searchOptions.fromAirPort" gtd-airport-select gtd-mode="$ctrl.searchOptions.dtype" gtd-search-options="$ctrl.searchOptions" gtd-direction="\'FROM\'" required autocomplete="off" class="form-control from-to-airport select2"></select><!-- <input type="text"\n                                            name="fromAirPort"\n                                            id="fromAirPortInt"\n                                            ng-model="$ctrl.searchOptions.fromAirPort"\n                                            class="fromAirPort form-control"\n                                            uib-typeahead="o.code as (o.city + \' (\' + o.code  + \' - \' + o.name + \')\' + \', \' + o.country ) for o in $ctrl.searchAirports($viewValue, \'FROM\')"\n                                            typeahead-input-formatter="$ctrl.formatLabel($model)"\n                                            typeahead-loading="loadingLocations"\n                                            typeahead-no-results="noResults"\n                                            typeahead-min-length="0"\n                                            typeahead-editable="false"\n                                            gtd-typeahead-focus\n                                            required\n                                            autocomplete="off"\n                                            ng-if="$ctrl.iOS"\n                                    > --></div><div class="col-md-2 col-sm-2 col-xs-2 from-to-airport-seperator-h no-margin no-padding"><span class="input-group-addon from-to-airport-seperator-h" ng-switch-when="true" ng-if="!$ctrl.iOS"><a class="switchDirectionBtn" gtd-swap-select2 gtd-from="fromAirPort" gtd-to="toAirPort"><span class="fa fa-exchange clickable-color1"></span> </a></span><span class="input-group-addon from-to-airport-seperator-h" ng-switch-when="false" ng-if="!$ctrl.iOS"><a class="switchDirectionBtn" gtd-swap-select2-inter gtd-from="fromAirPort" gtd-to="toAirPort"><span class="fa fa-exchange clickable-color1"></span> </a></span><span class="input-group-addon from-to-airport-seperator-h" ng-if="$ctrl.iOS" ng-click="$ctrl.switchTypeAhead();"><a class="" gtd-from="fromAirPortInt" gtd-to="toAirPortInt"><span class="fa fa-exchange clickable-color1"></span></a></span></div><div class="col-md-5 col-sm-5 col-xs-5 no-margin no-padding"><select id="toAirPort" name="toAirport" ng-model="$ctrl.searchOptions.toAirPort" gtd-airport-select gtd-mode="$ctrl.searchOptions.dtype" gtd-search-options="$ctrl.searchOptions" gtd-direction="\'TO\'" autocomplete="off" required class="form-control from-to-airport select2"></select><!-- <input type="text"\n                                            name="toAirPort"\n                                            id="toAirPortInt"\n                                            ng-model="$ctrl.searchOptions.toAirPort"\n\n                                            ng-if="$ctrl.iOS"\n\n                                            uib-typeahead="o.code as (o.city + \' (\' + o.code  + \' - \' + o.name + \')\' + \', \' + o.country ) for o in $ctrl.searchAirports($viewValue, \'TO\')"\n                                            typeahead-input-formatter="$ctrl.formatLabel($model)"\n                                            typeahead-loading="loadingLocations"\n                                            typeahead-no-results="noResults"\n                                            typeahead-min-length="0"\n                                            typeahead-editable="false"\n                                            gtd-typeahead-focus\n\n                                            required\n                                            autocomplete="off"\n                                            class="form-control toAirPort"> --></div><!--</div>--></div></div></div><div class="no-margin col-md-4 col-sm-6 col-xs-12"><div class="row"><div class="no-margin col-xs-6"><div class="header-date-box" data-date-format="dd-mm-yyyy"><div class="uppercase"><span data-translate="flight.search.header.departuredate"></span></div><div class="input-icon right" onclick="$(\'#departureDate_\').datepicker(\'show\');"><i class="fa fa-calendar btn icon-centre"></i> <input id="departureDate_" class="form-control" size="16" type="text" value="" readonly="readonly" style="background-color: unset" gtd-dual-date-picker end-id="returnDate_" is-start="true" required ng-model="$ctrl.searchOptions.departureDate"></div></div></div><div class="col-xs-6 itemDatetime" ng-class="{true:\'\', false:\'disable\'}[$ctrl.searchOptions.searchType == \'roundtrip\']"><div class="header-date-box" data-date-format="dd-mm-yyyy"><div class="uppercase"><span data-translate="flight.search.header.returndate"></span></div><div class="input-icon right" onclick="$(\'#returnDate_\').datepicker(\'show\');"><i class="fa fa-calendar btn icon-centre"></i> <input id="returnDate_" class="form-control" size="16" type="text" value="" readonly="readonly" style="background-color: unset" start-id="departureDate_" ng-model="$ctrl.searchOptions.returnDate" ng-required="!($ctrl.searchOptions.searchType==\'oneway\')" gtd-dual-date-picker></div></div></div></div></div><div class="no-margin col-md-3 col-sm-5 col-xs-9 selectNumber"><div class="header-passenger-select"><div class="group-numb-air"><div class="header-passenger-box"><div class="uppercase"><span data-translate="flight.search.header.adult"></span></div><div class="input-icon right"><input id="adultNo" type="text" class="touchspin-vertical" gtd-touch-spinner readonly="readonly" style="background-color: unset" gtd-min="1" gtd-max="9" ng-model="$ctrl.searchOptions.adultNo"></div></div><div class="header-passenger-box"><div class="uppercase"><span data-translate="flight.search.header.children"></span></div><div class="input-icon right"><input id="childrenNo" type="text" value="" class="touchspin-vertical" gtd-touch-spinner readonly="readonly" style="background-color: unset" ng-model="$ctrl.searchOptions.childrenNo" gtd-min="0"></div></div><div class="header-passenger-box"><div class="uppercase"><span data-translate="flight.search.header.newborn"></span></div><div class="input-icon right"><input id="newBornNo" type="text" value="" class="touchspin-vertical" gtd-touch-spinner readonly="readonly" style="background-color: unset" ng-model="$ctrl.searchOptions.newBornNo" gtd-min="0"></div></div></div></div></div><div class="col-sm-1 col-xs-3 btnSubmitSearch"><div class="uppercase no-margin flight-search-button"><button class="btn gtd-btn-default gtd-btn-small1" type="submit" ng-disabled="airSearchForm.$invalid" ng-click="$ctrl.doSearchImpl()"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase fa fa-search"></span> <span class="uppercase" data-translate="flight.search.header.search"></span></button></div></div></div></div></div></form>');
        $templateCache.put('app/components/flight/flight-search-result.html', '<div class="row"><div class="col-md-12"><div class="tile-container"><!-- HEADER --><div class="heading-detail"><ng-switch on="$ctrl.searchOptions.selectStep == 1"><div class="row"><div class="pull-left no-padding background-header" style="width: 100%; padding: 20px"><div class="header-logo-section" ng-switch-when="true" ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'"><div class="title-header-icon-block"><div><img src="../../../content/images/plane_depart_red.png"></div><div><span data-translate="flight.search.result.a2b" class="header-a2b-text uppercase"></span></div></div></div><div class="title-header-text-block" ng-switch-when="true" ng-class="{true:\'header-content-section\', false:\'col-sm-12\'}[$ctrl.searchOptions.searchType == \'roundtrip\']"><div class="title-header"><span class="title-header-main"><span class="full-name-airline">({{$ctrl.searchOptions.fromAirPort}})</span> - <span class="full-name-airline">({{$ctrl.searchOptions.toAirPort}})</span> </span><span class="title-header-sub">{{$ctrl.searchResult.page.totalElements | number}} {{\'flight.search.header.flight\'| translate}}</span></div><div class="title-header-last" ng-if="$ctrl.searchResult.groupPricedItineraries.length>0"><span class="title-heahand show-sub-flightder-sub text-capitalize">{{$ctrl.searchResult.groupPricedItineraries[0].departureDateTime | momentdate:\'date\'}} , </span><span class="title-header-sub text-capitalize">{{$ctrl.searchOptions.adultNo}} {{\'flight.search.header.adult\' |translate}} </span><span class="title-header-sub text-capitalize" ng-show="$ctrl.searchOptions.childrenNo != 0">, {{$ctrl.searchOptions.childrenNo}} {{\'flight.search.header.children\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.searchOptions.newBornNo != 0">, {{$ctrl.searchOptions.newBornNo}} {{\'flight.search.header.newborn\' |translate}}</span></div></div></div></div></ng-switch></div><ng-switch on="$ctrl.searchOptions.selectStep == 2"><div ng-switch-when="true" class="depart-block block-flight-first" ng-if="$ctrl.searchOptions.dtype == \'domestic\'"><div class="row"><div class="col-sm-12"><div class="header-logo-section"><div class="title-header-icon-block1"><div class="icon-flight"><img src="../../../content/images/plane_depart_grey.png"></div><div><span data-translate="flight.search.result.a2b" class="header-a2b-text1 uppercase"></span></div></div></div><div class="header-content-section"><div class="col-sm-7 col-xs-7 title-header-text-block"><div class="title-header1"><span class="title-header-main"><span class="full-name-airline">{{$ctrl.departGroupItem.originCity}}</span> &nbsp;({{$ctrl.departGroupItem.originLocationCode}}) - <span class="full-name-airline">{{$ctrl.departGroupItem.destinationCity}}</span> &nbsp;({{$ctrl.departGroupItem.destinationLocationCode}}) </span>&nbsp;</div><div class="title-header1"><span class="title-header-sub text-capitalize">{{$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'date\'}} <span class="quantity-numb">, {{$ctrl.departPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities.quantity}} {{\'flight.search.header.adult\' |translate}}</span>&nbsp; <span class="title-header-sub text-capitalize" ng-show="$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.childFare != null">, {{$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.childFare.passengerTypeQuantities.quantity}} {{\'flight.search.header.children\' |translate}}&nbsp;</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.infantFare != null">, {{$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.infantFare.passengerTypeQuantities.quantity}} {{\'flight.search.header.newborn\' |translate}}&nbsp;</span></span></div></div><!-- <div class="col-sm-1 title-headerflight-detail1-block" style="padding: 0px;">\n                                    <img\n                                        ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + $ctrl.departGroupItem.airline + \'.gif\'}}"\n                                        class="logo-airline"/>\n                                </div> --><div class="col-sm-3 col-xs-5 title-headerflight-detail1-block"><div><span>{{$ctrl.departGroupItem.airlineName}}&nbsp;{{$ctrl.departGroupItem.fightNo}}</span></div><div><span>{{$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}}</span> <span class="fa fa-long-arrow-right"></span> <span>{{$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments[$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments.length -1].arrivalDateTime | momentdate:\'hour\'}}</span></div></div><div class="col-sm-2 col-xs-5 title-headerflight-detail2-block"><div class="margin-bottom-5"><span ng-if="$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments.length <= 1">{{\'flight.search.header.non-stop\' |translate}}</span> <span ng-if="$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments.length > 1">{{\'flight.search.header.transit\' |translate}}</span></div></div></div></div></div></div><div class="pull-right" ng-switch-when="true" ng-click="$ctrl.changeFlight()" ng-if="$ctrl.searchOptions.dtype != \'international\'"><a class="label label-outline label-change">{{\'flight.search.header.change\' |translate}} <span class="text-color4 fa fa-pencil-square-o"></span></a></div><div ng-switch-when="true" class="depart-block depart-block-international" ng-if="$ctrl.searchOptions.dtype == \'international\'"><div class="row"><div class="col-sm-12 group-block"><div class="header-logo-section"><div class="title-header-icon-block1"><div class="img-block"><img src="../../../content/images/plane_depart_grey.png"></div><div class="name-block"><span data-translate="flight.search.result.a2b" class="header-a2b-text1 uppercase"></span></div></div></div><div class="header-content-section"><div class="col-sm-2 title-header-text-block block-item-flight-info"><div class="title-header1"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + $ctrl.departGroupItem.airline + \'.gif\'}}" class="logo-airline"></div><div class="title-header1"><span>{{$ctrl.departGroupItem.airline}}&nbsp;{{$ctrl.departGroupItem.fightNo}}</span></div></div><div class="col-sm-3 title-header-text-block"><div class="title-header1"><span class="title-header-main bold">{{$ctrl.departGroupItem.originLocationCode}}&nbsp;-&nbsp;{{$ctrl.departGroupItem.destinationLocationCode}} </span>&nbsp;</div><div class="title-header1"><span class="title-header-sub title-header-time-flight gtd-h4">{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].originDateTime | momentdate:\'hour\'}}&nbsp;-&nbsp; {{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].destinationDateTime | momentdate:\'hour\'}} <span class="flight-date-diff-text">{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0] | flightdatediff}}</span></span></div></div><div class="col-sm-2 title-header-text-block"><div class="title-header1"><div><span>{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].journeyDuration | duration:\'short\'}}</span></div></div><div class="title-header1"><div>{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</div></div></div><div class="col-sm-2 title-headerflight-detail1-block" style="text-align: right"><div class="title-header1"><div><span ng-if="$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].flightSegments.length <= 1">{{\'flight.search.header.non-stop\' |translate}}</span> <span ng-if="$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].flightSegments.length > 1">{{\'flight.search.header.transit\' |translate}}</span></div></div></div><div class="col-sm-3 title-headerflight-detail2-block" style="text-align: right"><div><span ng-if="!($ctrl.departSearchOptions.dtype == \'international\' && $ctrl.departSearchOptions.searchType == \'roundtrip\')">Gi\xE1 m\u1ED9t chi\u1EC1u</span> <span ng-if="($ctrl.departSearchOptions.dtype == \'international\' && $ctrl.departSearchOptions.searchType == \'roundtrip\')">Gi\xE1 kh\u1EE9 h\u1ED3i</span></div><div class="uppercase"><span class="gtd-h3 text-color4 bold">{{$ctrl.orgDepartPricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span>&nbsp;VN\u0110</div></div></div></div></div></div><div class="pull-right" ng-switch-when="true" ng-click="$ctrl.changeFlight()" ng-if="$ctrl.searchOptions.dtype == \'international\'"><a class="label label-outline label-change">Thay \u0111\u1ED5i chuy\u1EBFn \u0111i <span class="text-color4 fa fa-pencil-square-o"></span></a></div><div ng-switch-when="true" class="return-block"><div class="row"><div class="col-sm-12 no-padding"><div class="header-logo-section"><div class="title-header-icon-block margin-bottom-5 block-return-airline"><div><img src="../../../content/images/plane_return_red.png"></div><div><span data-translate="flight.search.result.b2a" class="header-a2b-text uppercase"></span></div></div></div><div ng-class="{true:\'header-content-section\', false:\'col-sm-12\'}[$ctrl.searchOptions.searchType == \'roundtrip\']" class="title-header-text-block"><div class="col-sm-12"><div class="title-header"><span class="title-header-main" ng-if="$ctrl.returnSearchOptions.dtype == \'domestic\'">{{$ctrl.returnSearchOptions.fromAirPort | airport : \'city-code\'}} - {{$ctrl.returnSearchOptions.toAirPort | airport : \'city-code\'}}&nbsp;</span> <span class="title-header-main" ng-if="$ctrl.returnSearchOptions.dtype == \'international\'">{{$ctrl.returnSearchOptions.toAirPort | airport : \'city-code\'}} - {{$ctrl.returnSearchOptions.fromAirPort | airport : \'city-code\'}}&nbsp;</span> <span class="title-header-sub" ng-if="$ctrl.returnSearchOptions.dtype == \'domestic\'">{{$ctrl.searchResult.page.totalElements | number}} {{\'flight.search.header.flight\' |translate}}</span> <span class="title-header-sub" ng-if="$ctrl.returnSearchOptions.dtype == \'international\'">{{$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries.length | number}} {{\'flight.search.header.flight\' |translate}}</span></div><div class="title-header-last"><span class="title-header-sub text-capitalize" ng-if="$ctrl.returnSearchOptions.dtype == \'domestic\'">{{$ctrl.returnSearchOptions.departureDate | momentdate:\'date\':\'DD-MM-YYYY\'}} , {{$ctrl.returnSearchOptions.adultNo}} {{\'flight.search.header.adult\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-if="$ctrl.returnSearchOptions.dtype != \'domestic\'">{{$ctrl.returnSearchOptions.returnDate | momentdate:\'date\':\'DD-MM-YYYY\'}} , {{$ctrl.returnSearchOptions.adultNo}} {{\'flight.search.header.adult\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.returnSearchOptions.childrenNo > 0">, {{$ctrl.returnSearchOptions.childrenNo}} {{\'flight.search.header.children\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.returnSearchOptions.newBornNo > 0">, {{$ctrl.returnSearchOptions.newBornNo}} {{\'flight.search.header.newborn\' |translate}}</span></div></div></div></div></div></div></ng-switch><!-- END HEADER --><slick settings="$ctrl.slickConfig" class="airline-navigation" ng-if="$ctrl.showCarousel==true && !($ctrl.searchOptions.searchType == \'roundtrip\' && $ctrl.searchOptions.selectStep == 2)"><div class="item hand" ng-repeat="item in $ctrl.airlineCarouselArrays" ng-class="{\'active-airline\': $ctrl.searchOptions.advanceFilters != null && $ctrl.searchOptions.advanceFilters.airlineOptions.length > 0 && $ctrl.searchOptions.advanceFilters.airlineOptions.indexOf(item.id) > -1}" ng-if="($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\' && item.id == $ctrl.searchResult.groupPricedItineraries[0].airline) || !($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\')"><div class="img-airlines"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.id + \'.gif\'}}" class="logo-airline" style="width: unset;height: unset !important;max-height: 25px;max-width: 95px;height: 25px !important"></div><div class="info-airlines"><div class="airline-code">{{item.text}}</div><div class="airline-code-hid" style="display: none">{{item.id}}</div><div>{{\'flight.search.result.from\' | translate}} &nbsp;<span>{{item.price | number}}</span> <span>{{item.unit}}</span></div></div></div></slick><div class="form-group sort-group pull-right margin-right-m15 flight-sort-div nav-sort-flight" ng-if="$ctrl.searchResult.groupPricedItineraries != null && $ctrl.searchResult.groupPricedItineraries.length > 0"><div class="col-sm-12"><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'departureDate\'}" ng-click="$ctrl.setSort(\'departureDate\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.departureDateDir==\'desc\'"><span data-translate="flight.search.result.start"></span>&nbsp;<span class="margin-left-fa fa fa-angle-down"></span> </a><a class="clickable" ng-show="$ctrl.searchOptions.departureDateDir==\'asc\'"><span data-translate="flight.search.result.start"></span>&nbsp;<span class="margin-left-fa fa fa-angle-up"></span></a></div><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'arrivalDate\'}" ng-click="$ctrl.setSort(\'arrivalDate\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.arrivalDateDir==\'desc\'"><span data-translate="flight.search.result.arrivaltime">&nbsp;</span><span class="margin-left-fa fa fa-angle-down"></span></a> <a class="clickable" ng-show="$ctrl.searchOptions.arrivalDateDir==\'asc\'"><span data-translate="flight.search.result.arrivaltime">&nbsp;</span><span class="margin-left-fa fa fa-angle-up"></span></a></div><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'duration\'}" ng-click="$ctrl.setSort(\'duration\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.durationDir==\'desc\'"><span data-translate="flight.search.result.time"></span>&nbsp;<span class="margin-left-fa fa fa-angle-down"></span></a> <a class="clickable" ng-show="$ctrl.searchOptions.durationDir==\'asc\'"><span data-translate="flight.search.result.time"></span>&nbsp;<span class="margin-left-fa fa fa-angle-up"></span></a></div><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'price\'}" ng-click="$ctrl.setSort(\'price\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.priceDir==\'desc\'"><span data-translate="flight.search.result.price"></span>&nbsp;<span class="margin-left-fa fa fa-angle-down"></span></a> <a class="clickable" ng-show="$ctrl.searchOptions.priceDir==\'asc\'"><span data-translate="flight.search.result.price"></span>&nbsp;<span class="margin-left-fa fa fa-angle-up"></span></a></div></div></div><ng-switch on="$ctrl.searchOptions.dtype != \'international\'"><div class="search-result-wrapper" ng-switch-when="true"><div class="row search-result-item flight-search-international-searchresult flight-search-international-searchresult-depart col-sm-12" ng-class="{\'little-item\': item.totalPricedItinerary == 1}" ng-repeat="item in $ctrl.searchResult.groupPricedItineraries" ng-class="{\'active-group-item\':item.over}" ng-mouseenter="item.over=true" ng-mouseleave="item.over=false"><div class="row search-item-header no-margin-left no-margin-right"><!--<div class="col-sm-1 search-item-header-begin-box"/>--><!--<div class="col-sm-12">--><div class="col-sm-7 margin-left-m15"><div class="row"><div class="col-sm-3 no-padding-right search-item-header-airline-box"><div class="img-airline-item"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.airline+ \'.gif\'}}" class="logo-airline-small"></div><div class="name-airline-item"><span>{{item.airlineName}} <span class="code-airline">{{item.fightNo}}</span></span></div></div><div class="col-sm-4 col-xs-3 no-padding search-item-header-group search-item-header-from-box"><div class="margin-bottom-8 name-code-location"><span><span class="full-origincity">{{item.originCity}}</span> ({{item.originLocationCode}})</span></div><div><span class="gtd-h2">{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}}</span></div></div><div class="col-xs-1 no-padding search-item-header-box icon-form-to-search"><div><span class="fa fa-long-arrow-right"></span></div></div><div class="col-sm-4 col-xs-3 no-padding search-item-header-group search-item-header-to-box"><div class="margin-bottom-8 name-code-location"><span><span class="full-origincity">{{item.destinationCity}}</span> ({{item.destinationLocationCode}})</span></div><div><span class="gtd-h2">{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate:\'hour\'}}</span></div></div><div class="col-xs-5 hidden-sm-down group-item-price"><div class="price-responsive"><div class="note-price">Gi\xE1 t\u1EEB</div><div class="price-default">{{item.pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}} <span>VND</span></div></div></div></div><div ng-if="item.airline == \'0V\'" style="font-size: 11px; padding-left: 12px; margin-bottom: -5px">H\xE3ng khai th\xE1c Vietnam Air Service</div></div><div class="col-sm-5"><div class="row"><div class="col-sm-7 col-xs-12 search-item-header-group search-item-header-time-box"><div class="flight-time hidden-sm-up"><span>{{item.pricedItineraries[0].originDestinationOptions[0].journeyDuration | duration}}</span></div><div class="flight-detail"><a class="flight-detail-text" style="text-decoration: none" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view1.html" argument="item" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a></div></div><div class="col-xs-5 search-item-header-type-box"><div><a class="clickable"><span class="label label-cancelled">{{\'flight.search.header.non-stop\' |translate}}</span></a></div></div></div></div><!--</div>--></div><div class="list-search-item" ng-class="{\'multiple\': item.totalPricedItinerary > 1}"><div class="row search-item-detail no-margin-left no-margin-right" ng-repeat="pricedItinerary in item.pricedItineraries"><div class="col-sm-7 margin-left-m15 margin-right-m15 no-padding-left no-padding-right"><div class="row"><div class="col-xs-4 search-item-detail-class-type-box"><div class="type-flight-name"><span>{{pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName == null ? pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassText : pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div><div class="col-xs-4 search-item-detail-feature-box"><div><span class="fa fa-suitcase" ng-if="pricedItinerary.baggageItems != null && pricedItinerary.baggageItems[0] != null"></span> <span ng-if="pricedItinerary.baggageItems != null && pricedItinerary.baggageItems[0] != null">{{pricedItinerary.baggageItems[0].name}}</span> <span ng-if="item.airSupplier == \'VN\' && pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassCode == \'P\'">(Xin tham kh\u1EA3o \u0111i\u1EC1u ki\u1EC7n k\xE8m theo)</span><!--<span class="fa fa-cutlery"></span>--><!--<span>&nbsp; Su\u1EA5t \u0103n</span>--></div></div><div class="col-xs-4 search-item-detail-condition-box popover-fare-rules"><div class="clickable btn-conditions"><a class="btn btn-outline-grey fare-rules-button" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/components/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="pricedItinerary">{{\'flight.search.header.condition\' |translate}}</a></div></div></div></div><div class="col-sm-5"><div class="item-sub-flight-select"><div class="row"><div class="no-padding col-xs-7 search-item-detail-price-box"><div class="sub-flight-item"><div><span class="price-text">{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}} </span><span>VND</span></div><div class="note-price-flight"><span>({{\'flight.search.header.include\' |translate}} +{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.serviceTax.amount | number}}vn\u0111 {{\'flight.search.header.tax\' |translate}})</span></div></div></div><div class="col-xs-5 search-item-detail-booking-box"><div class="btn-select-flight"><span class="label label-color4 label-booking hand" ng-click="$ctrl.bookingClicked(item, pricedItinerary)">{{\'flight.search.header.choose\' |translate}}</span></div></div></div></div></div></div></div><div class="sm-rs-flight" ng-click="$ctrl.showSFlight($event)" ng-show="item.totalPricedItinerary == 1"></div><div class="search-item-expand-collapse" ng-show="item.totalPricedItinerary > 1"><div class="start-col"></div><div class="col"></div><span class="hand show-sub-flight" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)"><span class="name-s">{{\'flight.search.header.moreVI\' |translate}} {{\'flight.search.header.moreEN\' |translate}} {{\'flight.search.header.option\' |translate}}</span> </span><span class="hand" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary == item.pricedItineraries.length" ng-click="$ctrl.loadLess($event, item)">Thu g\u1ECDn l\u1EF1a ch\u1ECDn</span></div></div><div ng-show="$ctrl.busy">Loading data...</div></div></ng-switch><ng-switch on="$ctrl.searchOptions.dtype == \'international\'"><div class="search-result-wrapper search-result-wrapper-roundtrip" ng-switch-when="true"><!-- Step 1 - Return International 1 --><div class="flight-search-international-searchresult search-result-item flight-search-international-searchresult-depart col-sm-12" ng-repeat="item in $ctrl.searchResult.groupPricedItineraries" ng-if="$ctrl.searchOptions.selectStep == 1" ng-class="{\'little-item\': item.totalPricedItinerary == 1}" ng-class="{\'active-group-item\':item.over}" ng-mouseenter="item.over=true" ng-mouseleave="item.over=false"><div class="top-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-4 col-xs-12"><div class="group-info"><div class="airline-item"><div class="img-airline"><img class="airline-image-small" ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.airline+ \'.gif\'}}"></div><div class="name-airline-item">{{item.airlineName}} {{item.fightNo}}</div></div><div class="time-type"><span>{{item.pricedItineraries[0].originDestinationOptions[0].journeyDuration | duration:\'short\'}}</span><!-- - {{item.pricedItineraries[0].airItineraryPricingInfo.fareSourceCode}}--> <span>- {{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item detination-item-from"><div class="time-flight"><span class="time-flight">{{item.pricedItineraries[0].originDestinationOptions[0].originDateTime | momentdate:\'hour\'}}</span> <span class="flight-date-diff-text">{{item.pricedItineraries[0].originDestinationOptions[0] | flightdatediff}}</span></div><div class="airline-name"><span class="full-name-airline">{{item.pricedItineraries[0].originDestinationOptions[0].originCity}}</span> ({{item.pricedItineraries[0].originDestinationOptions[0].originLocationCode}})</div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item"><!-- <span ng-if="item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length > 1" class="fa fa-long-arrow-right"></span> --> <span class="time-flight">{{item.pricedItineraries[0].originDestinationOptions[0].destinationDateTime | momentdate:\'hour\'}}</span><div class="airline-name"><span class="full-name-airline">{{item.pricedItineraries[0].originDestinationOptions[0].destinationCity}}</span> ({{item.pricedItineraries[0].originDestinationOptions[0].destinationLocationCode}})</div></div></div><div class="col-xs-6 price-flight-responsive"><div class="price-flight margin-t-5"><span class="type-price"><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">{{item.pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</span></div></div><div class="col-sm-2 dipl"><div class="airline-type"><span ng-if="item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length > 1">{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length - 1}} \u0111i\u1EC3m d\u1EEBng</span> <span ng-if="item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length <= 1">Bay th\u1EB3ng</span></div><div class="segment-item"><span class="segment-text" ng-if="!$first" ng-repeat="segment in item.pricedItineraries[0].originDestinationOptions[0].flightSegments">{{segment.departureAirportLocationCode}}</span></div></div></div><div class="flight-detail hidden-sm-down"><a class="flight-detail-text ng-binding ng-isolate-scope" style="text-decoration: none" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="item.pricedItineraries[0]" argument3="1" ibe-keys="ibeKeys" data-original-title="" title="">Chi ti\u1EBFt h\xE0nh tr\xECnh</a></div></div><div class="list-search-item" ng-class="{\'multiple\': item.totalPricedItinerary > 1}"><div class="bottom-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-2"><div class="summary-cell see-more-flight margin-t-5"><span class="hand text-color4 text-underlined" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)">Th\xEAm l\u1EF1a ch\u1ECDn </span><span class="hand text-color4 text-underlined" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary == item.pricedItineraries.length" ng-click="$ctrl.loadLess($event, item)">Thu g\u1ECDn </span><!--<a class="text-color4 hand" style="color:#D84A38"--><!--&gt;Th\xEAm l\u1EF1a ch\u1ECDn</a>--></div></div><div class="col-sm-4"><div class="summary-cell margin-t-5"><a class="text-color3 hand hidden-sm-tk" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="item.pricedItineraries[0]" argument3="1" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a> <span class="text-color3 hidden-sm-tk">|</span> <a class="text-color3 hand popover-fare-rules" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/components/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="item.pricedItineraries[0]" ibe-keys="ibeKeys">{{\'flight.search.header.condition\' |translate}}</a></div></div><div class="col-sm-4"><div class="time-type time-type-responsive"><span>{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div><div class="price-flight margin-t-5"><span class="type-price"><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">{{item.pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</span></div></div><div class="col-sm-2 btn-select-flight"><div class="btn-red btn" ng-click="$ctrl.bookingClicked(item, item.pricedItineraries[0])">Ch\u1ECDn v\xE9</div></div></div></div><div class="sub-flight"><div class="row no-margin-left no-margin-right additonal-option-row" ng-repeat="pricedItinerary in item.pricedItineraries track by $index" ng-if="$index != 0"><div class="col-sm-2 col-xs-6"><div class="margin-t-5"><span class="bold">{{pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div><div class="col-sm-4"><div class="summary-cell margin-t-5"><a class="text-color3 hand hidden-sm-tk" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="pricedItinerary" argument3="1" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a> <span class="text-color3 hidden-sm-tk">|</span> <a class="text-color3 hand popover-fare-rules" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/components/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="pricedItinerary" ibe-keys="ibeKeys">{{\'flight.search.header.condition\' |translate}}</a></div></div><div class="col-sm-4"><div class="margin-t-5"><span class="price-type" ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span class="price-type" ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> <span class="price-text">{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</div></div><div class="col-sm-2"><div class="btn-color5 btn" ng-click="$ctrl.bookingClicked(item, pricedItinerary)">Ch\u1ECDn v\xE9</div></div></div></div></div><div class="sm-rs-flight" ng-click="$ctrl.showSFlight($event)" ng-show="item.totalPricedItinerary == 1"></div><div class="summary-cell search-item-expand-collapse summary-cell-responsive margin-t-5"><span class="hand show-sub-flight" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)"><span class="hand text-color4 text-underlined name-s" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)">Th\xEAm l\u1EF1a ch\u1ECDn </span></span><span class="hand text-color4 text-underlined" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary == item.pricedItineraries.length" ng-click="$ctrl.loadLess($event, item)">Thu g\u1ECDn l\u1EF1a ch\u1ECDn</span></div></div><!-- Step 2 - Return International 2 --><div class="flight-search-international-searchresult flight-search-international-searchresult-return col-sm-12" ng-init="item = $ctrl.searchResult.groupPricedItineraries[0]" ng-repeat="pricedItinerary in $ctrl.searchResult.groupPricedItineraries[0].pricedItineraries" ng-if="$ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.searchType == \'roundtrip\'" ng-class="{\'active-group-item\':pricedItinerary.over}" ng-mouseenter="pricedItinerary.over=true" ng-mouseleave="pricedItinerary.over=false"><div class="top-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-4 col-xs-12"><div class="group-info"><div class="airline-item"><div class="img-airline"><img class="airline-image-small" ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.airline+ \'.gif\'}}"></div><div class="name-airline-item">{{pricedItinerary.originDestinationOptions[1].flightSegments[0].operatingAirline.name}} {{pricedItinerary.originDestinationOptions[1].flightSegments[0].operatingAirline.flightNumber}}</div></div><div class="time-type"><span>{{pricedItinerary.originDestinationOptions[1].journeyDuration | duration:\'short\'}}</span><!-- - {{item.pricedItineraries[0].airItineraryPricingInfo.fareSourceCode}}--> <span>- {{pricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item detination-item-from"><div class="time-flight"><span class="time-flight">{{pricedItinerary.originDestinationOptions[1].originDateTime | momentdate:\'hour\'}}</span> <span class="flight-date-diff-text">{{pricedItinerary.originDestinationOptions[1] | flightdatediff}}</span></div><div class="airline-name"><span class="full-name-airline">{{pricedItinerary.originDestinationOptions[1].originCity}}</span> ({{pricedItinerary.originDestinationOptions[1].originLocationCode}})</div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item"><span class="time-flight">{{pricedItinerary.originDestinationOptions[1].destinationDateTime | momentdate:\'hour\'}}</span><div class="airline-name"><span class="full-name-airline">{{pricedItinerary.originDestinationOptions[1].destinationCity}}</span> ({{pricedItinerary.originDestinationOptions[1].destinationLocationCode}})</div></div></div><div class="col-xs-6 price-flight-responsive"><div class="price-flight margin-t-5"><span class="type-price"><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">+ {{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | diffprice:$ctrl.orgDepartPricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</span></div></div><div class="col-sm-2 dipl"><div class="airline-type"><span ng-if="pricedItinerary.originDestinationOptions[1].flightSegments.length > 1">{{pricedItinerary.originDestinationOptions[1].flightSegments.length - 1}} \u0111i\u1EC3m d\u1EEBng</span> <span ng-if="pricedItinerary.originDestinationOptions[1].flightSegments.length <= 1">Bay th\u1EB3ng</span></div><div class="segment-item"><span class="segment-text" ng-if="!$first" ng-repeat="segment in pricedItinerary.originDestinationOptions[1].flightSegments">{{segment.departureAirportLocationCode}}</span></div></div></div></div><div class="bottom-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-2"></div><div class="col-sm-4"><div class="summary-cell see-more-flight margin-t-5"><a class="text-color3 hand" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="pricedItinerary" argument3="2" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a> <span class="text-color3">|</span> <a class="text-color3 hand popover-fare-rules" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/components/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="pricedItinerary">{{\'flight.search.header.condition\' |translate}}</a></div></div><div class="col-md-4"><div class="price-flight margin-t-5"><span><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">+&nbsp;{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | diffprice:$ctrl.orgDepartPricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> &nbsp;VN\u0110</span></div></div><div class="col-sm-2"><div class="btn-red btn btn-red-response" ng-click="$ctrl.bookingClicked(item, pricedItinerary)">Ch\u1ECDn v\xE9</div></div></div></div></div></div></ng-switch></div><div class="row text-center"><button ng-click="$ctrl.nextPage()" ng-if="$ctrl.searchResult.page.nextPageNumber !== -1" class="btn gtd-btn-default">Xem th\xEAm</button></div></div></div><script type="text/ng-template" id="0"><div>{{dynamicPopover.content}}</div>\n    <div class="form-group">sdfsdf\n        <label>Popup Title:</label>\n        <input type="text" ng-model="dynamicPopover.title" class="form-control">\n    </div></script>');
        $templateCache.put('app/components/flight/fsoft-flight-search-adv.html', '<div class="row" ng-if="$ctrl.searchResult.groupPricedItineraries.length > 0"><div class="col-md-12 flight-search-filter"><div class="search-filter"><div class="search-header"><span class="header-text" translate="flight.search.advsearch.filter"></span>&nbsp; <span class="fa fa-minus-square-o" ng-show="$ctrl.showAdv && $ctrl.isMobile" ng-click="$ctrl.showAdv = false;"></span> <span class="fa fa-plus-square-o" ng-show="(!$ctrl.showAdv) && $ctrl.isMobile" ng-click="$ctrl.showAdv = true;">--></span> <a ng-click="$ctrl.resetFilter();"><span class="pull-right" translate="flight.search.advsearch.cancel"></span> <span class="pull-right fa fa-refresh refresh-icon"></span></a></div><div ng-show="$ctrl.showAdv"><ng-switch on="$ctrl.searchOptions.dtype != \'domestic\'"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.transit"></span></div><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.transitCarouselArrays">{{item.text}} <input type="checkbox" name="tranitOpts" value="{{item.id}}" ng-model="$ctrl.transitCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></ng-switch><ng-switch on="!($ctrl.searchOptions.dtype == \'international\' && $ctrl.searchOptions.searchType != \'oneway\' && $ctrl.searchOptions.selectStep == 2)"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.departuretime"></span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.fromTimeCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6:00</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>6:00</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.arrivaltime"></span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-repeat="item in $ctrl.toTimeCarouselArrays" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.toTimeCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6:00</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>18:00</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div></ng-switch><!-- RETURN TIME --><ng-switch on="$ctrl.searchOptions.dtype == \'international\' && $ctrl.searchOptions.searchType != \'oneway\' && $ctrl.searchOptions.selectStep == 2"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">Gi\u1EDD kh\u1EDFi h\xE0nh chi\u1EC1u v\u1EC1</span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.fromTimeReturnCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6:00</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>18:00</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">Gi\u1EDD \u0111\u1EBFn chi\u1EC1u v\u1EC1</span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.toTimeReturnCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-first-last time-up" ng-if="$first"><span data-translate="flight.search.header.before">Tr\u01B0\u1EDBc</span></div><div class="time-first-last time-down" ng-if="$first"><span>6 AM</span></div><div class="time-first-last time-up" ng-if="$last"><span data-translate="flight.search.header.after">Sau</span></div><div class="time-first-last time-down" ng-if="$last"><span>6 PM</span></div><div class="time-up" ng-if="!($first || $last)"><span>{{item.from}}</span></div><div class="time-middle" ng-if="!($first || $last)"><span>-</span></div><div class="time-down" ng-if="!($first || $last)"><span>{{item.to}}</span></div></a></div></div></div></div></ng-switch><!-- Airlines --><ng-switch on="!($ctrl.searchOptions.searchType == \'roundtrip\' && $ctrl.searchOptions.selectStep == 2)" ng-if="$ctrl.filterAirline($ctrl.airlineCarouselArrays) != null && $ctrl.filterAirline($ctrl.airlineCarouselArrays).length>0"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.airlines"></span></div><div class="mt-checkbox-list"><div class="checkbox-wrapper" ng-repeat="item in $ctrl.filterAirline($ctrl.airlineCarouselArrays) track by $index" ng-if="($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\' && item.id == $ctrl.searchResult.groupPricedItineraries[0].airline) || !($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\')" ng-show="$ctrl.loadMore || $index <= 4"><label class="mt-checkbox mt-checkbox-outline"><input class="airline-{{item.id}}" type="checkbox" name="airlineOpts" value="{{item.id}} {{item.checked}}" ng-model="$ctrl.airlineCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"><div style="display: inline-block"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.id+ \'.gif\'}}" class="logo-airline-small"> {{item.text}}</div><span></span></label></div></div><div class="pull-right text-underlined" style="margin-top: -10px"><span ng-show="$ctrl.loadMore == false && $ctrl.filterAirline($ctrl.airlineCarouselArrays).length > 5" ng-click="$ctrl.loadMore = !$ctrl.loadMore">Xem t\u1EA5t c\u1EA3</span> <span ng-show="$ctrl.loadMore && $ctrl.filterAirline($ctrl.airlineCarouselArrays).length > 5" ng-click="$ctrl.loadMore = !$ctrl.loadMore">Thu g\u1ECDn</span></div></div></ng-switch><div class="search-filter-divider"></div><div class="search-detail"><div><span class="search-label-text" translate="flight.search.advsearch.class"></span></div><div class="search-detail"><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.filterClass($ctrl.classCarouselArrays)">{{item.text | translate}} <input type="checkbox" name="classOpts" value="{{item.id}}" ng-model="$ctrl.classCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></div><ng-switch on="$ctrl.searchOptions.dtype == \'domestic\'"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">{{\'flight.search.header.conditions\' |translate}}</span></div><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.policyArrays">{{item.text}} <input type="checkbox" name="policyOpts" value="{{item.id}}" ng-model="$ctrl.policyArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></ng-switch></div></div></div></div>');
        $templateCache.put('app/components/flight/fsoft-flight-search-result.html', '<div class="text-danger bold h5" style="padding-bottom: 20px" ng-if="$ctrl.searchResult.groupPricedItineraries.length <= 0 && $ctrl.searchResult.page.totalElements > 0"><span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span></div><div class="row" ng-if="$ctrl.searchResult.groupPricedItineraries.length > 0"><div class="col-md-12"><div class="tile-container"><!-- HEADER --><div class="heading-detail"><ng-switch on="$ctrl.searchOptions.selectStep == 1"><div class="row"><div class="pull-left no-padding background-header" style="width: 100%; padding: 20px"><div class="header-logo-section" ng-switch-when="true" ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'"><div class="title-header-icon-block"><div><img src="../../../content/images/plane_depart_red.png"></div><div><span data-translate="flight.search.result.a2b" class="header-a2b-text uppercase"></span></div></div></div><div class="title-header-text-block" ng-switch-when="true" ng-class="{true:\'header-content-section\', false:\'col-sm-12\'}[$ctrl.searchOptions.searchType == \'roundtrip\']"><div class="title-header"><span class="title-header-main"><span class="full-name-airline">({{$ctrl.searchOptions.fromAirPort}})</span> - <span class="full-name-airline">({{$ctrl.searchOptions.toAirPort}})</span></span></div><div class="title-header-last" ng-if="$ctrl.searchResult.groupPricedItineraries.length>0"><span class="title-heahand show-sub-flightder-sub text-capitalize">{{$ctrl.searchResult.groupPricedItineraries[0].departureDateTime | momentdate:\'date\'}} , </span><span class="title-header-sub text-capitalize">{{$ctrl.searchOptions.adultNo}} {{\'flight.search.header.adult\' |translate}} </span><span class="title-header-sub text-capitalize" ng-show="$ctrl.searchOptions.childrenNo != 0">, {{$ctrl.searchOptions.childrenNo}} {{\'flight.search.header.children\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.searchOptions.newBornNo != 0">, {{$ctrl.searchOptions.newBornNo}} {{\'flight.search.header.newborn\' |translate}}</span></div></div></div></div></ng-switch></div><ng-switch on="$ctrl.searchOptions.selectStep == 2"><div ng-switch-when="true" class="depart-block block-flight-first" ng-if="$ctrl.searchOptions.dtype == \'domestic\'"><div class="row"><div class="col-sm-12"><div class="header-logo-section"><div class="title-header-icon-block1"><div class="icon-flight"><img src="../../../content/images/plane_depart_grey.png"></div><div><span data-translate="flight.search.result.a2b" class="header-a2b-text1 uppercase"></span></div></div></div><div class="header-content-section"><div class="col-sm-7 col-xs-7 title-header-text-block"><div class="title-header1"><span class="title-header-main"><span class="full-name-airline">{{$ctrl.departGroupItem.originCity}}</span> &nbsp;({{$ctrl.departGroupItem.originLocationCode}}) - <span class="full-name-airline">{{$ctrl.departGroupItem.destinationCity}}</span> &nbsp;({{$ctrl.departGroupItem.destinationLocationCode}}) </span>&nbsp;</div><div class="title-header1"><span class="title-header-sub text-capitalize">{{$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'date\'}} <span class="quantity-numb">, {{$ctrl.departPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities.quantity}} {{\'flight.search.header.adult\' |translate}}</span>&nbsp; <span class="title-header-sub text-capitalize" ng-show="$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.childFare != null">, {{$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.childFare.passengerTypeQuantities.quantity}} {{\'flight.search.header.children\' |translate}}&nbsp;</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.infantFare != null">, {{$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries[0].airItineraryPricingInfo.infantFare.passengerTypeQuantities.quantity}} {{\'flight.search.header.newborn\' |translate}}&nbsp;</span></span></div></div><!-- <div class="col-sm-1 title-headerflight-detail1-block" style="padding: 0px;">\n                                    <img\n                                        ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + $ctrl.departGroupItem.airline + \'.gif\'}}"\n                                        class="logo-airline"/>\n                                </div> --><div class="col-sm-3 col-xs-5 title-headerflight-detail1-block"><div><span>{{$ctrl.departGroupItem.airlineName}}&nbsp;{{$ctrl.departGroupItem.fightNo}}</span></div><div><span>{{$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}}</span> <span class="fa fa-long-arrow-right"></span> <span>{{$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments[$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments.length -1].arrivalDateTime | momentdate:\'hour\'}}</span></div></div><div class="col-sm-2 col-xs-5 title-headerflight-detail2-block"><div class="margin-bottom-5"><span ng-if="$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments.length <= 1">{{\'flight.search.header.non-stop\' |translate}}</span> <span ng-if="$ctrl.departPricedItinerary.originDestinationOptions[0].flightSegments.length > 1">{{\'flight.search.header.transit\' |translate}}</span></div></div></div></div></div></div><div class="pull-right" ng-switch-when="true" ng-click="$ctrl.changeFlight()" ng-if="$ctrl.searchOptions.dtype != \'international\'"><a class="label label-outline label-change">{{\'flight.search.header.change\' |translate}} <span class="text-color4 fa fa-pencil-square-o"></span></a></div><div ng-switch-when="true" class="depart-block depart-block-international" ng-if="$ctrl.searchOptions.dtype == \'international\'"><div class="row"><div class="col-sm-12 group-block"><div class="header-logo-section"><div class="title-header-icon-block1"><div class="img-block"><img src="../../../content/images/plane_depart_grey.png"></div><div class="name-block"><span data-translate="flight.search.result.a2b" class="header-a2b-text1 uppercase"></span></div></div></div><div class="header-content-section"><div class="col-sm-2 title-header-text-block block-item-flight-info"><div class="title-header1"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + $ctrl.departGroupItem.airline + \'.gif\'}}" class="logo-airline"></div><div class="title-header1"><span>{{$ctrl.departGroupItem.airline}}&nbsp;{{$ctrl.departGroupItem.fightNo}}</span></div></div><div class="col-sm-3 title-header-text-block"><div class="title-header1"><span class="title-header-main bold">{{$ctrl.departGroupItem.originLocationCode}}&nbsp;-&nbsp;{{$ctrl.departGroupItem.destinationLocationCode}} </span>&nbsp;</div><div class="title-header1"><span class="title-header-sub title-header-time-flight gtd-h4">{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].originDateTime | momentdate:\'hour\'}}&nbsp;-&nbsp; {{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].destinationDateTime | momentdate:\'hour\'}} <span class="flight-date-diff-text">{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0] | flightdatediff}}</span></span></div></div><div class="col-sm-2 title-header-text-block"><div class="title-header1"><div><span>{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].journeyDuration | duration:\'short\'}}</span></div></div><div class="title-header1"><div>{{$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</div></div></div><div class="col-sm-2 title-headerflight-detail1-block" style="text-align: right"><div class="title-header1"><div><span ng-if="$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].flightSegments.length <= 1">{{\'flight.search.header.non-stop\' |translate}}</span> <span ng-if="$ctrl.orgDepartPricedItinerary.originDestinationOptions[0].flightSegments.length > 1">{{\'flight.search.header.transit\' |translate}}</span></div></div></div><div class="col-sm-3 title-headerflight-detail2-block" style="text-align: right"><div><span ng-if="!($ctrl.departSearchOptions.dtype == \'international\' && $ctrl.departSearchOptions.searchType == \'roundtrip\')">Gi\xE1 m\u1ED9t chi\u1EC1u</span> <span ng-if="($ctrl.departSearchOptions.dtype == \'international\' && $ctrl.departSearchOptions.searchType == \'roundtrip\')">Gi\xE1 kh\u1EE9 h\u1ED3i</span></div><div class="uppercase"><span class="gtd-h3 text-color4 bold">{{$ctrl.orgDepartPricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span>&nbsp;VN\u0110</div></div></div></div></div></div><div class="pull-right" ng-switch-when="true" ng-click="$ctrl.changeFlight()" ng-if="$ctrl.searchOptions.dtype == \'international\'"><a class="label label-outline label-change">Thay \u0111\u1ED5i chuy\u1EBFn \u0111i <span class="text-color4 fa fa-pencil-square-o"></span></a></div><div ng-switch-when="true" class="return-block"><div class="row"><div class="col-sm-12 no-padding"><div class="header-logo-section"><div class="title-header-icon-block margin-bottom-5 block-return-airline"><div><img src="../../../content/images/plane_return_red.png"></div><div><span data-translate="flight.search.result.b2a" class="header-a2b-text uppercase"></span></div></div></div><div ng-class="{true:\'header-content-section\', false:\'col-sm-12\'}[$ctrl.searchOptions.searchType == \'roundtrip\']" class="title-header-text-block"><div class="col-sm-12"><div class="title-header"><span class="title-header-main" ng-if="$ctrl.returnSearchOptions.dtype == \'domestic\'">{{$ctrl.returnSearchOptions.fromAirPort | airport : \'city-code\'}} - {{$ctrl.returnSearchOptions.toAirPort | airport : \'city-code\'}}&nbsp;</span> <span class="title-header-main" ng-if="$ctrl.returnSearchOptions.dtype == \'international\'">{{$ctrl.returnSearchOptions.toAirPort | airport : \'city-code\'}} - {{$ctrl.returnSearchOptions.fromAirPort | airport : \'city-code\'}}&nbsp;</span> <span class="title-header-sub" ng-if="$ctrl.returnSearchOptions.dtype == \'international\'">{{$ctrl.searchResult.groupPricedItineraries[0].pricedItineraries.length | number}} {{\'flight.search.header.flight\' |translate}}</span></div><div class="title-header-last"><span class="title-header-sub text-capitalize" ng-if="$ctrl.returnSearchOptions.dtype == \'domestic\'">{{$ctrl.returnSearchOptions.departureDate | momentdate:\'date\':\'DD-MM-YYYY\'}} , {{$ctrl.returnSearchOptions.adultNo}} {{\'flight.search.header.adult\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-if="$ctrl.returnSearchOptions.dtype != \'domestic\'">{{$ctrl.returnSearchOptions.returnDate | momentdate:\'date\':\'DD-MM-YYYY\'}} , {{$ctrl.returnSearchOptions.adultNo}} {{\'flight.search.header.adult\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.returnSearchOptions.childrenNo > 0">, {{$ctrl.returnSearchOptions.childrenNo}} {{\'flight.search.header.children\' |translate}}</span> <span class="title-header-sub text-capitalize" ng-show="$ctrl.returnSearchOptions.newBornNo > 0">, {{$ctrl.returnSearchOptions.newBornNo}} {{\'flight.search.header.newborn\' |translate}}</span></div></div></div></div></div></div></ng-switch><!-- END HEADER --><slick settings="$ctrl.slickConfig" class="airline-navigation" ng-if="$ctrl.showCarousel==true && !($ctrl.searchOptions.searchType == \'roundtrip\' && $ctrl.searchOptions.selectStep == 2)"><div class="item hand" ng-repeat="item in $ctrl.filterAirline($ctrl.airlineCarouselArrays)" ng-class="{\'active-airline\': $ctrl.searchOptions.advanceFilters != null && $ctrl.searchOptions.advanceFilters.airlineOptions.length > 0 && $ctrl.searchOptions.advanceFilters.airlineOptions.indexOf(item.id) > -1}" ng-if="($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\' && item.id == $ctrl.searchResult.groupPricedItineraries[0].airline) || !($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\')"><div class="img-airlines"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.id + \'.gif\'}}" class="logo-airline" style="width: unset;height: unset !important;max-height: 25px;max-width: 95px;height: 25px !important"></div><div class="info-airlines"><div class="airline-code">{{item.text}}</div><div class="airline-code-hid" style="display: none">{{item.id}}</div><div>{{\'flight.search.result.from\' | translate}} &nbsp;<span>{{item.price | number}}</span> <span>{{item.unit}}</span></div></div></div></slick><div class="form-group sort-group pull-right margin-right-m15 flight-sort-div nav-sort-flight" ng-if="$ctrl.searchResult.groupPricedItineraries != null && $ctrl.searchResult.groupPricedItineraries.length > 0"><div class="col-sm-12"><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'departureDate\'}" ng-click="$ctrl.setSort(\'departureDate\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.departureDateDir==\'desc\'"><span data-translate="flight.search.result.start"></span>&nbsp;<span class="margin-left-fa fa fa-angle-down"></span> </a><a class="clickable" ng-show="$ctrl.searchOptions.departureDateDir==\'asc\'"><span data-translate="flight.search.result.start"></span>&nbsp;<span class="margin-left-fa fa fa-angle-up"></span></a></div><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'arrivalDate\'}" ng-click="$ctrl.setSort(\'arrivalDate\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.arrivalDateDir==\'desc\'"><span data-translate="flight.search.result.arrivaltime">&nbsp;</span><span class="margin-left-fa fa fa-angle-down"></span></a> <a class="clickable" ng-show="$ctrl.searchOptions.arrivalDateDir==\'asc\'"><span data-translate="flight.search.result.arrivaltime">&nbsp;</span><span class="margin-left-fa fa fa-angle-up"></span></a></div><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'duration\'}" ng-click="$ctrl.setSort(\'duration\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.durationDir==\'desc\'"><span data-translate="flight.search.result.time"></span>&nbsp;<span class="margin-left-fa fa fa-angle-down"></span></a> <a class="clickable" ng-show="$ctrl.searchOptions.durationDir==\'asc\'"><span data-translate="flight.search.result.time"></span>&nbsp;<span class="margin-left-fa fa fa-angle-up"></span></a></div><div class="col-sm-3 btn btn-default btn-item-sort" ng-class="{\'time-active\':$ctrl.searchOptions.sortField==\'price\'}" ng-click="$ctrl.setSort(\'price\');$ctrl.sort();"><a class="clickable" ng-show="$ctrl.searchOptions.priceDir==\'desc\'"><span data-translate="flight.search.result.price"></span>&nbsp;<span class="margin-left-fa fa fa-angle-down"></span></a> <a class="clickable" ng-show="$ctrl.searchOptions.priceDir==\'asc\'"><span data-translate="flight.search.result.price"></span>&nbsp;<span class="margin-left-fa fa fa-angle-up"></span></a></div></div></div><ng-switch on="$ctrl.searchOptions.dtype != \'international\'"><div class="search-result-wrapper" ng-switch-when="true"><div class="row search-result-item flight-search-international-searchresult flight-search-international-searchresult-depart col-sm-12" ng-class="{\'little-item\': item.totalPricedItinerary == 1}" ng-repeat="item in $ctrl.filterFlight($ctrl.searchResult.groupPricedItineraries)" ng-class="{\'active-group-item\':item.over}" ng-mouseenter="item.over=true" ng-mouseleave="item.over=false"><div class="row search-item-header no-margin-left no-margin-right"><div class="col-sm-7 margin-left-m15"><div class="row"><div class="col-sm-3 no-padding-right search-item-header-airline-box"><div class="img-airline-item"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.airline+ \'.gif\'}}" class="logo-airline-small"></div><div class="name-airline-item"><span>{{item.airlineName}} <span class="code-airline">{{item.fightNo}}</span></span></div></div><div class="col-sm-4 col-xs-3 no-padding search-item-header-group search-item-header-from-box"><div class="margin-bottom-8 name-code-location"><span><span class="full-origincity">{{item.originCity}}</span> ({{item.originLocationCode}})</span></div><div><span class="gtd-h2">{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}}</span></div></div><div class="col-xs-1 no-padding search-item-header-box icon-form-to-search"><div><span class="fa fa-long-arrow-right"></span></div></div><div class="col-sm-4 col-xs-3 no-padding search-item-header-group search-item-header-to-box"><div class="margin-bottom-8 name-code-location"><span><span class="full-origincity">{{item.destinationCity}}</span> ({{item.destinationLocationCode}})</span></div><div><span class="gtd-h2">{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate:\'hour\'}}</span></div></div><div class="col-xs-5 hidden-sm-down group-item-price"><div class="price-responsive"><div class="note-price">Gi\xE1 t\u1EEB</div><div class="price-default">{{item.pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}} <span>VND</span></div></div></div></div><div ng-if="item.airline == \'0V\'" style="font-size: 11px; padding-left: 12px; margin-bottom: -5px">H\xE3ng khai th\xE1c Vietnam Air Service</div></div><div class="col-sm-5"><div class="row"><div class="col-sm-7 col-xs-12 search-item-header-group search-item-header-time-box"><div class="flight-time hidden-sm-up"><span>{{item.pricedItineraries[0].originDestinationOptions[0].journeyDuration | duration}}</span></div><div class="flight-detail"><a class="flight-detail-text" style="text-decoration: none" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view1.html" argument="item" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a></div></div><div class="col-xs-5 search-item-header-type-box"><div><a class="clickable"><span class="label label-cancelled">{{\'flight.search.header.non-stop\' |translate}}</span></a></div></div></div></div><!--</div>--></div><div class="list-search-item" ng-class="{\'multiple\': item.totalPricedItinerary > 1}"><div class="row search-item-detail no-margin-left no-margin-right" ng-repeat="pricedItinerary in item.pricedItineraries"><div class="col-sm-7 margin-left-m15 margin-right-m15 no-padding-left no-padding-right"><div class="row"><div class="col-xs-4 search-item-detail-class-type-box"><div class="type-flight-name"><span>{{pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName == null ? pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassText : pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div><div class="col-xs-4 search-item-detail-feature-box"><div><span class="fa fa-suitcase" ng-if="pricedItinerary.baggageItems != null && pricedItinerary.baggageItems[0] != null"></span> <span ng-if="pricedItinerary.baggageItems != null && pricedItinerary.baggageItems[0] != null">{{pricedItinerary.baggageItems[0].name}}</span><!--<span class="fa fa-cutlery"></span>--><!--<span>&nbsp; Su\u1EA5t \u0103n</span>--></div></div><div class="col-xs-4 search-item-detail-condition-box popover-fare-rules"><div class="clickable btn-conditions"><a class="btn btn-outline-grey fare-rules-button" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/components/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="pricedItinerary">{{\'flight.search.header.condition\' |translate}}</a></div></div></div></div><div class="col-sm-5"><div class="item-sub-flight-select"><div class="row"><div class="no-padding col-xs-7 search-item-detail-price-box"><div class="sub-flight-item"><div><span class="price-text">{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}} </span><span>VND</span></div><div class="note-price-flight"><span>({{\'flight.search.header.include\' |translate}} +{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.serviceTax.amount | number}}vn\u0111 {{\'flight.search.header.tax\' |translate}})</span></div></div></div><div class="col-xs-5 search-item-detail-booking-box"><div class="btn-select-flight"><span class="label label-color4 label-booking hand" ng-click="$ctrl.bookingClicked(item, pricedItinerary)">{{\'flight.search.header.choose\' |translate}}</span></div></div></div></div></div></div></div><div class="sm-rs-flight" ng-click="$ctrl.showSFlight($event)" ng-show="item.totalPricedItinerary == 1"></div><div class="search-item-expand-collapse" ng-show="item.totalPricedItinerary > 1"><div class="start-col"></div><div class="col"></div><span class="hand show-sub-flight" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)"><span class="name-s">{{\'flight.search.header.moreVI\' |translate}} {{\'flight.search.header.moreEN\' |translate}} {{\'flight.search.header.option\' |translate}}</span> </span><span class="hand" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary == item.pricedItineraries.length" ng-click="$ctrl.loadLess($event, item)">Thu g\u1ECDn l\u1EF1a ch\u1ECDn</span></div></div><div ng-show="$ctrl.busy">Loading data...</div></div></ng-switch><ng-switch on="$ctrl.searchOptions.dtype == \'international\'"><div class="search-result-wrapper search-result-wrapper-roundtrip" ng-switch-when="true"><!-- Step 1 - Return International 1 --><div class="flight-search-international-searchresult search-result-item flight-search-international-searchresult-depart col-sm-12" ng-repeat="item in $ctrl.filterFlight($ctrl.searchResult.groupPricedItineraries)" ng-if="$ctrl.searchOptions.selectStep == 1" ng-class="{\'little-item\': item.totalPricedItinerary == 1}" ng-class="{\'active-group-item\':item.over}" ng-mouseenter="item.over=true" ng-mouseleave="item.over=false"><div class="top-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-4 col-xs-12"><div class="group-info"><div class="airline-item"><div class="img-airline"><img class="airline-image-small" ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.airline+ \'.gif\'}}"></div><div class="name-airline-item">{{item.airlineName}} {{item.fightNo}}</div></div><div class="time-type"><span>{{item.pricedItineraries[0].originDestinationOptions[0].journeyDuration | duration:\'short\'}}</span><!-- - {{item.pricedItineraries[0].airItineraryPricingInfo.fareSourceCode}}--> <span>- {{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item detination-item-from"><div class="time-flight"><span class="time-flight">{{item.pricedItineraries[0].originDestinationOptions[0].originDateTime | momentdate:\'hour\'}}</span> <span class="flight-date-diff-text">{{item.pricedItineraries[0].originDestinationOptions[0] | flightdatediff}}</span></div><div class="airline-name"><span class="full-name-airline">{{item.pricedItineraries[0].originDestinationOptions[0].originCity}}</span> ({{item.pricedItineraries[0].originDestinationOptions[0].originLocationCode}})</div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item"><!-- <span ng-if="item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length > 1" class="fa fa-long-arrow-right"></span> --> <span class="time-flight">{{item.pricedItineraries[0].originDestinationOptions[0].destinationDateTime | momentdate:\'hour\'}}</span><div class="airline-name"><span class="full-name-airline">{{item.pricedItineraries[0].originDestinationOptions[0].destinationCity}}</span> ({{item.pricedItineraries[0].originDestinationOptions[0].destinationLocationCode}})</div></div></div><div class="col-xs-6 price-flight-responsive"><div class="price-flight margin-t-5"><span class="type-price"><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">{{item.pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</span></div></div><div class="col-sm-2 dipl"><div class="airline-type"><span ng-if="item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length > 1">{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length - 1}} \u0111i\u1EC3m d\u1EEBng</span> <span ng-if="item.pricedItineraries[0].originDestinationOptions[0].flightSegments.length <= 1">Bay th\u1EB3ng</span></div><div class="segment-item"><span class="segment-text" ng-if="!$first" ng-repeat="segment in item.pricedItineraries[0].originDestinationOptions[0].flightSegments">{{segment.departureAirportLocationCode}}</span></div></div></div><div class="flight-detail hidden-sm-down"><a class="flight-detail-text ng-binding ng-isolate-scope" style="text-decoration: none" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="item.pricedItineraries[0]" argument3="1" ibe-keys="ibeKeys" data-original-title="" title="">Chi ti\u1EBFt h\xE0nh tr\xECnh</a></div></div><div class="list-search-item" ng-class="{\'multiple\': item.totalPricedItinerary > 1}"><div class="bottom-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-2"><div class="summary-cell see-more-flight margin-t-5"><span class="hand text-color4 text-underlined" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)">Th\xEAm l\u1EF1a ch\u1ECDn </span><span class="hand text-color4 text-underlined" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary == item.pricedItineraries.length" ng-click="$ctrl.loadLess($event, item)">Thu g\u1ECDn </span><!--<a class="text-color4 hand" style="color:#D84A38"--><!--&gt;Th\xEAm l\u1EF1a ch\u1ECDn</a>--></div></div><div class="col-sm-4"><div class="summary-cell margin-t-5"><a class="text-color3 hand hidden-sm-tk" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="item.pricedItineraries[0]" argument3="1" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a> <span class="text-color3 hidden-sm-tk">|</span> <a class="text-color3 hand popover-fare-rules" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/components/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="item.pricedItineraries[0]" ibe-keys="ibeKeys">{{\'flight.search.header.condition\' |translate}}</a></div></div><div class="col-sm-4"><div class="time-type time-type-responsive"><span>{{item.pricedItineraries[0].originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div><div class="price-flight margin-t-5"><span class="type-price"><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">{{item.pricedItineraries[0].airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</span></div></div><div class="col-sm-2 btn-select-flight"><div class="btn-red btn" ng-click="$ctrl.bookingClicked(item, item.pricedItineraries[0])">Ch\u1ECDn v\xE9</div></div></div></div><div class="sub-flight"><div class="row no-margin-left no-margin-right additonal-option-row" ng-repeat="pricedItinerary in item.pricedItineraries track by $index" ng-if="$index != 0"><div class="col-sm-2 col-xs-6"><div class="margin-t-5"><span class="bold">{{pricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div><div class="col-sm-4"><div class="summary-cell margin-t-5"><a class="text-color3 hand hidden-sm-tk" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="pricedItinerary" argument3="1" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a> <span class="text-color3 hidden-sm-tk">|</span> <a class="text-color3 hand popover-fare-rules" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/components/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="pricedItinerary" ibe-keys="ibeKeys">{{\'flight.search.header.condition\' |translate}}</a></div></div><div class="col-sm-4"><div class="margin-t-5"><span class="price-type" ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span class="price-type" ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> <span class="price-text">{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</div></div><div class="col-sm-2"><div class="btn-color5 btn" ng-click="$ctrl.bookingClicked(item, pricedItinerary)">Ch\u1ECDn v\xE9</div></div></div></div></div><div class="sm-rs-flight" ng-click="$ctrl.showSFlight($event)" ng-show="item.totalPricedItinerary == 1"></div><div class="summary-cell search-item-expand-collapse summary-cell-responsive margin-t-5"><span class="hand show-sub-flight" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)"><span class="hand text-color4 text-underlined name-s" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary > item.pricedItineraries.length" ng-click="$ctrl.loadMore($event, item)">Th\xEAm l\u1EF1a ch\u1ECDn </span></span><span class="hand text-color4 text-underlined" ng-show="item.totalPricedItinerary > 1 && item.totalPricedItinerary == item.pricedItineraries.length" ng-click="$ctrl.loadLess($event, item)">Thu g\u1ECDn l\u1EF1a ch\u1ECDn</span></div></div><!-- Step 2 - Return International 2 --><div class="flight-search-international-searchresult flight-search-international-searchresult-return col-sm-12" ng-init="item = $ctrl.searchResult.groupPricedItineraries[0]" ng-repeat="pricedItinerary in $ctrl.searchResult.groupPricedItineraries[0].pricedItineraries" ng-if="$ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.searchType == \'roundtrip\'" ng-class="{\'active-group-item\':pricedItinerary.over}" ng-mouseenter="pricedItinerary.over=true" ng-mouseleave="pricedItinerary.over=false"><div class="top-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-4 col-xs-12"><div class="group-info"><div class="airline-item"><div class="img-airline"><img class="airline-image-small" ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.airline+ \'.gif\'}}"></div><div class="name-airline-item">{{pricedItinerary.originDestinationOptions[1].flightSegments[0].operatingAirline.name}} {{pricedItinerary.originDestinationOptions[1].flightSegments[0].operatingAirline.flightNumber}}</div></div><div class="time-type"><span>{{pricedItinerary.originDestinationOptions[1].journeyDuration | duration:\'short\'}}</span> <span>- {{pricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item detination-item-from"><div class="time-flight"><span class="time-flight">{{pricedItinerary.originDestinationOptions[1].originDateTime | momentdate:\'hour\'}}</span> <span class="flight-date-diff-text">{{pricedItinerary.originDestinationOptions[1] | flightdatediff}}</span></div><div class="airline-name"><span class="full-name-airline">{{pricedItinerary.originDestinationOptions[1].originCity}}</span> ({{pricedItinerary.originDestinationOptions[1].originLocationCode}})</div></div></div><div class="col-sm-3 col-xs-3"><div class="detination-item"><span class="time-flight">{{pricedItinerary.originDestinationOptions[1].destinationDateTime | momentdate:\'hour\'}}</span><div class="airline-name"><span class="full-name-airline">{{pricedItinerary.originDestinationOptions[1].destinationCity}}</span> ({{pricedItinerary.originDestinationOptions[1].destinationLocationCode}})</div></div></div><div class="col-xs-6 price-flight-responsive"><div class="price-flight margin-t-5"><span class="type-price"><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">+ {{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | diffprice:$ctrl.orgDepartPricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> VN\u0110</span></div></div><div class="col-sm-2 dipl"><div class="airline-type"><span ng-if="pricedItinerary.originDestinationOptions[1].flightSegments.length > 1">{{pricedItinerary.originDestinationOptions[1].flightSegments.length - 1}} \u0111i\u1EC3m d\u1EEBng</span> <span ng-if="pricedItinerary.originDestinationOptions[1].flightSegments.length <= 1">Bay th\u1EB3ng</span></div><div class="segment-item"><span class="segment-text" ng-if="!$first" ng-repeat="segment in pricedItinerary.originDestinationOptions[1].flightSegments">{{segment.departureAirportLocationCode}}</span></div></div></div></div><div class="bottom-info-flight"><div class="row no-margin-left no-margin-right"><div class="col-sm-2"></div><div class="col-sm-4"><div class="summary-cell see-more-flight margin-t-5"><a class="text-color3 hand" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-popover gtd-template-path="app/components/flight/flight-detail-view-inter.html" argument="item" argument2="pricedItinerary" argument3="2" ibe-keys="ibeKeys">{{\'flight.search.header.detail\' |translate}}</a> <span class="text-color3">|</span> <a class="text-color3 hand popover-fare-rules" style="text-decoration: none;color:#18AA4F" tabindex="0" gtd-fare-rules-popover gtd-template-path="app/component    s/flight/flight-fare-rules.html" argument="$ctrl.searchOptions" argument2="item" argument3="pricedItinerary">{{\'flight.search.header.condition\' |translate}}</a></div></div><div class="col-md-4"><div class="price-flight margin-t-5"><span><span ng-if="$ctrl.searchOptions.searchType == \'roundtrip\'">Gi\xE1 kh\u1EE9 h\u1ED3i</span> <span ng-if="$ctrl.searchOptions.searchType == \'oneway\'">Gi\xE1 m\u1ED9t chi\u1EC1u</span> </span><span><span class="price-text">+&nbsp;{{pricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | diffprice:$ctrl.orgDepartPricedItinerary.airItineraryPricingInfo.itinTotalFare.totalFare.amount | number}}</span> &nbsp;VN\u0110</span></div></div><div class="col-sm-2"><div class="btn-red btn btn-red-response" ng-click="$ctrl.bookingClicked(item, pricedItinerary)">Ch\u1ECDn v\xE9</div></div></div></div></div></div></ng-switch></div><div class="row text-center"><button ng-click="$ctrl.nextPage()" ng-if="$ctrl.searchResult.page.nextPageNumber !== -1" class="btn gtd-btn-default">Xem th\xEAm</button></div></div></div><script type="text/ng-template" id="0"><div>{{dynamicPopover.content}}</div>\n    <div class="form-group">sdfsdf\n        <label>Popup Title:</label>\n        <input type="text" ng-model="dynamicPopover.title" class="form-control">\n    </div></script>');
        $templateCache.put('app/components/flight/tiki-flight-search-adv.html', '<div class="row"><div class="col-md-12 flight-search-filter"><div class="search-filter"><div class="search-header"><span class="header-text" translate="flight.search.advsearch.filter"></span>&nbsp; <span class="fa fa-minus-square-o" ng-show="$ctrl.showAdv && $ctrl.isMobile" ng-click="$ctrl.showAdv = false;"></span> <span class="fa fa-plus-square-o" ng-show="(!$ctrl.showAdv) && $ctrl.isMobile" ng-click="$ctrl.showAdv = true;"></span> <a ng-click="$ctrl.resetFilter();"><span class="pull-right" translate="flight.search.advsearch.cancel"></span> <span class="pull-right fa fa-refresh refresh-icon"></span></a></div><div ng-show="$ctrl.showAdv"><ng-switch on="$ctrl.searchOptions.dtype != \'domestic\'"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.transit"></span></div><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.transitCarouselArrays">{{item.text}} <input type="checkbox" name="tranitOpts" value="{{item.id}}" ng-model="$ctrl.transitCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></ng-switch><ng-switch on="!($ctrl.searchOptions.dtype == \'international\' && $ctrl.searchOptions.searchType != \'oneway\' && $ctrl.searchOptions.selectStep == 2)"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.departuretime"></span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.fromTimeCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div class="time-choosen" ng-if="$first"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.before"><span>Tr\u01B0\u1EDBc</span></div><span class="time-first-last time-down">6:00</span></div></div><div class="time-choosen" ng-if="$last"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-04.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.after"><span>Sau</span></div><span class="time-first-last time-down">18:00</span></div></div><div class="time-choosen" ng-if="!($first || $last)"><div class="time-img"><div ng-if="item.from==\'6:00\'"><img src="../../../content/images/icon-tik-RGBi-01.svg"></div><div ng-if="item.from==\'12:00\'"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div></div><div><div class="time-up"><span>{{item.from}}</span><!-- <span >-</span> --></div><!-- <div class="time-middle"><span>-</span></div> --><div class="time-down"><span>{{item.to}}</span></div></div></div></a></div></div></div></div><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.arrivaltime"></span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-repeat="item in $ctrl.toTimeCarouselArrays" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.toTimeCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div ng-if="$first"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.before"><span>Tr\u01B0\u1EDBc</span></div><span class="time-first-last time-down">6:00</span></div></div><div ng-if="$last"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-04.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.after"><span>Sau</span></div><span class="time-first-last time-down">18:00</span></div></div><div ng-if="!($first || $last)"><div class="time-img"><div ng-if="item.from==\'6:00\'"><img src="../../../content/images/icon-tik-RGBi-01.svg"></div><div ng-if="item.from==\'12:00\'"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div></div><div><div class="time-up"><span>{{item.from}}</span><!-- <span ng-if="$ctrl.class_single_web==\'tiki\'">-</span> --></div><!-- <div class="time-middle"><span>-</span></div> --><div class="time-down"><span>{{item.to}}</span></div></div></div></a></div></div></div></div></ng-switch><!-- RETURN TIME --><ng-switch on="$ctrl.searchOptions.dtype == \'international\' && $ctrl.searchOptions.searchType != \'oneway\' && $ctrl.searchOptions.selectStep == 2"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">Gi\u1EDD kh\u1EDFi h\xE0nh chi\u1EC1u v\u1EC1</span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.fromTimeReturnCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div ng-if="$first"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.before"><span>Tr\u01B0\u1EDBc</span></div><span class="time-first-last time-down">6:00</span></div></div><div ng-if="$last"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-04.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.after"><span>Sau</span></div><span class="time-first-last time-down">6:00</span></div></div><div ng-if="!($first || $last)"><div class="time-img"><div ng-if="item.from==\'6:00\'"><img src="../../../content/images/icon-tik-RGBi-03.svg"></div><div ng-if="item.from==\'12:00\'"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div></div><div><div class="time-up"><span>{{item.from}}</span><!-- <span ng-if="$ctrl.class_single_web==\'tiki\'">-</span> --></div><!-- <div class="time-middle"><span>-</span></div> --><div class="time-down"><span>{{item.to}}</span></div></div></div></a></div></div></div></div><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">Gi\u1EDD \u0111\u1EBFn chi\u1EC1u v\u1EC1</span></div><div class="search-detail"><div class="search-item-detail search-item-detail-time-bs"><div class="search-item-detail-time" ng-class="{\'time-filter-active\': item.checked}" ng-repeat="item in $ctrl.toTimeReturnCarouselArrays" ng-click="item.checked=!item.checked;$ctrl.doFilter();"><a class="clickable-color1"><div ng-if="$first"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.before"><span>Tr\u01B0\u1EDBc</span></div><span class="time-first-last time-down">6:00</span></div></div><div ng-if="$last"><div class="time-img"><img src="../../../content/images/icon-tik-RGBi-04.svg"></div><div><div class="time-first-last time-up" data-translate="flight.search.header.after"><span>Sau</span></div><span class="time-first-last time-down">6:00</span></div></div><div ng-if="!($first || $last)"><div class="time-img"><div ng-if="item.from==\'6:00\'"><img src="../../../content/images/icon-tik-RGBi-03.svg"></div><div ng-if="item.from==\'12:00\'"><img src="../../../content/images/icon-tik-RGBi-02.svg"></div></div><div><div class="time-up"><span>{{item.from}}</span><!-- <span ng-if="$ctrl.class_single_web==\'tiki\'">-</span> --></div><!-- <div class="time-middle"><span>-</span></div> --><div class="time-down"><span>{{item.to}}</span></div></div></div></a></div></div></div></div></ng-switch><!-- Airlines --><ng-switch on="!($ctrl.searchOptions.searchType == \'roundtrip\' && $ctrl.searchOptions.selectStep == 2)" ng-if="$ctrl.airlineCarouselArrays != null && $ctrl.airlineCarouselArrays.length>0"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text" translate="flight.search.advsearch.airlines"></span></div><div class="mt-checkbox-list"><div class="checkbox-wrapper" ng-repeat="item in $ctrl.airlineCarouselArrays track by $index" ng-if="($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\' && item.id == $ctrl.searchResult.groupPricedItineraries[0].airline) || !($ctrl.searchOptions.selectStep == 2 && $ctrl.searchOptions.dtype == \'international\')" ng-show="$ctrl.loadMore || $index <= 4"><label class="mt-checkbox mt-checkbox-outline"><input class="airline-{{item.id}}" type="checkbox" name="airlineOpts" value="{{item.id}} {{item.checked}}" ng-model="$ctrl.airlineCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"><div style="display: inline-block"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + item.id+ \'.gif\'}}" class="logo-airline-small"> {{item.text}}</div><span></span></label></div></div><div class="pull-right text-underlined" style="margin-top: -10px"><span ng-show="$ctrl.loadMore == false && $ctrl.airlineCarouselArrays.length > 5" ng-click="$ctrl.loadMore = !$ctrl.loadMore">Xem t\u1EA5t c\u1EA3</span> <span ng-show="$ctrl.loadMore && $ctrl.airlineCarouselArrays.length > 5" ng-click="$ctrl.loadMore = !$ctrl.loadMore">Thu g\u1ECDn</span></div></div></ng-switch><div class="search-filter-divider"></div><div class="search-detail"><div><span class="search-label-text" translate="flight.search.advsearch.class"></span></div><div class="search-detail"><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.classCarouselArrays">{{item.text | translate}} <input type="checkbox" name="classOpts" value="{{item.id}}" ng-model="$ctrl.classCarouselArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></div><ng-switch on="$ctrl.searchOptions.dtype == \'domestic\'"><div class="search-filter-divider" ng-switch-when="true"></div><div class="search-detail" ng-switch-when="true"><div><span class="search-label-text">{{\'flight.search.header.conditions\' |translate}}</span></div><div class="mt-checkbox-list"><label ng-if="$ctrl.enable_template" class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.policyArrays">{{item.text}} <input type="checkbox" name="policyOpts" value="{{item.id}}" ng-model="$ctrl.policyArrays[$index].checked" ng-click="$ctrl.doFilter()"> <i ng-if="$ctrl.policyArrays[$index].checked" class="fa fa-check-circle"></i> <i ng-else class="fa fa-circle-o"></i></label><label ng-if="!$ctrl.enable_template" ng-else class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.policyArrays">{{item.text}} <input type="checkbox" name="policyOpts" value="{{item.id}}" ng-model="$ctrl.policyArrays[$index].checked" ng-click="$ctrl.doFilter()"> <span></span></label></div></div></ng-switch></div></div></div></div>');
        $templateCache.put('app/components/login/login.html', '<div class="modal-header login-modal-header"><div class="modal-body bg-login"><div class="row"><div class="col-md-5 login-title"><span class="" data-translate="login.title">Sign in</span></div><div class="col-md-7"></div><div class="col-md-8 col-md-offset-2"><div class="alert alert-danger" ng-show="vm.authenticationError" data-translate="login.messages.error.authentication"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class="col-md-6 content-left"><form name="editForm" class="form" role="form" ng-submit="vm.login($event)"><a href="https://cms.gotadi.com//loi-ich-thanh-vien" style="float:right; color: black; text-decoration: underline" target="_blank" class="text-underlined"><img src="../../../content/images/1x_star-member-icon.png" alt="" style="padding: 10px 4px">Quy\u1EC1n l\u1EE3i th\xE0nh vi\xEAn</a><div style="clear:both"></div><div class="form-group"><div class="input-icon"><i class="fa fa-user font-grey"></i> <input type="text" required class="form-control" id="username" placeholder="{{\'global.form.username.placeholder\' | translate}}" ng-model="vm.username"></div></div><div class="form-group"><div class="input-icon"><i class="fa fa-lock font-grey"></i> <input type="password" required class="form-control" id="password" placeholder="{{\'login.form.password.placeholder\' | translate}}" ng-model="vm.password"></div></div><div class="form-group"><label for="rememberMe"><input type="checkbox" id="rememberMe" ng-model="vm.rememberMe" checked="checked"> <span data-translate="login.form.rememberme">Remember me</span></label><a class="alert-link forget-pwd-link" href="" ng-click="vm.requestResetPassword()" data-translate="login.password.forgot">Did you forget your password?</a></div><button type="submit" class="btn btn-green-em" ng-disabled="editForm.$invalid"><span data-translate="login.form.button">Sign in</span> <span class="fa fa-arrow-circle-o-right"></span></button></form><p></p><div class="" translate-compile>B\u1EA1n v\u1EABn ch\u01B0a c\xF3 t\xE0i kho\u1EA3n th\xE0nh vi\xEAn? <a class="register-link" href="" ng-click="vm.register()">\u0110\u0102NG K\xDD</a></div></div><div class="col-md-6"><!--<br/>--><div class="gtd-h3 social-login-header">Ho\u1EB7c \u0111\u0103ng nh\u1EADp v\u1EDBi</div><jh-social ng-provider="facebook" parent="vm.parent"></jh-social><jh-social ng-provider="google" parent="vm.parent"></jh-social><div class="gtd-h6 social-login-footer">- Ch\xFAng t\xF4i s\u1EBD gi\u1EEF th\xF4ng tin c\xE1 nh\xE2n ri\xEAng t\u01B0 c\u1EE7a b\u1EA1n.</div><div class="gtd-h6">- Kh\xF4ng c\xF3 g\xEC \u0111\u01B0\u1EE3c chia s\u1EBB m\xE0 kh\xF4ng c\u1EA7n s\u1EF1 \u0111\u1ED3ng \xFD c\u1EE7a b\u1EA1n.</div><div class="gtd-h6">- Th\u01B0\u1EDFng th\u1EE9c \u0111\u0103ng nh\u1EADp nhanh h\u01A1n.</div><!--<jh-social ng-provider="twitter"></jh-social>--><!-- jhipster-needle-add-social-button --></div></div></div></div>');
        $templateCache.put('app/components/profile/profile-doc-info.html', '<div class="portlet new-gtd-porlet-light porlet-doc-info" ng-switch="$ctrl.profileModel.mode"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">{{\'global.menu.account.profiles.info\' | translate}}</span></div></div><div class="portlet-body" ng-switch-when="view"><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.type\' | translate}}</div><div class="col-sm-9 value">{{$ctrl.profileModel.documentType | lookupt :\'ota_customer\':\'passport_type\' | translate}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.nationality\' | translate}}</div><div class="col-sm-9 value">{{$ctrl.profileModel.country | country}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.passport\' | translate}}</div><div class="col-sm-9 value">{{$ctrl.profileModel.documentNumber}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.date\' | translate}}</div><!--<div class="col-sm-9 value">{{$ctrl.profileModel.expiredDate | momentdate}}</div>--><div class="col-sm-9 value">{{$ctrl.profileModel.expiredDate}}</div></div><!--<div class="row static-info">--><!--<div class="col-sm-3 name">Ng\xE0y c\u1EA5p</div>--><!--&lt;!&ndash;<div class="col-sm-9 value">{{$ctrl.profileModel.issuedDate | momentdate}}</div>&ndash;&gt;--><!--<div class="col-sm-9 value">{{$ctrl.profileModel.issuedDate}}</div>--><!--</div>--><div class="row-seperator-20"></div><div class="row static-info"><div class="col-sm-12 bold">{{\'global.menu.account.profiles.customer-number\'| translate}}</div></div><div class="row static-info"><div class="card-zone" ng-repeat="item in $ctrl.profileModel.memberCards"><div class="card-type">{{item.cardType | lookupt :\'air_member_card\':\'\' | translate}}</div><div class="card-number"><span>{{\'global.menu.account.profiles.card-number\'| translate}}</span> <span>{{item.cardNumber}}</span></div></div></div></div><div class="portlet-body" ng-switch-when="edit"><div class="form-horizontal"><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.type\'| translate}}</label><div class="col-xs-6 profile-reponsive"><select class="form-control" ng-model="$ctrl.profileModel.documentType"><option ng-repeat="title in $ctrl.passportTypeLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option></select></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.nationality\'| translate}}</label><div class="col-xs-6 profile-reponsive" ng-init="$ctrl.profileModel.country = (!$ctrl.profileModel.country)?\'vn\':($ctrl.profileModel.country)"><select class="form-control" ng-model="$ctrl.profileModel.country"><option ng-repeat="country in $ctrl.allCountries" value="{{country.code}}">{{country.name}}</option></select></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.passport\'| translate}}</label><div class="col-xs-6 profile-reponsive"><input type="text" class="form-control" ng-model="$ctrl.profileModel.documentNumber" ng-maxlength="20" name="documentNumber"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'documentNumber\'].$touched) && $ctrl.form[\'documentNumber\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'documentNumber\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 20 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.date\'| translate}}</label><div class="col-xs-6 profile-reponsive"><div class="input-icon input-icon-sm right"><i class="fa fa-calendar" onclick="$(\'#expiredDate\').bootstrapDP(\'show\');"></i> <input type="text" class="form-control date-picker input-sm" id="expiredDate" gtd-date-picker min-dt="currentDate" ng-model="$ctrl.profileModel.expiredDate"></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><!--<div class="form-group">--><!--<label class="col-sm-3 control-label">Ng\xE0y c\u1EA5p</label>--><!--<div class="col-sm-6">--><!--<div class="input-icon input-icon-sm right">--><!--<i class="fa fa-calendar" onclick="$(\'#issuedDate\').bootstrapDP(\'show\');"></i>--><!--<input type="text" class="form-control date-picker input-sm"--><!--id="issuedDate"--><!--gtd-date-picker--><!--ng-model="$ctrl.profileModel.issuedDate">--><!--</div>--><!--</div>--><!--<label class="col-sm-3 control-label"></label>--><!--</div>--><div class="row-seperator-20"></div><div class="row static-info"><div class="col-sm-12 bold">{{\'global.menu.account.profiles.customer-number\'| translate}}</div></div><div class="row static-info"><div class="card-zone" ng-repeat="item in $ctrl.profileModel.memberCards"><div class="card-close hand" ng-click="$ctrl.removeCard(item)"><span class="fa fa-times"></span></div><div class="card-type">{{item.cardType | lookupt :\'air_member_card\':\'\' | translate}}</div><div class="card-number"><span>{{\'global.menu.account.profiles.card-number\'| translate}}</span> <span>{{item.cardNumber}}</span></div></div></div><div ng-repeat="editCard in $ctrl.profileModel.editMemberCards track by $index"><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.type\'| translate}}</label><div class="col-xs-6 profile-reponsive"><select class="form-control" ng-model="editCard.curCardType"><option ng-repeat="title in $ctrl.cardTypeLookups" value="{{title.lookupValue}}">{{title.lang | translate}}</option></select></div><div class="col-xs-3 profile-reponsive text-color4 padding-top-5 no-padding-left" ng-click="$ctrl.removeEditMemberCards($index)" ng-if="$ctrl.profileModel.editMemberCards.length > 1"><span class="fa fa-minus-square-o"></span> <span>{{\'global.menu.account.profiles.del\'| translate}}</span></div></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.card-number\'| translate}}</label><div class="col-xs-6 profile-reponsive"><input type="text" class="form-control" ng-model="editCard.curCardNumber" ng-maxlength="20" name="curCardNumber{{$index}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'curCardNumber\' + $index].$touched) && $ctrl.form[\'curCardNumber\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'curCardNumber\' + $index].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 20 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div></div><div class="form-group"><!--<div class="col-sm-12 btn btn-default btn-outline-green text-color3 new-card-text"--><!--ng-click="$ctrl.addMoreCard($ctrl.profileModel)"--><!--&gt;--><div class="col-xs-12 profile-reponsive"><a class="btn btn-color3 btn-outline" ng-click="$ctrl.addMoreCard($ctrl.profileModel)"><span class="fa fa-plus-circle icon"></span>{{\'global.menu.account.profiles.addcard\'| translate}} </a><!--<span class="fa fa-plus-circle icon"></span> Th\xEAm lo\u1EA1i th\u1EBB--></div></div></div></div></div>');
        $templateCache.put('app/components/profile/profile-invoice-info.html', '<div class="portlet new-gtd-porlet-light porlet-invoice-info" ng-switch="$ctrl.profileModel.mode"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">{{\'global.menu.account.profiles.invoice\'| translate}}</span></div></div><div class="portlet-body" ng-switch-when="view"><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.company\'| translate}}</div><div class="col-sm-9 value long-value">{{$ctrl.shortProfile.taxCompanyName}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.add\'| translate}}</div><div class="col-sm-9 value long-value">{{$ctrl.shortProfile.taxAddress1}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.tax\'| translate}}</div><div class="col-sm-9 value long-value">{{$ctrl.shortProfile.taxNumber}}</div></div></div><div class="portlet-body" ng-switch-when="edit"><div class="form-horizontal"><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.company\'| translate}}</label><div class="col-xs-6 profile-reponsive"><input type="text" name="taxCompanyName" ng-maxlength="320" class="form-control" ng-model="$ctrl.shortProfile.taxCompanyName"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'taxCompanyName\'].$touched) && $ctrl.form[\'taxCompanyName\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'taxCompanyName\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="320">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 320 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.add\'| translate}}</label><div class="col-xs-6 profile-reponsive"><input type="text" name="taxAddress1" ng-maxlength="320" class="form-control" ng-model="$ctrl.shortProfile.taxAddress1"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'taxAddress1\'].$touched) && $ctrl.form[\'taxAddress1\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'taxAddress1\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="320">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 320 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.tax\'| translate}}</label><div class="col-xs-6 profile-reponsive"><input type="text" name="taxNumber" ng-maxlength="80" class="form-control" ng-model="$ctrl.shortProfile.taxNumber"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'taxNumber\'].$touched) && $ctrl.form[\'taxNumber\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'taxNumber\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="80">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 80 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div></div></div></div>');
        $templateCache.put('app/components/profile/profile-menu.html', '<div class="portlet light profile-sidebar-portlet"><!-- SIDEBAR USERPIC --><!--    <div class="profile-userpic">--><!--        <img src="../../../content/images/avatar.png" ng-if="!$ctrl.profileModel.avatar.avatarImage" class="img-responsive" alt=""> --><!--        <img data-ng-src="{{\'data:image/png;base64,\' +$ctrl.profileModel.avatar.avatarImage}}" class="img-responsive" ng-if="$ctrl.profileModel.avatar.avatarImage" alt="userProfile image"  >--><!--    </div>--><!--    &lt;!&ndash; END SIDEBAR USERPIC &ndash;&gt;--><!--    &lt;!&ndash; SIDEBAR USER TITLE &ndash;&gt;--><!--    <div class="profile-usertitle">--><!--        <div class="profile-usertitle-header">{{\'global.menu.account.membershipclass\' | translate}}</div>--><!--        <div class="profile-usertitle-class">--><!--            H\u1EA1ng {{$ctrl.identity.membershipClass | capitalize}}--><!--        </div>--><!--    </div>--><!-- END SIDEBAR USER TITLE --><!-- SIDEBAR MENU --><div class="profile-usermenu"><ul class="nav"><li class="" ng-class="{active: $ctrl.$state.includes(\'user-profile-booking-abstract\')}"><a ui-sref="user-profile-booking"><i class="fa fa-history"></i>{{\'global.menu.account.profiles.booking\' | translate}}</a></li><li class="" ng-class="{active: $ctrl.$state.includes(\'user-profile-traveller-abstract\')}"><a ui-sref="user-profile-traveller"><i class="fa fa-users"></i> {{\'global.menu.account.profiles.passenger\' | translate}}</a></li></ul></div><!-- END MENU --></div>');
        $templateCache.put('app/components/profile/profile-user-info.html', '<div class="portlet new-gtd-porlet-light porlet-user-info" ng-switch="$ctrl.profileModel.mode"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase" ng-show="$ctrl.profileModel.type == \'traveller\' && $ctrl.profileModel.id ==  null" ng-switch-when="edit">Th\xEAm h\xE0nh kh\xE1ch</span> <span class="caption-subject font-dark bold uppercase" ng-show="$ctrl.profileModel.type == \'traveller\' && $ctrl.profileModel.id !=  null" ng-switch-when="edit">S\u1EEDa th\xF4ng tin h\xE0nh kh\xE1ch</span> <span class="caption-subject font-dark bold uppercase" ng-show="$ctrl.profileModel.type == \'traveller\' && $ctrl.profileModel.id !=  null" ng-switch-when="view">Th\xF4ng tin h\xE0nh kh\xE1ch</span> <span class="caption-subject font-dark bold uppercase" ng-show="$ctrl.profileModel.type != \'traveller\'">{{\'global.menu.account.profiles.personal1\' | translate}}</span></div></div><div class="portlet-body" ng-switch-when="view"><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.gender\' | translate}}</div><div class="col-sm-9 value">{{$ctrl.profileModel.gender | lookupt :\'ota_customer\':\'passenger_gender\' | translate }}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.lastname\' | translate}}</div><div class="col-sm-9 value">{{$ctrl.profileModel.surName}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.mid-name\' | translate}}</div><div class="col-sm-9 value long-value">{{$ctrl.profileModel.firstName}}</div></div><ng-switch on="$ctrl.profileModel.type == \'traveller\'"><div class="row static-info" ng-switch-when="false"><div class="col-sm-3 name">{{\'global.menu.account.profiles.username\' | translate}}</div><div class="col-sm-9 value">{{$ctrl.shortProfile.loginUsername}}</div></div><div class="row static-info" ng-switch-when="false" ng-if="!$ctrl.profileModel.socialUser"><div class="col-sm-3 name">{{\'global.menu.account.password\' | translate}}</div><div class="col-sm-9 value">********</div></div></ng-switch><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.dateofbirth\' | translate}}</div><!--<div class="col-sm-9 value">{{$ctrl.profileModel.dob | momentdate}}</div>--><div class="col-sm-9 value">{{$ctrl.profileModel.dob}}</div></div><div class="row static-info"><div class="col-sm-3 name">Email</div><div class="col-sm-9 value long-value">{{$ctrl.profileModel.email}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.country\' | translate}}</div><div class="col-sm-9 value">{{$ctrl.profileModel.nationality | country}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.add\' | translate}}</div><div class="col-sm-9 value long-value">{{$ctrl.profileModel.address1}}</div></div><div class="row static-info"><div class="col-sm-3 name">{{\'global.menu.account.profiles.phone\' | translate}}</div><div class="col-sm-9 value"><div ng-repeat="item in $ctrl.profileModel.phoneNumbers track by $index">{{item.text}}</div></div></div></div><div id="action-bar-mobile" class="portlet-body" ng-switch-when="edit"><div class="form-horizontal"><input type="hidden" class="form-control" ng-model="$ctrl.profileModel.id"><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.gender\' | translate}} <span class="text-color4">*</span></label><div class="col-xs-6 profile-reponsive"><select class="form-control" ng-model="$ctrl.profileModel.gender" name="gender" required><option ng-repeat="title in $ctrl.titleLookups" value="{{title.lookupValue}}">{{title.lang + \'_1\' | translate}}</option></select><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'gender\'].$touched) && $ctrl.form[\'gender\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'gender\'].$invalid" data-translate="entity.validation.required"></p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.lastname\' | translate}} <span class="text-color4">*</span></label><div class="col-xs-6 profile-reponsive"><input type="text" class="form-control" ng-model="$ctrl.profileModel.surName" name="surName" placeholder="Nh\u1EADp h\u1ECD t\xEAn b\u1EB1ng ti\u1EBFng Vi\u1EC7t kh\xF4ng d\u1EA5u" gtd-no-special-char required ng-maxlength="50"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'surName\'].$touched) && $ctrl.form[\'surName\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'surName\'].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'surName\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="50">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 50 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.mid-name\' | translate}} <span class="text-color4">*</span></label><div class="col-xs-6 profile-reponsive"><input type="text" class="form-control" ng-model="$ctrl.profileModel.firstName" placeholder="Nh\u1EADp h\u1ECD t\xEAn b\u1EB1ng ti\u1EBFng Vi\u1EC7t kh\xF4ng d\u1EA5u" gtd-no-special-char required ng-maxlength="100" name="firstName"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'firstName\'].$touched) && $ctrl.form[\'firstName\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'firstName\'].$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="$ctrl.form[\'firstName\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="100">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 100 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><ng-switch on="$ctrl.profileModel.type == \'traveller\'"><div class="form-group" ng-switch-when="false"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.username\' | translate}}</label><div class="col-xs-6 profile-reponsive value">{{$ctrl.shortProfile.loginUsername}}</div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group" ng-switch-when="false" ng-if="!$ctrl.profileModel.socialUser"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.password\' | translate}}</label><div class="col-xs-6 profile-reponsive"><input type="text" class="form-control" value="********" readonly="readonly"></div><!--<div class="col-sm-3 btn btn-default btn-outline-green text-color3"--><!--ng-click="$ctrl.changePass()"--><!--&gt;--><!--<span class="fa fa-lock icon"></span> \u0110\u1ED5i m\u1EADt kh\u1EA9u--><!--</div>--><div class="col-xs-3 profile-reponsive no-padding-left"><a class="btn btn-color3 btn-outline" ng-click="$ctrl.changePass()"><span class="fa fa-lock icon"></span>{{\'global.menu.account.changepass\' | translate}} </a><!--<span class="fa fa-plus-circle icon"></span> Th\xEAm lo\u1EA1i th\u1EBB--></div></div></ng-switch><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.dateofbirth\' | translate}}</label><div class="col-xs-6 profile-reponsive"><div class="input-icon input-icon-sm right" ng-click="$ctrl.openDob()"><i class="fa fa-calendar" onclick="$(\'#dob\').bootstrapDP(\'show\')"></i> <input type="text" class="form-control date-picker input-sm" id="dob" gtd-date-picker max-dt="currentDate" ng-model="$ctrl.profileModel.dob"></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">Email</label><div class="col-xs-6 profile-reponsive"><input type="email" class="form-control" gtd-email ng-maxlength="100" name="email" ng-model="$ctrl.profileModel.email"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'email\'].$touched) && $ctrl.form[\'email\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'email\'].$error.email || $ctrl.form[\'email\'].$error.emailValidator" data-translate="entity.validation.email"></p><p class="help-block" ng-show="$ctrl.form[\'email\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="100">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 100 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive email-text">{{\'global.menu.account.profiles.emailalert\' | translate}}</label></div><div class="form-group" ng-if="$ctrl.profileModel.type !== \'traveller\'"><label class="col-md-3 col-xs-4 profile-reponsive control-label">{{\'global.menu.account.profiles.pic\' | translate}}</label><div class="col-md-9 col-xs-6 profile-reponsive profile-img-reponsive"><span class="profile-clear-avatar"><div ng-if="!$ctrl.profileModel.avatar.avatarImage"><img src="../../../content/images/avatar.png" style="max-height: 149px" alt="userProfile image"> <img data-ng-src="{{\'data:image/png;base64,\' +$ctrl.profileModel.avatar.avatarImage}}" class="img-responsive" ng-if="$ctrl.profileModel.avatar.avatarImage" alt="userProfile image"></div><span ng-if="$ctrl.profileModel.avatar" class="help-block clearfix"><button type="button" ng-click="$ctrl.profileModel.avatar.avatarImage=null;" class="btn btn-default btn-xs pull-right"><span class="glyphicon glyphicon-remove"></span></button></span><br></span><span ngf-drop ngf-change="$ctrl.setAvatar($file)" ngf-pattern="\'image/*\'"><img data-ng-src="{{\'data:image/png;base64,\'+$ctrl.profileModel.avatar.avatarImage}}" style="max-height: 149px" ng-if="$ctrl.profileModel.avatar.avatarImage" alt="userProfile image"> <button type="button" ngf-select class="btn btn-default btn-block input-small" ngf-change="$ctrl.setAvatar($file)" data-max-size="25600" accept="image/*" data-translate="entity.action.addimage">Ch\u1ECDn t\u1EC7p</button></span></div></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.country\' | translate}}</label><div class="col-xs-6 profile-reponsive" ng-init="$ctrl.profileModel.nationality= (!$ctrl.profileModel.nationality)?\'vn\':($ctrl.profileModel.nationality)"><select class="form-control" ng-model="$ctrl.profileModel.nationality"><option ng-repeat="country in $ctrl.allCountries" value="{{country.code}}">{{country.name}}</option></select></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.add\' | translate}}</label><div class="col-xs-6 profile-reponsive"><input type="text" class="form-control" ng-model="$ctrl.profileModel.address1" ng-maxlength="200" name="address1"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'address1\'].$touched) && $ctrl.form[\'address1\'].$invalid"><p class="help-block" ng-show="$ctrl.form[\'address1\'].$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="200">Tr\u01B0\u1EDDng n\xE0y kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 200 k\xFD t\u1EF1.</p></div></div><label class="col-xs-3 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-xs-3 profile-reponsive control-label">{{\'global.menu.account.profiles.phone\' | translate}}</label><div class="col-xs-9 profile-reponsive"><div class="row" ng-repeat="item in $ctrl.profileModel.phoneNumbers track by $index" style="margin-bottom: 15px"><div class="col-xs-8"><input type="text" class="form-control" ng-model="item.text" gtd-phone id="phoneNumbers{{$index}}" name="phoneNumbers{{$index}}"><div class="error" ng-show="($ctrl.form.$submitted || $ctrl.form[\'phoneNumbers\' + $index].$touched) && $ctrl.form[\'phoneNumbers\' + $index].$invalid"><p class="help-block" ng-show="$ctrl.form[\'phoneNumbers\' + $index].$invalid" data-translate="entity.validation.phone"></p></div></div><div class="col-xs-4 text-color3 padding-top-5 no-padding-left" ng-click="$ctrl.addPhoneNumber()" ng-if="$ctrl.profileModel.phoneNumbers.length < 5"><span class="fa fa-plus-square-o"></span> <span>{{\'global.menu.account.profiles.addphone\' | translate}}</span></div><div class="col-xs-4 text-color4 padding-top-5 no-padding-left" ng-click="$ctrl.removePhoneNumber($index)" ng-if="$ctrl.profileModel.phoneNumbers.length > 1"><span class="fa fa-minus-square-o"></span> <span>{{\'global.menu.account.profiles.del\' | translate}}</span></div></div></div></div><div class="row static-info" ng-click="$ctrl.edit()" ng-show="$ctrl.profileModel.userMode==\'view\'"><div class="col-xs-12 action">{{\'global.menu.account.profiles.edit\' | translate}}</div></div></div></div></div>');
        $templateCache.put('app/components/hotel/hotel-additional-info-view.html', '<div class="portlet" style="border: none;background: #ffffff;margin-bottom: 0px;font-size: 12px"><div class="portlet-body"><!-- BEGIN FORM--><div class="fee-popup margin-10"><div class="row"><div class="col-xs-12" ng-bind-html="argument"></div></div></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/hotel/hotel-detail-change.html', '<form class=""><div class="hotel-detail-change-wrapper gtd-shadow hotel-border-radius"><div class=""><!--<div class="row">--><div class="row"><div class="header-date-boxx col-sm-3" data-date-format="dd-mm-yyyy"><div class="uppercase text-muted"><span data-translate="hotel.search.header.checkindate"></span></div><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#checkindatec\').datepicker(\'show\');"></i> <input id="checkindatec" class="form-control" size="16" type="text" gtd-dual-date-picker end-id="checkoutdatec\n" is-start="true" max-date="hotel" min-date="hotel" readonly="readonly" required ng-model="$ctrl.searchOptions.hotelSearchFilter.checkin_date"></div></div><div class="header-date-boxx col-sm-3" data-date-format="dd-mm-yyyy"><div class="uppercase text-muted"><span data-translate="hotel.search.header.checkoutdate"></span></div><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#checkoutdatec\').datepicker(\'show\');"></i> <input id="checkoutdatec" class="form-control" size="16" type="text" gtd-dual-date-picker start-id="checkindatec" max-date="hotel" min-date="hotel" readonly="readonly" required ng-model="$ctrl.searchOptions.hotelSearchFilter.checkout_date"></div></div><div class="header-date-boxx col-sm-4 hand"><div class="uppercase text-muted"><span data-translate="hotel.search.header.noroom"></span></div><div class="label-outline label-outline-hotel grey text-center" style="padding: 4px 10px; background: white" ng-click="$ctrl.openChooseRoomDetail();"><span class="">{{ $ctrl.paxDetail.roomQuantity }} {{ "hotel.search.header.room" | translate }}, </span><span class="">{{ $ctrl.paxDetail.adultQuantity }} {{ "hotel.search.header.adult" | translate }}, </span><span class="">{{ $ctrl.paxDetail.childQuantity }} {{ "hotel.search.header.children" | translate }} </span><span class="fa fa-pencil-square-o pull-right padding-top-5"></span></div></div><div class="header-passenger-boxx col-sm-2"><div><span>&nbsp;</span></div><div class="uppercase"><button class="btn gtd-btn-default gtd-btn-small btn-header-search" type="submit" style="width:100%; padding: 0px 20px" ng-click="$ctrl.doSearchImpl()"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase" data-translate="hotel.search.header.change"></span></button></div></div></div></div></div></form>');
        $templateCache.put('app/components/hotel/hotel-detail-header.html', '<div class="tile-container"><div class="left-zone"><div class="hotel-name"><span class="hotel-name-text">{{$ctrl.hotelModel.hotelMeta.name}}</span>&nbsp; <span class="hotel-name-icon fa fa-star" ng-repeat="i in [$ctrl.hotelModel.hotelMeta.stars] | makeRange"></span> <span class="hotel-name-icon fa fa-star fa-star-half-o" ng-repeat="i in [$ctrl.hotelModel.hotelMeta.stars] | halfRange"></span></div><div class="hotel-location"><!--<span class="fa fa-map-marker"></span>--><!--<span>{{$ctrl.hotelModel.hotelMeta.address}}</span>--> <img src="content/images/location-on-map.png" class="fa-image-icon">&nbsp; <span class="">{{$ctrl.hotelModel.hotelMeta.address}}</span></div><!-- <div class="hotel-features-icons">\n            <img class="hotel-feature-icon"\n                 ng-if="!$ctrl.getFacility(facility).startsWith(\'fa-\')"\n                 ng-repeat="facility in $ctrl.hotelModel.displayAmentities"\n                 ng-src="../../../content/images/hotel-free-{{$ctrl.getFacility(facility)}}-icon.svg"/>\n\n            <span class="hotel-feature-icon fa {{$ctrl.getFacility(facility)}}"\n                  ng-if="$ctrl.getFacility(facility).startsWith(\'fa-\')"\n                  ng-repeat="facility in $ctrl.hotelModel.displayAmentities"></span>\n            <span class=""\n                  ng-repeat="facility in $ctrl.hotelModel.selectedAmentities">{{facility}}&nbsp; </span>\n        </div> --></div><div style="margin-left: 5px" class="right-zone" ng-if="$ctrl.hotelModel.products && $ctrl.hotelModel.products.length > 0"><a class="clickable"><span class="btn btn-red" ng-click="$ctrl.goToReserve()">{{\'hotel.search.result.book\' | translate}}</span></a></div><div class="right-zone" ng-if="$ctrl.hotelModel.products && $ctrl.hotelModel.products.length > 0"><div class="booking-text-centre"><button class="btn btn-info hotel-border" data-tippy-content="Tooltip" ng-click="$ctrl.openMapPlaceAround()"><span class="fa fa-map-marker"></span></button></div></div><!-- <div class="right-zone" ng-if="$ctrl.hotelModel.products && $ctrl.hotelModel.products.length > 0">\n            <div class="booking-text-centre">\n                    <a class="clickable btn hotel-border" ><i class="fa fa-heart"></i></a>    \n            </div>\n        </div> --><div class="right-zone" ng-if="$ctrl.hotelModel.products && $ctrl.hotelModel.products.length > 0"><div class="booking-text-centre"><button class="btn btn-info hotel-border" ng-click="$ctrl.openShareModal()"><span class="fa fa-share-alt"></span></button></div></div></div><div class="header-seperator"></div><div class="modal fade text-center" id="modal-share" tabindex="-1" role="dialog" aria-labelledby="hotelShareModal" aria-hidden="false"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">\xD7</span></button><h3 class="modal-title" id="hotelShareModal">{{\'hotel.search.social.share\' | translate}}</h3><div class="header-seperator"></div><!-- <li><a href="https://www.facebook.com/sharer/sharer.php?u={{$ctrl.shareUrl}}" title="Share on Facebook" target="_blank" class="btn btn-facebook"><i class="icon-facebook"></i> Share on Facebook</a></li>\n                <li><a href="https://twitter.com/intent/tweet?text=Twitter Text&amp;url={{$ctrl.shareUrl}}" title="Share on Twitter" target="_blank" class="btn btn-twitter"><i class="icon-twitter"></i> Share on Twitter</a></li>\n                <li><a href="https://www.linkedin.com/shareArticle?mini=true&amp;url={{$ctrl.shareUrl}}&amp;title=LinkedIn%20Title&amp;summary=LinkedIn%20Summary&amp;source={{$ctrl.shareUrl}}" title="Share on LinkedIn" target="_blank" class="btn btn-linkedin"><i class="icon-linkedin"></i> Share on LinkedIn</a></li>\n                <li><a href="mailto:?subject=Email Subject" title="Share via Email" class="btn btn-email"><i class="icon-mail"></i> Share via Email</a></li> --><div class="social-btns"><a class="social-btn facebook" target="_blank" href="https://www.facebook.com/sharer/sharer.php?u={{$ctrl.shareUrl}}"><i class="fa fa-facebook"></i></a> <a class="social-btn twitter" target="_blank" href="https://twitter.com/intent/tweet?text=Twitter Text&amp;url={{$ctrl.shareUrl}}"><i class="fa fa-twitter"></i></a><!-- <a class="social-btn google " href="#"><i class="fa fa-google"></i></a> --> <a class="social-btn linkedin" target="_blank" href="https://www.linkedin.com/shareArticle?mini=true&amp;url={{$ctrl.shareUrl}}&amp;title=LinkedIn%20Title&amp;summary=LinkedIn%20Summary&amp;source={{$ctrl.shareUrl}}"><i class="fa fa-linkedin"></i></a><!-- <a class="social-btn dribbble " href="#"><i class="fa fa-dribbble"></i></a> --><!-- <a class="social-btn skype" ng-click="$ctrl.copyStringToClipboard()"><i class="fa fa-skype"></i></a> --></div><div class="header-seperator"></div></div></div></div></div>');
        $templateCache.put('app/components/hotel/hotel-detail-image-full.html', '<div class="hotel-detail-image-full"><div class="modal-body"><div class="image-map-zone image-full-zone"><div class="col-md-12 title"><span class="">{{vm.productModel.roomDescription}}</span></div><div class="image-zone col-md-7"><div class="demo"><ul id="lightSliderdetail"><li data-thumb="{{img}}" gtd-light-gallery ng-repeat="img in vm.productModel.images"><!--<img src="../../../content/images/demo/hotel0.png" />--> <img ng-src="{{img}}"></li></ul></div></div><div class="room-description-zone col-md-5 hidden-sm hidden-xs"><div ng-bind-html="vm.productModel.roomLongDescription" class="roomLongDescription"></div></div></div><div class="close-button" ng-click="vm.cancel()"><span class="fa fa-times-circle-o"></span></div></div></div>');
        $templateCache.put('app/components/hotel/hotel-detail-image.html', '<!-- <div class="">\n    <div class="image-zone col-md-8 no-padding-left no-padding-right">\n        <div class="demo">\n            <ul id="lightSlider">\n                <li\n                    gtd-light-gallery\n                    ng-repeat="img in $ctrl.hotelModel.hotelImages"\n                    data-thumb="{{ img.orginal }}"\n                >\n                    <img ng-src="{{ img.orginal }}" />\n                </li>\n            </ul>\n        </div>\n    </div>\n    <div id="hotel_template_hover" style="display: none">\n        <div class="porlet small_hotel_template_hover">\n            <div class="portlet-body">\n                <div class="hotel-info-horizontal">\n                    <div class="hotel-image">\n                        <img\n                            class="hotel-image-icon"\n                            src="{{ $ctrl.hotelModel.hotelMeta.image }}"\n                        />\n                    </div>\n                    <div class="hotel-description">\n                        <div class="line small-name">\n                            <span class="hotel-name-text">{{\n                                $ctrl.hotelModel.hotelMeta.name\n                            }}</span\n                            >&nbsp;\n                        </div>\n                        <div class="line">\n                            <span\n                                class="hotel-name-icon fa fa-star"\n                                ng-repeat="s in [$ctrl.hotelModel.hotelMeta.stars] | makeRange"\n                            ></span>\n                        </div>\n                        <div>\n                            <span>{{\n                                "hotel.search.result.from" | translate\n                            }}</span>\n                            <span class="price-text">{{\n                                $ctrl.hotelModel.products | hotelprice | number\n                            }}</span>\n                            <span> VN\u0110</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div> --><!-- Swiper --><div class="swiper-container"><div class="swiper-wrapper"></div><!-- Add Pagination --><div class="swiper-pagination swiper-pagination-white"></div><!-- Navigation --><div class="swiper-button-next swiper-button-white"></div><div class="swiper-button-prev swiper-button-white"></div></div><div class="image-list"><div class="image-list__gallery gtd-border"><div ng-repeat="image in $ctrl.hotelModel.hotelImages | limitTo: $ctrl.limitImage" ng-class="{\'image-list__active\' : $ctrl.currentImage ===  ($index + 1)}" ng-click="$ctrl.changeImage($index + 1)" class="image-list__placeholder" ng-style="{\'background-image\':\'url({{ image.orginal }})\'}"></div><button ng-if="$ctrl.hotelModel.hotelImages.length>10 && !$ctrl.isShowingMoreImage" ng-click="$ctrl.toggleShowMoreImage()" style="width: 110px" class="btn image-list__more-button gtd-btn-default">{{ "flight.search.advsearch.viewall" | translate }} {{ $ctrl.hotelModel.hotelImages.length }} {{ "hotel.search.result.pic" | translate }}</button> <button ng-if="$ctrl.hotelModel.hotelImages.length>10 && $ctrl.isShowingMoreImage" ng-click="$ctrl.toggleShowMoreImage()" style="width: 110px" class="btn image-list__more-button gtd-btn-default">{{ "flight.search.advsearch.collapse" | translate }}</button></div></div><script></script><style>.swiper-container {\n        width: 100%;\n        height: 500px;\n    }\n    .swiper-slide {\n        text-align: center;\n        font-size: 18px;\n        background: #000;\n    }\n\n    .swiper-slide img {\n        width: auto;\n        height: auto;\n        max-width: 100%;\n        max-height: 100%;\n        -ms-transform: translate(-50%, -50%);\n        -webkit-transform: translate(-50%, -50%);\n        -moz-transform: translate(-50%, -50%);\n        transform: translate(-50%, -50%);\n        position: absolute;\n        left: 50%;\n        top: 50%;\n    }</style>');
        $templateCache.put('app/components/hotel/hotel-detail-info.html', '<div class=""><div class="header hotel-name-text"><span>{{\'hotel.search.result.hotelinfo\' | translate}} {{$ctrl.hotelModel.hotelMeta.name}}</span></div><div class="row-seperator"></div><div class="row"><div class="col-md-3"><span class="label-title">{{\'hotel.search.result.des\' | translate}}</span></div><div class="col-md-9"><div class="label-content" ng-bind-html="$ctrl.hotelModel.hotelMeta.shortDescription"></div></div></div><div class="row-seperator"></div><div class="row"><div class="col-md-3"><span class="label-title">{{\'hotel.search.result.amen\' | translate}}</span></div><div class="col-md-9"><div class="row"><div ng-repeat="product in $ctrl.hotelModel.hotelMeta.amentities"><div class="clearfix" ng-if="$index % 3 == 0"></div><div class="col-md-4 label-content">{{product.name}}</div></div></div></div></div><div class="row-seperator"></div><div class="row"><div class="col-md-3"><span class="label-title">{{\'hotel.search.result.checkinout\' | translate}}</span></div><div class="col-md-9"><div class="row"><div class="row col-md-6"><div class="label-title col-md-12">{{\'hotel.search.result.checkin\' | translate}}</div><div class="col-md-12"><span>{{$ctrl.hotelModel.hotelMeta.checkIn}}</span> <span ng-if="$ctrl.hotelModel.hotelMeta.checkinEndTime">- </span><span>{{$ctrl.hotelModel.hotelMeta.checkinEndTime}}</span></div></div><div class="row col-md-6"><div class="label-title col-md-12">{{\'hotel.search.result.checkout\' | translate}}</div><div class="col-md-12"><span>{{$ctrl.hotelModel.hotelMeta.checkOut}}</span></div></div></div><div class="row"><div class="row col-md-12" ng-if="$ctrl.hotelModel.checkInInstructions"><div class="label-title col-md-12">{{\'hotel.search.result.check-in-instructions\' | translate}}</div><div class="col-md-12"><div class="label-content" ng-bind-html="$ctrl.hotelModel.checkInInstructions"></div></div></div></div><div class="row"><div class="row col-md-12" ng-if="$ctrl.hotelModel.specialCheckInInstructions"><div class="label-title col-md-12">{{\'hotel.search.result.special-check-in-instructions\' | translate}}</div><div class="col-md-12"><div class="label-content" ng-bind-html="$ctrl.hotelModel.specialCheckInInstructions"></div></div></div></div><div class="row"><div class="row col-md-12" ng-if="$ctrl.hotelModel.hotelMeta.minAgeCheckIn"><div class="label-title col-md-12">{{\'hotel.search.result.min-age-check-in\' | translate}}</div><div class="col-md-12"><div class="label-content" ng-bind-html="$ctrl.hotelModel.hotelMeta.minAgeCheckIn"></div></div></div></div></div></div><div class="row-seperator"></div><div class="row"><div class="col-md-3"><span class="label-title">{{\'hotel.search.result.poli\' | translate}}</span></div><div class="col-md-9"><div class="col-md-12 label-content" ng-bind-html="$ctrl.hotelModel.products[0].policyString"></div></div></div><div class="row-seperator" style="margin-bottom: 0px; height: 0px"></div></div>');
        $templateCache.put('app/components/hotel/hotel-detail-map-full.html', '<div class="hotel-detail-map-full"><div class="modal-body hotel-map-modal"><!-- <div class="hotel-search-adv filter">\n            <gtd-hotel-search-adv></gtd-hotel-search-adv>\n        </div> --><div class="result"><div ng-mouseenter="vm.onHoverHotelItem(hotel)" ng-mouseleave="vm.outHoverHotelItem(hotel)" ng-repeat="hotel in vm.hotels" style="margin-bottom: 10px; display: flex" class="hotel-info-horizontal gtd-shadow bg-white hotel-map-item"><div class="hotel-image"><img class="hotel-image-icon" src="{{ hotel.hotelMeta.image }}"></div><div class="hotel-description"><div class="line"><span class="hotel-name-text">{{ hotel.hotelMeta.name }}</span>&nbsp;</div><div class="line"><span class="hotel-name-icon fa fa-star" ng-repeat="s in [hotel.hotelMeta.stars] | makeRange"></span> <span class="hotel-name-icon fa fa-star fa-star-half-o" ng-repeat="s in [hotel.hotelMeta.stars] | halfRange"></span></div><div><span>{{ "hotel.search.result.from" | translate }}</span> <span class="price-text">{{ hotel.products | hotelprice | number }}</span> <span>VN\u0110</span></div></div></div></div><div class="map"><div id="gmap-full-zone" style="width: 100%; height: 100%"></div></div><div class="close-button" ng-click="vm.cancel()"><div class="close-dialog"></div></div></div></div><div id="hotel_template_hover" style="display: none"><div class="porlet"><div class="portlet-body"><div class="hotel-info-horizontal"><div class="hotel-image"><img class="hotel-image-icon" src="{{ hotelModel.hotelMeta.image }}"></div><div class="hotel-description"><div class="line"><span class="hotel-name-text">{{ hotelModel.hotelMeta.name }}</span>&nbsp;</div><div class="line"><span class="hotel-name-icon fa fa-star" ng-repeat="s in [hotelModel.hotelMeta.stars] | makeRange"></span> <span class="hotel-name-icon fa fa-star fa-star-half-o" ng-repeat="s in [hotelModel.hotelMeta.stars] | halfRange"></span></div><div><span>{{ "hotel.search.result.from" | translate }}</span> <span class="price-text">{{ hotelModel.products | hotelprice | number }}</span> <span>VN\u0110</span></div></div></div></div></div></div><div id="hotel_template_click" style="display: none"><div class="porlet"><div class="portlet-body"><div class="hotel-info-vertical"><div class="hotel-image line"><ul id="lightSlider"><li data-thumb="{{ img.orginal }}" ng-repeat="img in vm.selectedhoteldetail.hotelImages"><img ng-src="{{ img.orginal }}"></li></ul><!--<img class="hotel-image-icon" src="{{vm.selectedhoteldetail.hotelMeta.image}}"/>--></div><div class="hotel-description"><div class="line"><span class="hotel-name-text"><strong>{{ vm.selectedhoteldetail.hotelMeta.name }}</strong></span>&nbsp;</div><div class="line"><span class="hotel-name-icon fa fa-star" ng-repeat="s in [vm.selectedhoteldetail.hotelMeta.stars] | makeRange"></span> <span class="hotel-name-icon fa fa-star fa-star-half-o" ng-repeat="s in [vm.selectedhoteldetail.hotelMeta.stars] | halfRange"></span> <span class="rate-total">({{ vm.selectedhotel.hotelMeta.stars }}/5)</span></div><div class="line"><span>{{ vm.selectedhotel.hotelMeta.address }}</span></div><div class="line check-in-instructions" ng-if="vm.selectedhoteldetail.checkInInstructions || vm.selectedhoteldetail.specialCheckInInstructions"><div ng-bind-html="vm.selectedhoteldetail.checkInInstructions"></div><div ng-bind-html="vm.selectedhoteldetail.specialCheckInInstructions"></div></div><div class="line"><span>{{ "hotel.search.result.from" | translate }}</span> <span class="price-text">{{ vm.selectedhoteldetail.products | hotelprice | number }}</span> <span>VN\u0110</span></div><div class="line margin-right-15 booking-text-centre margin-bottom-5"><a class="clickable"><span class="btn btn-red" ng-click="vm.bookingClicked(vm.selectedhotel)">{{ "hotel.search.result.choose" | translate }}</span></a></div></div></div></div></div><div class="close-dialog-button" ng-click="vm.close()"><div class="close-dialog"></div></div></div>');
        $templateCache.put('app/components/hotel/hotel-detail-recent.html', '<div class=""><div class="header"><div class="hotel-name"><span class="hotel-name-text">Kh\xE1ch s\u1EA1n b\u1EA1n \u0111\xE3 xem</span>&nbsp;</div></div><div class="hotel-list-wrapper"><div class="hotel-item" ng-repeat="item in $ctrl.recentHotels"><div class="img-icon-zone"><img class="img-icon" src="{{item.hotelMeta.image}}"></div><div class="hotel-desc-zone"><div class="hotel-name">{{item.hotelMeta.name}}</div><div class=""><span ng-repeat="rate in [item.hotelMeta.stars] | makeRange" class="fa fa-star"></span> <span ng-repeat="rate in [item.hotelMeta.stars] | halfRange" class="fa fa-star fa-star-half-o"></span>&nbsp; <span><b>{{item.hotelMeta.stars}}</b>/5 T\u1ED1t</span></div><div class="price-zone"><span>{{\'hotel.search.result.from\'| translate}} </span><span class="price-text gtd-h5">{{item.products | hotelprice | number}} </span><span>VN\u0110</span></div></div></div></div><div class="last-div-seperator"></div></div>');
        $templateCache.put('app/components/hotel/hotel-detail-room.html', '<div class="hotel-detail-room bg-white hotel-padding hotel-border-radius hotel-border"><div class="room-table-header room-table-row row no-margin"><div class="col-sm-6 col-xs-12 uppercase detail-border-right padding-left-15 padding-top-15">{{ "hotel.search.result.type" | translate }}</div><div class="col-sm-3 hidden-xs col-price detail-border-right padding-left-15 padding-top-15 uppercase">{{ "hotel.search.result.opt" | translate }}</div><div class="col-sm-3 hidden-xs col-price padding-left-15 padding-top-15 uppercase">{{ "hotel.search.result.pricefrom2" | translate }}</div></div><div class="row-seperator" style="margin-bottom: 0px"></div><div class="room-table-n" ng-repeat="feature in $ctrl.hotelModel.products"><div class="room-table-row row"><div class="col-sm-6 col-xs-8 col-img"><div class="col-xs-4 no-margin-left no-margin-right no-padding-left no-padding-right"><img ng-src="{{ feature.image }}" class="hotel-img-logo-x margin-10"><!-- <div\n                        class="text-underlined hand margin-bottom-10 gtd-h6"\n                        style="text-align: center"\n                        ng-click="$ctrl.openFullHotelImages(feature)"\n                    >\n                        <span\n                            >{{ "hotel.search.result.more" | translate }}\n                            <span class="r-more-img">{{\n                                "hotel.search.result.pic" | translate\n                            }}</span></span\n                        >\n                    </div> --></div><div class="col-xs-8"><div class="pop-add-info padding-t-10"><div class="bold margin-top-5 margin-bottom-5 name-room-item">{{ feature.roomDescription }}</div><div class="info-item"><div ng-repeat="desc in feature.arrDesc"><!-- <span class="desc-room{{$index}}" ng-if="desc">{{desc}}</span> --> <span class="desc-room-bg" ng-if="$index==0 && desc"></span></div><div class="quantity"><span>{{ "hotel.search.loading.room" | translate }} {{ feature.adultQuantity }} {{ "hotel.search.header.guest" | translate }}, </span><span>{{ feature.childQuantity }} {{ "hotel.search.header.children" | translate }}</span></div></div><div class="red-text"><span ng-if="feature.allowHold">{{ "hotel.search.result.book1" | translate }}</span> <span ng-if="!feature.allowHold">{{ "hotel.search.result.pay" | translate }}</span></div><a class="flight-detail-text gtd-h6" style="text-decoration: none" tabindex="0" ng-click="$ctrl.openFullHotelImages(feature)"><span class="fa fa-info-circle text-color3-em"></span> <span class="text-color3-em">{{ "hotel.search.result.more1" | translate }}</span></a></div><!--<div ng-bind-html="feature.roomLongDescription"></div>--></div></div><div class="col-xs-3 hidden-xs"><div class="padding-t-10"><div class="margin-top-5" ng-if="!feature.nonRefundable"><div class="red-text">{{ "hotel.search.result.change" | translate }} <button style="width: 23px; height: 23px" class="hotel-tippy-allow-hold btn btn-circle gtd-btn-default btn-xs" ng-mouseover="$ctrl.showTooltipAllowHold(feature, $index)"><span class="fa fa-question"></span></button></div></div><div class="margin-top-5" ng-if="feature.nonRefundable"><img class="hotel-feature-icon" ng-src="../../../content/images/free.svg"> <span>{{ "hotel.search.result.cancelto" | translate }}<br>{{ feature.listDeadline[0].deadline | date: "dd-MM-yyyy HH:mm" }} ({{"hotel.search.result.hotel-localtime" | translate}})</span> <button style="width: 23px; height: 23px" class="hotel-tippy-allow-hold btn btn-circle gtd-btn-default btn-xs" ng-mouseover="$ctrl.showTooltipAllowHold(feature, $index)"><span class="fa fa-question"></span></button></div><div ng-repeat="additionalInfo in feature.additionInfos" class="hotel-features-icons"><img class="hotel-feature-icon" ng-if="!$ctrl.getFacility(additionalInfo).startsWith(\'fa-\')" ng-src="../../../content/images/hotel-free-{{\n                                $ctrl.getFacility(additionalInfo)\n                            }}-icon.svg"> <span class="hotel-feature-icon fa {{ $ctrl.getFacility(additionalInfo) }}" ng-if="$ctrl.getFacility(additionalInfo).startsWith(\'fa-\')"></span> <span class="">{{ additionalInfo }}</span></div></div></div><div class="col-sm-3 col-xs-4 col-price centre" style="text-align: right"><div class="margin-top-10 margin-right-15 hidden-xs" ng-if="feature.promo"><span class="label label-color3" style="font-weight: 400">{{ "hotel.search.result.promo" | translate }}</span></div><div class="margin-right-15" ng-if="feature.promo"><span class="bold"><del>{{ feature.priceBeforPromo | number }}</del></span> <span>VN\u0110</span></div><div class="col-action-item margin-right-15" ng-class="{\'margin-top-5\': !feature.promo}"><span class="text-bold price-text">{{ feature.price | number }}</span> <span>VN\u0110</span><br><span class="text-message">{{ "hotel.search.result.not-include-fee" | translate }}</span></div><div class="col-action-item margin-right-15 pop-tax" ng-if="feature.rooms.length > 0"><a class="flight-detail-text hotel-surcharge-tippy" style="text-decoration: none" tabindex="0" ng-mouseover="$ctrl.showSurchargesTooltip(feature.rooms[0].ratesPerNight, $index)"><span class="fa fa-info-circle text-muted"></span> <span class="text-muted text-italic">{{ "hotel.search.result.taxfee" | translate }}</span></a></div><div class="col-action-item margin-right-15 booking-text-centre margin-bottom-5"><a class="clickable" ng-disabled="!feature.quantityAvaliable || feature.quantityAvaliable <= 0"><span class="btn btn-red" ng-disabled="!feature.quantityAvaliable || feature.quantityAvaliable <= 0" ng-click="$ctrl.bookingClicked(feature, item)">{{ "hotel.search.result.book" | translate }}</span></a></div><div class="col-action-item margin-bottom-10 margin-right-15"><span class="text-bold red-text">{{ "hotel.search.result.only" | translate }} {{ feature.quantityAvaliable | number }} {{ "hotel.search.result.room1" | translate }} <span class="hidden-xs">{{ "hotel.search.result.room2" | translate }}</span></span></div></div></div></div></div><div id="surcharges-detail" style="display: none"><strong>Bolded content</strong></div>');
        $templateCache.put('app/components/hotel/hotel-detail-simillar.html', '<div class=""><div class="header"><div class="hotel-name"><span class="hotel-name-text">Kh\xE1ch s\u1EA1n c\xF9ng khu v\u1EF1c</span>&nbsp;</div></div><div class="hotel-list-wrapper"><div class="hotel-item" ng-repeat="item in $ctrl.hotelModel.sameLocHotels"><div class="img-icon"><img class="img-icon" src="{{item.hotelContent.images[0].original}}"></div><div class="hotel-desc-zone"><div class="hotel-name">{{item.hotelMetadata.name}}</div><div class=""><span ng-repeat="rate in [item.hotelContent.stars] | makeRange" class="fa fa-star"></span> <span ng-repeat="rate in [item.hotelContent.stars] | halfRange" class="fa fa-star fa-star-half-o"></span></div><div class=""><span><b>{{item.hotelContent.stars}}</b>/5 T\u1ED1t</span></div><div class="seperator"></div><div class="price-zone"><span>{{\'hotel.search.result.from\'| translate}}</span> <span class="price-text">{{item.products | hotelprice}} </span><span>VN\u0110</span></div></div></div></div><div class="row-seperator"></div></div>');
        $templateCache.put('app/components/hotel/hotel-detail-view.html', '<div class="portlet"><div class="portlet-body"><!-- BEGIN FORM--><div class="hotel-detail-table-wrapper"><table class="hotel-detail-table"><tr class="hotel-detail-table-row"><td class="hotel-detail-table-cell-title">Bed Type</td><td class="hotel-detail-table-cell-value">Queen-size or larger</td></tr><tr class="hotel-detail-table-row"><td class="hotel-detail-table-cell-title">Extra Bed</td><td class="hotel-detail-table-cell-value">Extra bed not available</td></tr><tr class="hotel-detail-table-row"><td class="hotel-detail-table-cell-title">Check in</td><td class="hotel-detail-table-cell-value">After 14:00</td></tr><tr class="hotel-detail-table-row"><td class="hotel-detail-table-cell-title">Checkout</td><td class="hotel-detail-table-cell-value">Before 12:00</td></tr><tr class="hotel-detail-table-row"><td colspan="2" class="hotel-detail-table-cell-base">Kh\xF4ng ho\xE0n hu\u1EF7</td></tr><tr class="hotel-detail-table-row"><td colspan="2" class="hotel-detail-table-cell-base">X\xE1c nh\u1EADn trong v\xF2ng 1 gi\u1EDD</td></tr></table></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/hotel/hotel-fee-view.html', '<div class="portlet" style="border: none;background: #ffffff;margin-bottom: 0px;font-size: 12px"><div class="portlet-body"><!-- BEGIN FORM--><div class="fee-popup margin-10"><div class="row" ng-repeat="item in argument"><div class="col-xs-7">{{item.description}}</div><div class="col-xs-5">{{item.amount | number}} VN\u0110</div></div><!--<div class="row">--><!--<div class="col-xs-7">--><!--<span class="text-bold">Thu\u1EBF ti\xEAu d\xF9ng</span>--><!--<br/>--><!--<span class="text-italic">(\u0110\xE3 bao g\u1ED3m trong gi\xE1 ph\xF2ng)</span>--><!--</div>--><!--<div class="col-xs-5">261.000 VN\u0110</div>--><!--</div>--></div><!-- END FORM--></div></div>');
        $templateCache.put('app/components/hotel/hotel-info.html', '<div class="header-table"><div class="row header-table-row padding-5 flight-info-header-curve"><div class="col-xs-1 header-table-base"><span class="fa fa-hotel icon-text"></span></div><div class="col-xs-3 header-table-base text-bold hearder-border-right">{{\'hotel.search.result.hotel\' | translate}}</div><div class="col-xs-4 header-table-base text-capitalize hearder-border-right text-bold">{{$ctrl.jsonmodel.bookingDate | momentdate: \'localhourdate\'}}</div><!--<ng-switch on="ctrl.jsonmodel.bookingInfo.supplierBookingStatus == \'CONFIRMED\'">--><!--<div class="col-sm-6 header-table-col4" ng-switch-when="true">--><!--M\xE3 Booking <span class="refno-text">{{$ctrl.jsonmodel.bookingInfo.passengerNameRecords}}</span>--><!--</div>--><!--&lt;!&ndash;<div class="col-sm-6 header-table-col4" ng-switch-default>&ndash;&gt;--><!--&lt;!&ndash;M\xE3 Booking <span class="refno-text">{{$ctrl.jsonmodel.bookingInfo.passengerNameRecords}}</span>&ndash;&gt;--><!--&lt;!&ndash;</div>&ndash;&gt;--><!--</ng-switch>--><div class="col-xs-4 header-table-base bookingCode-space">{{\'hotel.search.result.code\' | translate}}:&nbsp; <span class="refno-text text-bold">{{$ctrl.jsonmodel.bookingInfo.passengerNameRecords}}</span></div></div><div class="row detail-table-row bg-color2" style="padding-top:10px; padding-bottom:10px"><div class="col-sm-12 hotel-name"><span class="hotel-name-text text-bold">{{$ctrl.jsonmodel.hotelAvailability.hotelMeta.name}}</span>&nbsp; <span ng-repeat="i in [$ctrl.jsonmodel.hotelAvailability.hotelMeta.stars] | makeRange" class="hotel-name-icon fa fa-star"></span> <span ng-repeat="i in [$ctrl.jsonmodel.hotelAvailability.hotelMeta.stars] | halfRange" class="hotel-name-icon fa fa-star fa-star-half-o"></span></div><div class="col-sm-12 hotel-name"><img src="content/images/location-on-map.png" class="fa-image-icon">&nbsp; <span>{{$ctrl.jsonmodel.hotelAvailability.hotelMeta.address}}</span></div><div class="row no-margin-left no-margin-right detail-table"><div class="col-sm-3"><div class="hotel-image margin-top-10 margin-bottom-10" style="height: unset"><img class="hotel-image-icon" src="{{$ctrl.jsonmodel.hotelAvailability.hotelMeta.image}}" style="width:90%"></div></div><div class="col-sm-9 no-padding-left"><div class="col-sm-4">{{\'hotel.search.result.address\'|translate}}</div><div class="col-sm-8">{{$ctrl.jsonmodel.hotelAvailability.hotelMeta.address}}</div><div class="col-sm-4">{{\'hotel.search.header.checkindate\' | translate}}</div><div class="col-sm-8">{{$ctrl.jsonmodel.hotelAvailability.checkIn | momentdate: \'\' : \'DD-MM-YYYY\'}} : {{$ctrl.jsonmodel.hotelAvailability.hotelMeta.checkIn}}</div><div class="col-sm-4">{{\'hotel.search.header.checkoutdate\' | translate}}</div><div class="col-sm-8">{{$ctrl.jsonmodel.hotelAvailability.checkOut | momentdate: \'\' : \'DD-MM-YYYY\'}} : {{$ctrl.jsonmodel.hotelAvailability.hotelMeta.checkOut}}</div><div class="col-sm-4">{{\'hotel.search.header.detail\' | translate}}</div><div class="col-sm-8">{{$ctrl.jsonmodel.hotelAvailability.products[0].rooms.length}} <span gtd-popover gtd-template-path="app/components/hotel/hotel-detail-view.html">{{$ctrl.jsonmodel.hotelAvailability.products[0].rooms[0].roomCategory}}</span></div><div class="col-sm-4">{{\'hotel.search.header.room\' | translate}}</div><div class="col-sm-8"><!--class="room-type-link hand"--> <span>{{$ctrl.jsonmodel.bookingInfo.transactionInfos[0].noAdult}} {{\'hotel.search.header.adult\' | translate}}</span> <span ng-if="$ctrl.jsonmodel.bookingInfo.transactionInfos[0].noChild>0">{{$ctrl.jsonmodel.bookingInfo.transactionInfos[0].noChild}} {{\'hotel.search.header.children\' | translate}}</span></div></div></div><!--<div class="hotel-features-icons" style="margin-left: 15px">--><!--<span class="hotel-feature-icon" >--><!--<img src="../../../content/images/hotel-free-wifi-icon.png"/>--><!--&nbsp; Free Wifi--><!--</span>--><!--<span class="hotel-feature-icon" >--><!--<img src="../../../content/images/hotel-free-gym-icon.png"/>--><!--&nbsp; C\xF3 h\u1ED3 b\u01A1i--><!--</span>--><!--</div>--><div class="row no-margin" style="width: 100%"><div style="margin: 10px 15px;background: #CCCCCC; height: 1px"></div></div><div class="row no-margin-left no-margin-right"><div colspan="col-xs-12"><span class="padding-left-15">{{\'hotel.search.result.contact\' | translate}}: &nbsp;</span> <span class="name-text">{{$ctrl.jsonmodel.bookingInfo.contactInfos[0].firstName}}&nbsp;{{$ctrl.jsonmodel.bookingInfo.contactInfos[0].surName}}</span></div></div><!--<td colspan="4">--><!--<table class="detail-table">--><!--&lt;!&ndash;<tr class="detail-table-row">&ndash;&gt;--><!--&lt;!&ndash;<td>&ndash;&gt;--><!--&lt;!&ndash;<div class="booking-hotel-info-wrapper">&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;<div class="hotel-name">&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;<span class="hotel-name-text text-bold">{{$ctrl.selectedHotel.hotelCode}}</span>&nbsp;&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;<span class="hotel-name-icon fa fa-star"></span>&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;<div class="hotel-location text-underlined">&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;<span class="fa fa-map-marker"></span>&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;<span>{{$ctrl.selectedHotel.destinationCode | destination}}</span>&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;<table class="hotel-table">&ndash;&gt;--><!--&lt;!&ndash;<tr>&ndash;&gt;--><!--&lt;!&ndash;<td rowspan="5">&ndash;&gt;--><!--&lt;!&ndash;<div class="hotel-image">&ndash;&gt;--><!--&lt;!&ndash;<img class="hotel-image-icon"&ndash;&gt;--><!--&lt;!&ndash;src="../../../content/images/hotel0.png"/>&ndash;&gt;--><!--&lt;!&ndash;</div>&ndash;&gt;--><!--&lt;!&ndash;</td>&ndash;&gt;--><!--&lt;!&ndash;<td class="title-cell">\u0110\u1ECBa \u0111i\u1EC3m</td>&ndash;&gt;--><!--&lt;!&ndash;<td>{{$ctrl.selectedHotel.destinationCode | destination}}</td>&ndash;&gt;--><!--&lt;!&ndash;</tr>&ndash;&gt;--><!--&lt;!&ndash;<tr>&ndash;&gt;--><!--&lt;!&ndash;<td class="title-cell">Nh\u1EADn ph\xF2ng</td>&ndash;&gt;--><!--&lt;!&ndash;<td>{{$ctrl.selectedHotel.checkIn | momentdate}}</td>&ndash;&gt;--><!--&lt;!&ndash;</tr>&ndash;&gt;--><!--&lt;!&ndash;<tr>&ndash;&gt;--><!--&lt;!&ndash;<td class="title-cell">Tr\u1EA3 ph\xF2ng</td>&ndash;&gt;--><!--&lt;!&ndash;<td>{{$ctrl.selectedHotel.checkOut | momentdate}}</td>&ndash;&gt;--><!--&lt;!&ndash;</tr>&ndash;&gt;--><!--&lt;!&ndash;<tr>&ndash;&gt;--><!--&lt;!&ndash;<td class="title-cell">Th\xF4ng tin \u0111\u1EB7t ph\xF2ng</td>&ndash;&gt;--><!--&lt;!&ndash;<td>&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;2 \u0110\xEAm,&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;&lt;!&ndash;1 Ph\xF2ng,&ndash;&gt;&ndash;&gt;--><!--&lt;!&ndash;{{$ctrl.selectedHotelRoom.pax.adultQuantity}} Ng\u01B0\u1EDDi l\u1EDBn&ndash;&gt;--><!--&lt;!&ndash;</td>&ndash;&gt;--><!--&lt;!&ndash;</tr>&ndash;&gt;--><!--&lt;!&ndash;<tr>&ndash;&gt;--><!--&lt;!&ndash;<td class="title-cell">Ph\xF2ng</td>&ndash;&gt;--><!--&lt;!&ndash;<td>&ndash;&gt;--><!--&lt;!&ndash;<span class="room-type-link hand"&ndash;&gt;--><!--&lt;!&ndash;gtd-popover&ndash;&gt;--><!--&lt;!&ndash;gtd-template-path="app/components/hotel/hotel-detail-view.html"&ndash;&gt;--><!--&lt;!&ndash;&gt;{{$ctrl.selectedHotelRoom.roomCategory}}</span>&ndash;&gt;--><!--&lt;!&ndash;* 1&ndash;&gt;--><!--&lt;!&ndash;</td>&ndash;&gt;--><!--&lt;!&ndash;</tr>&ndash;&gt;--><!--&lt;!&ndash;</table>&ndash;&gt;--><!--&lt;!&ndash;<div class="hotel-features-icons">&ndash;&gt;--><!--&lt;!&ndash;<span class="hotel-feature-icon">&ndash;&gt;--><!--&lt;!&ndash;<img src="../../../content/images/hotel-free-wifi-icon.png"/>&ndash;&gt;--><!--&lt;!&ndash;&nbsp; Free Wifi&ndash;&gt;--><!--&lt;!&ndash;</span>&ndash;&gt;--><!--&lt;!&ndash;<span class="hotel-feature-icon">&ndash;&gt;--><!--&lt;!&ndash;<img src="../../../content/images/hotel-free-gym-icon.png"/>&ndash;&gt;--><!--&lt;!&ndash;&nbsp; C\xF3 h\u1ED3 b\u01A1i&ndash;&gt;--><!--&lt;!&ndash;</span>&ndash;&gt;--><!--&lt;!&ndash;</div>&ndash;&gt;--><!--&lt;!&ndash;</div>&ndash;&gt;--><!--&lt;!&ndash;</td>&ndash;&gt;--><!--&lt;!&ndash;</tr>&ndash;&gt;--><!--<tr class="detail-table-row">--><!--<td>--><!--<table style="width: 100%"><tr>--><!--<td class="colsp">&nbsp;</td>--><!--<td class="detail-table-footer-col">--><!--<span>H\xE0nh kh\xE1ch: &nbsp;</span>--><!--<span class="name-text">--><!--<span ></span>--><!--{{$ctrl.bookingModel.customers[0].cuFamilyName}}&nbsp;{{$ctrl.bookingModel.customers[0].cuName}}--><!--</span>--><!--</td>--><!--<td class="colsp">&nbsp;</td>--><!--</tr></table>--><!--</tr>--><!--</tr>--><!--</table>--><!--</td>--></div><!--<div class="row bg-color2 detail-table-row margin-left-m15">--><!--<div colspan="col-xs-12">--><!--<span class="padding-left-15">H\xE0nh kh\xE1ch: &nbsp;</span>--><!--<span class="name-text" ng-repeat="item in $ctrl.flightModel.travelerInfo.airTravelers">--><!--{{$ctrl.bookingModel.customers[0].cuFamilyName}}&nbsp;{{$ctrl.bookingModel.customers[0].cuName}}--><!--</span>--><!--</div>--><!--</div>--><div class="row header-table-row padding-5 flight-info-footer-curve"><div class="col-xs-12 header-table-base">{{\'global.menu.account.profiles.if\' | translate}}"<strong>{{\'global.menu.account.profiles.success\' | translate}}</strong>" {{\'global.menu.account.profiles.after\' | translate}}</div></div></div>');
        $templateCache.put('app/components/hotel/hotel-pagination.component.html', '<div class="gtd-pagination"><!-- <nav aria-label="Page navigation" class="pager">\n        <ul class="hotel-truncate-pagination">\n            <li ng-class="{\'disabled\': vm.disablePrevious}" class="previous">\n                <a\n                    ng-click="vm.toFirst()"\n                    href="#"\n                    ng-disabled="vm.disablePrevious"\n                    ><span aria-hidden="true">&larr;</span> Trang \u0111\u1EA7u</a\n                >\n            </li>\n            <div\n                id="hotel-pagination"\n                style="display: inline-block; vertical-align: top"\n            >\n                <li\n                    ng-class="{\'active\': i === vm.currentpage, \'active-sibling\': i === vm.siblingPage}"\n                    ng-click="vm.changePage(i)"\n                    ng-repeat="i in vm.getNumber() track by $index"\n                >\n                    <a href="#">{{ i + 1 }}</a>\n                </li>\n            </div>\n\n            <li ng-class="{\'disabled\': vm.disableNext}" class="next">\n                <a href="#" ng-click="vm.toLast()" ng-disabled="vm.disableNext"\n                    >Trang cu\u1ED1i <span aria-hidden="true">&rarr;</span></a\n                >\n            </li>\n        </ul>\n    </nav> --><nav aria-label="Page navigation"><ul class="pager"><li ng-class="{\'disabled not-active\': (vm.currentPagination.page === 0 || vm.currentPagination.page === \'0\')}"><a ng-click="vm.previousPage()">Tr\u01B0\u1EDBc</a></li><li ng-class="{\'disabled not-active\': (vm.currentPagination.page === vm.currentPagination.totalPages - 1)}"><a ng-click="vm.nextPage()">Ti\u1EBFp theo</a></li></ul></nav></div>');
        $templateCache.put('app/components/hotel/hotel-place-around.html', '<div class="hotel-detail-map-full"><div class="modal-body hotel-map-modal"><div class="result bg-white"><div style="text-align: center;\n                padding: 10px;\n                position: sticky;\n                top: 0;\n                z-index: 1" class="bg-white hotel-shadow-2"><button class="btn btn-circle gtd-btn-default btn-lg" ng-click="vm.filterNearBy(vm.filterOptions.restaurant)"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="utensils" class="svg-inline--fa fa-utensils fa-w-13" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 416 512"><path fill="currentColor" d="M207.9 15.2c.8 4.7 16.1 94.5 16.1 128.8 0 52.3-27.8 89.6-68.9 104.6L168 486.7c.7 13.7-10.2 25.3-24 25.3H80c-13.7 0-24.7-11.5-24-25.3l12.9-238.1C27.7 233.6 0 196.2 0 144 0 109.6 15.3 19.9 16.1 15.2 19.3-5.1 61.4-5.4 64 16.3v141.2c1.3 3.4 15.1 3.2 16 0 1.4-25.3 7.9-139.2 8-141.8 3.3-20.8 44.7-20.8 47.9 0 .2 2.7 6.6 116.5 8 141.8.9 3.2 14.8 3.4 16 0V16.3c2.6-21.6 44.8-21.4 48-1.1zm119.2 285.7l-15 185.1c-1.2 14 9.9 26 23.9 26h56c13.3 0 24-10.7 24-24V24c0-13.2-10.7-24-24-24-82.5 0-221.4 178.5-64.9 300.9z"></path></svg></button> <button class="btn btn-circle gtd-btn-default btn-lg" ng-click="vm.filterNearBy(vm.filterOptions.bar)"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="glass-martini-alt" class="svg-inline--fa fa-glass-martini-alt fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M502.05 57.6C523.3 36.34 508.25 0 478.2 0H33.8C3.75 0-11.3 36.34 9.95 57.6L224 271.64V464h-56c-22.09 0-40 17.91-40 40 0 4.42 3.58 8 8 8h240c4.42 0 8-3.58 8-8 0-22.09-17.91-40-40-40h-56V271.64L502.05 57.6zM443.77 48l-48 48H116.24l-48-48h375.53z"></path></svg></button> <button class="btn btn-circle gtd-btn-default btn-lg" ng-click="vm.filterNearBy(vm.filterOptions.coffee)"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="coffee" class="svg-inline--fa fa-coffee fa-w-20" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path fill="currentColor" d="M192 384h192c53 0 96-43 96-96h32c70.6 0 128-57.4 128-128S582.6 32 512 32H120c-13.3 0-24 10.7-24 24v232c0 53 43 96 96 96zM512 96c35.3 0 64 28.7 64 64s-28.7 64-64 64h-32V96h32zm47.7 384H48.3c-47.6 0-61-64-36-64h583.3c25 0 11.8 64-35.9 64z"></path></svg></button> <button class="btn btn-circle gtd-btn-default btn-lg" ng-click="vm.filterNearBy(vm.filterOptions.groceries)"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="shopping-basket" class="svg-inline--fa fa-shopping-basket fa-w-18" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path fill="currentColor" d="M576 216v16c0 13.255-10.745 24-24 24h-8l-26.113 182.788C514.509 462.435 494.257 480 470.37 480H105.63c-23.887 0-44.139-17.565-47.518-41.212L32 256h-8c-13.255 0-24-10.745-24-24v-16c0-13.255 10.745-24 24-24h67.341l106.78-146.821c10.395-14.292 30.407-17.453 44.701-7.058 14.293 10.395 17.453 30.408 7.058 44.701L170.477 192h235.046L326.12 82.821c-10.395-14.292-7.234-34.306 7.059-44.701 14.291-10.395 34.306-7.235 44.701 7.058L484.659 192H552c13.255 0 24 10.745 24 24zM312 392V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24zm112 0V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24zm-224 0V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24z"></path></svg></button></div><div style="margin-top: 5px"><ul class="list-group"><li ng-click="vm.onClickHotelItem(item,vm.selectedType)" ng-repeat="item in vm.resultlst" ng-mouseenter="vm.onHoverHotelItem(item)" ng-mouseleave="vm.outHoverHotelItem(item)" class="list-group-item" ng-class="{\'active\': item.place_id === vm.selectedPlace.place_id}">{{ item.name }}</li></ul></div></div><div class="map"><div id="gmap-full-zone" style="width: 100%; height: 100%"></div></div><div class="close-button" ng-click="vm.cancel()"><div class="close-dialog"></div></div><div ng-if="vm.displayDetail" style="position: absolute; right: 0; bottom: 0" class="cards"><article class="card card--1 hotel-shadow-5"><div class="card__info-hover"><span ng-click="vm.closeDetail()" class="fa fa-times"></span><div class="card__clock-info"><span class="fa fa-star"></span> <span class="card__time">{{ vm.selectedPlace.rating }}</span></div></div><div class="card__img"></div><a class="card_link"><div class="card__img--hover" ng-style="{\'background-image\':\'url({{\n                            vm.selectedPlaceImage\n                        }})\'}"></div></a><div class="card__info"><span class="card__category">{{ vm.selectedPlaceType }}</span><h3 class="card__title">{{ vm.selectedPlace.name }}</h3><span class="card__by">distance <a href="#" class="card__author" title="author">{{ vm.selectedItemDistance }}</a></span></div></article></div></div></div>');
        $templateCache.put('app/components/hotel/hotel-search-adv.html', '<div class="row hotel-border bg-white hotel-border-radius" style="margin-bottom: 25px"><div class="col-md-12 none-padding"><div class="search-filter"><div class="panel-header"><div translate="hotel.search.advsearch.sort"></div></div><div class="search-filter-divider none-margin"></div><div class="search-detail"><div class="row"><label class="radio col-xs-6 top-left"><input type="radio" name="gtdorder" value="price,asc" ng-model="$ctrl.sort"> <span translate="hotel.search.advsearch.lowestprice"></span></label><label class="radio col-xs-6 top-left"><input type="radio" name="gtdorder" value="price,desc" ng-model="$ctrl.sort"> <span translate="hotel.search.advsearch.highestprice"></span></label></div><div class="row"><label class="radio col-xs-6 top-left"><input type="radio" name="gtdorder" value="rate,asc" ng-model="$ctrl.sort"> <span translate="hotel.search.advsearch.lowestrating"></span></label><label class="radio col-xs-6 top-left"><input type="radio" name="gtdorder" value="rate,desc" ng-model="$ctrl.sort"> <span translate="hotel.search.advsearch.highestrating"></span></label></div><div class="row"><label class="radio col-xs-6 top-left"><input type="radio" name="gtdorder" value="name,asc" ng-model="$ctrl.sort"> <span translate="hotel.search.advsearch.nameaz"></span></label><label class="radio col-xs-6 top-left"><input type="radio" name="gtdorder" value="name,desc" ng-model="$ctrl.sort"> <span translate="hotel.search.advsearch.nameza"></span></label></div></div></div></div></div><div class="row hotel-border bg-white hotel-border-radius"><div class="col-md-12 none-padding"><div class="search-filter"><div class="panel-header" style="display: flex"><div translate="hotel.search.advsearch.filter"></div><div style="margin-left: auto"><button ng-if="$ctrl.enableReset" ng-click="$ctrl.resetClick()" type="button" class="btn btn-warning btn-circle gtd-shadow"><i class="fa fa-refresh"></i></button></div></div><div class="search-filter-divider none-margin"></div><div class="search-detail"><div><span class="search-label-text" translate="hotel.search.advsearch.hotelname"></span></div><div class="search-detail input-group none-padding"><input type="text" class="hotel-tf form-control" ng-model="$ctrl.hotelName" ng-disabled="$ctrl.formDisabled" ng-keyup="$event.keyCode == 13 ? $ctrl.filterByName($ctrl.hotelName) : null"> <span class="input-group-btn hotel-btn"><button class="btn" ng-click="$ctrl.filterByName()" ng-disabled="$ctrl.formDisabled"><span data-translate="hotel.search.header.search"></span></button></span></div></div><div class="gtd-accordion"><ul><!-- START PRICE --><li><input type="checkbox"> <i></i><h2 translate="hotel.search.advsearch.price"></h2><div class="content"><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.hotelPriceArrays"><input type="checkbox" name="priceOpts" value="{{ item.id }}" ng-model="$ctrl.hotelPriceArrays[$index].checked" ng-disabled="$ctrl.formDisabled" ng-click="$ctrl.filterByPrice()"><div style="display: inline-block"><span>{{ item.text | translate }}</span></div><span></span></label></div></div></li><!-- END PRICE --><li><input type="checkbox"> <i></i><h2 translate="hotel.search.advsearch.rating"></h2><div class="content"><div class="mt-checkbox-list"><label class="mt-checkbox mt-checkbox-outline" ng-repeat="item in $ctrl.hotelRatingArrays"><input type="checkbox" name="ratingOpts" value="{{ item.id }}" ng-model="$ctrl.hotelRatingArrays[$index].checked" ng-disabled="$ctrl.formDisabled" ng-click="$ctrl.filterByStar()"><div style="display: inline-block"><span class="fa fa-star star-icon" ng-repeat="n in [1, item.id] | makeRange"></span> <span class="fa fa-star star-icon fa-star-half-o" ng-repeat="n in [1, item.id] | halfRange"></span></div><span></span></label></div></div></li></ul></div></div></div></div>');
        $templateCache.put('app/components/hotel/hotel-search-date-paginator.html', '<div ng-switch="$ctrl.dateCarouselArrays.length > 0"><div class="flight-search-paginator"><div class="date-box" ng-repeat="item in $ctrl.dateCarouselArrays" gtd-finish-render-ng-repeat gtd-emit-event="ngRepeatDateOptionsFinished"><div>{{item.text}}</div><div><span class="price-text"><b>{{item.price}}</b></span> <span>{{item.unit}}</span></div></div></div><div class="flight-search-paginator-other" ng-switch-when="true"><a class="clickable"><span class="fa fa-calendar-plus-o text-calendar"></span> <span class="text-detail" data-translate="flight.search.result.otherdateopt">Ve ngay khac</span></a></div></div>');
        $templateCache.put('app/components/hotel/hotel-search-footer.html', '<div class="container reset-container"><div class="row"><!--<div class="col-lg-12">--><div class="footer-popular-place-box"><div class="flight-footer-title uppercase"><b><span data-translate="flight.search.footer.popular-place"></span></b></div><div class="flight-footer-detail"><span ng-repeat="item in $ctrl.popularPlaces"><a>{{item}}</a> <span ng-class="{\'footer-last\': $last}">|</span></span></div></div><div class="footer-popular-flight-box"><div class="flight-footer-title uppercase"><b><span data-translate="flight.search.footer.popular-flight"></span></b></div><div class="flight-footer-detail"><span ng-repeat="item in $ctrl.popularFlights"><a>{{item}}</a> <span ng-class="{\'footer-last\': $last}">|</span></span></div></div><div class="footer-popular-hotel-box"><div class="flight-footer-title uppercase"><b><span data-translate="flight.search.footer.popular-hotel"></span></b></div><div class="flight-footer-detail"><span ng-repeat="item in $ctrl.popularHotels"><a>{{item}}</a> <span ng-class="{\'footer-last\': $last}">|</span></span></div></div><!--</div>--></div></div>');
        $templateCache.put('app/components/hotel/hotel-search-header.html', '<script type="text/ng-template" id="customTemplate.html"><a>\n        <span class="fa fa-h-square" ng-if="match.model.type==\'HOTEL\'"></span>\n        <span class="fa fa-location-arrow" ng-if="match.model.type==\'DESTINATION\'"></span>\n        <span ng-bind-html="match.label | uibTypeaheadHighlight:query"></span>\n        <span ng-if="match.model.famous">\n            <button type="button" class="btn btn-default btn-xs btn-info">{{\'hotel.search.result.popular\' | translate}}</button>\n        </span>\n    </a></script><form role="form" id="hotelSearchFormHeader" name="hotelSearchForm" novalidat><div class="hotel-search-header"><div class="container reset-container"><div class="row"><div class="header-destination-box hotelSearch col-sm-3 h"><div class="uppercase label-header"><span data-translate="hotel.search.header.name"></span></div><input type="text" ng-model="$ctrl.searchOptions.hotelSearchFilter.hotel_code" uib-typeahead="o.code as (o.name) for o in $ctrl.searchDestinations($viewValue)" typeahead-input-formatter="$ctrl.formatLabel($model)" typeahead-loading="loadingDestinations" typeahead-no-results="noResults" typeahead-editable="false" typeahead-template-url="customTemplate.html" ng-click="$ctrl.onFocusInputName()" ng-blur="$ctrl.onBlurInputName()" typeahead-on-select="$ctrl.typeAHeadOnSelect($item, $model, $label, $event)" required autocomplete="off" placeholder="{{\'hotel.plchdr.chooseplace\' | translate}}" class="form-control"><div ng-if="loadingDestinations" class="hotel-ghost-loading hotel-border-radius gtd-shadow" style="top: 68px; left: 15px; margin-top: 0px; width: 400px"><div class="wrapper"><div class="wrapper-cell"><div class="text"><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div></div></div></div></div></div><div class="col-sm-4 no-margin no-padding"><div class="header-date-box col-xs-6" data-date-format="dd-mm-yyyy"><div class="uppercase label-header"><span data-translate="hotel.search.header.checkindate"></span></div><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#checkindate\').datepicker(\'show\');"></i> <input id="checkindate" class="form-control" size="16" type="text" gtd-dual-date-picker end-id="checkoutdate" is-start="true" max-date="hotel" min-date="hotel" readonly="readonly" required ng-model="$ctrl.searchOptions.hotelSearchFilter.checkin_date"></div></div><div class="header-date-box col-xs-6" data-date-format="dd-mm-yyyy"><div class="uppercase label-header"><span data-translate="hotel.search.header.checkoutdate"></span></div><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#checkoutdate\').datepicker(\'show\');"></i> <input id="checkoutdate" class="form-control" size="16" type="text" gtd-dual-date-picker start-id="checkindate" max-date="hotel" min-date="hotel" readonly="readonly" required ng-model="$ctrl.searchOptions.hotelSearchFilter.checkout_date"></div></div></div><div class="col-sm-5 no-margin no-padding"><div class="header-date-box col-sm-9 hand"><div class="uppercase label-header"><span data-translate="hotel.search.header.noroom"></span></div><div class="label-outline grey text-center label-outline-hotel" ng-click="$ctrl.openChooseRoomDetail();"><span class="">{{$ctrl.paxDetail.roomQuantity}} {{\'hotel.search.header.room\' | translate}}, </span><span class="">{{$ctrl.paxDetail.adultQuantity}} {{\'hotel.search.header.adult\' | translate}}, </span><span class="">{{$ctrl.paxDetail.childQuantity}} {{\'hotel.search.header.children\' | translate}}</span></div></div><div class="col-sm-3"><div class="margin-top-10 hidden-sm-up"><span>&nbsp;</span></div><div class="uppercase btn-submit-search"><button class="btn gtd-btn-default gtd-btn-small btn-header-search gtd-shadow" type="submit" ng-click="$ctrl.doSearchImpl()" ng-disabled="hotelSearchForm.$invalid"><span class="uppercase" data-translate="hotel.search.header.search"></span></button></div></div></div></div></div></div></form><script>window.onscroll = function() {myFunction()};\n    \n    var header = document.getElementById("hotelSearchFormHeader");\n    var sticky = header.offsetTop;\n    \n    function myFunction() {\n        if (window.pageYOffset > sticky) {\n        header.classList.add("sticky");\n        header.classList.add("gtd-shadow");\n        } else {\n        header.classList.remove("sticky");\n        header.classList.remove("gtd-shadow");\n        }\n    }</script>');
        $templateCache.put('app/components/hotel/hotel-search-result-cell-2.html', '<div class="hotel-search-result-wrapper-2" ng-repeat="item in $ctrl.searchResult.result"><table class="search-result-table"><tr class="search-result-row"><td class="colsp"></td><td class="col-img"><img src="../../../content/images/hotel0.png"></td><td class="col-info"><div class="hotel-name"><span class="hotel-name-text">Le Fenix Sukhumvit Hotel</span></div><div class="hotel-location"><span class="fa fa-map-marker"></span> <span>Sukhumvit</span></div><div class="hotel-star"><span class="hotel-name-icon fa fa-star"></span></div></td><td class="col-review"><div class="review-header-text">R\u1EA5t T\u1ED1t</div><div class="review-point-text"><span class="rate-text">4.0</span> <span class="rate-total">/5</span></div></td><td class="col-seperator"></td><td class="col-action"><div class="col-action-item">Gi\xE1 t\u1EEB</div><div class="col-action-item"><span class="price-text">1,000,667</span> <span>VN\u0110</span></div><div class="col-action-item booking-text-centre"><a class="clickable"><span class="booking-text-centre booking-text gtd-btn-medium" ng-click="$ctrl.bookingClicked(item)">Ch\u1ECDn ph\xF2ng</span></a></div></td></tr></table></div>');
        $templateCache.put('app/components/hotel/hotel-search-result-cell.html', '<!-- <div class="hotel-list-item margin-top-10 gtd-shadow" id="{{ $ctrl.item.id }}">\n    <div>\n        <div>\n            <div class="img-bg" ng-click="$ctrl.bookingClicked($ctrl.item)">\n                <img\n                    ng-src="{{ $ctrl.item.hotelMeta.image }}"\n                    class="hotel-img-logo"\n                />\n            </div>\n            <div\n                class="ribbon-wrapper"\n                ng-if="$ctrl.item.products[0].promo && $ctrl.item.products[0].promoPercen"\n            >\n                <div class="ribbon">\n                    -{{ $ctrl.item.products[0].promoPercen[0] }}\n                </div>\n            </div>\n        </div>\n\n        <div>\n            <div class="col-sm-6 col-xs-8 col-info">\n                <div class="col-info-wrapper">\n                    <div class="hotel-name">\n                        <a class="hotel-clickable"\n                            ><span\n                                class="hotel-name-text"\n                                ng-click="$ctrl.bookingClicked($ctrl.item)"\n                                >{{ $ctrl.item.hotelMeta.name }}</span\n                            ></a\n                        >&nbsp;\n                    </div>\n                    <div class="hotel-name">\n                        <span\n                            class="hotel-name-icon fa fa-star"\n                            ng-repeat="i in [$ctrl.item.hotelMeta.stars] | makeRange"\n                        ></span>\n                    </div>\n                    <div class="hotel-location">\n                        <span class="fa fa-map-marker"></span>\n                        <a class="hotel-clickable hotel-address"\n                            ><span\n                                ng-click="$ctrl.bookingClicked($ctrl.item)"\n                                >{{ $ctrl.item.hotelMeta.address }}</span\n                            ></a\n                        >\n                    </div>\n                    <div class="hotel-features-icons">\n                        <img\n                            class="hotel-feature-icon"\n                            ng-src="../../../content/images/hotel-free-{{\n                                $ctrl.getFacility(facility)\n                            }}-icon.svg"\n                            ng-if="!$ctrl.getFacility(facility).startsWith(\'fa-\')"\n                            ng-repeat="facility in $ctrl.item.displayAmentities"\n                        />\n\n                        <span\n                            class="hotel-feature-icon fa {{\n                                $ctrl.getFacility(facility)\n                            }}"\n                            ng-if="$ctrl.getFacility(facility).startsWith(\'fa-\')"\n                            ng-repeat="facility in $ctrl.item.displayAmentities"\n                        ></span>\n                    </div>\n                    <div class="hotel-features-text">\n                        <span ng-if="$ctrl.item.allowHold">{{\n                            "hotel.search.result.pen" | translate\n                        }}</span>\n                        <span ng-if="!$ctrl.item.allowHold">{{\n                            "hotel.search.result.pay" | translate\n                        }}</span>\n                        <span\n                            ng-if="$ctrl.item.hasBreakfast && $ctrl.item.allowHold"\n                            >,&nbsp;\n                        </span>\n                        <span ng-if="$ctrl.item.hasBreakfast">{{\n                            "hotel.search.result.break" | translate\n                        }}</span>\n                    </div>\n                    <div class="hotel-features-text">\n                        <span\n                            class="text-bold red-text"\n                            ng-if="$ctrl.item.products[0].qualityAvaliable > 0"\n                            >{{ "hotel.search.result.only" | translate }}\n                            {{\n                                $ctrl.item.products[0].qualityAvaliable | number\n                            }}\n                            {{ "hotel.search.result.room" | translate }}</span\n                        >\n                    </div>\n                </div>\n            </div>\n\n            <div class="col-sm-3 col-xs-4 col-action">\n                <div\n                    class="col-action-item col-action-item-hide-rs"\n                    ng-if="$ctrl.item.products[0].promo"\n                >\n                    <span class="label label-color3">{{\n                        "hotel.search.result.promo" | translate\n                    }}</span>\n                </div>\n                <div class="col-action-item col-action-item-hide-rs">\n                    {{ "hotel.search.result.pricefrom" | translate }}\n                </div>\n                <div class="price-item">\n                    <div\n                        class="col-action-item"\n                        ng-if="$ctrl.item.products[0] && $ctrl.item.products[0].promo"\n                    >\n                        <span class="bold"\n                            ><del>{{\n                                $ctrl.item.priceBeforePromo | number\n                            }}</del></span\n                        >\n                        <span> VN\u0110</span>\n                    </div>\n                    <div class="col-action-item ">\n                        <span class="text-bold price-text">{{\n                            $ctrl.item.price | number\n                        }}</span>\n                        <span>VN\u0110</span>\n                        <br /><span class="text-message">{{\n                            "hotel.search.result.not-include-fee" | translate\n                        }}</span>\n                    </div>\n                </div>\n                <div\n                    class="col-action-item col-action-item-btn booking-text-centre"\n                >\n                    <a class="clickable"\n                        ><span\n                            class="btn btn-red"\n                            ng-click="$ctrl.bookingClicked($ctrl.item)"\n                            >{{\n                                "hotel.search.result.choose" | translate\n                            }}</span\n                        ></a\n                    >\n                </div>\n            </div>\n        </div>\n    </div>\n</div> --><div class="blog-card"><div class="meta"><div class="photo" ng-style="{\'background-image\':\'url({{\n                $ctrl.item.hotelMeta.image\n            }})\'}"><div class="ribbon-wrapper" ng-if="$ctrl.item.products[0].promo && $ctrl.item.products[0].promoPercen"><div class="ribbon">-{{ $ctrl.item.products[0].promoPercen[0] }}</div></div></div><ul class="details"><b>{{ "hotel.search.result.amen" | translate }}</b><li style="text-transform: capitalize" ng-repeat="facility in $ctrl.item.displayAmentities"><span class="fa {{ $ctrl.getFacility(facility) }}"></span> {{ facility }}</li></ul></div><div class="description"><h1>{{ $ctrl.item.hotelMeta.name }}</h1><h1><span class="hotel-name-icon fa fa-star" ng-repeat="i in [$ctrl.item.hotelMeta.stars] | makeRange"></span> <span class="hotel-name-icon fa fa-star fa-star-half-o" ng-repeat="i in [$ctrl.item.hotelMeta.stars] | halfRange"></span></h1><h2 ng-click="$ctrl.openMapPlaceAround()"><span class="fa fa-map-marker"></span> {{ $ctrl.item.hotelMeta.address }}</h2><p></p><div><span ng-if="$ctrl.item.allowHold">{{ "hotel.search.result.pen" | translate }}</span> <span ng-if="!$ctrl.item.allowHold">{{ "hotel.search.result.pay" | translate }}</span> <span ng-if="$ctrl.item.hasBreakfast && $ctrl.item.allowHold">,&nbsp; </span><span ng-if="$ctrl.item.hasBreakfast">{{ "hotel.search.result.break" | translate }}</span></div><div><span class="text-bold red-text" ng-if="$ctrl.item.products[0].qualityAvaliable > 0">{{ "hotel.search.result.only" | translate }} {{ $ctrl.item.products[0].qualityAvaliable | number }} {{ "hotel.search.result.room" | translate }}</span></div></div><div class="price"><div class="col-action-item col-action-item-hide-rs">{{ "hotel.search.result.pricefrom" | translate }}</div><div class="price-item"><div class="col-action-item" ng-if="$ctrl.item.products[0] && $ctrl.item.products[0].promo"><span class="bold"><del>{{ $ctrl.item.priceBeforePromo | number }}</del></span> <span>VN\u0110</span></div><div class="col-action-item"><span class="text-bold price-text">{{ $ctrl.item.price | number }}</span> <span>VN\u0110</span><br><span class="text-message">{{ "hotel.search.result.not-include-fee" | translate }}</span></div></div><div class="read-more"><a class="btn gtd-btn-default gtd-shadow" ng-click="$ctrl.bookingClicked($ctrl.item)">{{ "hotel.search.result.choose" | translate }}</a></div></div></div>');
        $templateCache.put('app/components/hotel/hotel-search-result.html', '<div class="row"><div class="col-md-12"><div class="tile-container"><!-- HEADER --><div class=""><div class="col-sm-12 hotel-border bg-white hotel-border-radius"><div class="row" style="padding: 15px"><div class="col-sm-9 title-header-text-block"><div class="heading-search"><div class="title-header"><span class="title-header-main"><b>{{ $ctrl.selectedDestination.name }}:</b> </span>&nbsp; <span class="title-header-sub">{{ "hotel.search.result.found1" | translate }} {{ $ctrl.searchResult.page .totalElements | number }} {{ "hotel.search.result.found" | translate }} {{ "hotel.search.result.hotels" | translate }}.</span></div><div class="title-header-last" style="margin:0"><span class="title-header-sub"><span style="text-transform: capitalize">{{ $ctrl.searchResult.hotels[0] .checkIn | momentdate : "" : "DD-MM-YYYY" }} </span>- {{ $ctrl.searchResult.hotels[0] .checkOut | momentdate: "":"DD-MM-YYYY" }}, {{ $ctrl.paxSummary.roomQuantity }} ph\xF2ng, {{ $ctrl.paxSummary.adultQuantity }} {{ "hotel.search.header.adult" | translate }}, {{ $ctrl.paxSummary.childQuantity }} {{ "hotel.search.header.children" | translate }} </span>&nbsp;</div></div></div><div class="col-sm-3 pull-right" ng-click="$ctrl.openFullMap()"><div class="input-group pull-right gtd-btn-default hotel-map-button"><div style="text-align: center"><img src="../../../content/images/hotel-map-icon-white.png"></div><div><span data-translate="hotel.search.header.map">Xem b\u1EA3n \u0111\u1ED3</span></div></div></div></div></div></div><!-- END HEADER --><div class="hotel-search-result-wrapper col-sm-12 no-margin no-padding"><gtd-hotel-search-result-cell item="item" ng-repeat="item in $ctrl.searchResult.hotels"></gtd-hotel-search-result-cell></div></div></div></div>');
        $templateCache.put('app/flights/booking/external.booking.result.html', '<div class="page-result-booking"><!-- BEGIN PAGE CONTENT INNER --><div ng-if="vm.currentUIState !== vm.uiStates.loading" class="page-content-inner"><a class="btn gtd-btn-default" style="margin-top: 10px" ng-href="{{vm.backUrl}}"><span class="fa fa-arrow-left"></span> Quay l\u1EA1i</a><div class="search-page search-content-3"><div class="row"><div class="col-sm-12"><div class="portlet portlet-result"><div class="porlet-body"><div class="booking-result-wrapper"><div class="header-zone"><div class="header-title"><span ng-if="vm.currentUIState === vm.uiStates.paymentSuccess" class="payment-success">XU\u1EA4T V\xC9 TH\xC0NH C\xD4NG </span><span ng-if="vm.currentUIState === vm.uiStates.paymentFailed" class="payment-failed">THANH TO\xC1N TH\u1EA4T B\u1EA0I</span> <span ng-if="vm.currentUIState === vm.uiStates.paymentRefund">THANH TO\xC1N \u0110\xC3 \u0110\u01AF\u1EE2C H\u1EE6Y</span> <span ng-if="vm.currentUIState === vm.uiStates.paymentPending">THANH TO\xC1N \u0110ANG TH\u1EF0C HI\u1EC6N</span> <span ng-if="vm.currentUIState === vm.uiStates.paymentExpired">QU\xC1 H\u1EA0N THANH TO\xC1N</span> <span ng-if="vm.currentUIState === vm.uiStates.notfound">KH\xD4NG T\xCCM TH\u1EA4Y \u0110\u01A0N H\xC0NG</span> <span ng-if="vm.currentUIState === vm.uiStates.paymentSuccessOnprocess" class="payment-success">THANH TO\xC1N TH\xC0NH C\xD4NG, V\xC9 \u0110ANG CH\u1EDC X\u1EEC L\xDD</span></div><div class="header-title-sub"><span ng-if="vm.currentUIState === vm.uiStates.paymentSuccess">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t {{vm.typeName}} th\xE0nh c\xF4ng.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email. </span><span ng-if="vm.currentUIState === vm.uiStates.paymentSuccessOnprocess">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t {{vm.typeName}} th\xE0nh c\xF4ng.<br><b>Th\xF4ng tin c\u1EE7a qu\xFD kh\xE1ch \u0111ang \u0111\u01B0\u1EE3c g\u1EEDi t\u1EDBi nh\xE0 cung c\u1EA5p \u0111\u1EC3 y\xEAu c\u1EA7u xu\u1EA5t {{vm.typeName}}.</b><br><b>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email.</b> </span><span ng-if="vm.currentUIState === vm.uiStates.paymentFailed">C\u1EA3m \u01A1n qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Th\u1EADt ti\u1EBFc! Th\u1EF1c hi\u1EC7n \u0111\u1EB7t {{vm.typeName}} c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 th\u1EA5t b\u1EA1i.<br></span><span ng-if="vm.currentUIState === vm.uiStates.notfound">C\u1EA3m \u01A1n qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Th\u1EADt ti\u1EBFc! Ch\xFAng t\xF4i kh\xF4ng t\xECm th\u1EA5y k\u1EBFt qu\u1EA3 thanh to\xE1n.<br>Qu\xED kh\xE1ch vui l\xF2ng ki\u1EC3m tra l\u1EA1i \u0111\u01A1n h\xE0ng. </span><span ng-if="vm.currentUIState === vm.uiStates.paymentRefund">C\u1EA3m \u01A1n qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Thanh to\xE1n c\u1EE7a qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c h\u1EE7y.<br></span><span ng-if="vm.currentUIState === vm.uiStates.paymentPending">C\u1EA3m \u01A1n qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Thanh to\xE1n c\u1EE7a qu\xFD kh\xE1ch \u0111ang \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n.<br></span><span ng-if="vm.currentUIState === vm.uiStates.paymentExpired">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Y\xEAu c\u1EA7u \u0111\u1EB7t {{vm.typeName}} c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 qu\xE1 h\u1EA1n thanh to\xE1n. Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EB7t {{vm.typeName}} kh\xE1c.<br></span></div><div class="header-icon"><!-- <i ng-if="vm.currentUIState === vm.uiStates.paymentSuccess" class="fas fa-check-circle"></i> --><!-- <i ng-if="vm.currentUIState === vm.uiStates.paymentFailed" class="far fa-times-circle"></i> --> <img ng-if="vm.currentUIState === vm.uiStates.paymentSuccess" src="../../../content/images/pay-success-icon.png"> <img ng-if="vm.currentUIState === vm.uiStates.paymentFailed" src="../../../content/images/pay-fail-icon.png"> <img ng-if="vm.currentUIState === vm.uiStates.paymentRefund" src="../../../content/images/pay-reserve-button.png"> <img ng-if="vm.currentUIState === vm.uiStates.paymentPending" src="../../../content/images/icon-bookingPending-Dathanhtoan.png"></div><div ng-if="vm.errorCode" class="alert alert-danger" style="margin-bottom: 10px"><!-- M\xE3 L\u1ED7i: {{vm.errorCode}} <br> --> {{vm.errorMessageDict[vm.errorCode] || "Unknown"}}</div><div class="header-title-sub"><span><b>H\xECnh th\u1EE9c thanh to\xE1n:</b> Thanh to\xE1n qua {{vm.payType}} <b>{{vm.payMethod}}</b>.</span></div><br><div ng-if="vm.currentUIState === vm.uiStates.paymentSuccess" class="header-remind"><span ng-if="vm.currentDisplayType === vm.displayType.flight" data-translate="flight.result.remind.ss.CONFIRMED">Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt h\xE0nh tr\xECnh v\xE0 c\xF3 m\u1EB7t t\u1EA1i s\xE2n bay tr\u01B0\u1EDBc 120\' gi\u1EDD kh\u1EDFi h\xE0nh \u0111\u1EC3 l\xE0m th\u1EE7 t\u1EE5c.<br>Ch\xFAc qu\xFD kh\xE1ch c\xF3 m\u1ED9t chuy\u1EBFn \u0111i t\u1ED1t \u0111\u1EB9p.</span></div></div><div ng-if="vm.currentUIState !== vm.uiStates.notfound" class="detail-zone"><div class="loading-detail"></div><div class="form-detail" ng-if="vm.currentDisplayType === vm.displayType.flight"><gtd-flight-info flight-model="vm.bookingModel"></gtd-flight-info><gtd-flight-info flight-model="vm.returnBookingModel" ng-show="vm.bkgroup.groupPricedItineraries.length > 1 || vm.bkgroup.groupPricedItineraries[0].pricedItineraries[0].directionInd==\'RETURN\'"></gtd-flight-info></div><gtd-hotel-info ng-if="vm.currentDisplayType === vm.displayType.hotel" booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-room="vm.selectedHotelRoom" selected-hotel-product="vm.selectedHotelProduct" jsonmodel="vm.bkgroup"></gtd-hotel-info></div><div class="footer-zone"><div class="detail-footer"><span data-translate="flight.result.footer" ng-if="vm.currentUIState === vm.uiStates.paymentSuccess">Vui l\xF2ng li\xEAn h\u1EC7 v\u1EDBi ch\xFAng t\xF4i n\u1EBFu Qu\xFD kh\xE1ch c\xF3 y\xEAu c\u1EA7u thay \u0111\u1ED5i h\xE0nh tr\xECnh, mua th\xEAm h\xE0nh l\xFD ho\u1EB7c th\u1EAFc m\u1EAFc c\u1EA7n<br>gi\u1EA3i \u0111\xE1p cho h\xE0nh tr\xECnh</span></div><div class="contact-footer"><div><span class="fa fa-phone"></span> <span data-translate="flight.result.footer1">Hotline</span> <span class="bold" data-translate="flight.result.footer12">1900 9002</span></div><div><span class="fa fa-phone"></span> <span data-translate="flight.result.footer2">\u0110i\u1EC7n tho\u1EA1i</span> <span class="bold" data-translate="flight.result.footer22">(028) 62 850 850 - (028) 62 857 857</span></div><div><span data-translate="flight.result.footer3">VP HCM 194 Nguy\u1EC5n Th\u1ECB Minh Khai, P6, Qu\u1EADn 3, HCM</span></div><div><span data-translate="flight.result.footer4">VP H\xE0 N\u1ED9i 47 Phan Chu Trinh, Qu\u1EADn Ho\xE0n Ki\u1EBFm, H\xE0 N\u1ED9i</span></div></div></div></div></div></div></div></div></div></div><!-- END PAGE CONTENT INNER --><!-- BEGIN LOADING --><div ng-if="vm.currentUIState === vm.uiStates.loading" class="page-spinner-bar"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div></div><!-- END LOADING --></div>');
        $templateCache.put('app/flights/booking/external.payment.html', 'Inprocess...');
        $templateCache.put('app/flights/booking/flight.booking.confirm.html', '<div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-sm-12"><gtd-flight-booking-progress booking-model="vm.bookingModel"></gtd-flight-booking-progress></div></div><div class="row"><div class="col-md-8 booking-wrapper"><form action="#"><gtd-booking-flight-info booking-model="vm.bookingModel" depart-flight-model="vm.departFlightModel" return-flight-model="vm.returnFlightModel" show-change-flight="false"></gtd-booking-flight-info><gtd-flight-booking-customer-info-view booking-model="vm.bookingModel" mode="flight"></gtd-flight-booking-customer-info-view><gtd-flight-booking-contact-info-view booking-model="vm.bookingModel" mode="flight"></gtd-flight-booking-contact-info-view><gtd-flight-booking-billing-info-view booking-model="vm.bookingModel"></gtd-flight-booking-billing-info-view><div class="portlet light"><div class="mt-checkbox-list" style="padding: 0px"><label class="mt-checkbox green mt-checkbox-outline" style="margin-bottom: 0px"><input type="checkbox" value="1" name="checkedRuleVJ" class="checkedRuleVJ" ng-model="vm.checkedRuleVJ"> <span></span></label><span style="margin-left: 30px">T\xF4i ch\u1EA5p nh\u1EADn <span ng-if="vm.airline.show_airline"><a class="text-green" style="color:#18ab4f" target="_blank" href="{{vm.airline.term_condition_url}}">\u0111i\u1EC1u ki\u1EC7n gi\xE1 v\xE9 v\xE0 \u0111i\u1EC1u l\u1EC7 v\u1EADn chuy\u1EC3n \u0111\u1ED1i v\u1EDBi c\xE1c chuy\u1EBFn bay c\u1EE7a {{vm.airline.airline_name}}</a></span></span></div></div><div class="action-bar visible-md visible-lg"><div class="term-zone">&nbsp;</div><div class="buttons-zone"><div class="inline-block-zone"><span ng-click="vm.doBack()"><span class="fa fa-angle-left"></span> <span data-translate="flight.booking.back"></span></span></div><button class="btn gtd-btn-default gtd-btn-large pull-right" type="button" ng-click="vm.doConfirm()"><span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></form></div><div class="col-md-4 booking-summary-wrapper"><gtd-flight-booking-summary booking-model="vm.bookingModel" payment-model="vm.paymentModel"></gtd-flight-booking-summary><gtd-flight-booking-summary-details booking-model="vm.bookingModel" payment-model="vm.paymentModel"></gtd-flight-booking-summary-details><div class="action-bar hidden-md hidden-lg"><div class="term-zone">&nbsp;</div><div class="buttons-zone"><div class="inline-block-zone"><span ng-click="vm.doBack()"><span class="fa fa-angle-left"></span> <span data-translate="flight.booking.back"></span></span></div><button class="btn gtd-btn-default gtd-btn-large pull-right" type="button" ng-click="vm.doConfirm()"><span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/flights/booking/flight.booking.info.html', '<div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-sm-12"><gtd-flight-booking-progress booking-model="vm.bookingModel"></gtd-flight-booking-progress></div></div><div class="row"><div class="col-md-8 booking-wrapper"><form role="form" name="bookingForm" novalidate ng-submit="vm.doConfirm(bookingForm)"><gtd-booking-flight-info booking-model="vm.bookingModel" depart-flight-model="vm.departFlightModel" return-flight-model="vm.returnFlightModel"></gtd-booking-flight-info><gtd-flight-booking-customer-info booking-model="vm.bookingModel"></gtd-flight-booking-customer-info><gtd-flight-booking-contact-info booking-model="vm.bookingModel"></gtd-flight-booking-contact-info><gtd-flight-booking-billing-info ng-if="vm.checkShowBillingInfo()" booking-model="vm.bookingModel"></gtd-flight-booking-billing-info><div class="action-bar visible-md visible-lg"><div class="term-zone">&nbsp;</div><div class="buttons-zone"><span class="fa"></span> <button class="btn gtd-btn-default gtd-btn-large pull-right" type="submit"><span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></form></div><div class="col-md-4 booking-summary-wrapper"><gtd-flight-booking-summary booking-model="vm.bookingModel" payment-model="vm.paymentModel"></gtd-flight-booking-summary><gtd-flight-booking-summary-details booking-model="vm.bookingModel" payment-model="vm.paymentModel"></gtd-flight-booking-summary-details><div class="action-bar hidden-md hidden-lg"><div class="term-zone">&nbsp;</div><div class="buttons-zone"><span class="fa"></span> <button class="btn gtd-btn-default gtd-btn-large pull-right" type="submit" ng-click="vm.doConfirm(bookingForm)"><span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/flights/booking/flight.booking.payment.html', '<div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-sm-12"><gtd-flight-booking-progress booking-model="vm.bookingModel"></gtd-flight-booking-progress></div></div><div class="row"><div class="col-md-8 booking-wrapper"><form action="#" role="form" name="bookingForm" novalidate><gtd-booking-flight-info booking-model="vm.bookingModel" depart-flight-model="vm.departFlightModel" return-flight-model="vm.returnFlightModel" show-change-flight="false" not-show-login-section="true"></gtd-booking-flight-info><gtd-booking-payment payment-model="vm.paymentModel" booking-model="vm.bjson" booking-model-one-way="vm.bjson"></gtd-booking-payment><div class="action-bar visible-md visible-lg"><div class="buttons-zone"><div class="inline-block-zone"></div><button class="btn gtd-btn-default gtd-btn-large pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.doConfirm()"><span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></form></div><div class="col-md-4 booking-summary-wrapper"><gtd-flight-booking-summary payment-model="vm.paymentModel" booking-model="vm.bookingModel" show-coupon="true"></gtd-flight-booking-summary><gtd-flight-booking-summary-details booking-model="vm.bookingModel" payment-model="vm.paymentModel" show-coupon="true"></gtd-flight-booking-summary-details><div class="action-bar hidden-md hidden-lg"><div class="buttons-zone"><div class="inline-block-zone"></div><button class="btn gtd-btn-default gtd-btn-large pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.doConfirm()"><span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/flights/booking/flight.booking.result.html', '<div class="page-result-booking" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-sm-12"><div class="portlet portlet-result"><div class="porlet-body"><div class="booking-result-wrapper"><div class="header-zone"><div class="header-title"><!--<span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'" data-translate="flight.result.ss.PENDING">CH\u01AFA TH\u1EF0C HI\u1EC6N \u0110\u1EB6T CH\u1ED6</span>--> <span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'" data-translate="flight.result.ss.FAILED">\u0110\u1EB6T V\xC9 TH\u1EA4T B\u1EA0I </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" data-translate="flight.result.ss.CONFIRMED">THANH TO\xC1N TH\xC0NH C\xD4NG </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'" data-translate="flight.result.ss.BOOKING_ON_PROCESS">\u0110ANG TH\u1EF0C HI\u1EC6N \u0110\u1EB6T V\xC9 </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\'" data-translate="flight.result.ss.TICKET_ON_PROCESS">\u0110ANG TH\u1EF0C HI\u1EC6N XU\u1EA4T V\xC9 </span><!--\n                                            <ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'CANCELLED\'">\n                                                <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'REFUNDED\'"> \u0110\xC3 HU\u1EF6 V\xC9 V\xC0 HO\xC0N TI\u1EC0N TH\xC0NH </span>\n                                                <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\'">\u0110\xC3 HU\u1EF6 V\xC9 V\xC0 CH\u01AFA HO\xC0N TI\u1EC0N </span>\n                                            </ng-switch>\n                                            --><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'EXPIRED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" data-translate="flight.result.eps.PENDING">QU\xC1 H\u1EA0N THANH TO\xC1N </span><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" data-translate="flight.result.eps.FAILED">QU\xC1 H\u1EA0N THANH TO\xC1N</span> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\'" data-translate="flight.result.eps.SUCCEEDED">\u0110\xC3 THANH TO\xC1N - KH\xD4NG XU\u1EA4T \u0110\u01AF\u1EE2C V\xC9</span></ng-switch><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" data-translate="flight.result.bps.PENDING">\u0110\u1EB6T CH\u1ED6 TH\xC0NH C\xD4NG</span> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" data-translate="flight.result.bps.FAILED">THANH TO\xC1N L\u1ED6I</span><!-- issuedStatus is FAILED or PENDING  --> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\'" data-translate="flight.result.bps.SUCCEEDED">THANH TO\xC1N TH\xC0NH C\xD4NG, XU\u1EA4T V\xC9 L\u1ED6I</span></ng-switch></div><div class="header-title-sub"><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'">C\u1EA3m \u01A1n qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Th\u1EADt ti\u1EBFc! Th\u1EF1c hi\u1EC7n \u0111\u1EB7t v\xE9 c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 th\u1EA5t b\u1EA1i.<br>Qu\xFD kh\xE1ch vui l\xF2ng ki\u1EC3m tra l\u1EA1i h\xE0nh tr\xECnh, k\u1EBFt n\u1ED1i Internet ho\u1EB7c l\u1EF1a ch\u1ECDn v\xE9 kh\xE1c. </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" data-translate="flight.result.msg1.ss.CONFIRMED">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email. </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'" data-translate="flight.result.msg1.ss.BOOKING_ON_PROCESS">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. V\xE9 c\u1EE7a qu\xFD kh\xE1ch \u0111ang \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n gi\u1EEF ch\u1ED7.<br>Ch\xFAng t\xF4i s\u1EBD g\u1EEDi mail chi ti\u1EBFt cho qu\xFD kh\xE1ch ngay sau khi gi\u1EEF ch\u1ED7 th\xE0nh c\xF4ng </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\' && vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' " data-translate="flight.result.msg1.ss.TICKET_ON_PROCESS">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng. Ch\xFAng t\xF4i \u0111ang ti\u1EBFn h\xE0nh xu\u1EA5t v\xE9.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email ngay sau khi xu\u1EA5t v\xE9 th\xE0nh c\xF4ng.</span><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'EXPIRED\'"><span ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'  && vm.bkgroup.bookingInfo.supplierBookingStatus != \'BOOKED\' && vm.bkgroup.bookingInfo.supplierBookingStatus !=\'PENDING\' && vm.bkgroup.bookingInfo.supplierBookingStatus !=\'FAILED\'">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Y\xEAu c\u1EA7u \u0111\u1EB7t v\xE9 c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 qu\xE1 h\u1EA1n thanh to\xE1n. Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EB7t v\xE9 kh\xE1c. </span><span ng-show="vm.bkgroup.bookingInfo.paymentStatus !=\'SUCCEEDED\' && vm.bkgroup.bookingInfo.supplierBookingStatus !=\'CONFIRMED\' && vm.bkgroup.bookingInfo.supplierBookingStatus !=\'FAILED\' && vm.bkgroup.bookingInfo.supplierBookingStatus != \'BOOKED\'">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n th\xE0nh c\xF4ng, tuy nhi\xEAn c\xF3 l\u1ED7i trong qu\xE1 tr\xECnh xu\u1EA5t v\xE9.<br></span></ng-switch><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\' " data-translate="flight.result.msg1.bps.PENDING">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Y\xEAu c\u1EA7u \u0111\u1EB7t ch\u1ED7 c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n th\xE0nh c\xF4ng.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email. </span><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" data-translate="flight.result.msg1.bps.FAILED">Qu\xFD kh\xE1ch \u0111\xE3 \u0111\u1EB7t ch\u1ED7 th\xE0nh c\xF4ng nh\u01B0ng ch\u01B0a th\u1EC3 thanh to\xE1n \u0111\u01B0\u1EE3c. </span><!-- issuedStatus is FAILED or PENDING  --><!--span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\' && (vm.bkgroup.bookingInfo.paymentType == \'ATM_DEBIT\' || vm.bkgroup.bookingInfo.paymentType == \'CREDIT\')" data-translate="flight.result.msg1.bps.SUCCEEDED">\n                                                    C\xE1m \u01A1n b\u1EA1n \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng tuy nhi\xEAn c\xF3 l\u1ED7i trong qu\xE1 tr\xECnh xu\u1EA5t v\xE9.\n                                                </span--> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\' && vm.bkgroup.bookingInfo.paymentType == \'BALANCE\'" data-translate="flight.result.msg1.bps.SUCCEEDED_BALANCE">C\xE1m \u01A1n b\u1EA1n \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng tuy nhi\xEAn c\xF3 l\u1ED7i trong qu\xE1 tr\xECnh xu\u1EA5t v\xE9.</span></ng-switch></div><div ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'" class="row text-center"><a class="btn gtd-btn-default" style="margin-top: 10px" ui-sref="home"><span class="fa fa-arrow-left"></span> Quay v\u1EC1 trang ch\u1EE7</a></div><div class="header-icon"><img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'" src="../../../content/images/pay-fail-icon.png"> <img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" src="../../../content/images/pay-success-icon.png"> <img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'" src="../../../content/images/icon-bookingPending-Dathanhtoan.png"> <img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\'" src="../../../content/images/icon-bookingPending-Dathanhtoan.png"><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\'"><img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" src="../../../content/images/pay-reserve-button.png"> <img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" src="../../../content/images/pay-fail-icon.png"><!-- issuedStatus is FAILED or PENDING  --> <img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\'" src="../../../content/images/pay-fail-icon.png"></ng-switch><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'EXPIRED\'"><img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" src="../../../content/images/pay-fail-icon.png"></ng-switch></div><div class="header-remind"><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" data-translate="flight.result.remind.ss.CONFIRMED">Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt h\xE0nh tr\xECnh v\xE0 c\xF3 m\u1EB7t t\u1EA1i s\xE2n bay tr\u01B0\u1EDBc 120\' gi\u1EDD kh\u1EDFi h\xE0nh \u0111\u1EC3 l\xE0m th\u1EE7 t\u1EE5c.<br>Ch\xFAc qu\xFD kh\xE1ch c\xF3 m\u1ED9t chuy\u1EBFn \u0111i t\u1ED1t \u0111\u1EB9p. </span><!--\n                                            <span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'">\n                                            </span>\n                                            <span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\'">\n                                            </span>\n                                            --><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'">Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt h\xE0nh tr\xECnh v\xE0 thanh to\xE1n tr\u01B0\u1EDBc {{vm.bkgroup.bookingInfo.timeToLive | momentdate:\'datehour0\'}} \u0111\u1EC3 ho\xE0n th\xE0nh \u0111\u1EB7t v\xE9 - xu\u1EA5t v\xE9 \u0111\xFAng th\u1EDDi h\u1EA1n. </span><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'">Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt h\xE0nh tr\xECnh v\xE0 thanh to\xE1n tr\u01B0\u1EDBc {{vm.bkgroup.bookingInfo.timeToLive | momentdate:\'datehour0\'}} \u0111\u1EC3 ho\xE0n th\xE0nh \u0111\u1EB7t v\xE9 - xu\u1EA5t v\xE9 \u0111\xFAng th\u1EDDi h\u1EA1n. </span><!-- issuedStatus is FAILED or PENDING  --> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\'" data-translate="flight.result.remind.bps.SUCCEEDED">Ch\xFAng t\xF4i s\u1EBD s\u1EDBm li\xEAn h\u1EC7 v\u1EDBi Qu\xFD kh\xE1ch \u0111\u1EC3 h\u1ED7 tr\u1EE3 ho\xE0n th\xE0nh vi\u1EC7c \u0111\u1EB7t v\xE9.</span></ng-switch></div><div class="header-note" style="border-radius: 5px" ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus != \'EXPIRED\' && vm.bkgroup.bookingInfo.status == \'BOOKED\' && vm.bkgroup.bookingInfo.paymentStatus !=\'SUCCEEDED\'|| vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\' && vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'"><div><span data-translate="flight.result.note.msg1">Khi th\u1EF1c hi\u1EC7n thanh to\xE1n chuy\u1EC3n kho\u1EA3n, Qu\xFD kh\xE1ch vui l\xF2ng nh\u1EADp ghi ch\xFA v\u1EDBi n\u1ED9i dung sau:</span></div><div><div class="header-note-em">\u201C<span data-translate="flight.result.note.msg2">THANH TO\xC1N CHO BOOKING</span> <span style="color: red">{{vm.bkgroup.bookingInfo.passengerNameRecords}} </span>\u201D</div></div></div></div><div class="detail-zone"><div class="loading-detail"></div><div class="form-detail"><gtd-flight-info flight-model="vm.bookingModel"></gtd-flight-info><gtd-flight-info flight-model="vm.returnBookingModel" ng-show="vm.bkgroup.groupPricedItineraries.length > 1 || vm.bkgroup.groupPricedItineraries[0].pricedItineraries[0].directionInd==\'RETURN\'"></gtd-flight-info></div></div><div class="footer-zone"><div class="detail-footer"><span data-translate="flight.result.footer" ng-show="!(vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\')">Vui l\xF2ng li\xEAn h\u1EC7 v\u1EDBi ch\xFAng t\xF4i n\u1EBFu Qu\xFD kh\xE1ch c\xF3 y\xEAu c\u1EA7u thay \u0111\u1ED5i h\xE0nh tr\xECnh, mua th\xEAm h\xE0nh l\xFD ho\u1EB7c th\u1EAFc m\u1EAFc c\u1EA7n<br>gi\u1EA3i \u0111\xE1p cho h\xE0nh tr\xECnh</span></div><div class="contact-footer"><div><span class="fa fa-phone"></span> <span data-translate="flight.result.footer1">Hotline</span> <span class="bold" data-translate="flight.result.footer12">1900 9002</span></div><div><span class="fa fa-phone"></span> <span data-translate="flight.result.footer2">\u0110i\u1EC7n tho\u1EA1i</span> <span class="bold" data-translate="flight.result.footer22">(028) 62 850 850 - (028) 62 857 857</span></div><div><span data-translate="flight.result.footer3">VP HCM 194 Nguy\u1EC5n Th\u1ECB Minh Khai, P6, Qu\u1EADn 3, HCM</span></div><div><span data-translate="flight.result.footer4">VP H\xE0 N\u1ED9i 47 Phan Chu Trinh, Qu\u1EADn Ho\xE0n Ki\u1EBFm, H\xE0 N\u1ED9i</span></div></div></div></div></div></div></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/flights/payment/flight.payment.3d.auth.external.html', '<!--<div class="modal-header">--><!--<h3 class="modal-title">--><!--<div class="btn btn-primary">Close</div>--><!--</h3>--><!--</div>--><div class="modal-content" width="800px" height="630px"><div class="modal-body-video"><div class="btn btn-primary margin-20" ng-click="vm.cancel()">Close</div><div>Please wait while we process your request. Do not click the Back button or refresh the page. Otherwise, this transaction may be interrupted.</div><form id="newibe_PAEnrollForm_form" name="PAEnrollForm" action="{{vm.givenUrl}}" method="post" target="paInlineFrame" hidden="hidden"><input type="hidden" name="PaReq" value="{{vm.paReq}}"> <input type="hidden" name="TermUrl" value="{{vm.termUrl}}"> <input type="hidden" name="MD" value="{{vm.md}}"></form><iframe width="800px" height="600px" id="paInlineFrame" name="paInlineFrame"></iframe><!--"https://www.youtube.com/embed/3O1_3zBUKM8"--></div></div><!--<div class="modal-footer">--><!--<button class="btn btn-primary" ng-click="ok()">OK</button>--><!--<button class="btn btn-warning" ng-click="cancel()">Cancel</button>--><!--</div>-->');
        $templateCache.put('app/flights/payment/flight.payment.external.html', '<div class="modal-content"><div class="modal-body-video" style="width: 100%; height: 100%"><div class="modal-header"><h3 class="modal-title"><div class="btn btn-primary" ng-click="vm.cancel()">Close</div></h3></div><iframe style="width: 100%; height: calc(100% - 73px)" ng-src="{{vm.givenUrl}}" id="{{vm.idOption}}" bknum="{{vm.booking_number}}" onlad="onIframeLoad()"></iframe><!--"https://www.youtube.com/embed/3O1_3zBUKM8"--></div><script type="text/javascript">var loadNb = 0;\n\n        document.querySelector("iframe").onload = function(){\n            if(document.getElementById(\'viettelPay\')) {\n                var booking_number = $(\'#viettelPay\').attr(\'bknum\');\n                console.log(\'PageLoadedNumb: \' +loadNb);\n                if(loadNb>0) {\n                    angular.element(document.getElementById(\'viettelPay\')).scope().onIframeLoad(booking_number);\n                }\n                loadNb = loadNb+1;\n            }\n        };</script></div>');
        $templateCache.put('app/flights/payment/paymentest.html', '');
        $templateCache.put('app/flights/search/fastgo.flight.search.home.html', '<div class="formSearch"><div class="container reset-container"><div class="flight-search-home"><div class="row" ng-if="!vm.enable_template"><div class="col-lg-7 col-md-8"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-home-search-header></div><div class="col-lg-5 col-md-4 hidden-sm hidden-xs"><div class="hotel-header-ads porlet"><div class="listSliderHome"><div class="groupSlider"><div id="slider1_container"><div id="slider_content" class="uSlider" u="slides"></div><div u="navigator" class="jssorb13"><div u="prototype"></div></div></div></div></div></div></div></div><div ng-if="vm.enable_template"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div></div></div>');
        $templateCache.put('app/flights/search/flight.search.confirmbooking.html', '<div class="flight-search-confirmbooking"><div class="modal-body"><div class="row" ng-switch="vm.searchOptions.searchType == \'roundtrip\'"><div class="col-md-12"><span class="flight-booking-title" data-translate="flight.search.confirm.title"></span><div class="flight-booking-header"><div class="left-info"><span ng-show="vm.searchOptions.searchType == \'roundtrip\'" data-translate="flight.search.confirm.depart"></span> <span ng-show="vm.searchOptions.searchType == \'oneway\'" data-translate="flight.onewayticket">V\xE9 m\u1ED9t chi\u1EC1u</span> <span>{{vm.currentPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities.quantity}} {{\'flight.adult\' | translate}}</span> <span ng-show="vm.currentPricedItinerary.airItineraryPricingInfo.childFare != null">, {{vm.currentPricedItinerary.airItineraryPricingInfo.childFare.passengerTypeQuantities.quantity}} {{\'flight.child\' | translate}}</span> <span ng-show="vm.currentPricedItinerary.airItineraryPricingInfo.infantFare != null">, {{vm.currentPricedItinerary.airItineraryPricingInfo.infantFare.passengerTypeQuantities.quantity}} {{\'flight.infant\' | translate}}</span></div><div class="right-info"><span>{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="flight-booking-details"><!-- <div class="start-div"></div> --><div class="parent-logo-airline"><div class="img-airline"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + vm.currentGroupItem.airline+ \'.gif\'}}" class="logo-airline"></div><div class="name-airline"><span>{{vm.currentGroupItem.airlineName}} {{vm.currentGroupItem.fightNo}}</span></div><div class="flight-class"><span>{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName == null ? \'promo\' : vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div><div class="from-airline"><div><span class="time-text">{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.currentGroupItem.originLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.currentGroupItem.originLocationCode | airport:\'name\'}}</span></div></div><div class="loading-info"><div class="line1"><span>{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].journeyDuration | duration:\'short\'}}</span></div><div class="line2"><span class="plane-taking-off"><img src="../../../content/images/plane-taking-off.png"></span></div><div class="line3"><span class="" data-translate="flight.direct">Bay th\u1EB3ng</span></div></div><div class="from-airline"><div><span class="time-text">{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.currentGroupItem.destinationLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.currentGroupItem.destinationLocationCode | airport:\'name\'}}</span></div></div></div><div class="flight-booking-header" ng-switch-when="true"><div class="left-info"><span data-translate="flight.search.confirm.return"></span> <span>{{vm.returnPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities.quantity}} {{\'flight.adult\' | translate}}</span> <span ng-show="vm.returnPricedItinerary.airItineraryPricingInfo.childFare != null">, {{vm.returnPricedItinerary.airItineraryPricingInfo.childFare.passengerTypeQuantities.quantity}} {{\'flight.child\' | translate}}</span> <span ng-show="vm.returnPricedItinerary.airItineraryPricingInfo.infantFare != null">, {{vm.returnPricedItinerary.airItineraryPricingInfo.infantFare.passengerTypeQuantities.quantity}} {{\'flight.infant\' | translate}}</span></div><div class="right-info"><span>{{vm.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="flight-booking-details" ng-switch-when="true"><!-- <div class="start-div"></div> --><div class="parent-logo-airline"><div class="img-airline"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + vm.returnGroupItem.airline+ \'.gif\'}}" class="logo-airline"></div><div class="name-airline"><span>{{vm.returnGroupItem.airlineName}} {{vm.returnGroupItem.fightNo}}</span></div><div class="flight-class"><span>{{vm.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div><div class="from-airline"><div><span class="time-text">{{vm.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.returnGroupItem.originLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.returnGroupItem.originLocationCode | airport:\'name\'}}</span></div></div><div class="loading-info"><div class="line1"><span>{{vm.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].journeyDuration | duration:\'short\'}}</span></div><div class="line2"><span class="plane-taking-off"><img src="../../../content/images/plane-taking-off.png"></span></div><div class="line3"><span class="" data-translate="flight.direct">Bay th\u1EB3ng</span></div></div><div class="from-airline"><div><span class="time-text">{{vm.returnPricedItinerary.originDestinationOptions[0].flightSegments[0].arrivalDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.returnGroupItem.destinationLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.returnGroupItem.destinationLocationCode | airport:\'name\'}}</span></div></div></div><div class="flight-booking-footer"><button class="btn gtd-btn-medium" data-dismiss="modal" aria-hidden="true" ng-click="vm.cancel()"><span data-translate="flight.search.confirm.cancel"></span></button> <button class="btn gtd-btn-medium btn-red" ng-click="vm.doSubmit()"><span data-translate="flight.search.confirm.submit"></span></button></div></div></div></div></div>');
        $templateCache.put('app/flights/search/flight.search.confirmbooking.international.html', '<div class="flight-search-confirmbooking"><div class="modal-body"><div class="row" ng-switch="vm.searchOptions.searchType == \'roundtrip\'"><div class="col-md-12"><span class="flight-booking-title" data-translate="flight.search.confirm.title"></span><div class="flight-booking-header"><div class="left-info"><span ng-show="vm.searchOptions.searchType == \'roundtrip\'" data-translate="flight.search.confirm.depart"></span> <span ng-show="vm.searchOptions.searchType == \'oneway\'" data-translate="flight.onewayticket">V\xE9 m\u1ED9t chi\u1EC1u</span> <span>{{vm.currentPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities.quantity}} {{\'flight.adult\' | translate}}</span> <span ng-show="vm.currentPricedItinerary.airItineraryPricingInfo.childFare != null">, {{vm.currentPricedItinerary.airItineraryPricingInfo.childFare.passengerTypeQuantities.quantity}} {{\'flight.child\' | translate}}</span> <span ng-show="vm.currentPricedItinerary.airItineraryPricingInfo.infantFare != null">, {{vm.currentPricedItinerary.airItineraryPricingInfo.infantFare.passengerTypeQuantities.quantity}} {{\'flight.infant\' | translate}}</span></div><div class="right-info"><span>{{vm.currentPricedItinerary.originDestinationOptions[0].originDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="flight-booking-details"><div class="parent-logo-airline"><div class="img-airline"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + vm.currentGroupItem.airline+ \'.gif\'}}" class="logo-airline"></div><div class="name-airline"><span>{{vm.currentGroupItem.airlineName}} {{vm.currentGroupItem.fightNo}}</span></div><div class="flight-class"><div><span>{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div></div><div class="from-airline"><div><span class="time-text"><!--{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments[0].departureDateTime | momentdate:\'hour\'}}--> {{vm.currentPricedItinerary.originDestinationOptions[0].originDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.currentGroupItem.originLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.currentGroupItem.originLocationCode | airport:\'name\'}}</span></div></div><div class="loading-info"><div class="line1"><span>{{vm.currentPricedItinerary.originDestinationOptions[0].journeyDuration | duration:\'short\'}}</span></div><div class="line2"><span class="plane-taking-off"><img src="../../../content/images/plane-taking-off.png"></span></div><div class="line3"><span data-translate="flight.direct" ng-show="(vm.currentPricedItinerary.originDestinationOptions[0].flightSegments).length == 1">Bay th\u1EB3ng</span> <span ng-show="(vm.currentPricedItinerary.originDestinationOptions[0].flightSegments).length > 1">{{vm.currentPricedItinerary.originDestinationOptions[0].flightSegments.length -1}}&nbsp;{{\'flight.stop\' | translate}}</span></div></div><div class="from-airline"><div><span class="time-text">{{vm.currentPricedItinerary.originDestinationOptions[0].destinationDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.currentGroupItem.destinationLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.currentGroupItem.destinationLocationCode | airport:\'name\'}}</span></div></div></div><!-- International: return and depart are the same object, just swap --><div class="flight-booking-header" ng-switch-when="true"><div class="left-info"><span data-translate="flight.search.confirm.return"></span> <span>{{vm.returnPricedItinerary.airItineraryPricingInfo.adultFare.passengerTypeQuantities.quantity}} {{\'flight.adult\' | translate}}</span> <span ng-show="vm.returnPricedItinerary.airItineraryPricingInfo.childFare != null">, {{vm.returnPricedItinerary.airItineraryPricingInfo.childFare.passengerTypeQuantities.quantity}} {{\'flight.child\' | translate}}</span> <span ng-show="vm.returnPricedItinerary.airItineraryPricingInfo.infantFare != null">, {{vm.returnPricedItinerary.airItineraryPricingInfo.infantFare.passengerTypeQuantities.quantity}} {{\'flight.infant\' | translate}}</span></div><div class="right-info"><span>{{vm.returnPricedItinerary.originDestinationOptions[1].originDateTime | momentdate:\'date\' | capitalize}}</span></div></div><div class="flight-booking-details" ng-switch-when="true"><div class="parent-logo-airline"><div class="img-airline"><img ng-src="{{ibeKeys.cdn.airlines.logoUrl + \'/\' + vm.returnGroupItem.airline+ \'.gif\'}}" class="logo-airline"></div><div class="name-airline"><span>{{vm.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].operatingAirline.name}} {{vm.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].operatingAirline.flightNumber}}</span></div><div class="flight-class"><span>{{vm.returnPricedItinerary.originDestinationOptions[1].flightSegments[0].cabinClassName | gender:\'cabinclass\'}}</span></div></div><div class="from-airline"><div><span class="time-text">{{vm.returnPricedItinerary.originDestinationOptions[1].originDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.returnGroupItem.originLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.returnGroupItem.originLocationCode | airport:\'name\'}}</span></div></div><div class="loading-info"><div class="line1"><span>{{vm.returnPricedItinerary.originDestinationOptions[1].journeyDuration | duration:\'short\'}}</span></div><div class="line2"><span class="plane-taking-off"><img src="../../../content/images/plane-taking-off.png"></span></div><div class="line3"><span data-translate="flight.direct" ng-show="(vm.currentPricedItinerary.originDestinationOptions[1].flightSegments).length == 1">Bay th\u1EB3ng</span> <span ng-show="(vm.currentPricedItinerary.originDestinationOptions[1].flightSegments).length > 1">{{vm.currentPricedItinerary.originDestinationOptions[1].flightSegments.length -1}}&nbsp;{{\'flight.stop\' | translate}}</span></div></div><div class="from-airline"><div><span class="time-text">{{vm.returnPricedItinerary.originDestinationOptions[1].destinationDateTime | momentdate:\'hour\'}}</span></div><div><span class="location-text">{{vm.returnGroupItem.destinationLocationCode | airport:\'city\'}}</span></div><div><span>{{vm.returnGroupItem.destinationLocationCode | airport:\'name\'}}</span></div></div></div><div class="flight-booking-footer"><button class="btn gtd-btn-medium" data-dismiss="modal" aria-hidden="true" ng-click="vm.cancel()"><span data-translate="flight.search.confirm.cancel"></span></button> <button class="btn gtd-btn-medium btn-red" ng-click="vm.doSubmit()"><span data-translate="flight.search.confirm.submit"></span></button></div></div></div></div></div>');
        $templateCache.put('app/flights/search/flight.search.home.html', '<div class="formSearch"><div class="container reset-container"><div class="flight-search-home"><div class="row" ng-if="!vm.enable_template"><div class="col-lg-7 col-md-8"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-home-search-header></div><div class="col-lg-5 col-md-4 hidden-sm hidden-xs"><div class="hotel-header-ads porlet"><div class="listSliderHome"><div class="groupSlider"><div id="slider1_container"><div id="slider_content" class="uSlider" u="slides"></div><div u="navigator" class="jssorb13"><div u="prototype"></div></div></div></div></div></div></div></div><div ng-if="vm.enable_template"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div></div></div><!--div class="mainPage" ng-if="!vm.enable_template">\n    <div class="container reset-container">\n        <div class="flight-search-home">\n            <div class="row">\n                <div class="col-md-12 hotel-header-carousel">\n                    <div class="listCaption">\n                        <div class="item">\n                            <div class="icon"><img src="../../../content/images/icon-sellingpoint.svg"\n                                    class="img-responsive" /></div>\n                            <div class="content-zone">\n                                <div class="title">{{\'flight.search.home.bestprice\'| translate}}</div>\n                                <div class="content">{{\'flight.search.home.allservice\'| translate}}</div>\n                            </div>\n                        </div>\n                        <div class="item">\n                            <div class="icon"><img src="../../../content/images/icon-ho-tro.svg"\n                                    class="img-responsive" /></div>\n                            <div class="content-zone">\n                                <div class="title">{{\'flight.search.home.care\'| translate}}</div>\n                                <div class="content">{{\'flight.search.home.callcenter\'| translate}}</div>\n                            </div>\n                        </div>\n                        <div class="item">\n                            <div class="icon"><img src="../../../content/images/icon-thue.svg" class="img-responsive" />\n                            </div>\n                            <div class="content-zone">\n                                <div class="title">{{\'flight.search.home.vat\' |translate}}</div>\n                                <div class="content">{{\'flight.search.home.vat2\' |translate}}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <div class="subscrice">\n        <div class="container reset-container">\n            <div class="imgApp"><img src="../../../content/images/3caidt.png" class="img-responsive" /></div>\n            <div class="row">\n                <div class="col-lg-4 col-md-5">\n\n                </div>\n                <div class="col-lg-6 col-md-7">\n                    <div class="form-subscrice">\n                        <div class="form-group">\n                            <div class="email">\n                                <label for="email">{{\'flight.search.home.app1\' |translate}}</label>\n                                <input type="text" class="form-text"\n                                    placeholder="{{\'flight.plchdr.entermail\'| translate}}" id="email" />\n                                <div class="send">\n                                    <button class="btnSend" ng-click="subscriceEmail()"><i class="fa fa-envelope"></i>\n                                        &nbsp; {{\'flight.search.home.send\' |translate}}</button>\n                                </div>\n                            </div>\n                            <div class="messageResult"></div>\n                        </div>\n                        <div class="downApp">\n                            <div class="name-tk">{{\'flight.search.home.app2\' |translate}}</div>\n                            <div class="icon-store"> <a\n                                    href="https://itunes.apple.com/us/app/gotadi-flight-booking/id1234937358?mt=8"\n                                    target="_blank"> <img src="../../../content/images/app-store.jpg"\n                                        class="img-responsive" /></a> </div>\n                            <div class="icon-store"> <a\n                                    href="https://play.google.com/store/apps/details?id=com.vn.gotadi.mobileapp"\n                                    target="_blank"> <img src="../../../content/images/google-play.jpg"\n                                        class="img-responsive" /></a> </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="member-benefits">\n        <div class="container">\n            <div class="litsBenefits">\n                <div class="heading-name">{{\'flight.search.home.benefit\' |translate}}</div>\n                <div class="row">\n                    <div class="col-sm-4">\n                        <div class="item">\n                            <div class="name">{{\'flight.search.home.price1\' |translate}}</div>\n                            <div class="iconBf">\n                                <img class="header-icon" src="../../../content/images/icon-price-good.svg" />\n                            </div>\n                            <p>{{\'flight.search.home.price2\' |translate}}</p>\n                        </div>\n                    </div>\n                    <div class="col-sm-4">\n                        <div class="item">\n                            <div class="name">{{\'flight.search.home.deal1\' |translate}}</div>\n                            <div class="iconBf">\n                                <img class="header-icon" src="../../../content/images/icon-uu-dai.svg" />\n                            </div>\n                            <p>{{\'flight.search.home.deal2\' |translate}}.</p>\n                        </div>\n                    </div>\n                    <div class="col-sm-4">\n                        <div class="item">\n                            <div class="name">{{\'flight.search.home.point1\' |translate}}</div>\n                            <div class="iconBf">\n                                <img class="header-icon" src="../../../content/images/icon-tichluydiem.svg" />\n                            </div>\n                            <p>{{\'flight.search.home.point2\' |translate}}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="partner">\n        <div class="container">\n            <div class="heading-name">{{\'flight.search.home.partner\' |translate}}</div>\n            <div class="listPartner">\n                <div id="partner-carousel"\n                    class="partner-carousel owl-carousel owl-theme col-md-12 no-padding-left no-padding-right">\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/logobankplus1.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/TIKI.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/LOGO-VIB-Blue.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/zalopay.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/logo-viviet.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/momo.png"\n                                class="img-responsive"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script type="text/javascript">\n            $("#partner-carousel").owlCarousel({\n                autoPlay: 3000, //Set AutoPlay to 3 seconds\n                dots: false,\n                items: 6,\n                nav: false,\n                responsive: {\n                    280: { items: 3, dots: true },\n                    480: { items: 4, dots: true },\n                    768: { items: 5, dots: true },\n                    991: { items: 6, dots: true },\n                }\n            });\n        </script>\n    </div>\n    <div class="trademark">\n        <div class="container">\n            <div class="heading-name">{{\'flight.search.home.brands\' |translate}}</div>\n            <div class="listTrademark">\n                <div id="trademark-carousel"\n                    class="trademark-carousel owl-carousel owl-theme col-md-12 no-padding-left no-padding-right">\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/acprail.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/jeju.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/k6.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/hawai.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/tk.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/db.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/goodwill.png"\n                                class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/bhaya.png"\n                                class="img-responsive"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script type="text/javascript">\n            $("#trademark-carousel").owlCarousel({\n                autoPlay: 3000, //Set AutoPlay to 3 seconds\n                dots: false,\n                items: 8,\n                responsive: {\n                    280: { items: 3, dots: true },\n                    480: { items: 4, dots: true },\n                    768: { items: 5, dots: true },\n                    991: { items: 8, dots: true },\n                }\n            });\n        </script>\n    </div>\n</div>\n</div-->');
        $templateCache.put('app/flights/search/flight.search.html', '<!--<div class="flight-search-header">--><div class="sm-change-action"><div class="btn-change sm-change-filter" ng-click="filterItinerary()"><i class="fa fa-filter"></i> B\u1ED9 l\u1ECDc</div><div class="btn-change sm-change-iti" ng-click="changeItinerary()"><i class="fa fa-exchange"></i> Thay \u0111\u1ED5i h\xE0nh tr\xECnh</div></div><gtd-flight-search-header search-options="vm.searchOptions" init="vm.init" search-completed="vm.searchCompleted" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-search-header><!--</div>--><div class="mainSearchResult"><div class="main-detail-search"><div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3" ng-switch="vm.searchResult.page.totalElements > 0"><div class="row"><div class="col-md-3 flight-search-adv"><div class="sm-form-filter" ng-click="closeFilterItinerary()"></div><div class="formFilter" ng-if="vm.merchantCode != \'FSOFT\'"><!--{{vm.searchResult.page.totalElements}}total-{{vm.searchOptions.selectStep}}step-{{vm.searchOptions.dtype}}&#45;&#45;{{vm.searchResult.groupPricedItineraries[0].pricedItineraries.length}}--><!--vm.init={{vm.init}},vm.filterCompleted={{vm.filterCompleted}},vm.searchCompleted=={{vm.searchCompleted}},vm.alreadyFilter=={{vm.alreadyFilter}}--><gtd-flight-search-adv search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(\n                                    (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                    )\n                                    || vm.alreadyFilter\n                                    "></gtd-flight-search-adv></div><div class="formFilter" ng-if="vm.merchantCode == \'FSOFT\'"><gtd-fsoft-flight-search-adv search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(\n                                    (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                    )\n                                    || vm.alreadyFilter\n                                    "></gtd-fsoft-flight-search-adv></div></div><div class="col-md-9 flight-search-result" ng-if="vm.merchantCode != \'FSOFT\'"><gtd-flight-search-result search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1) || (vm.searchOptions.selectStep==2)"></gtd-flight-search-result><!--<div class="text-danger bold h5"--><!--ng-if="!((vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1) || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0))"--><!--&gt;--><!--<span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span>--><!--</div>--><div class="text-danger bold h5" style="padding-bottom: 20px" ng-if="!(\n                                    (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                    )\n                                    && vm.searchCompleted && vm.filterCompleted\n                                    "><span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span></div><!--1{{vm.searchCompleted}}1{{vm.init}}2{{vm.filterCompleted}}3--></div><div class="col-md-9 flight-search-result" ng-if="vm.merchantCode == \'FSOFT\'"><gtd-fsoft-flight-search-result search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1) || (vm.searchOptions.selectStep==2)"></gtd-fsoft-flight-search-result><div class="text-danger bold h5" style="padding-bottom: 20px" ng-if="vm.searchResult.page == null || !(\n                                    (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                    || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                    )\n                                    && vm.searchCompleted && vm.filterCompleted"><span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span></div><!--1{{vm.searchCompleted}}1{{vm.init}}2{{vm.filterCompleted}}3--></div></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div><div class="flight-search-footer"><gtd-flight-search-footer></gtd-flight-search-footer></div>');
        $templateCache.put('app/flights/search/flight.search.loading.html', '<div class="flight-search-loading"><div class="modal-body"><div class="row" ng-switch="vm.searchOptions.searchType == \'roundtrip\'"><div class="col-md-12"><span class="flight-search-loading-title" data-translate="flight.search.loading.title"></span><div class="flight-loading"><img src="{{vm.loading_img}}"></div><div class="flight-search-loading-details"><div class="from-airline">{{vm.searchOptions.fromAirPort | airport : \'city-code\'}}</div><div class="loading-info"><div class="line1"><img src="../../../content/images/loadingten.png" class="img-direct"></div><div class="line3"><span style="text-transform: capitalize">{{vm.searchOptions.departureDate | momentdate:\'load-date\'}}</span></div></div><div class="from-airline">{{vm.searchOptions.toAirPort | airport : \'city-code\'}}</div></div><div class="flight-search-loading-details" ng-switch-when="true"><div class="from-airline">{{vm.searchOptions.toAirPort | airport : \'city-code\'}}</div><div class="loading-info"><div class="line1"><img src="../../../content/images/loadingten.png" class="img-direct"></div><div class="line2"><span style="text-transform: capitalize">{{vm.searchOptions.returnDate | momentdate:\'load-date\'}}</span></div></div><div class="from-airline">{{vm.searchOptions.fromAirPort | airport : \'city-code\'}}</div></div></div></div></div></div>');
        $templateCache.put('app/flights/search/tiki.flight.search.html', '<!--<div class="flight-search-header">--><div class="sm-change-action"><div class="btn-change sm-change-filter" ng-click="filterItinerary()"><i class="fa fa-filter"></i> B\u1ED9 l\u1ECDc</div><div class="btn-change sm-change-iti" ng-click="changeItinerary()"><i class="fa fa-exchange"></i> Thay \u0111\u1ED5i h\xE0nh tr\xECnh</div></div><gtd-flight-search-header search-options="vm.searchOptions" init="vm.init" search-completed="vm.searchCompleted" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-search-header><!--</div>--><div class="mainSearchResult"><div class="main-detail-search"><div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3" ng-switch="vm.searchResult.page.totalElements > 0"><div class="row"><div class="col-md-3 flight-search-adv"><div class="sm-form-filter" ng-click="closeFilterItinerary()"></div><div class="formFilter"><!--{{vm.searchResult.page.totalElements}}total-{{vm.searchOptions.selectStep}}step-{{vm.searchOptions.dtype}}&#45;&#45;{{vm.searchResult.groupPricedItineraries[0].pricedItineraries.length}}--><!--vm.init={{vm.init}},vm.filterCompleted={{vm.filterCompleted}},vm.searchCompleted=={{vm.searchCompleted}},vm.alreadyFilter=={{vm.alreadyFilter}}--><gtd-flight-search-adv search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(\n                                            (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                            )\n                                            || vm.alreadyFilter\n                                            "></gtd-flight-search-adv></div></div><div class="col-md-9 flight-search-result"><gtd-flight-search-result search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1) || (vm.searchOptions.selectStep==2)"></gtd-flight-search-result><!--<div class="text-danger bold h5"--><!--ng-if="!((vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1) || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0))"--><!--&gt;--><!--<span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span>--><!--</div>--><div class="text-danger bold h5" style="padding-bottom: 20px" ng-if="!(\n                                            (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                            )\n                                            && vm.searchCompleted && vm.filterCompleted\n                                            "><span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span></div><!--1{{vm.searchCompleted}}1{{vm.init}}2{{vm.filterCompleted}}3--></div></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div><div class="flight-search-footer"><gtd-flight-search-footer></gtd-flight-search-footer></div>');
        $templateCache.put('app/flights/search/viettel.flight.search.home.html', '<div class="history-button"><a ui-sref="user-profile-booking" class="btn"><i class="fa fa-history fa-3"></i></a></div><div class="formSearch"><div class="container reset-container"><div class="flight-search-home"><div class="row" ng-if="!vm.enable_template"><div class="col-lg-7 col-md-8"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div><div ng-if="vm.enable_template"><gtd-flight-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-home-search-header></div></div></div></div>');
        $templateCache.put('app/flights/search/viettel.flight.search.html', '<!--<div class="flight-search-header">--><div class="sm-change-action"><div class="btn-change sm-change-filter" ng-click="filterItinerary()"><i class="fa fa-filter"></i> B\u1ED9 l\u1ECDc</div><div class="btn-change sm-change-iti" ng-click="changeItinerary()"><i class="fa fa-exchange"></i> Thay \u0111\u1ED5i h\xE0nh tr\xECnh</div></div><gtd-flight-search-header search-options="vm.searchOptions" init="vm.init" search-completed="vm.searchCompleted" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-flight-search-header><!--</div>--><div class="mainSearchResult"><div class="main-detail-search"><div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3" ng-switch="vm.searchResult.page.totalElements > 0"><div class="row"><div class="col-md-3 flight-search-adv"><div class="sm-form-filter" ng-click="closeFilterItinerary()"></div><div class="formFilter"><!--{{vm.searchResult.page.totalElements}}total-{{vm.searchOptions.selectStep}}step-{{vm.searchOptions.dtype}}&#45;&#45;{{vm.searchResult.groupPricedItineraries[0].pricedItineraries.length}}--><!--vm.init={{vm.init}},vm.filterCompleted={{vm.filterCompleted}},vm.searchCompleted=={{vm.searchCompleted}},vm.alreadyFilter=={{vm.alreadyFilter}}--><gtd-flight-search-adv search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(\n                                            (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                            )\n                                            || vm.alreadyFilter\n                                            "></gtd-flight-search-adv></div></div><div class="col-md-9 flight-search-result"><gtd-flight-search-result search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted" ng-if="(vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1) || (vm.searchOptions.selectStep==2)"></gtd-flight-search-result><!--<div class="text-danger bold h5"--><!--ng-if="!((vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1) || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0))"--><!--&gt;--><!--<span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span>--><!--</div>--><div class="text-danger bold h5" style="padding-bottom: 20px" ng-if="!(\n                                            (vm.searchResult.page.totalElements > 0 && vm.searchOptions.selectStep==1)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'international\' && vm.searchResult.groupPricedItineraries[0].pricedItineraries.length > 0)\n                                            || (vm.searchOptions.selectStep==2 && vm.searchOptions.dtype==\'domestic\' && vm.searchResult.page.totalElements > 0)\n                                            )\n                                            && vm.searchCompleted && vm.filterCompleted\n                                            "><span data-translate="flight.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y chuy\u1EBFn bay ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span></div><!--1{{vm.searchCompleted}}1{{vm.init}}2{{vm.filterCompleted}}3--></div></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div><div class="flight-search-footer"><gtd-flight-search-footer></gtd-flight-search-footer></div>');
        $templateCache.put('app/hotels/Inventory/hotel.inventory.html', '<div class="container"><div class="row breadcrumbs"><ul class="page-breadcrumb breadcrumb"><li><a href="./#/flight">Trang ch\u1EE7</a> <i class="fa fa-angle-right"></i></li><li><span data-translate="flight.booking.info.contactinfo.contact">Li\xEAn h\u1EC7 h\u1EE3p t\xE1c</span></li></ul></div><div class="form-horizontal"><div class="title-invetory"><b>TH\xD4NG TIN \u0110\u0102NG K\xDD INVENTORY HOTEL</b></div><form role="form" name="atmForm" novalidate><div class="form-group"><label class="col-sm-3 col-xs-4 profile-reponsive control-label">T\xEAn Kh\xE1ch s\u1EA1n <span class="text-color4">*</span></label><div class="col-sm-6 col-xs-8 profile-reponsive"><input type="text" class="form-control" ng-model="vm.hotelName" required ng-maxlength="255" name="hotelName"><div class="error" ng-show="(atmForm.$submitted || atmForm.hotelName.$touched) && atmForm.hotelName.$invalid"><p class="help-block" ng-show="atmForm.hotelName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.hotelName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="255"></p></div></div><label class="col-sm-3 col-xs-4 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-sm-3 col-xs-4 profile-reponsive control-label"><span data-translate="flight.booking.info.contactinfo.mobile"></span>:<span style="color: red">*</span></label><div class="col-sm-6 col-xs-8 profile-reponsive"><input type="text" id="ciMobile{{$index}}" name="hotelPhone" gtd-vn-phone class="gtd-text-medium form-control" placeholder="{{\'flight.plchdr.phone\' | translate}}" ng-model="vm.phoneNumber" onkeypress="if(this.value.length==20) return false;" required><div class="error" ng-show="(atmForm.$submitted || atmForm.hotelPhone.$touched) && atmForm.hotelPhone.$invalid"><p class="help-block" ng-show="atmForm.hotelPhone.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.hotelPhone.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20"></p><p class="help-block" ng-show="atmForm.hotelPhone.$error.phoneValidator" data-translate="entity.validation.phoneValidator"></p></div></div></div><div class="form-group"><label class="col-sm-3 col-xs-4 profile-reponsive control-label">Email:<span style="color: red">*</span></label><div class="col-sm-6 col-xs-8 profile-reponsive"><input type="email" class="form-control" gtd-email ng-maxlength="255" name="hotelEmail" required ng-model="vm.email"><div class="error" ng-show="(atmForm.$submitted || atmForm.hotelEmail.$touched) && atmForm.hotelEmail.$invalid"><p class="help-block" ng-show="atmForm.hotelEmail.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.hotelEmail.$error.emailValidator" data-translate="entity.validation.email"></p><p class="help-block" ng-show="atmForm.hotelEmail.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="255"></p></div></div></div><div class="form-group"><label class="col-sm-3 col-xs-4 profile-reponsive control-label">{{\'global.menu.account.profiles.add\' | translate}}<span style="color: red">*</span></label><div class="col-sm-6 col-xs-8 profile-reponsive"><textarea type="text" class="form-control" ng-model="vm.address" ng-maxlength="1000" name="hotelAddress" required></textarea><div class="error" ng-show="(atmForm.$submitted || atmForm.hotelAddress.$touched) && atmForm.hotelAddress.$invalid"><p class="help-block" ng-show="atmForm.hotelAddress.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="atmForm.hotelAddress.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="1000"></p></div></div><label class="col-sm-3 col-xs-4 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-sm-3 col-xs-4 profile-reponsive control-label">T\xEAn ng\u01B0\u1EDDi li\xEAn h\u1EC7</label><div class="col-sm-6 col-xs-8 profile-reponsive"><input type="text" class="form-control" ng-model="vm.fullName" name="surName" ng-maxlength="255"><div class="error" ng-show="(atmForm.$submitted || atmForm.surName.$touched) && atmForm.surName.$invalid"><p class="help-block" ng-show="atmForm.surName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="255"></p></div></div><label class="col-sm-3 col-xs-4 profile-reponsive control-label"></label></div><div class="form-group"><label class="col-sm-3 col-xs-4 profile-reponsive control-label"></label><div class="textRed col-sm-6 col-xs-8">* Th\xF4ng tin b\u1EAFt bu\u1ED9c</div></div></form><div class="title-invetory"><button class="btn gtd-btn-default gtd-btn-large" type="submit" ng-click="vm.registry()"><span class="uppercase ng-scope">\u0110\u0103ng k\xFD</span></button></div></div></div>');
        $templateCache.put('app/hotels/booking/hotel.booking.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-sm-12"><gtd-flight-booking-progress booking-model="vm.bookingModel" mode="\'hotel\'"></gtd-flight-booking-progress></div></div><div class="row"><div class="col-md-8 booking-wrapper"><form style="overflow: hidden" role="form" name="bookingForm" novalidate ng-submit="vm.doConfirm(bookingForm)"><ng-switch on="vm.bookingModel.curStep == 1"><gtd-booking-hotel-info booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true" id="action-bar-mobile"></gtd-booking-hotel-info><gtd-hotel-booking-customer-info booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true"></gtd-hotel-booking-customer-info><gtd-hotel-booking-contact-info booking-model="vm.bookingModel" ng-switch-when="true"></gtd-hotel-booking-contact-info><gtd-hotel-booking-billing-info booking-model="vm.bookingModel" ng-switch-when="true"></gtd-hotel-booking-billing-info><gtd-booking-important-info selected-hotel-product="vm.selectedHotelProduct" change-hook="vm.termChange" ng-switch-when="true"></gtd-booking-important-info></ng-switch><ng-switch on="vm.bookingModel.curStep == 2"><gtd-booking-hotel-info booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true"></gtd-booking-hotel-info><gtd-hotel-booking-customer-info-view booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true"></gtd-hotel-booking-customer-info-view><gtd-hotel-booking-contact-info-view booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" mode="flight" ng-switch-when="true"></gtd-hotel-booking-contact-info-view><gtd-hotel-booking-billing-info-view booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true"></gtd-hotel-booking-billing-info-view></ng-switch><ng-switch on="vm.bookingModel.curStep == 3"><gtd-booking-hotel-info booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true"></gtd-booking-hotel-info><gtd-booking-payment payment-model="vm.paymentModel" booking-model="vm.bjson" booking-model-one-way="vm.bjson" ng-switch-when="true"></gtd-booking-payment></ng-switch><div class="action-bar visible-md visible-lg"><!--<div class="term-zone">--><!--<span data-translate="flight.booking.terms"/> --><!--</div>--><div class="buttons-zone"><span class="fa fa-angle-left" ng-show="vm.bookingModel.curStep == 1"></span> <span data-translate="flight.booking.back" ng-click="vm.doBack()" ng-show="vm.bookingModel.curStep == 1"></span> <button class="btn gtd-btn-default gtd-btn-large pull-right margin-bottom-30" id="button" ng-disabled="bookingForm.$invalid || (!vm.checkedTerm && vm.bookingModel.curStep === 1)" type="submit"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div><div class="submit-bar-mobile row hidden-md hidden-lg"><div class="pull-left text-danger price">{{vm.bjson | bookingPriceInfo:\'total_price\' | number}} VN\u0110</div><div class="pull-right"><button class="btn gtd-btn-default pull-right" type="submit" ng-disabled="bookingForm.$invalid || (!vm.checkedTerm && vm.bookingModel.curStep === 1)"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></form></div><div class="col-md-4 booking-summary-wrapper action-bar-desktop"><gtd-hotel-booking-summary booking-model="vm.bookingModel" bjson="vm.bjson" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" payment-model="vm.paymentModel" show-coupon="true"></gtd-hotel-booking-summary><gtd-hotel-booking-summary-details booking-model="vm.bookingModel" bjson="vm.bjson" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" payment-model="vm.paymentModel" show-coupon="true"></gtd-hotel-booking-summary-details></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/hotels/booking/hotel.booking.result.html', '<div class="hotel-booking-result-outer-wrapper"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-sm-12"><div class="portlet"><div class="porlet-body"><div class="hotel-booking-result-inner-wrapper"><!--<ng-switch on="vm.paymentModel.paymentOption == \'TRANSFER\'">--><div class="header-zone"><div class="header-title"><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'" data-translate="hotel.result.ss.FAILED">\u0110\u1EB6T PH\xD2NG TH\u1EA4T B\u1EA0I </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" data-translate="hotel.result.ss.CONFIRMED">THANH TO\xC1N \u0110\u1EB6T PH\xD2NG TH\xC0NH C\xD4NG </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'" data-translate="hotel.result.ss.BOOKING_ON_PROCESS">\u0110ANG TH\u1EF0C HI\u1EC6N GI\u1EEE PH\xD2NG </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\'" data-translate="hotel.result.ss.TICKET_ON_PROCESS">\u0110ANG TH\u1EF0C HI\u1EC6N \u0110\u1EB6T PH\xD2NG </span><!--\n                                            <ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'CANCELLED\'">\n                                                <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'REFUNDED\'"> \u0110\xC3 HU\u1EF6 V\xC9 V\xC0 HO\xC0N TI\u1EC0N TH\xC0NH </span>\n                                                <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\'">\u0110\xC3 HU\u1EF6 V\xC9 V\xC0 CH\u01AFA HO\xC0N TI\u1EC0N </span>\n                                            </ng-switch>\n                                            --><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'EXPIRED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" data-translate="hotel.result.eps.PENDING">QU\xC1 H\u1EA0N THANH TO\xC1N </span><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" data-translate="hotel.result.eps.FAILED">QU\xC1 H\u1EA0N THANH TO\xC1N</span> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\'" data-translate="hotel.result.eps.SUCCEEDED">\u0110\xC3 THANH TO\xC1N - KH\xD4NG \u0110\u1EB6T \u0110\u01AF\u1EE2C PH\xD2NG</span></ng-switch><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" data-translate="hotel.result.bps.PENDING">\u0110\u1EB6T PH\xD2NG TH\xC0NH C\xD4NG</span> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" data-translate="hotel.result.bps.FAILED">THANH TO\xC1N L\u1ED6I</span><!-- issuedStatus is FAILED or PENDING  --> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\'" data-translate="hotel.result.bps.SUCCEEDED">THANH TO\xC1N TH\xC0NH C\xD4NG, \u0110\u1EB6T PH\xD2NG L\u1ED6I</span></ng-switch></div><div class="header-title-sub"><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'" data-translate="hotel.result.msg1.ss.FAILED">C\u1EA3m \u01A1n qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Th\u1EADt ti\u1EBFc! Th\u1EF1c hi\u1EC7n \u0111\u1EB7t v\xE9 c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 th\u1EA5t b\u1EA1i.<br>Qu\xFD kh\xE1ch vui l\xF2ng ki\u1EC3m tra l\u1EA1i h\xE0nh tr\xECnh ho\u1EB7c k\u1EBFt n\u1ED1i Internet. </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" data-translate="hotel.result.msg1.ss.CONFIRMED">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email. </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'" data-translate="hotel.result.msg1.ss.BOOKING_ON_PROCESS">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. V\xE9 c\u1EE7a qu\xFD kh\xE1ch \u0111ang \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n gi\u1EEF ch\u1ED7.<br>Ch\xFAng t\xF4i s\u1EBD g\u1EEDi mail chi ti\u1EBFt cho qu\xFD kh\xE1ch ngay sau khi gi\u1EEF ch\u1ED7 th\xE0nh c\xF4ng </span><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\'" data-translate="hotel.result.msg1.ss.TICKET_ON_PROCESS">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng. Ch\xFAng t\xF4i \u0111ang ti\u1EBFn h\xE0nh xu\u1EA5t v\xE9.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email ngay sau khi xu\u1EA5t v\xE9 th\xE0nh c\xF4ng.</span><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'EXPIRED\'"><span ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'  && vm.bkgroup.bookingInfo.supplierBookingStatus != \'BOOKED\' ">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Y\xEAu c\u1EA7u \u0111\u1EB7t ph\xF2ng c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 qu\xE1 h\u1EA1n thanh to\xE1n. Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EB7t ph\xF2ng kh\xE1c.</span></ng-switch><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\' && vm.bkgroup.bookingInfo.supplierBookingStatus != \'EXPIRED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'  " data-translate="hotel.result.msg1.bps.PENDING">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Y\xEAu c\u1EA7u \u0111\u1EB7t ch\u1ED7 c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n th\xE0nh c\xF4ng.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email. </span><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" data-translate="hotel.result.msg1.bps.FAILED">C\u1EA3m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t ph\xF2ng th\xE0nh c\xF4ng.<br>Qu\xFD kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email. </span><!-- issuedStatus is FAILED or PENDING  --> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\' && (vm.bkgroup.bookingInfo.paymentType == \'ATM_DEBIT\' || vm.bkgroup.bookingInfo.paymentType == \'CREDIT\')" data-translate="hotel.result.msg1.bps.SUCCEEDED">C\xE1m \u01A1n b\u1EA1n \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng tuy nhi\xEAn c\xF3 l\u1ED7i trong qu\xE1 tr\xECnh xu\u1EA5t v\xE9. </span><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\' && vm.bkgroup.bookingInfo.paymentType == \'BALANCE\'" data-translate="hotel.result.msg1.bps.SUCCEEDED_BALANCE">C\xE1m \u01A1n b\u1EA1n \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng tuy nhi\xEAn c\xF3 l\u1ED7i trong qu\xE1 tr\xECnh xu\u1EA5t v\xE9.</span></ng-switch></div><div class="header-icon"><img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\' || vm.bkgroup.bookingInfo.supplierBookingStatus ==\'PENDING\'" src="../../../content/images/pay-fail-icon.png"> <img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" src="../../../content/images/pay-success-icon.png"> <img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'" src="../../../content/images/icon-bookingPending-Dathanhtoan.svg"> <img ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\'" src="../../../content/images/icon-bookingPending-Dathanhtoan.svg"><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\'"><img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" src="../../../content/images/pay-reserve-button.png"> <img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'" src="../../../content/images/pay-fail-icon.png"><!-- issuedStatus is FAILED or PENDING  --> <img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\'" src="../../../content/images/pay-fail-icon.png"></ng-switch><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'EXPIRED\'"><img ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'" src="../../../content/images/pay-fail-icon.png"></ng-switch></div><div class="header-remind"><div ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'FAILED\'">Ch\xFAng t\xF4i s\u1EBD s\u1EDBm li\xEAn h\u1EC7 v\u1EDBi Qu\xFD kh\xE1ch \u0111\u1EC3 h\u1ED7 tr\u1EE3 ho\xE0n th\xE0nh vi\u1EC7c \u0110\u1EB7t kh\xE1ch s\u1EA1n.<br>M\xE3 \u0111\u1EB7t ch\u1ED7 c\u1EE7a Qu\xFD kh\xE1ch ID: {{vm.bkgroup.bookingInfo.bookingNumber}}</div><span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'CONFIRMED\'" data-translate="hotel.result.remind.ss.CONFIRMED">Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt h\xE0nh tr\xECnh v\xE0 c\xF3 m\u1EB7t t\u1EA1i s\xE2n bay tr\u01B0\u1EDBc 120\' gi\u1EDD kh\u1EDFi h\xE0nh \u0111\u1EC3 l\xE0m th\u1EE7 t\u1EE5c.<br>Ch\xFAc qu\xFD kh\xE1ch c\xF3 m\u1ED9t chuy\u1EBFn \u0111i t\u1ED1t \u0111\u1EB9p. </span><!--\n                                            <span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'BOOKING_ON_PROCESS\'">\n                                            </span>\n                                            <span ng-show="vm.bkgroup.bookingInfo.supplierBookingStatus ==\'TICKET_ON_PROCESS\'">\n                                            </span>\n                                            --><ng-switch on="vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\'"><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\'">Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt \u0111\u1EB7t ph\xF2ng v\xE0 thanh to\xE1n tr\u01B0\u1EDBc {{vm.bkgroup.bookingInfo.timeToLive | momentdate:\'datehour0\'}} \u0111\u1EC3 ho\xE0n th\xE0nh \u0111\u1EB7t ph\xF2ng \u0111\xFAng th\u1EDDi h\u1EA1n. </span><span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'">Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt \u0111\u1EB7t ph\xF2ng v\xE0 thanh to\xE1n tr\u01B0\u1EDBc {{vm.bkgroup.bookingInfo.timeToLive | momentdate:\'datehour0\'}} \u0111\u1EC3 ho\xE0n th\xE0nh \u0111\u1EB7t ph\xF2ng \u0111\xFAng th\u1EDDi h\u1EA1n. </span><!-- issuedStatus is FAILED or PENDING  --> <span ng-switch-when="true" ng-show="vm.bkgroup.bookingInfo.paymentStatus ==\'SUCCEEDED\' && vm.bkgroup.bookingInfo.issuedStatus != \'SUCCEEDED\'" data-translate="hotel.result.remind.bps.SUCCEEDED">Ch\xFAng t\xF4i s\u1EBD s\u1EDBm li\xEAn h\u1EC7 v\u1EDBi Qu\xFD kh\xE1ch \u0111\u1EC3 h\u1ED7 tr\u1EE3 ho\xE0n th\xE0nh vi\u1EC7c \u0111\u1EB7t v\xE9.</span></ng-switch></div><div class="header-note" ng-show=" vm.bkgroup.bookingInfo.supplierBookingStatus == \'BOOKED\' &&  vm.bkgroup.bookingInfo.supplierBookingStatus != \'BOOKED\' && vm.bkgroup.bookingInfo.supplierBookingStatus != \'EXPIRED\'||  vm.bkgroup.bookingInfo.paymentStatus ==\'PENDING\' &&vm.bkgroup.bookingInfo.paymentStatus ==\'FAILED\'"><div><span>Khi th\u1EF1c hi\u1EC7n thanh to\xE1n chuy\u1EC3n kho\u1EA3n, Qu\xFD kh\xE1ch vui l\xF2ng nh\u1EADp ghi ch\xFA v\u1EDBi n\u1ED9i dung sau:</span></div><div class="header-note-em">"<span>THANH TOAN CHO BOOKING </span><span style="color:red">{{vm.bkgroup.bookingInfo.passengerNameRecords}} </span>"</div></div></div><!--</ng-switch>--><!--<ng-switch on="(vm.paymentModel.paymentOption == \'CREDIT\' || vm.paymentModel.paymentOption == \'ATM_DEBIT\') &&  !vm.paymentModel.payFailed">--><!--<div class="header-zone" ng-switch-when="true">--><!--<div class="header-title">--><!--<span>THANH TO\xC1N TH\xC0NH C\xD4NG</span>--><!--</div>--><!--<div class="header-title-sub">--><!--<span>--><!--C\xE1m \u01A1n b\u1EA1n \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n thanh to\xE1n \u0111\u1EB7t v\xE9 th\xE0nh c\xF4ng.--><!--Qu\xED kh\xE1ch s\u1EBD nh\u1EADn \u0111\u01B0\u1EE3c x\xE1c nh\u1EADn chi ti\u1EBFt \u0111\u1EB7t ch\u1ED7 th\xF4ng qua email.--><!--</span>--><!--</div>--><!--<div class="header-icon">--><!--<img src="../../../content/images/pay-success-icon.png"/>--><!--</div>--><!--<div class="header-remind">--><!--<span>--><!--Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u1EEBng qu\xEAn ki\u1EC3m tra chi ti\u1EBFt h\xE0nh tr\xECnh v\xE0 c\xF3 m\u1EB7t t\u1EA1i s\xE2n bay tr\u01B0\u1EDBc 120\u2019 gi\u1EDD kh\u1EDFi h\xE0nh--><!--<br/>--><!--\u0111\u1EC3 l\xE0m th\u1EE7 t\u1EE5c. Ch\xFAc Qu\xFD kh\xE1ch c\xF3 m\u1ED9t chuy\u1EC1n \u0111i t\u1ED1t \u0111\u1EB9p.--><!--</span>--><!--</div>--><!--</div>--><!--</ng-switch>--><!--<ng-switch on="vm.paymentModel.payFailed == true">--><!--<div class="header-zone" ng-switch-when="true">--><!--<div class="header-title">--><!--<span>\u0110\u1EB6T V\xC9 TH\u1EA4T B\u1EA0I</span>--><!--</div>--><!--<div class="header-title-sub">--><!--<span>--><!--C\xE1m \u01A1n Qu\xFD kh\xE1ch \u0111\xE3 s\u1EED d\u1EE5ng d\u1ECBch v\u1EE5 c\u1EE7a Gotadi. Th\u1EADt ti\u1EBFc! Th\u1EF1c hi\u1EC7n \u0111\u1EB7t v\xE9 c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 th\u1EA5t b\u1EA1i.--><!--<br/>--><!--Qu\xFD kh\xE1ch vui l\xF2ng ki\u1EC3m tra l\u1EA1i h\xE0nh tr\xECnh ho\u1EB7c k\u1EBFt n\u1ED1i Internet.--><!--</span>--><!--</div>--><!--<div class="header-icon">--><!--<img src="../../../content/images/pay-fail-icon.png"/>--><!--</div>--><!--<div class="header-remind">--><!--<span>--><!--Ch\xFAng t\xF4i s\u1EBD s\u1EDBm li\xEAn h\u1EC7 v\u1EDBi Quy kh\xE1ch \u0111\u1EC3 h\u1ED7 tr\u1EE3 ho\xE0n th\xE0nh vi\u1EC7c \u0110\u1EB7t v\xE9.--><!--<br/>--><!--M\xE3 \u0111\u1EB7t ch\u1ED7 c\u1EE7a Qu\xFD kh\xE1ch ID: ABC123456--><!--</span>--><!--</div>--><!--</div>--><!--</ng-switch>--><div class="detail-zone"><gtd-hotel-info booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-room="vm.selectedHotelRoom" selected-hotel-product="vm.selectedHotelProduct" jsonmodel="vm.bkgroup"></gtd-hotel-info></div><div class="footer-zone"><div class="detail-footer">Vui l\xF2ng li\xEAn h\u1EC7 v\u1EDBi ch\xFAng t\xF4i n\u1EBFu Qu\xFD kh\xE1ch c\xF3 y\xEAu c\u1EA7u thay \u0111\u1ED5i \u0111\u1EB7t ph\xF2ng, th\xEAm ph\xF2ng ho\u1EB7c th\u1EAFc m\u1EAFc c\u1EA7n gi\u1EA3i \u0111\xE1p cho booking</div><div class="contact-footer"><div><span class="fa fa-phone">Hotline <span class="bold">1900 9002</span></span></div><div><span class="fa fa-phone">\u0110i\u1EC7n tho\u1EA1i <span class="bold">(028) 62 850 850 - (028) 62 857 857</span></span></div><div>VP HCM 194 Nguy\u1EC5n Th\u1ECB Minh Khai, P6, Qu\u1EADn 3, HCM</div><div>VP H\xE0 N\u1ED9i 47 Phan Chu Trinh, Qu\u1EADn Ho\xE0n Ki\u1EBFm, H\xE0 N\u1ED9i</div></div></div></div></div></div></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/hotels/details/hotel.detail.html', '<div class="sm-change-action"><div class="btn-change sm-change-iti" ng-click="changeItinerary()"><i class="fa fa-exchange"></i> Thay \u0111\u1ED5i h\xE0nh tr\xECnh</div></div><gtd-hotel-search-header></gtd-hotel-search-header><div class="container"><div class="page-content-inner"><div class="ghost-loading-detail"><div ng-if="vm.isLoading" class="row hotel-padding hotel-border-radius"><div class="left-ghost-loading"><div class="text-line-1"></div><div class="text-line-5"></div><div class="text-line-img"></div></div></div><div ng-if="vm.isLoading" class="row hotel-padding hotel-border-radius"><div class="hotel-detail-change-ghost-loading"><div class="col-sm-3"><div class="text-line"></div></div><div class="col-sm-3"><div class="text-line"></div></div><div class="col-sm-3"><div class="text-line"></div></div><div class="col-sm-3"><div class="text-line"></div></div></div></div><div ng-if="vm.isLoading" class="row hotel-padding hotel-border-radius"><div class="hotel-detail-room-ghost-loading bg-white hotel-padding hotel-border-radius hotel-border"><div class="room-table-header room-table-row row no-margin"><div class="col-sm-6 col-xs-12 uppercase detail-border-right padding-left-15 padding-top-15"><div class="text-line"></div></div><div class="col-sm-3 hidden-xs col-price detail-border-right padding-left-15 padding-top-15 uppercase"><div class="text-line"></div></div><div class="col-sm-3 hidden-xs col-price padding-left-15 padding-top-15 uppercase"><div class="text-line-1"></div></div></div><div class="row-seperator" style="margin-bottom: 0px"></div><div class="room-table-n"><div class="room-table-row row"><div class="col-sm-6 col-xs-8 col-img"><div class="col-xs-4 no-margin-left no-margin-right no-padding-left no-padding-right"><div class="text-line-2"></div></div><div class="col-xs-8 padding-t-10"><div class="padding-t-10"><div class="text-line-3"></div><div class="info-item"><div class="text-line-3"></div><div class="quantity"><div class="text-line-3"></div></div></div><div class="red-text"><div class="text-line-3"></div></div></div></div></div><div class="col-xs-3 hidden-xs"><div class="padding-t-10"><div class="margin-top-5"><div class="red-text"><div class="text-line-3"></div></div></div><div class="margin-top-5"><div class="text-line-4"></div></div><div class="hotel-features-icons"><div class="text-line-3"></div></div><div class="hotel-features-icons"><div class="text-line-4"></div></div><div class="hotel-features-icons"><div class="text-line-3"></div></div></div></div><div class="col-sm-3 col-xs-4 col-price centre" style="text-align: right"><div class="margin-top-10 margin-right-15 hidden-xs"><div class="text-line-3"></div></div><div class="margin-right-15"><div class="text-line-4"></div></div><div class="col-action-item margin-right-15"><div class="text-line-3"></div></div><div class="col-action-item margin-right-15 pop-tax"><div class="text-line-4"></div></div><div class="col-action-item margin-right-15 booking-text-centre margin-bottom-5"><div class="text-line-3"></div></div><div class="col-action-item margin-bottom-10 margin-right-15"></div></div></div></div></div><div class="hotel-detail-another-room-ghost-loading bg-white hotel-padding hotel-border-radius hotel-border"><div class="room-table-n"><div class="room-table-row row"><div class="col-sm-6 col-xs-8 col-img"><div class="col-xs-4 no-margin-left no-margin-right no-padding-left no-padding-right"><div class="text-line-2"></div></div><div class="col-xs-8 padding-t-10"><div class="padding-t-10"><div class="text-line-3"></div><div class="info-item"><div class="text-line-3"></div><div class="quantity"><div class="text-line-3"></div></div></div><div class="red-text"><div class="text-line-3"></div></div></div></div></div><div class="col-xs-3 hidden-xs"><div class="padding-t-10"><div class="margin-top-5"><div class="red-text"><div class="text-line-3"></div></div></div><div class="margin-top-5"><div class="text-line-4"></div></div><div class="hotel-features-icons"><div class="text-line-3"></div></div><div class="hotel-features-icons"><div class="text-line-4"></div></div><div class="hotel-features-icons"><div class="text-line-3"></div></div></div></div><div class="col-sm-3 col-xs-4 col-price centre" style="text-align: right"><div class="margin-top-10 margin-right-15 hidden-xs"><div class="text-line-3"></div></div><div class="margin-right-15"><div class="text-line-4"></div></div><div class="col-action-item margin-right-15"><div class="text-line-3"></div></div><div class="col-action-item margin-right-15 pop-tax"><div class="text-line-4"></div></div><div class="col-action-item margin-right-15 booking-text-centre margin-bottom-5"><div class="text-line-3"></div></div><div class="col-action-item margin-bottom-10 margin-right-15"></div></div></div></div></div><div class="hotel-detail-another-room-ghost-loading bg-white hotel-padding hotel-border-radius hotel-border"><div class="room-table-n"><div class="room-table-row row"><div class="col-sm-6 col-xs-8 col-img"><div class="col-xs-4 no-margin-left no-margin-right no-padding-left no-padding-right"><div class="text-line-2"></div></div><div class="col-xs-8 padding-t-10"><div class="padding-t-10"><div class="text-line-3"></div><div class="info-item"><div class="text-line-3"></div><div class="quantity"><div class="text-line-3"></div></div></div><div class="red-text"><div class="text-line-3"></div></div></div></div></div><div class="col-xs-3 hidden-xs"><div class="padding-t-10"><div class="margin-top-5"><div class="red-text"><div class="text-line-3"></div></div></div><div class="margin-top-5"><div class="text-line-4"></div></div><div class="hotel-features-icons"><div class="text-line-3"></div></div><div class="hotel-features-icons"><div class="text-line-4"></div></div><div class="hotel-features-icons"><div class="text-line-3"></div></div></div></div><div class="col-sm-3 col-xs-4 col-price centre" style="text-align: right"><div class="margin-top-10 margin-right-15 hidden-xs"><div class="text-line-3"></div></div><div class="margin-right-15"><div class="text-line-4"></div></div><div class="col-action-item margin-right-15"><div class="text-line-3"></div></div><div class="col-action-item margin-right-15 pop-tax"><div class="text-line-4"></div></div><div class="col-action-item margin-right-15 booking-text-centre margin-bottom-5"><div class="text-line-3"></div></div><div class="col-action-item margin-bottom-10 margin-right-15"></div></div></div></div></div></div></div><div ng-if="!vm.isLoading" class="search-page search-content-3 hotel-detail-wrapper"><div class="row"><div class="col-md-12" style="margin-bottom: 10px"><a ui-sref="hotel-search-home" style="text-decoration: none"><span data-translate="global.home"></span> </a><a style="text-decoration: none" ng-click="vm.backSearchResult()"><!-- <span ng-if="vm.selectedDestination.name != null"> \n                            >\n                            {{ vm.selectedDestination.name }}\n                        </span> --> <span>> {{ vm.selectedDestinationsHotel }} </span></a><span>> {{ vm.selectedHotel.hotelMeta.name }}</span></div></div><div class="col-md-12 text-danger bold h5 gtd-shadow hotel-border-radius hotel-padding alert alert-danger" ng-if="!(vm.selectedHotel.products && vm.selectedHotel.products.length > 0)"><span class="" role="alert" data-translate="hotel.noroomresultext">Ch\u1EADm ch\xE2n m\u1EA5t r\u1ED3i. Ph\xF2ng n\xE0y v\u1EEBa \u0111\u01B0\u1EE3c b\xE1n h\u1EBFt tr\xEAn website c\u1EE7a ch\xFAng t\xF4i. Vui l\xF2ng ch\u1ECDn ph\xF2ng kh\xE1c ho\u1EB7c thay \u0111\u1ED5i th\u1EDDi gian nh\u1EADn ph\xF2ng.</span></div><div ng-if="(vm.selectedHotel.products && vm.selectedHotel.products.length > 0)" class="gtd-shadow hotel-border-radius bg-white hotel-padding"><div class="row"><div class="col-md-12 hotel-detail-header"><gtd-hotel-detail-header hotel-model="vm.selectedHotel"></gtd-hotel-detail-header></div></div><div class="row"><div class="col-md-12 hotel-detail-image"><gtd-hotel-detail-image hotel-model="vm.selectedHotel" search-options="vm.searchOptions"></gtd-hotel-detail-image></div></div></div><div class="row margin-top-20"><div class="col-md-12 hotel-detail-change"><gtd-hotel-detail-change hotel-id="vm.hotelId"></gtd-hotel-detail-change></div></div><div ng-if="(vm.selectedHotel.products && vm.selectedHotel.products.length > 0)" class="row margin-top-20"><div id="hotel-detail-zone" class="col-md-12 hotel-detail-room" ng-if="vm.selectedHotel.products && vm.selectedHotel.products.length > 0"><gtd-hotel-detail-room hotel-model="vm.selectedHotel" search-options="vm.searchOptions"></gtd-hotel-detail-room></div></div><div ng-if="(vm.selectedHotel.products && vm.selectedHotel.products.length > 0)" class="row hotel-border hotel-border-radius bg-white hotel-padding margin-top-20" style="margin-left:1px; margin-right: 1px; margin-bottom: 20px"><div class="col-md-12 hotel-detail-info"><gtd-hotel-detail-info hotel-model="vm.selectedHotel" search-options="vm.searchOptions"></gtd-hotel-detail-info></div></div></div></div></div><div class="hotel-search-footer"><gtd-flight-search-footer></gtd-flight-search-footer></div>');
        $templateCache.put('app/hotels/search/fastgo.hotel.search.home.html', '<div class="formSearch"><div class="container reset-container"><div class="hotel-search-home" style="margin-left: auto; margin-right: auto"><div class="row" ng-if="!vm.enable_template"><div class="col-md-7"><gtd-hotel-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div><div class="col-md-5 hidden-sm hidden-xs"><div class="hotel-header-ads porlet"><div class="listSliderHome Hotel"><div class="groupSlider"><div id="slider1_container"><div id="slider_content" class="uSlider" u="slides"></div><div u="navigator" class="jssorb13"><div u="prototype"></div></div></div></div></div></div></div></div><div ng-if="vm.enable_template"><gtd-hotel-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div></div></div>');
        $templateCache.put('app/hotels/search/hotel.search.confirmbooking.html', '<!--<div class="modal-header">--><!--<button type="button" class="close" data-dismiss="modal" aria-hidden="true"--><!--ng-click="vm.cancel()">&times;</button>--><!--<h4 class="modal-title" data-translate="login.title">Sign in</h4>--><!--</div>--><div class="flight-search-confirmbooking"><div class="modal-body"><div class="row" ng-switch="vm.searchOptions.searchType == \'roundtrip\'"><div class="col-md-12"><span class="flight-booking-title" data-translate="flight.search.confirm.title"></span><div class="flight-booking-header"><div class="left-info"><span data-translate="flight.search.confirm.depart"></span>&nbsp; <span>{{vm.searchOptions.adultNo}} kh\xE1ch</span></div><div class="right-info"><span>{{vm.searchOptions.departureDate}}</span></div></div><div class="flight-booking-details"><div class="start-div"></div><div class="logo-airline"><div><img src="../../../content/images/airline0.png"></div><div><span>Vietnam Airlines A321</span></div></div><div class="from-airline"><div><span class="time-text">10:40</span></div><div><span class="location-text">{{vm.searchOptions.fromAirPortTxt}}</span></div><div><span>S\xE2n bay qu\u1ED1c t\u1EBF T\xE2n S\u01A1n Nh\u1EA5t</span></div></div><div class="loading-info"><div class="line1"><span class="uppercase">2h35m</span></div><div class="line2"><span class="plane-taking-off"><img src="../../../content/images/plane-taking-off.png"></span></div><div class="line3"><span class="">Bay th\u1EB3ng</span></div></div><div class="from-airline"><div><span class="time-text">14:15</span></div><div><span class="location-text">{{vm.searchOptions.toAirPortTxt}}</span></div><div><span>S\xE2n bay qu\u1ED1c t\u1EBF Hongkong</span></div></div><div class="flight-class"><div><span>Economy</span></div></div></div><div class="flight-booking-header" ng-switch-when="true"><div class="left-info"><span data-translate="flight.search.confirm.return"></span>&nbsp; <span>{{vm.searchOptions.adultNo}} kh\xE1ch</span></div><div class="right-info"><span>{{vm.searchOptions.returnDate}}</span></div></div><div class="flight-booking-details" ng-switch-when="true"><div class="start-div"></div><div class="logo-airline"><div><img src="../../../content/images/airline0.png"></div><div><span>Vietnam Airlines A321</span></div></div><div class="from-airline"><div><span class="time-text">10:40</span></div><div><span class="location-text">{{vm.searchOptions.toAirPortTxt}}</span></div><div><span>S\xE2n bay qu\u1ED1c t\u1EBF T\xE2n S\u01A1n Nh\u1EA5t</span></div></div><div class="loading-info"><div class="line1"><span class="uppercase">2h35m</span></div><div class="line2"><span class="plane-taking-off"><img src="../../../content/images/plane-taking-off.png"></span></div><div class="line3"><span class="">Bay th\u1EB3ng</span></div></div><div class="from-airline"><div><span class="time-text">14:15</span></div><div><span class="location-text">{{vm.searchOptions.fromAirPortTxt}}</span></div><div><span>S\xE2n bay qu\u1ED1c t\u1EBF Hongkong</span></div></div><div class="flight-class"><div><span>Economy</span></div></div></div><div class="flight-booking-footer"><button class="btn gtd-btn-medium" data-dismiss="modal" aria-hidden="true" ng-click="vm.cancel()"><span data-translate="flight.search.confirm.cancel"></span></button> <button class="btn gtd-btn-medium btn-red" ng-click="vm.doSubmit()"><span data-translate="flight.search.confirm.submit"></span></button></div></div></div></div></div>');
        $templateCache.put('app/hotels/search/hotel.search.home.html', '<div class="formSearch"><div class="container reset-container"><div class="hotel-search-home" style="margin-left: auto; margin-right: auto"><div class="row" ng-if="!vm.enable_template"><div class="col-md-7" style="margin: auto; float: none"><gtd-hotel-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div><div ng-if="vm.enable_template"><gtd-hotel-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div></div></div><!--div class="mainPage"  ng-if="!vm.enable_template">\n    <div class="container reset-container" >\n        <div class="flight-search-home">\n            <div class="row">\n                <div class="col-md-12 hotel-header-carousel">\n                    <div class="listCaption">\n                        <div class="item">\n                            <div class="icon"><img src="../../../content/images/icon-sellingpoint.svg" class="img-responsive" /></div>\n                            <div class="content-zone">\n                                <div class="title">{{\'hotel.search.home.bestprice\' |translate}}</div>\n                                <div class="content">{{\'hotel.search.home.allservice\' |translate}}</div>\n                            </div>\n                        </div>\n                        <div class="item">\n                            <div class="icon"><img src="../../../content/images/icon-ho-tro.svg" class="img-responsive" /></div>\n                            <div class="content-zone">\n                                <div class="title">{{\'hotel.search.home.care\' |translate}}</div>\n                                <div class="content">{{\'hotel.search.home.callcenter\' |translate}}</div>\n                            </div>\n                        </div>\n                        <div class="item">\n                            <div class="icon"><img src="../../../content/images/icon-thue.svg" class="img-responsive" /></div>\n                            <div class="content-zone">\n                                <div class="title">{{\'hotel.search.home.vat\' |translate}}</div>\n                                <div class="content">{{\'hotel.search.home.vat2\' |translate}}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <div class="subscrice">\n        <div class="container reset-container" >\n            <div class="imgApp"><img src="../../../content/images/3caidt.png" class="img-responsive" /></div>\n            <div class="row">\n                <div class="col-md-4">\n\n                </div>\n                <div class="col-md-6">\n                    <div class="form-subscrice">\n                        <div class="form-group">\n                            <div class="email">\n                                <label for="email">{{\'hotel.search.home.app1\' |translate}}</label>\n                                <input type="text" class="form-text"  placeholder="{{\'hotel.search.home.plchdr.entermail\' |translate}}" id="email"/>\n                                <div class="send">\n                                    <button class="btnSend" ng-click="subscriceEmail()"><i class="fa fa-envelope"></i> &nbsp; {{\'hotel.search.home.send\' |translate}}</button>\n                                </div>\n                            </div>\n                            <div class="messageResult"></div>\n                        </div>\n                        <div class="downApp">\n                            <div class="name-tk">{{\'hotel.search.home.app2\' |translate}}</div>\n                            <div class="icon-store"> <a href="https://itunes.apple.com/us/app/gotadi-flight-booking/id1234937358?mt=8" target="_blank"> <img src="../../../content/images/app-store.jpg" class="img-responsive" /></a> </div>\n                            <div class="icon-store"> <a href="https://play.google.com/store/apps/details?id=com.vn.gotadi.mobileapp" target="_blank"> <img src="../../../content/images/google-play.jpg" class="img-responsive" /></a> </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="member-benefits">\n        <div class="container">\n            <div class="litsBenefits">\n                <div class="heading-name">{{\'hotel.search.home.benefit\' |translate}}</div>\n                <div class="row">\n                    <div class="col-md-4">\n                        <div class="item">\n                            <div class="name">{{\'hotel.search.home.price1\' |translate}}</div>\n                            <div class="iconBf">\n                                <img class="header-icon" src="../../../content/images/icon-price-good.svg"/>\n                            </div>\n                            <p>{{\'hotel.search.home.price2\' |translate}}</p>\n                        </div>\n                    </div>\n                    <div class="col-md-4">\n                        <div class="item">\n                            <div class="name">{{\'hotel.search.home.deal1\' |translate}}</div>\n                            <div class="iconBf">\n                                <img class="header-icon" src="../../../content/images/icon-uu-dai.svg"/>\n                            </div>\n                            <p>{{\'hotel.search.home.deal2\' |translate}}</p>\n                        </div>\n                    </div>\n                    <div class="col-md-4">\n                        <div class="item">\n                            <div class="name">{{\'hotel.search.home.point1\' |translate}}</div>\n                            <div class="iconBf">\n                                <img class="header-icon" src="../../../content/images/icon-tichluydiem.svg"/>\n                            </div>\n                            <p>{{\'hotel.search.home.point2\' |translate}}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="partner">\n        <div class="container">\n            <div class="heading-name">{{\'hotel.search.home.partner\' |translate}}</div>\n            <div class="listPartner">\n                <div id="partner-carousel" class="partner-carousel owl-carousel owl-theme col-md-12 no-padding-left no-padding-right">\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/logobankplus1.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/TIKI.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/LOGO-VIB-Blue.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/zalopay.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/logo-viviet.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/partner/momo.png" class="img-responsive"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script type="text/javascript">\n            $("#partner-carousel").owlCarousel({\n                autoPlay: 3000, //Set AutoPlay to 3 seconds\n                dots: false,\n                items: 6,\n                nav: false,\n                responsive : {\n                    280 : { items : 3, dots: true },\n                    480 : { items : 4, dots: true },\n                    768 : { items : 5, dots: true  },\n                    991 : { items : 6, dots: true  },\n                }\n            });\n        </script>\n    </div>\n    <div class="trademark">\n        <div class="container">\n            <div class="heading-name">{{\'hotel.search.home.brands\' |translate}}</div>\n            <div class="listTrademark">\n                <div id="trademark-carousel" class="trademark-carousel owl-carousel owl-theme col-md-12 no-padding-left no-padding-right">\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/acprail.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/jeju.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/k6.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/hawai.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/tk.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/db.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/goodwill.png" class="img-responsive"></div>\n                    </div>\n                    <div class="item">\n                        <div class="item-icon"><img src="../../../content/images/trademark/bhaya.png" class="img-responsive"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script type="text/javascript">\n            $("#trademark-carousel").owlCarousel({\n                autoPlay: 3000, //Set AutoPlay to 3 seconds\n                dots: true,\n                items: 8,\n                responsive : {\n                    280 : { items : 3, dots: true },\n                    480 : { items : 4, dots: true },\n                    768 : { items : 5, dots: true  },\n                    991 : { items : 8, dots: true  },\n                }\n            });\n        </script>\n    </div>\n</div-->');
        $templateCache.put('app/hotels/search/hotel.search.html', '<!--<div class="hotel-search-header">--><div class="sm-change-action"><div class="btn-change sm-change-filter" ng-click="filterItinerary()"><i class="fa fa-filter"></i> B\u1ED9 l\u1ECDc</div><div class="btn-change sm-change-iti" ng-click="changeItinerary()"><i class="fa fa-exchange"></i> Thay \u0111\u1ED5i h\xE0nh tr\xECnh</div></div><gtd-hotel-search-header></gtd-hotel-search-header><!--</div>--><div class="mainSearchResult"><div class="main-detail-search"><div class="container"><div class="page-content-inner"><!--<div class="search-page search-content-3 hotel-search-wrapper">--><div class="search-page search-content-3 hotel-search-wrapper"><div class="row"><!--vm.init={{vm.init}},vm.filterCompleted={{vm.filterCompleted}},vm.searchCompleted=={{vm.searchCompleted}},vm.alreadyFilter=={{vm.alreadyFilter}}--><div class="col-md-3 hotel-search-adv"><div class="sm-form-filter" ng-click="closeFilterItinerary()"></div><div class="formFilter" style="margin-bottom: 20px; margin-top: 0px!important"><gtd-hotel-search-adv search-result="vm.searchResult" search-options="vm.searchOptions" filter-completed="vm.filterCompleted" search-completed="vm.searchCompleted"></gtd-hotel-search-adv></div></div><div class="col-md-9 hotel-search-result"><div ng-if="vm.displayState === vm.hotelStates.FINISH_SEARCH"><gtd-hotel-search-result search-result="vm.searchResult"></gtd-hotel-search-result></div><div ng-if="vm.showLoading || vm.showSubLoading" style="text-align: center"><div class="ghost-loading"><div class="meta"><div class="photo"></div></div><div class="description"><div class="text-line-1"></div><div class="text-line-3"></div><div class="text-line-2"></div><div class="text-line-4"></div><!-- <div>\n                                                <span class="text-bold red-text"\n                                                    ng-if="$ctrl.item.products[0].qualityAvaliable > 0">{{ "hotel.search.result.only" | translate }}\n                                                    {{ $ctrl.item.products[0].qualityAvaliable | number }}\n                                                    {{ "hotel.search.result.room" | translate }}</span>\n                                            </div> --></div><div class="price"><div class="text-line-1"></div><div class="text-line-2"></div><div class="text-line-4"><div class="text-line"></div><div class="text-line"></div></div><div class="text-line"><!-- <a class="btn gtd-btn-default gtd-shadow"\n                                                    ng-click="$ctrl.bookingClicked($ctrl.item)">{{ "hotel.search.result.choose" | translate }}</a> --></div></div></div><div class="ghost-loading"><div class="meta"><div class="photo"></div></div><div class="description"><div class="text-line-1"></div><div class="text-line-3"></div><div class="text-line-2"></div><div class="text-line-4"></div></div><div class="price"><div class="text-line-1"></div><div class="text-line-2"></div><div class="text-line-4"><div class="text-line"></div><div class="text-line"></div></div><div class="text-line"></div></div></div><div class="ghost-loading"><div class="meta"><div class="photo"></div></div><div class="description"><div class="text-line-1"></div><div class="text-line-3"></div><div class="text-line-2"></div><div class="text-line-4"></div></div><div class="price"><div class="text-line-1"></div><div class="text-line-2"></div><div class="text-line-4"><div class="text-line"></div><div class="text-line"></div></div><div class="text-line"></div></div></div><div class="ghost-loading"><div class="meta"><div class="photo"></div></div><div class="description"><div class="text-line-1"></div><div class="text-line-3"></div><div class="text-line-2"></div><div class="text-line-4"></div></div><div class="price"><div class="text-line-1"></div><div class="text-line-2"></div><div class="text-line-4"><div class="text-line"></div><div class="text-line"></div></div><div class="text-line"></div></div></div><div class="ghost-loading"><div class="meta"><div class="photo"></div></div><div class="description"><div class="text-line-1"></div><div class="text-line-3"></div><div class="text-line-2"></div><div class="text-line-4"></div></div><div class="price"><div class="text-line-1"></div><div class="text-line-2"></div><div class="text-line-4"><div class="text-line"></div><div class="text-line"></div></div><div class="text-line"></div></div></div></div><gtd-hotel-pagination ng-if="vm.displayState === vm.hotelStates.FINISH_SEARCH && !vm.showLoading && !vm.showSubLoading"></gtd-hotel-pagination><div class="text-danger bold h5" style="padding-bottom: 20px" ng-if="vm.displayState === vm.hotelStates.SEARCH_ERROR"><div class="error-box-container"><div class="error-box"><div class="face2"><div class="eye"></div><div class="eye right"></div><div class="mouth sad"></div></div><div class="shadow move"></div><div class="message"><h1 class="alert-text" translate="hotel.search.error.title"></h1><p class="text-danger" translate="hotel.search.error.subtitle"></p></div><button ng-click="vm.retry()" class="button-box" translate="hotel.search.error.retry"></button></div></div><!-- <span data-translate="hotel.noresultext">Kh\xF4ng t\xECm ki\u1EBFm th\u1EA5y kh\xE1ch s\u1EA1n ph\xF9 h\u1EE3p. Vui l\xF2ng nh\u1EADp l\u1EA1i \u0111i\u1EC1u ki\u1EC7n t\xECm ki\u1EBFm!</span> --></div></div></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div><div class="hotel-search-footer"><gtd-flight-search-footer></gtd-flight-search-footer></div>');
        $templateCache.put('app/hotels/search/hotel.search.loading.html', '<div class="hotel-search-loading"><div class="modal-body"><div class="row"><div class="col-md-12"><span class="flight-search-loading-title" data-translate="hotel.search.loading.title"></span><div class="progress-bar-wapper"><div class="progress"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{{vm.progress}}" aria-valuemin="0" aria-valuemax="100" ng-style="{\'width\':vm.progress+\'%\'}"><!--40%--></div></div></div><div class="hotel-search-loading-details"><div class="row"><div class="text-center"><span class="uppercase text-center line1">loading ...</span></div></div><div class="row"><div class="text-center"><span class="text-center line2">{{vm.searchOptions.destinationCode | destination}} - {{vm.searchOptions.pax.length}}&nbsp;{{\'hotel.search.loading.room\' | translate}}</span></div></div><div class="row"><div class="text-center"><span class="">{{vm.searchOptions.pax | pax:\'adult\'}}&nbsp;{{\'hotel.search.header.adult\' | translate}}</span><!--<span ng-show="(vm.searchOptions.pax | pax:\'child\') != 0">, {{vm.searchOptions.pax | pax:\'child\'}}&nbsp;{{\'hotel.search.header.children\' | translate}}</span>--> <span>, {{vm.searchOptions.pax | pax:\'child\'}}&nbsp;{{\'hotel.search.header.children\' | translate}}</span></div></div><div class="row text-center line3"><span style="text-transform: capitalize">{{vm.searchOptions.checkindate | momentdate:\'load-date\'}}</span> <span class="fa fa-long-arrow-right"></span> <span style="text-transform: capitalize">{{vm.searchOptions.checkoutdate | momentdate:\'load-date\'}}</span><!--<td class="table-cell colsp"></td>--><!--<td class="table-cell detail-base line3">--><!--<span style="text-transform: capitalize;">{{vm.searchOptions.checkindate | momentdate:\'load-date\'}}</span>--><!--</td>--><!--<td class="table-cell detail-base line3">--><!--<span class="fa fa-long-arrow-right"></span>--><!--</td>--><!--<td class="table-cell detail-base line3">--><!--<span style="text-transform: capitalize;">{{vm.searchOptions.checkoutdate | momentdate:\'load-date\'}}</span>--><!--</td>--><!--<td class="table-cell colsp"></td>--></div></div></div></div></div></div>');
        $templateCache.put('app/hotels/search/viettel.hotel.search.home.html', '<div class="history-button"><a ui-sref="user-profile-booking" class="btn"><i class="fa fa-history fa-3"></i></a></div><div class="formSearch"><div class="container reset-container"><div class="hotel-search-home"><div class="row" ng-if="!vm.enable_template"><div class="col-md-7"><gtd-hotel-home-search-header search-options="vm.searchOptions" do-search="vm.doSearch($searchResult, $searchOptions)"></gtd-hotel-home-search-header></div></div></div></div></div>');
        $templateCache.put('app/layouts/common/footer.html', '<!-- BEGIN PRE-FOOTER --><div class="page-prefooter"><div class="container"><!--<div class="col-md-4 col-sm-6 col-xs-12 footer-block">--><!-- <div class="footer-block1 footer-block">\n            <a ng-repeat="item in vm.links">\n                <p data-translate="global.footer.link.{{item.key}}"></p>\n            </a>\n        </div> --><!--<div class="col-md-4 col-sm-6 col-xs12 footer-block">--><div class="footer-block1 footer-block"><div class="name-Ft" data-translate="global.footer.link.about">V\u1EC0 GOTADI</div><a href="https://cms.gotadi.com/gioi-thieu-gotadi.aspx"><p data-translate="global.footer.link.intro">Gi\u1EDBi thi\u1EC7u Gotadi</p></a><a href="https://cms.gotadi.com/cac-dieu-khoan-su-dung.aspx"><p data-translate="global.footer.link.term">C\xE1c \u0111i\u1EC1u kho\u1EA3n s\u1EED d\u1EE5ng</p></a><a href="https://cms.gotadi.com/y-kien-nguoi-dung.aspx"><p data-translate="global.footer.link.comment">\xDD ki\u1EBFn c\u1EE7a ng\u01B0\u1EDDi d\xF9ng</p></a><a href="https://cms.gotadi.com//lien-he-gotadi.aspx"><p data-translate="global.footer.link.contact">Li\xEAn h\u1EC7</p></a><a href="https://cms.gotadi.com/tuyen-dung.aspx"><p data-translate="global.footer.link.job">Tuy\u1EC3n d\u1EE5ng</p></a></div><div class="footer-block2 footer-block"><div class="name-Ft" data-translate="global.footer.link.prod">S\u1EA2N PH\u1EA8M</div><a href="./#/flight"><p data-translate="global.footer.link.ticket">V\xE9 m\xE1y bay</p></a><a href="./#/hotel"><p data-translate="global.footer.link.hotel">Kh\xE1ch s\u1EA1n</p></a><a href="https://cms.gotadi.com/fne.aspx"><p>Free & Easy</p></a><a href="https://cms.gotadi.com/Tours.aspx"><p data-translate="global.footer.link.tour">Tour tr\u1ECDn g\xF3i</p></a><a href="https://cms.gotadi.com/huong-dan.aspx"><p><strong>{{\'global.footer.link.manual\' | translate}}</strong></p></a></div><div class="footer-block3 footer-block"><div class="name-Ft" data-translate="global.footer.link.sp">H\u1ED5 tr\u1EE3 kh\xE1ch h\xE0ng 24/7</div><a href="#"><div class="hotline">1900-9002</div></a><a href="#"><p>(028) 62 850 850</p></a><a href="#"><p>(028) 62 857 857</p></a><!-- <p>08:00 - 20:00 {{\'global.footer.link.day\' | translate}}</p>\n                                <p>{{\'global.footer.link.holiday\' | translate}}</p> --> <a href="mailto:lienhe@gotadi.com"><p><i class="fa fa-envelope"></i> lienhe@gotadi.com</p></a></div><div class="footer-block3 footer-block4 footer-block"><div class="g-1"><div class="name-Ft" data-translate="global.footer.link.payment">Ph\u01B0\u01A1ng th\u1EE9c thanh to\xE1n</div><div class="payment-gateways"><div class="item"><img src="../../../content/images/visa.png" class="img-responsive"></div><div class="item"><img src="../../../content/images/mastercard.png" class="img-responsive"></div><div class="item"><img src="../../../content/images/smartlink.png" class="img-responsive"></div></div></div><div class="g-1"><div class="name-Ft" data-translate="global.footer.link.certi">Ch\u1EE9ng nh\u1EADn an to\xE0n</div><div class="certification"><div class="item"><a href="http://online.gov.vn/WebsiteDisplay.aspx?DocId=5492" target="_blank"><img src="../../../content/images/bocongthuong.png" class="img-responsive"></a></div><div class="item"><img src="../../../content/images/veri.png" class="img-responsive"></div><div class="item"><a href="https://www.rapidscansecure.com/siteseal/Verify.aspx?code=136,E7D9180DB7C37ECF6A227AEFC95AD62ADCAF9279" target="_blank"><img src="https://www.rapidscansecure.com/siteseal/Seal.aspx?code=136,E7D9180DB7C37ECF6A227AEFC95AD62ADCAF9279" class="img-responsive"></a></div></div></div></div><!-- <div class="menu-sub-footer-horizontal-seperator"></div> --></div></div><!-- END PRE-FOOTER --><!-- BEGIN POST-FOOTER --><div class="page-footer"><div class="container"><div class="footer-block footer-centre"><p class="footer-text" data-translate="global.footer.contactinfo.l1"></p><p class="footer-text" data-translate="global.footer.contactinfo.l2"></p><p class="footer-text" data-translate="global.footer.contactinfo.l3"></p><p class="footer-text" data-translate="global.footer.contactinfo.l4"></p><p class="footer-text" data-translate="global.footer.contactinfo.l5"></p><p class="footer-text" data-translate="global.footer.contactinfo.l6"></p></div></div></div><!-- <script type="text/javascript">\n    if (jQuery(window).width() < 480) {\n        jQuery(".login").removeClass("displaynone");\n        jQuery(".loginnew").addClass("displaynone");\n    }\n    (function () {\n        var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,\n          type = \'bar\', colors = { background: \'#519500\', text: \'#fff\' }, callHello = \'G\u1ECDi mi\u1EC5n ph\xED\';\n        if (width <= 991) type = \'circle\';\n        window.abKiteAsyncInit = function () {\n            abKiteSDK.init({\n                appId: \'35b29272a78e7\',\n                abKiteServer: \'kite.hgvoice.com\',\n                insert2Selector: \'body\',\n                language: \'vi\',\n                type: type,\n                helloMessage: \'Chat v\u1EDBi ch\xFAng t\xF4i\',\n                colors: colors,\n                title: \'Xin ch\xE0o! B\u1EA1n c\u1EA7n tr\u1EE3 gi\xFAp?\'\n            });\n        }; \n        window.abKiteCallAsyncInit = function () {\n            abKiteCallSDK.init({\n                credential: \'zztFytsyFyy5vywFJHL6\',\n                realm: \'hg-holdings.hgvoice.com\',\n                kiteRoom: \'Kite_HsLpzvFzJEM1zzxp7LyHsDvzDnHKJ4\',\n                displayName: \'Customer From Gotadi\',\n                abKiteServer: \'kite.hgvoice.com\',\n                type: \'nk\' + type,\n                helloMessage: callHello,\n                colors: colors,\n                language: \'vi\'\n            });\n        };\n    })();\n    (function (d, s, id) {\n        var js, fjs = d.getElementsByTagName(s)[0];\n        if (d.getElementById(id)) { return; }\n        js = d.createElement(s); js.id = id;\n        js.src = \'//kite.hgvoice.com/sdk/v0.0.0/sdk.js\';\n        fjs.parentNode.insertBefore(js, fjs);\n    }(document, \'script\', \'ab-kite-jssdk\'));\n    (function (d, s, id) {\n        var js, fjs = d.getElementsByTagName(s)[0];\n        if (d.getElementById(id)) { return; }\n        js = d.createElement(s);\n        js.id = id;\n        js.src = \'https://kite.hgvoice.com/call/sdk/v0.0.0/sdk.js\';\n        fjs.parentNode.insertBefore(js, fjs);\n    }(document, \'script\', \'ab-call-kite-jssdk\'));\n</script> --><div class="bt-footer"><div class="container">Copyright \xA9 2016 Gotadi. All rights reserved</div></div><!-- <div class="scroll-to-top">\n    <i class="icon-arrow-up"></i>\n</div> --><!-- END POST-FOOTER -->');
        $templateCache.put('app/layouts/common/page-head.html', '<div class="container"><!-- BEGIN PAGE TITLE --><div class="page-title"><h1><!--<span data-ng-bind="$state.current.data.pageTitle"></span>--><!--<small data-ng-bind="$state.current.data.pageSubTitle"></small>--> BREADCUMB OR SEARCH GOES HERE</h1></div><!-- END PAGE TITLE --></div>');
        $templateCache.put('app/layouts/common/viettel_footer.html', '<!-- BEGIN POST-FOOTER --><div class="page-prefooter"><div class="container"><div class="text-center" style="font-size: smaller"><div><b>H\u1ED7 tr\u1EE3 24/7:</b> 1900-9002 - (028) 62 850 850 - (028) 62 857 857</div><div><b>E-mail:</b> lienhe@gotadi.com</div></div></div></div><div class="scroll-to-top"><i class="icon-arrow-up"></i></div><!-- END POST-FOOTER -->');
        $templateCache.put('app/layouts/error/accessdenied.html', '<div ng-cloak><div class="row"><div class="col-md-4"><span class="hipster img-responsive img-rounded"></span></div><div class="col-md-8"><h1 data-translate="error.title">Error Page!</h1><div class="alert alert-danger" data-translate="error.http.403">You are not authorized to access this page.</div></div></div></div>');
        $templateCache.put('app/layouts/error/error.html', '<div ng-cloak><div class="row"><div class="col-md-4"><span class="hipster img-responsive img-rounded"></span></div><div class="col-md-8"><h1 data-translate="error.title">Error Page!</h1><div ng-show="errorMessage"><div class="alert alert-danger">{{errorMessage}}</div></div></div></div></div>');
        $templateCache.put('app/layouts/navbar/fastgo_navbar.html', '<!-- Fixed navbar (navbar-fixed-top)--><nav class="navbar navbar-default"><div class="ssm-overlay ssm-overlay-menu ssm-toggle-nav"></div><div class="topHeader"><div class="container reset-container"><div class="navbar-header"><button type="button" class="navbar-toggle ssm-toggle-nav"><span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span></button> <a class="navbar-brand-FG" ui-sref="home"><img src="content/images/LOGO-GOTADI-05.svg" alt="logo" class="header-logo-FG"> </a><a class="navbar-brand-FG" ui-sref="home"><img src="content/images/logo-FG.svg" alt="logo" class="header-logo-FG"></a></div><div id="navbar" class="navbar-collapse" ng-switch="vm.isAuthenticated()"><ul class="nav navbar-nav navbar-right changeLanguage"><li><div class="item-select" ng-class="{\'selected\': vm.language == \'vi\'}"><input type="radio" ng-change="vm.changeLanguage()" ng-checked="(vm.language == vi)" ng-model="vm.language" ng-controller="OtaLanguageController as languageVm" value="vi" name="language" id="vn"><label for="vn"><img src="content/images/vietnam.png" alt="logo" class="language-logo"></label></div><div class="item-select" ng-class="{\'selected\': vm.language == \'en\'}"><label for="en"><img src="content/images/england.png" alt="logo" class="language-logo"></label><input type="radio" ng-change="vm.changeLanguage()" ng-checked="(vm.language == en)" ng-model="vm.language" ng-controller="OtaLanguageController as languageVm" value="en" name="language" id="en"></div></li></ul><ul class="nav navbar-nav navbar-right" has-authority="ROLE_NO_ONE"><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class="{active: vm.$state.includes(\'entity\')}" ng-switch-when="true" uib-dropdown class="dropdown pointer"><a class="dropdown-toggle" uib-dropdown-toggle href="" id="entity-menu"><span><span class="glyphicon glyphicon-th-list"></span> <b class="caret"></b></span></a></li></ul><ul class="nav navbar-nav navbar-right sm-navAccount"><li ng-class="{active: vm.$state.includes(\'account\')}" class="dropdown {{vm.identity.membershipClass}}"><a href="javascript:;" class="dropdown-toggle nolink noLogin" data-toggle="dropdown" id="account-menu"><div class="sm-group-action-account"><span class="hidden-sm" data-translate="global.menu.account.main" ng-switch-when="false">Account </span><span><strong>{{\'global.menu.account.main1vi\' | translate}}{{vm.identity.membershipClass}}{{\'global.menu.account.main1en\' | translate}} </strong></span><span class="hidden-sm" ng-switch-when="true"><span class="emailInfo" has-authority="ROLE_B2C">{{vm.identity.email}}</span> <span class="emailInfo" has-authority="ROLE_B2B">{{vm.identity.displayName}}</span></span></div></a><ul class="dropdown-menu sm-btn-user"><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><div class="nolink noLogin"><span><strong>{{\'global.menu.account.main1vi\' | translate}}{{vm.identity.membershipClass}}{{\'global.menu.account.main1en\' | translate}}</strong> </span><span class="hidden-sm"><span class="emailInfo"><strong>{{vm.identity.displayName}}</strong></span></span></div></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile"><i class="fa fa-cogs"></i> <span data-translate="global.menu.account.info">Th\xF4ng tin t\xE0i kho\u1EA3n</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile-card"><i class="fa fa-credit-card"></i> <span data-translate="global.menu.account.cards">Qu\u1EA3n l\xFD th\u1EBB</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile-booking"><i class="fa fa-history"></i> <span data-translate="global.menu.account.booking">Qu\u1EA3n l\xFD booking</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile-traveller"><i class="fa fa-users"></i> <span data-translate="global.menu.account.guestlist">Danh s\xE1ch h\xE0nh kh\xE1ch</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C" ng-if="!vm.identity.socialUser"><a ui-sref="password"><span class="glyphicon glyphicon-lock"></span> <span data-translate="global.menu.account.password">Password</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-any-authority="ROLE_B2C,ROLE_B2B"><a href="" ng-click="vm.logout()" id="logout"><span class="glyphicon glyphicon-log-out"></span> <span data-translate="global.menu.account.logout" ng-if="!vm.isB2B2C">Sign out</span> <span data-translate="global.menu.account.exit" ng-if="vm.isB2B2C">Close</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="false" ng-if="!vm.isB2B2C"><a href="" ng-click="vm.login()" id="login"><span class="glyphicon glyphicon-log-in"></span> <span data-translate="global.menu.account.login">Sign in</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="false" ng-if="!vm.isB2B2C"><a href="register" ng-click="vm.register()"><!--<a ui-sref="register" href="#">--> <span class="glyphicon glyphicon-plus-sign"></span> <span data-translate="global.menu.account.register">Register</span></a></li></ul></li></ul><ul class="nav navbar-nav navbar-right hdSupport hidden-sm hidden-xs"><li><div class="itemSupport hotline" data-translate="global.menu.support.l2"></div></li><li><div class="itemSupport email"><a href="mailto:lienhe@gotadi.com" data-translate="global.menu.support.l7"></a></div></li></ul></div><!--/.nav-collapse --></div></div><div class="mainHeader"><div class="container reset-container"><div class="navbar-menu"><ul class="nav navbar-nav"><li class="hidden-sm hidden-xs" ng-class="{active: vm.$state.href(vm.$state.current.name, {}, {absolute: true, inherit: false}).includes(\'home\')}"><a ui-sref="home" class="large-menu"><span class="fa fa-home menu-fa"></span></a></li><li ng-class="{active: vm.$state.href(vm.$state.current.name, {}, {absolute: true, inherit: false}).includes(\'flight\') || vm.$state.href(vm.$state.current.name, {}, {absolute: true, inherit: false}).includes(\'flight-booking\')}"><a ui-sref="flight-search-home" class="large-menu"><span data-translate="global.menu.flight"></span></a></li><li><a target="_blank" href="https://cms.gotadi.com//fne.aspx" class="large-menu"><span>Free & Easy</span></a></li><li><a target="_blank" href="https://cms.gotadi.com/Tours.aspx" class="large-menu"><span>Tours</span></a></li><li><a target="_blank" href="https://cms.gotadi.com/tap-chi.aspx" class="large-menu"><span data-translate="global.menu.guide">C\u1EA9m nang du l\u1ECBch</span></a></li><li><a target="_blank" href="https://cms.gotadi.com/Khuyen-mai-du-lich.aspx" class="large-menu"><span data-translate="global.menu.promotion">Khuy\u1EBFn m\xE3i</span></a></li></ul><div class="btn-corporate-customers hidden-sm hidden-xs"><a target="_blank" href="http://doanhnghiep.gotadi.com/" class="large-menu"><strong>{{\'global.menu.bus\' | translate}} </strong>{{\'global.menu.cus\' | translate}}</a></div></div></div></div><!-- <div class="menu-header-horizontal-seperator"></div> --><script type="text/javascript">if (matchMedia(\'only screen and (max-width: 991px)\').matches) {\n                $(\'.navbar .mainHeader\').slideAndSwipe();\n            }</script></nav>');
        $templateCache.put('app/layouts/navbar/navbar.html', '<!-- Fixed navbar (navbar-fixed-top)--><nav class="navbar navbar-default"><div class="ssm-overlay ssm-overlay-menu ssm-toggle-nav"></div><div class="topHeader"><div class="container reset-container"><div class="navbar-header"><button type="button" class="navbar-toggle ssm-toggle-nav"><span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span></button> <a class="navbar-brand" ui-sref="home"><img src="content/images/logo.svg" alt="logo" class="header-logo"></a></div><div id="navbar" class="navbar-collapse" ng-switch="vm.isAuthenticated()"><ul class="nav navbar-nav navbar-right changeLanguage" style="display: none"><li><div class="item-select" ng-class="{\'selected\': vm.language == \'vi\'}"><label for="vn">VN</label><input type="radio" ng-change="vm.changeLanguage()" ng-checked="(vm.language == vi)" ng-model="vm.language" ng-controller="OtaLanguageController as languageVm" value="vi" name="language" id="vn"></div><div class="item-select" ng-class="{\'selected\': vm.language == \'en\'}"><label for="en">EN</label><input type="radio" ng-change="vm.changeLanguage()" ng-checked="(vm.language == en)" ng-model="vm.language" ng-controller="OtaLanguageController as languageVm" value="en" name="language" id="en"></div></li></ul><ul class="nav navbar-nav navbar-right" has-authority="ROLE_NO_ONE"><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class="{active: vm.$state.includes(\'entity\')}" ng-switch-when="true" uib-dropdown class="dropdown pointer"><a class="dropdown-toggle" uib-dropdown-toggle href="" id="entity-menu"><span><span class="glyphicon glyphicon-th-list"></span> <b class="caret"></b></span></a></li></ul><ul class="nav navbar-nav navbar-right sm-navAccount"><li ng-class="{active: vm.$state.includes(\'account\')}" class="dropdown {{vm.identity.membershipClass}}"><a href="javascript:;" class="dropdown-toggle nolink noLogin" data-toggle="dropdown" id="account-menu"><div class="sm-group-action-account"><span class="hidden-sm" data-translate="global.menu.account.main" ng-switch-when="false">Account </span><span><strong>{{\'global.menu.account.main1vi\' | translate}}{{vm.identity.membershipClass}}{{\'global.menu.account.main1en\' | translate}} </strong></span><span class="hidden-sm" ng-switch-when="true"><span class="emailInfo" has-authority="ROLE_B2C">{{vm.identity.email}}</span> <span class="emailInfo" has-authority="ROLE_B2B">{{vm.identity.displayName}}</span></span></div></a><ul class="dropdown-menu sm-btn-user"><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><div class="nolink noLogin"><span><strong>{{\'global.menu.account.main1vi\' | translate}}{{vm.identity.membershipClass}}{{\'global.menu.account.main1en\' | translate}}</strong> </span><span class="hidden-sm"><span class="emailInfo"><strong>{{vm.identity.displayName}}</strong></span></span></div></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile"><i class="fa fa-cogs"></i> <span data-translate="global.menu.account.info">Th\xF4ng tin t\xE0i kho\u1EA3n</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile-card"><i class="fa fa-credit-card"></i> <span data-translate="global.menu.account.cards">Qu\u1EA3n l\xFD th\u1EBB</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile-booking"><i class="fa fa-history"></i> <span data-translate="global.menu.account.booking">Qu\u1EA3n l\xFD booking</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C"><!--<a ui-sref="settings">--> <a ui-sref="user-profile-traveller"><i class="fa fa-users"></i> <span data-translate="global.menu.account.guestlist">Danh s\xE1ch h\xE0nh kh\xE1ch</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-authority="ROLE_B2C" ng-if="!vm.identity.socialUser"><a ui-sref="password"><span class="glyphicon glyphicon-lock"></span> <span data-translate="global.menu.account.password">Password</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="true" has-any-authority="ROLE_B2C,ROLE_B2B"><a href="" ng-click="vm.logout()" id="logout"><span class="glyphicon glyphicon-log-out"></span> <span data-translate="global.menu.account.logout" ng-if="!vm.isB2B2C">Sign out</span> <span data-translate="global.menu.account.exit" ng-if="vm.isB2B2C">Close</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="false" ng-if="!vm.isB2B2C"><a href="" ng-click="vm.login()" id="login"><span class="glyphicon glyphicon-log-in"></span> <span data-translate="global.menu.account.login">Sign in</span></a></li><li class="itemDropdown" ui-sref-active="active" ng-switch-when="false" ng-if="!vm.isB2B2C"><a href="register" ng-click="vm.register()"><!--<a ui-sref="register" href="#">--> <span class="glyphicon glyphicon-plus-sign"></span> <span data-translate="global.menu.account.register">Register</span></a></li></ul></li></ul><ul class="nav navbar-nav navbar-right hdSupport hidden-sm hidden-xs"><li><div class="itemSupport hotline" data-translate="global.menu.support.l2"></div></li><li><div class="itemSupport email"><a href="mailto:lienhe@gotadi.com" data-translate="global.menu.support.l7"></a></div></li></ul></div><!--/.nav-collapse --></div></div><div class="mainHeader"><div class="container reset-container"><div class="navbar-menu"><ul class="nav navbar-nav"><li class="hidden-sm hidden-xs" ng-class="{active: vm.$state.href(vm.$state.current.name, {}, {absolute: true, inherit: false}).includes(\'home\')}"><a ui-sref="home" class="large-menu"><span class="fa fa-home menu-fa"></span></a></li><li ng-class="{active: vm.$state.href(vm.$state.current.name, {}, {absolute: true, inherit: false}).includes(\'flight\') || vm.$state.href(vm.$state.current.name, {}, {absolute: true, inherit: false}).includes(\'flight-booking\')}"><a ui-sref="flight-search-home" class="large-menu"><span data-translate="global.menu.flight"></span></a></li><li ng-class="{active: vm.$state.href(vm.$state.current.name, {}, {absolute: true, inherit: false}).includes(\'hotel\')}"><a ui-sref="hotel-search-home" class="large-menu"><span data-translate="global.menu.hotel"></span></a></li><li><a target="_blank" href="https://cms.gotadi.com//fne.aspx" class="large-menu"><span>Free & Easy</span></a></li><li><a target="_blank" href="https://cms.gotadi.com/Tours.aspx" class="large-menu"><span>Tours</span></a></li><li><a target="_blank" href="https://cms.gotadi.com/tap-chi.aspx" class="large-menu"><span data-translate="global.menu.guide">C\u1EA9m nang du l\u1ECBch</span></a></li><li><a target="_blank" href="https://cms.gotadi.com/Khuyen-mai-du-lich.aspx" class="large-menu"><span data-translate="global.menu.promotion">Khuy\u1EBFn m\xE3i</span></a></li></ul><div class="btn-corporate-customers hidden-sm hidden-xs"><a target="_blank" href="http://doanhnghiep.gotadi.com/" class="large-menu"><strong>{{\'global.menu.bus\' | translate}} </strong>{{\'global.menu.cus\' | translate}}</a></div></div></div></div><!-- <div class="menu-header-horizontal-seperator"></div> --><script type="text/javascript">if (matchMedia(\'only screen and (max-width: 991px)\').matches) {\n            $(\'.navbar .mainHeader\').slideAndSwipe();\n        }</script></nav>');
        $templateCache.put('app/layouts/navbar/viettel_navbar.html', '');
        $templateCache.put('app/layouts/views/blank.html', '<!-- BEGIN PAGE BREADCRUMB --><ul class="page-breadcrumb breadcrumb"><li><a ui-sref="dashboard">Blank Page</a> <i class="fa fa-circle"></i></li></ul><!-- END PAGE BREADCRUMB --><!-- BEGIN MAIN CONTENT --><div class="row" ng-controller="BlankController"><div class="col-md-12"><!-- BEGIN: ACCORDION DEMO --><div class="portlet light bordered"><div class="portlet-title"><div class="caption font-green-sharp"><i class="icon-settings font-green-sharp"></i> <span class="caption-subject bold uppercase">Page Portlet</span> <span class="caption-helper hide"></span></div><div class="actions"><a class="btn btn-circle btn-icon-only btn-default" href="#"><i class="icon-cloud-upload"></i> </a><a class="btn btn-circle btn-icon-only btn-default" href="#"><i class="icon-wrench"></i></a></div></div><div class="portlet-body">Blank page content goes here...</div></div></div></div><!-- END MAIN CONTENT --><!-- BEGIN MAIN JS--><script>// call any jquery or angularjs code ehre</script><!-- BEGIN MAIN JS -->');
        $templateCache.put('app/account/profile/booking/profile.booking.air.view.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu ng-if="vm.showProfileInfo" profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content"><div class="row"><div class="col-md-12"><!-- USER INFO --><div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">{{\'global.menu.account.profiles.detail\'|translate}}</span></div></div><div class="portlet-body"><div class="row static-info"><div class="col-sm-3 bold">{{\'global.menu.account.profiles.code\' | translate}}</div><div class="col-sm-9"><div class="margin-bottom-8"><span>{{vm.bookingModel.passengerNameRecords}}</span></div></div></div><div class="row static-info"><div class="col-sm-3 bold">{{\'global.menu.account.profiles.ID\' | translate}}</div><div class="col-sm-9"><div class="margin-bottom-8"><span>{{vm.bookingModel.bookingNumber}}</span></div></div></div><div class="row static-info"><div class="col-sm-3 bold">{{\'global.menu.account.profiles.status\' | translate}}</div><div class="col-sm-9"><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'PENDING\'">{{\'Ch\u01B0a Th\u1EF1c Hi\u1EC7n \u0110\u1EB7t V\xE9\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'FAILED\'">{{\'\u0110\u1EB7t V\xE9 Th\u1EA5t B\u1EA1i\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'CANCELLED\' && vm.bookingModel.paymentStatus == \'REFUNDED\'">{{\'\u0110\xE3 H\u1EE7y v\xE0 Ho\xE0n Ti\u1EC1n\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'BOOKING_ON_PROCESS\'">{{\'\u0110ang th\u1EF1c hi\u1EC7n \u0111\u1EB7t v\xE9\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'TICKET_ON_PROCESS\'">{{\'\u0110ang th\u1EF1c hi\u1EC7n xu\u1EA5t v\xE9\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'CONFIRMED\'">{{\'\u0110\xE3 ho\xE0n t\u1EA5t\' | capitalize}}</span><ng-switch on="vm.bookingModel.supplierBookingStatus == \'EXPIRED\'"><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\'">{{\'Qu\xE1 h\u1EA1n.\' | capitalize}} </span><span ng-switch-when="true" class="text-color3" ng-show="vm.bookingModel.paymentStatus != \'SUCCEEDED\'">{{\'Qu\xE1 h\u1EA1n.\' | capitalize}}</span></ng-switch><ng-switch on="vm.bookingModel.supplierBookingStatus == \'BOOKED\'"><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\' && vm.bookingModel.issuedStatus == \'PENDING\'">{{\'Thanh to\xE1n th\xE0nh c\xF4ng - Ch\u1EDD xu\u1EA5t v\xE9.\' | capitalize}} </span><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\' && vm.bookingModel.issuedStatus == \'FAILED\'">{{\'Thanh to\xE1n th\xE0nh c\xF4ng - Xu\u1EA5t v\xE9 l\u1ED7i.\' | capitalize}} </span><span ng-switch-when="true" class="" ng-show="vm.bookingModel.paymentStatus == \'PENDING\'">{{\'Ch\u1EDD thanh to\xE1n\' | capitalize}} </span><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'FAILED\'">{{\'Thanh to\xE1n l\u1ED7i, \u0111\u1EC1 ngh\u1ECB qu\xFD kh\xE1ch th\u1EF1c hi\u1EC7n thanh to\xE1n l\u1EA1i.\' | capitalize}}</span></ng-switch></div></div><div class="row static-info" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\'"><div class="col-sm-3 bold">{{\'global.menu.account.profiles.pay\' | translate}}</div><div class="col-sm-9">{{vm.bookingModel.paymentType}}</div></div><div class="row static-info" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\'"><div class="col-sm-3 bold">{{\'global.menu.account.profiles.paydate\' | translate}}</div><div class="col-sm-9 text-capitalize">{{vm.bookingModel.paymentDate | momentdate:\'date\'}}</div></div><div class="form-body booking-result-wrapper" style="display:block;clear: both"><div class="detail-zone" style="width: 100%"><gtd-flight-info flight-model="vm.bookingModel" gtd-show-customer="false"></gtd-flight-info><gtd-flight-info flight-model="vm.returnBookingModel" gtd-show-customer="false" ng-show="vm.orgBookingModel.groupPricedItineraries.length > 1 || vm.orgBookingModel.groupPricedItineraries[0].pricedItineraries[0].directionInd==\'RETURN\'"></gtd-flight-info></div></div></div><!-- END INVOICE INFO --></div><!-- Thong tin hanh khach --><!--<div class="portlet light">--><!--<div class="portlet-title">--><!--<div class="caption">--><!--<span class="caption-subject font-dark bold uppercase">Th\xF4ng tin h\xE0nh kh\xE1ch</span>--><!--</div>--><!--</div>--><!--<div class="portlet-body">--><ng-switch on="vm.bookingModel.status == \'BOOKED\'"><gtd-flight-booking-customer-info-view search-options="vm.searchOptions" ng-switch-when="true" booking-model="vm.orgBookingModel"></gtd-flight-booking-customer-info-view><gtd-flight-booking-contact-info-view ng-switch-when="true" booking-model="vm.orgBookingModel"></gtd-flight-booking-contact-info-view><gtd-flight-booking-history-billing-info-view ng-switch-when="true" booking-model="vm.orgBookingModel"></gtd-flight-booking-history-billing-info-view></ng-switch><!--</div>--><!--</div>--><!-- Thong tin thanh toan --><!--<div class="portlet light">--><!--<div class="portlet-title">--><!--<div class="caption">--><!--<span class="caption-subject font-dark bold uppercase">Ph\u01B0\u01A1ng th\u1EE9c thanh to\xE1n</span>--><!--</div>--><!--</div>--><!--<div class="portlet-body">--><ng-switch on="vm.bookingModel.paymentStatus != \'SUCCEEDED\' && vm.bookingModel.status == \'BOOKED\'\n                                    && !(vm.bookingModel.supplierBookingStatus == \'EXPIRED\')\n                                    && !(vm.bookingModel.supplierBookingStatus == \'CANCELLED\' && vm.bookingModel.paymentStatus == \'REFUNDED\')\n                                "><!--                                <form action="#" role="form" name="bookingForm" novalidate>--><!--                                    <div class="col-sm-8 no-padding-left" ng-switch-when="true">--><!--                                        <gtd-booking-payment ng-if="vm.showPaymentInfo" payment-model="vm.paymentModel" booking-model="vm.bjson" ></gtd-booking-payment>--><!--                                    </div>--><!--                                </form>--><div class="col-sm-12 no-padding-left no-padding-right" ng-switch-when="true"><gtd-flight-booking-summary booking-model="vm.orgBookingModel" search-options="vm.searchOptions" show-coupon="true" payment-model="vm.paymentModel"></gtd-flight-booking-summary><gtd-flight-booking-summary-details booking-model="vm.orgBookingModel" search-options="vm.searchOptions" show-coupon="true" payment-model="vm.paymentModel"></gtd-flight-booking-summary-details></div><div ng-if="vm.showPaymentInfo" ng-switch-when="true"><button class="btn btn-green pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.doConfirm()"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase ng-scope">{{\'global.menu.account.profiles.pay\' | translate}}</span></button></div></ng-switch><ng-switch on="vm.bookingModel.supplierBookingStatus == \'CONFIRMED\'\n                                || (vm.bookingModel.supplierBookingStatus == \'BOOKED\' && vm.bookingModel.paymentStatus == \'SUCCEEDED\')\n                                || (vm.bookingModel.supplierBookingStatus == \'EXPIRED\')\n                                || (vm.bookingModel.supplierBookingStatus == \'CANCELLED\' && vm.bookingModel.paymentStatus == \'REFUNDED\')\n                                "><div class="" ng-switch-when="true"><gtd-flight-booking-summary booking-model="vm.orgBookingModel" search-options="vm.searchOptions" show-coupon="true" payment-model="vm.paymentModel"></gtd-flight-booking-summary><gtd-flight-booking-summary-details booking-model="vm.orgBookingModel" search-options="vm.searchOptions" show-coupon="true" payment-model="vm.paymentModel"></gtd-flight-booking-summary-details></div></ng-switch><!--</div>--><!--</div>--></div></div><div class="row col-md-12"><div class="pull-left"><button class="btn gtd-btn-default gtd-btn-small btn-grey-em" type="button" ng-click="vm.cancel();"><span class="uppercase ng-scope">{{\'global.menu.account.profiles.back\' | translate}}</span></button></div><div ng-if="!vm.showPaymentInfo && vm.bookingModel.paymentStatus != \'SUCCEEDED\'" class="pull-right"><button class="btn btn-green pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.viettelPaymentSubmit()"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase ng-scope">{{\'global.menu.account.profiles.pay\' | translate}}</span></button></div></div></div><!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/account/profile/booking/profile.booking.delete.html', '<div class="portlet delete-card-dialog light no-border"><div class="portlet-title"><div class="caption"><span class="caption-subject bold text-gtd-3 uppercase">Xo\xE1 l\u1ECBch s\u1EED giao d\u1ECBch</span></div></div><div class="portlet-body"><div class="content"><span>B\u1EA1n \u0111ang th\u1EF1c hi\u1EC7n xo\xE1 l\u1ECBch s\u1EED giao d\u1ECBch <span class="text-gtd-3">{{vm.pnrs}}</span>. Nh\u1EA5n <span class="bold">\u0110\u1ED3ng \xFD</span> \u0111\u1EC3 ho\xE0n t\u1EA5t.</span></div><div class="buttons-actions"><div class="btn btn-green" ng-click="vm.submit()"><span class="fa fa-trash"></span><span class="uppercase"> \u0110\u1ED3ng \xFD</span></div><div class="btn btn-grey" ng-click="vm.cancel()"><span class="uppercase">Hu\u1EF7</span></div></div></div></div>');
        $templateCache.put('app/account/profile/booking/profile.booking.hotel.view.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu ng-if="vm.showProfileInfo" profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content"><div class="row"><div class="col-md-12"><!-- USER INFO --><div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">Chi ti\u1EBFt kh\xE1ch s\u1EA1n</span></div></div><div class="portlet-body"><div class="row static-info"><div class="col-sm-3 bold">M\xE3 \u0111\u1EB7t ch\u1ED7</div><!--<ng-switch on="vm.bookingModel.supplierBookingStatus == \'CONFIRMED\'">--><!--<div class="col-sm-9" ng-switch-when="true">--><!--<span>{{vm.bookingModel.passengerNameRecords}}</span>--><!--</div>--><!--<div class="col-sm-9" ng-switch-default>--><!--<span>{{vm.bookingModel.bookingNumber}}</span>--><!--</div>--><!--</ng-switch>--><div class="col-sm-9"><span>{{vm.bookingModel.passengerNameRecords}}</span></div></div><div class="row static-info"><div class="col-sm-3 bold">T\xECnh tr\u1EA1ng</div><div class="col-sm-9 text-color4"><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'PENDING\'">{{\'Ch\u01B0a Th\u1EF1c Hi\u1EC7n \u0110\u1EB7t V\xE9\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'FAILED\'">{{\'\u0110\u1EB7t V\xE9 Th\u1EA5t B\u1EA1i\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'CANCELLED\' && vm.bookingModel.paymentStatus == \'REFUNDED\'">{{\'\u0110\xE3 H\u1EE7y v\xE0 Ho\xE0n Ti\u1EC1n\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'BOOKING_ON_PROCESS\'">{{\'\u0110ang th\u1EF1c hi\u1EC7n \u0111\u1EB7t v\xE9\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'TICKET_ON_PROCESS\'">{{\'\u0110ang th\u1EF1c hi\u1EC7n xu\u1EA5t v\xE9\' | capitalize}} </span><span class="" ng-show="vm.bookingModel.supplierBookingStatus == \'CONFIRMED\'">{{\'\u0110\xE3 ho\xE0n t\u1EA5t\' | capitalize}}</span><ng-switch on="vm.bookingModel.supplierBookingStatus == \'EXPIRED\'"><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\'">{{\'Qu\xE1 h\u1EA1n.\' | capitalize}} </span><span ng-switch-when="true" class="text-color3" ng-show="vm.bookingModel.paymentStatus != \'SUCCEEDED\'">{{\'Qu\xE1 h\u1EA1n.\' | capitalize}}</span></ng-switch><ng-switch on="vm.bookingModel.supplierBookingStatus == \'BOOKED\'"><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\' && vm.bookingModel.issuedStatus == \'PENDING\'">{{\'Thanh to\xE1n th\xE0nh c\xF4ng - Ch\u1EDD xu\u1EA5t v\xE9.\' | capitalize}} </span><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'SUCCEEDED\' && vm.bookingModel.issuedStatus == \'FAILED\'">{{\'Thanh to\xE1n th\xE0nh c\xF4ng - Xu\u1EA5t v\xE9 l\u1ED7i.\' | capitalize}} </span><span ng-switch-when="true" class="" ng-show="vm.bookingModel.paymentStatus == \'PENDING\'">{{\'Ch\u1EDD thanh to\xE1n\' | capitalize}} </span><span ng-switch-when="true" class="text-color4" ng-show="vm.bookingModel.paymentStatus == \'FAILED\'">{{\'Thanh to\xE1n l\u1ED7i, \u0111\u1EC1 ngh\u1ECB qu\xFD kh\xE1ch th\u1EF1c hi\u1EC7n thanh to\xE1n l\u1EA1i.\' | capitalize}}</span></ng-switch></div></div><div class="form-body booking-result-wrapper" style="display:block;clear: both"><div class="detail-zone" style="width: 100%"><gtd-hotel-info booking-model="vm.bookingModel" selected-hotel="vm.selectedHotel" selected-hotel-room="vm.selectedHotelRoom" selected-hotel-product="vm.selectedHotelProduct" jsonmodel="vm.bkgroup"></gtd-hotel-info></div></div></div><!-- END INVOICE INFO --></div><ng-switch on="vm.bookingModel.status == \'BOOKED\'"><gtd-hotel-profile-booking-customer-info-view booking-model="vm.orgBookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true"></gtd-hotel-profile-booking-customer-info-view><gtd-hotel-booking-contact-info-view booking-model="vm.orgBookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" mode="flight" ng-switch-when="true"></gtd-hotel-booking-contact-info-view><gtd-hotel-booking-history-billing-info-view booking-model="vm.orgBookingModel" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" ng-switch-when="true"></gtd-hotel-booking-history-billing-info-view></ng-switch><!--</div>--><!--</div>--><!-- Thong tin thanh toan --><!--<div class="portlet light">--><!--<div class="portlet-title">--><!--<div class="caption">--><!--<span class="caption-subject font-dark bold uppercase">Ph\u01B0\u01A1ng th\u1EE9c thanh to\xE1n</span>--><!--</div>--><!--</div>--><!--<div class="portlet-body">--><ng-switch on="vm.bookingModel.paymentStatus != \'SUCCEEDED\' && vm.bookingModel.status == \'BOOKED\'\n                                    && !(vm.bookingModel.supplierBookingStatus == \'EXPIRED\')\n                                    && !(vm.bookingModel.supplierBookingStatus == \'CANCELLED\' && vm.bookingModel.paymentStatus == \'REFUNDED\')\n                                "><form action="#" role="form" name="bookingForm" novalidate><div class="col-sm-8 no-padding-left" ng-switch-when="true"><gtd-booking-payment ng-if="vm.showPaymentInfo" payment-model="vm.paymentModel" booking-model="vm.bjson"></gtd-booking-payment></div></form><div ng-class="{\'col-sm-12\': !vm.showPaymentInfo, \'col-sm-4\': vm.showPaymentInfo}" class="no-padding-left no-padding-right" ng-switch-when="true"><gtd-hotel-booking-summary booking-model="vm.orgBookingModel" bjson="vm.bkgroup" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" search-options="vm.searchOptions" show-coupon="true" payment-model="vm.paymentModel"></gtd-hotel-booking-summary><gtd-hotel-booking-summary-details booking-model="vm.orgBookingModel" bjson="vm.bkgroup" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" search-options="vm.searchOptions" show-coupon="true" payment-model="vm.paymentModel"></gtd-hotel-booking-summary-details></div><div ng-if="vm.showPaymentInfo" ng-switch-when="true"><button class="btn btn-green pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.doConfirm()"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase ng-scope">Thanh to\xE1n</span></button></div></ng-switch></div></div><div class="row"><div class="col-md-12"><div class="pull-left"><button class="btn gtd-btn-default gtd-btn-small btn-grey-em" type="button" ng-click="vm.cancel();"><span class="uppercase ng-scope">Tr\u1EDF l\u1EA1i</span></button></div><div ng-if="!vm.showPaymentInfo && vm.bookingModel.paymentStatus != \'SUCCEEDED\'" class="pull-right"><button class="btn btn-green pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.viettelPaymentSubmit()"><span class="uppercase ng-scope">{{\'global.menu.account.profiles.pay\' | translate}}</span></button></div></div></div></div><!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/account/profile/booking/profile.booking.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content profile-booking"><div class="row"><div class="col-md-12"><!-- USER INFO --><div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase" data-translate="global.menu.account.profiles.booking">L\u1ECBch s\u1EED Booking</span></div></div><!-- TABS --><div class="tabbable-line"><ul class="nav nav-tabs"><li ng-class="vm.tabClass(\'tab-a\')" ng-click="vm.setSelectedTab(\'tab-a\')"><a href="#tab-a" data-toggle="tab" aria-expanded="{{vm.selectedTab == \'tab-a\'}}">Air</a></li><!-- <li ng-class="vm.tabClass(\'tab-h\')" ng-click="vm.setSelectedTab(\'tab-h\')">\n                                            <a href="#tab-h" data-toggle="tab" aria-expanded="{{vm.selectedTab == \'tab-h\'}}" > Hotel </a>\n                                        </li> --></ul><div class="tab-content"><div ng-class="vm.tabPaneClass(\'tab-a\')" id="tab-a"><div class="portlet-body"><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.code">M\xE3 \u0111\u1EB7t ch\u1ED7</label><input type="text" class="form-control" placeholder="" ng-model="vm.airBookingOptions.bookingCode"></div></div><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.status">T\xECnh tr\u1EA1ng</label><select class="form-control ng-pristine ng-valid ng-not-empty ng-touched" aria-invalid="false" style="" ng-model="vm.airBookingOptions.bookingStatus"><option value="" selected="selected"></option><option label="Confirmed" value="CONFIRMED" data-translate="apps.booking.supplierStatus.confirmed">Confirmed</option><option label="Booked" value="BOOKED" data-translate="apps.booking.supplierStatus.booked">Booked</option><option label="Cancelled" value="CANCELLED" data-translate="apps.booking.supplierStatus.cancelled">Cancelled</option><option label="Pending" value="PENDING" data-translate="apps.booking.supplierStatus.pending">Pending</option><option label="Failed" value="FAILED" data-translate="apps.booking.supplierStatus.failed">Failed</option><option label="Expired" value="EXPIRED" data-translate="apps.booking.supplierStatus.expired">Expired</option><option label="Booking In Process" value="BOOKING_ON_PROCESS" data-translate="apps.booking.supplierStatus.booking_on_process">Booking In Process</option><option label="Ticket In Process" value="TICKET_ON_PROCESS" data-translate="apps.booking.supplierStatus.ticket_on_process">Ticket In Process</option></select></div></div><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.from">T\u1EEB ng\xE0y</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#flightstartdate\').bootstrapDP(\'show\');"></i> <input class="form-control date-picker" readonly="readonly" style="background-color: unset" id="flightstartdate" gtd-date-picker is-start="true" end-id="enddate" ng-model="vm.airBookingOptions.fromDate"></div></div></div><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.To">\u0110\u1EBFn ng\xE0y</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#enddate\').bootstrapDP(\'show\');"></i> <input id="enddate" class="form-control date-picker" readonly="readonly" style="background-color: unset" gtd-date-picker ng-model="vm.airBookingOptions.toDate"></div></div></div><div class="col-sm-12"><div class="form-group"><button class="btn gtd-btn-default gtd-btn-small btn-green" type="button" ng-click="vm.doAirSearch()"><span class="ng-scope" data-translate="global.menu.account.profiles.search">T\xECm ki\u1EBFm</span></button> <button class="btn gtd-btn-default gtd-btn-small btn-grey-em" type="button" ng-click="vm.doAirReset()"><span class="ng-scope" data-translate="global.menu.account.profiles.reset">Reset</span></button><!--<div class="btn btn-green" ng-click="vm.doAirSearch()">T\xECm ki\u1EBFm</div>--><!--<div class="btn btn-grey" ng-click="vm.doAirReset()">Reset</div>--></div></div><div style="display: block; clear: both"><div class="table-responsive booking-table"><table class="table table-bordered table-middle"><thead><tr><th width="14%">{{\'global.menu.account.profiles.code\' | translate}}</th><th width="15%">{{\'global.menu.account.profiles.go\' | translate}}</th><th width="15%">{{\'global.menu.account.profiles.to\' | translate}}</th><th width="13%">{{\'global.menu.account.profiles.departure\' | translate}}</th><th width="13%">{{\'global.menu.account.profiles.return\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.status\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.paymentstatus\' | translate}}</th><th width="10%"></th></tr></thead><tbody infinite-scroll="vm.nextAirPage()" infinite-scroll-disabled="$ctrl.airBusy || vm.airBookingOptions.page >= vm.airBookingOptions.links[\'last\']"><tr ng-repeat="item in vm.airBookings" id="{{\'air\' + item.id}}"><td>{{item.bookingCode}}</td><td>{{item.fromCity}}&nbsp;({{item.fromLocationCode}})</td><td>{{item.toCity}}&nbsp;({{item.toLocationCode}})</td><td>{{item.departureDate | momentdate}}</td><td>{{item.returnDate | momentdate}}</td><td><span class="label label-{{item.supplierBookingStatus | lowercase}}" data-translate="apps.booking.supplierStatus.{{item.supplierBookingStatus | lowercase}}">{{item.supplierBookingStatus | capitalize}}</span></td><td><ng-switch on="item.paymentStatus != null"><span ng-switch-when="true" class="label label-{{item.paymentStatus | lowercase}}">{{item.paymentStatus | capitalize}}</span></ng-switch></td><td class="text-center"><div class="button-actions btn-group flex-btn-group-container"><div ng-click="vm.viewAirItem(item)"><span class="fa fa-eye"></span></div>&nbsp<div ng-click="vm.openDeleteAirBooking(item)"><span class="fa fa-trash-o"></span></div></div></td></tr><tr><td colspan="7"><a class="text-color3" ng-click="vm.openDeleteAirBooking(null, true)">{{\'global.menu.account.profiles.del-history\' | translate}}</a></td></tr><tr></tr></tbody></table></div></div></div></div><div ng-class="vm.tabPaneClass(\'tab-h\')" id="tab-h"><div class="portlet-body"><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.code\' | translate}}</label><input type="text" class="form-control" placeholder="" ng-model="vm.hotelBookingOptions.bookingCode"></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.status\' | translate}}</label><select class="form-control ng-pristine ng-valid ng-not-empty ng-touched" aria-invalid="false" style="" ng-model="vm.hotelBookingOptions.bookingStatus"><option value="" selected="selected"></option><option label="Confirmed" value="CONFIRMED">Confirmed</option><option label="Booked" value="BOOKED">Booked</option><option label="Cancelled" value="CANCELLED">Cancelled</option><option label="Pending" value="PENDING">Pending</option><option label="Failed" value="FAILED">Failed</option><option label="Expired" value="EXPIRED">Expired</option><option label="BookingOnProcess" value="BOOKING_ON_PROCESS">Booking In Process</option><option label="TicketOnProcess" value="TICKET_ON_PROCESS">Ticket In Process</option></select></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.from\' | translate}}</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#hotelstartdate\').bootstrapDP(\'show\');"></i> <input class="form-control date-picker" readonly="readonly" style="background-color: unset" id="hotelstartdate" gtd-date-picker is-start="true" end-id="hotelenddate" ng-model="vm.hotelBookingOptions.fromDate"></div></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.To\' | translate}}</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#hotelenddate\').bootstrapDP(\'show\');"></i> <input class="form-control date-picker" readonly="readonly" style="background-color: unset" id="hotelenddate" gtd-date-picker ng-model="vm.hotelBookingOptions.toDate"></div></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.add\' | translate}}</label><input type="text" class="form-control" placeholder="" ng-model="vm.hotelBookingOptions.toLocationName"></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.hotel\' | translate}}</label><input type="text" class="form-control" placeholder="" ng-model="vm.hotelBookingOptions.fromLocationName"></div></div><div class="col-sm-6"><div class="form-group"><label>&nbsp;</label><br><div class="btn btn-green" ng-click="vm.doHotelButtonSearch()" style="margin-right: 3px">{{\'global.menu.account.profiles.search\' | translate}}</div><div class="btn btn-grey" ng-click="vm.doHotelReset()" style="margin-right: 3px">{{\'global.menu.account.profiles.reset\' | translate}}</div></div></div><div style="display: block; clear: both"><div class="table-responsive booking-table"><table class="table table-bordered table-middle"><thead><tr><th width="14%">{{\'global.menu.account.profiles.code\' | translate}}</th><th width="15%">{{\'global.menu.hotel\' | translate}}</th><th width="15%">{{\'global.menu.account.profiles.add\' | translate}}</th><th width="13%">{{\'global.menu.account.profiles.checkin\' | translate}}</th><th width="13%">{{\'global.menu.account.profiles.checkout\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.status\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.paymentstatus\' | translate}}</th><th width="10%"></th></tr></thead><tbody infinite-scroll="vm.nextHotelPage()" infinite-scroll-disabled="$ctrl.htlBusy || vm.hotelBookingOptions.page >= vm.hotelBookingOptions.links[\'last\']"><tr ng-repeat="item in vm.hotelBookings" id="{{\'htl\' + item.id}}"><td>{{item.bookingCode}}</td><td>{{item.fromLocationName}}</td><td>{{item.toLocationName}}</td><td>{{item.departureDate | momentdate}}</td><td>{{item.returnDate | momentdate}}</td><td><span class="label label-{{item.supplierBookingStatus | lowercase}}">{{item.supplierBookingStatus | capitalize}}</span></td><td><ng-switch on="item.paymentStatus != null"><span ng-switch-when="true" class="label label-{{item.paymentStatus | lowercase}}">{{item.paymentStatus | capitalize}}</span></ng-switch></td><td class="text-center"><div class="button-actions btn-group flex-btn-group-container"><div ng-click="vm.viewHotelItem(item)"><span class="fa fa-eye"></span></div>&nbsp;<div ng-click="vm.openDeleteHotelBooking(item)"><span class="fa fa-trash-o"></span></div></div></td></tr><tr><td colspan="7"><a class="text-color3" ng-click="vm.openDeleteHotelBooking(null, true)">{{\'global.menu.account.profiles.del-history\' | translate}}</a></td></tr><tr></tr></tbody></table></div></div></div></div></div></div></div><!-- END INVOICE INFO --></div><!-- END Action button ->\n                        </div>\n                    </div>\n                </div>\n                <!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div>');
        $templateCache.put('app/account/profile/booking/viettel.profile.booking.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar" ng-hide="true"><!-- PORTLET MAIN --><gtd-profile-menu profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content profile-booking"><div class="row"><div class="col-md-12"><!-- USER INFO --><div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase" data-translate="global.menu.account.profiles.booking">L\u1ECBch s\u1EED Booking</span></div></div><!-- TABS --><div class="tabbable-line"><ul class="nav nav-tabs"><li ng-class="vm.tabClass(\'tab-a\')" ng-click="vm.setSelectedTab(\'tab-a\')"><a href="#tab-a" data-toggle="tab" aria-expanded="{{vm.selectedTab == \'tab-a\'}}">Air</a></li><li ng-class="vm.tabClass(\'tab-h\')" ng-click="vm.setSelectedTab(\'tab-h\')"><a href="#tab-h" data-toggle="tab" aria-expanded="{{vm.selectedTab == \'tab-h\'}}">Hotel</a></li></ul><div class="tab-content"><div ng-class="vm.tabPaneClass(\'tab-a\')" id="tab-a"><div class="portlet-body"><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.code">M\xE3 \u0111\u1EB7t ch\u1ED7</label><input type="text" class="form-control" placeholder="" ng-model="vm.airBookingOptions.bookingCode"></div></div><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.status">T\xECnh tr\u1EA1ng</label><select class="form-control ng-pristine ng-valid ng-not-empty ng-touched" aria-invalid="false" style="" ng-model="vm.airBookingOptions.bookingStatus"><option value="" selected="selected"></option><option label="Confirmed" value="CONFIRMED" data-translate="apps.booking.supplierStatus.confirmed">Confirmed</option><option label="Booked" value="BOOKED" data-translate="apps.booking.supplierStatus.booked">Booked</option><option label="Cancelled" value="CANCELLED" data-translate="apps.booking.supplierStatus.cancelled">Cancelled</option><option label="Pending" value="PENDING" data-translate="apps.booking.supplierStatus.pending">Pending</option><option label="Failed" value="FAILED" data-translate="apps.booking.supplierStatus.failed">Failed</option><option label="Expired" value="EXPIRED" data-translate="apps.booking.supplierStatus.expired">Expired</option><option label="Booking In Process" value="BOOKING_ON_PROCESS" data-translate="apps.booking.supplierStatus.booking_on_process">Booking In Process</option><option label="Ticket In Process" value="TICKET_ON_PROCESS" data-translate="apps.booking.supplierStatus.ticket_on_process">Ticket In Process</option></select></div></div><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.from">T\u1EEB ng\xE0y</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#flightstartdate\').bootstrapDP(\'show\');"></i> <input class="form-control date-picker" readonly="readonly" style="background-color: unset" id="flightstartdate" gtd-date-picker is-start="true" end-id="enddate" ng-model="vm.airBookingOptions.fromDate"></div></div></div><div class="col-sm-3"><div class="form-group"><label data-translate="global.menu.account.profiles.To">\u0110\u1EBFn ng\xE0y</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#enddate\').bootstrapDP(\'show\');"></i> <input id="enddate" class="form-control date-picker" readonly="readonly" style="background-color: unset" gtd-date-picker ng-model="vm.airBookingOptions.toDate"></div></div></div><div class="col-sm-12"><div class="form-group"><button class="btn gtd-btn-default btn-green" type="button" ng-click="vm.doAirSearch()"><span class="fa fa-search"></span></button> <button class="btn gtd-btn-default btn-grey-em" type="button" ng-click="vm.doAirReset()"><span class="fa fa-refresh"></span></button> <button class="btn gtd-btn-default gtd-btn-small btn-grey-em pull-right" type="button" ui-sref="home"><span class="ng-scope" data-translate="flight.booking.back">Tr\u1EDF v\u1EC1</span></button><!--<div class="btn btn-green" ng-click="vm.doAirSearch()">T\xECm ki\u1EBFm</div>--><!--<div class="btn btn-grey" ng-click="vm.doAirReset()">Reset</div>--></div></div><div style="display: block; clear: both"><div class="table-responsive booking-table profile-table"><table class="table table-bordered table-middle"><thead><tr><th width="14%">{{\'global.menu.account.profiles.code\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.go\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.to\' | translate}}</th><th width="13%">{{\'global.menu.account.profiles.departure\' | translate}}</th><th width="13%">{{\'global.menu.account.profiles.return\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.status\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.paymentstatus\' | translate}}</th><th width="20%"></th></tr></thead><tbody infinite-scroll="vm.nextAirPage()" infinite-scroll-disabled="$ctrl.airBusy || vm.airBookingOptions.page >= vm.airBookingOptions.links[\'last\']"><tr ng-repeat="item in vm.airBookings" id="{{\'air\' + item.id}}"><td>{{item.bookingCode}}</td><td>{{item.fromCity}}&nbsp;({{item.fromLocationCode}})</td><td>{{item.toCity}}&nbsp;({{item.toLocationCode}})</td><td>{{item.departureDate | momentdate}}</td><td>{{item.returnDate | momentdate}}</td><td><span class="label label-{{item.supplierBookingStatus | lowercase}}" data-translate="apps.booking.supplierStatus.{{item.supplierBookingStatus | lowercase}}">{{item.supplierBookingStatus | capitalize}}</span></td><td><ng-switch on="item.paymentStatus != null"><span ng-switch-when="true" class="label label-{{item.paymentStatus | lowercase}}">{{item.paymentStatus | capitalize}}</span></ng-switch></td><td class="action-buttons"><div class="button-actions btn-group flex-btn-group-container"><button ng-click="vm.viewAirItem(item)" class="btn btn-default">Chi ti\u1EBFt</button> <button ng-click="vm.openDeleteAirBooking(item)" class="btn btn-danger">X\xF3a</button><!-- <div ng-click="vm.viewAirItem(item)">\n                                                                                <span class="fa fa-eye"></span>\n                                                                            </div>&nbsp\n                                                                            <div ng-click="vm.openDeleteAirBooking(item)">\n                                                                                <span class="fa fa-trash-o"></span>\n                                                                            </div> --></div></td></tr></tbody></table><a class="text-color3" ng-click="vm.openDeleteAirBooking(null, true)">{{\'global.menu.account.profiles.del-history\' | translate}}</a></div></div></div></div><div ng-class="vm.tabPaneClass(\'tab-h\')" id="tab-h"><div class="portlet-body"><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.code\' | translate}}</label><input type="text" class="form-control" placeholder="" ng-model="vm.hotelBookingOptions.bookingCode"></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.status\' | translate}}</label><select class="form-control ng-pristine ng-valid ng-not-empty ng-touched" aria-invalid="false" style="" ng-model="vm.hotelBookingOptions.bookingStatus"><option value="" selected="selected"></option><option label="Confirmed" value="CONFIRMED">Confirmed</option><option label="Booked" value="BOOKED">Booked</option><option label="Cancelled" value="CANCELLED">Cancelled</option><option label="Pending" value="PENDING">Pending</option><option label="Failed" value="FAILED">Failed</option><option label="Expired" value="EXPIRED">Expired</option><option label="BookingOnProcess" value="BOOKING_ON_PROCESS">Booking In Process</option><option label="TicketOnProcess" value="TICKET_ON_PROCESS">Ticket In Process</option></select></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.from\' | translate}}</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#hotelstartdate\').bootstrapDP(\'show\');"></i> <input class="form-control date-picker" readonly="readonly" style="background-color: unset" id="hotelstartdate" gtd-date-picker is-start="true" end-id="hotelenddate" ng-model="vm.hotelBookingOptions.fromDate"></div></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.To\' | translate}}</label><div class="input-icon right"><i class="fa fa-calendar btn icon-centre" onclick="$(\'#hotelenddate\').bootstrapDP(\'show\');"></i> <input class="form-control date-picker" readonly="readonly" style="background-color: unset" id="hotelenddate" gtd-date-picker ng-model="vm.hotelBookingOptions.toDate"></div></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.account.profiles.add\' | translate}}</label><input type="text" class="form-control" placeholder="" ng-model="vm.hotelBookingOptions.toLocationName"></div></div><div class="col-sm-3"><div class="form-group"><label>{{\'global.menu.hotel\' | translate}}</label><input type="text" class="form-control" placeholder="" ng-model="vm.hotelBookingOptions.fromLocationName"></div></div><div class="col-sm-6"><div class="form-group"><label>&nbsp;</label><br><button class="btn gtd-btn-default btn-green" type="button" ng-click="vm.doHotelButtonSearch()"><span class="fa fa-search"></span></button> <button class="btn gtd-btn-default btn-grey-em" type="button" ng-click="vm.doHotelReset()"><span class="fa fa-refresh"></span></button> <button class="btn gtd-btn-default gtd-btn-small btn-grey-em pull-right" type="button" ui-sref="home"><span class="ng-scope" data-translate="flight.booking.back">Tr\u1EDF v\u1EC1</span></button><!-- <label>&nbsp;</label><br/> --><!-- <div class="btn btn-green" ng-click="vm.doHotelButtonSearch()" style="margin-right: 3px">{{\'global.menu.account.profiles.search\' | translate}}</div>\n                                                            <div class="btn btn-grey" ng-click="vm.doHotelReset()" style="margin-right: 3px">{{\'global.menu.account.profiles.reset\' | translate}}</div> --><!-- <button class="btn gtd-btn-default gtd-btn-small btn-grey-em pull-right" type="button" ui-sref="home">\n                                                                    <span class="ng-scope" data-translate="flight.booking.back">Tr\u1EDF v\u1EC1</span>\n                                                            </button> --></div></div><div style="display: block; clear: both"><div class="table-responsive booking-table hotel-profile-table"><table class="table table-bordered table-middle"><thead><tr><th width="14%">{{\'global.menu.account.profiles.code\' | translate}}</th><th width="15%">{{\'global.menu.hotel\' | translate}}</th><th width="15%">{{\'global.menu.account.profiles.add\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.checkin\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.checkout\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.status\' | translate}}</th><th width="10%">{{\'global.menu.account.profiles.paymentstatus\' | translate}}</th><th width="20%"></th></tr></thead><tbody infinite-scroll="vm.nextHotelPage()" infinite-scroll-disabled="$ctrl.htlBusy || vm.hotelBookingOptions.page >= vm.hotelBookingOptions.links[\'last\']"><tr ng-repeat="item in vm.hotelBookings" id="{{\'htl\' + item.id}}"><td>{{item.bookingCode}}</td><td>{{item.fromLocationName}}</td><td>{{item.toLocationName}}</td><td>{{item.departureDate | momentdate}}</td><td>{{item.returnDate | momentdate}}</td><td><span class="label label-{{item.supplierBookingStatus | lowercase}}">{{item.supplierBookingStatus | capitalize}}</span></td><td><ng-switch on="item.paymentStatus != null"><span ng-switch-when="true" class="label label-{{item.paymentStatus | lowercase}}">{{item.paymentStatus | capitalize}}</span></ng-switch></td><td class="action-buttons"><div class="button-actions btn-group flex-btn-group-container"><button ng-click="vm.viewHotelItem(item)" class="btn btn-default">Chi ti\u1EBFt</button> <button ng-click="vm.openDeleteHotelBooking(item)" class="btn btn-danger">X\xF3a</button><!-- <div ng-click="vm.viewAirItem(item)">\n                                                                                <span class="fa fa-eye"></span>\n                                                                            </div>&nbsp\n                                                                            <div ng-click="vm.openDeleteAirBooking(item)">\n                                                                                <span class="fa fa-trash-o"></span>\n                                                                            </div> --></div></td><!-- <td class="text-center">\n                                                                        <div class="button-actions btn-group flex-btn-group-container">\n                                                                            <div ng-click="vm.viewHotelItem(item)">\n                                                                                <span class="fa fa-eye"></span>\n                                                                            </div>&nbsp;\n                                                                            <div ng-click="vm.openDeleteHotelBooking(item)">\n                                                                                <span class="fa fa-trash-o"></span>\n                                                                            </div>\n                                                                        </div>\n                                                                    </td> --></tr><!-- <tr>\n                                                                    <td colspan="7">\n                                                                        <a class="text-color3"\n                                                                           ng-click="vm.openDeleteHotelBooking(null, true)"\n                                                                        >{{\'global.menu.account.profiles.del-history\' | translate}}</a>\n                                                                    </td>\n                                                                </tr> --><tr></tr></tbody></table><a class="text-color3" ng-click="vm.openDeleteHotelBooking(null, true)">{{\'global.menu.account.profiles.del-history\' | translate}}</a></div></div></div></div></div></div></div><!-- END INVOICE INFO --></div><!-- END Action button ->\n                            </div>\n                        </div>\n                    </div>\n                    <!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div>');
        $templateCache.put('app/account/profile/card/profile.card.delete.html', '<div class="portlet delete-card-dialog light no-border"><div class="portlet-title"><div class="caption"><span class="caption-subject bold text-gtd-3 uppercase">Xo\xE1 th\u1EBB thanh to\xE1n</span></div></div><div class="portlet-body"><div class="content"><span>B\u1EA1n \u0111ang th\u1EF1c hi\u1EC7n xo\xE1 th\u1EBB <span class="text-gtd-3">{{vm.cardNumbers}}</span>. Nh\u1EA5n <span class="bold">\u0110\u1ED3ng \xFD</span> \u0111\u1EC3 ho\xE0n t\u1EA5t.</span></div><div class="buttons-actions"><div class="btn btn-green" ng-click="vm.submit()"><span class="fa fa-trash"></span><span class="uppercase"> \u0110\u1ED3ng \xFD</span></div><div class="btn btn-grey" ng-click="vm.cancel()"><span class="uppercase">Hu\u1EF7</span></div></div></div></div>');
        $templateCache.put('app/account/profile/card/profile.card.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content"><div class="row"><div class="col-md-12"><!-- USER INFO --><div class="portlet new-gtd-porlet-light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">Qu\u1EA3n l\xFD th\u1EBB</span></div></div><div class="portlet-body"><form role="form" name="cardForm" class="card-form" novalidate style="margin-top: 10px"><div class="card-zone-wrapper"><div class="col-md-6 col-lg-4 no-padding-left" ng-repeat="item in vm.creditCards"><div class="inline-block"><input type="checkbox" name="itemchecked" required ng-model="item.checked"></div><div class="card-item inline-table"><div class="card-detail-zone inline-block"><!--<div class="card-close hand"><span class="fa fa-times"/> </div>--><div class="text-bold inline-block">{{item.type}}</div><div class="inline-block"><div>{{item.cardNumber | cc}}</div><div class="uppercase">{{item.fullName}}</div><div class="last-line">H\u1EBFt h\u1EA1n {{item.expireMonth}}/{{item.expireYear}}</div></div></div><div class="inline-block card-icon"><img class="inline-block" ng-src="{{\'../../../../content/images/card-\' + item.type + \'.png\'}}"></div></div></div></div><div class="no-result" ng-show="vm.creditCards.length == 0">Ch\u01B0a c\xF3 th\u1EBB n\xE0o</div><div class="row-seperator-15"></div><div class="row static-info" ng-click="$ctrl.edit()"><div class="col-sm-12"><div class="unselect-text hand color inline-block" ng-click="vm.openDeleteCards()" ng-show="vm.creditCards.length > 0">Xo\xE1 th\u1EBB</div><div class="btn btn-green inline-block" style="float:right; margin-right: 15px" ng-click="vm.openAddNewCard()"><span class="fa fa-plus-circle"></span> Th\xEAm th\u1EBB thanh to\xE1n</div></div></div></form></div></div><!-- END INVOICE INFO --></div><!-- END Action button ->\n                        </div>\n                    </div>\n                </div>\n                <!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div>');
        $templateCache.put('app/account/profile/card/profile.card.new.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content"><div class="row"><div class="col-md-12"><!-- USER INFO --><div class="portlet light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">Th\xEAm th\u1EBB thanh to\xE1n</span></div></div><div class="portlet-body"><form role="form" name="cardForm" novalidate><div class="form-body"><div class="col-sm-12 no-padding-left"><div class="form-group col-sm-6 no-padding-left"><div class="col-sm-12 no-padding-left"><span>Nh\u1EADp s\u1ED1 th\u1EBB m\u1EDBi </span><span><img src="../../../../content/images/card-VISA.png"> <img src="../../../../content/images/card-MASTER.png"> <img src="../../../../content/images/card-JCB.png"></span></div><div class="col-sm-9 no-padding-left margin-top-15"><input type="text" class="form-control" name="cardNumber" placeholder="S\u1ED1 th\u1EBB" ng-model="vm.cardModel.cardNumber" cc-number ng-maxlength="40" ng-pattern="/^[0-9]{1,40}$/" required><div class="error" ng-show="(cardForm.$submitted || cardForm.cardNumber.$touched) && cardForm.cardNumber.$invalid"><p class="help-block" ng-show="cardForm.cardNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.cardNumber.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="40"></p><p class="help-block" ng-show="cardForm.cardNumber.$error.ccNumberType" data-translate="entity.validation.card"></p></div></div><div class="col-sm-3 no-padding-left margin-top-15"><input type="text" class="form-control" name="cvNumber" placeholder="CVV" ng-model="vm.cardModel.cvNumber" ng-pattern="/^[0-9]/" ng-minlength="3" ng-maxlength="3" cc-cvc required><div class="error" ng-show="(cardForm.$submitted || cardForm.cvNumber.$touched) && cardForm.cvNumber.$invalid"><p class="help-block" ng-show="cardForm.cvNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="!cardForm.cvNumber.$error.required" data-translate="entity.validation.format"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="T\xEAn in tr\xEAn th\u1EBB" name="fullName" ng-model="vm.cardModel.fullName" ng-maxlength="240" gtd-no-special-char required><div class="error" ng-show="(cardForm.$submitted || cardForm.fullName.$touched) && cardForm.fullName.$invalid"><p class="help-block" ng-show="cardForm.fullName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.fullName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-6 no-padding-left margin-top-15"><input type="number" class="form-control" placeholder="Th\xE1ng" name="expireMonth" ng-model="vm.cardModel.expireMonth" min="1" max="12" ng-pattern="/^[0-9]/" required><div class="error" ng-show="(cardForm.$submitted || cardForm.expireMonth.$touched) && cardForm.expireMonth.$invalid"><p class="help-block" ng-show="cardForm.expireMonth.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="!cardForm.expireMonth.$error.required" data-translate="entity.validation.format"></p></div></div><div class="col-sm-6 no-padding-left margin-top-15"><input type="number" class="form-control" placeholder="N\u0103m" name="expireYear" ng-model="vm.cardModel.expireYear" min="{{vm.currentYear}}" max="{{vm.maxYear}}" ng-pattern="/^[0-9]/" required><div class="error" ng-show="(cardForm.$submitted || cardForm.expireYear.$touched) && cardForm.expireYear.$invalid"><p class="help-block" ng-show="cardForm.expireYear.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="!cardForm.expireYear.$error.required" data-translate="entity.validation.format"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><span>Billing Address </span><span class="text-color4">*</span></div><div class="col-sm-6 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="H\u1ECD" name="firstName" ng-maxlength="240" ng-model="vm.cardModel.firstName" required><div class="error" ng-show="(cardForm.$submitted || cardForm.firstName.$touched) && cardForm.firstName.$invalid"><p class="help-block" ng-show="cardForm.firstName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.firstName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-6 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="T\xEAn" name="lastName" ng-maxlength="240" ng-model="vm.cardModel.lastName" required><div class="error" ng-show="(cardForm.$submitted || cardForm.lastName.$touched) && cardForm.lastName.$invalid"><p class="help-block" ng-show="cardForm.lastName.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.lastName.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="\u0110\u1ECBa ch\u1EC9" ng-model="vm.cardModel.address" ng-maxlength="240" name="address" required><div class="error" ng-show="(cardForm.$submitted || cardForm.address.$touched) && cardForm.address.$invalid"><p class="help-block" ng-show="cardForm.address.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.address.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><select class="form-control" placeholder="Qu\u1ED1c gia" name="country" ng-model="vm.cardModel.country" required><option ng-repeat="country in vm.allCountries" value="{{country.code}}">{{country.name}}</option></select><div class="error" ng-show="(cardForm.$submitted || cardForm.country.$touched) && cardForm.country.$invalid"><p class="help-block" ng-show="cardForm.country.$error.required" data-translate="entity.validation.required"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="Th\xE0nh ph\u1ED1" name="city" ng-model="vm.cardModel.city" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.city.$touched) && cardForm.city.$invalid"><p class="help-block" ng-show="cardForm.city.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.state.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="State" name="state" ng-model="vm.cardModel.state" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.state.$touched) && cardForm.state.$invalid"><p class="help-block" ng-show="cardForm.state.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.state.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="Postal Code" name="postalCode" ng-model="vm.cardModel.postalCode" ng-maxlength="240" required><div class="error" ng-show="(cardForm.$submitted || cardForm.postalCode.$touched) && cardForm.postalCode.$invalid"><p class="help-block" ng-show="cardForm.postalCode.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.postalCode.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="240"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="Email" name="email" ng-model="vm.cardModel.email" ng-maxlength="120" gtd-email required><div class="error" ng-show="(cardForm.$submitted || cardForm.email.$touched) && cardForm.email.$invalid"><p class="help-block" ng-show="cardForm.email.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.email.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="120"></p><p class="help-block" ng-show="cardForm.email.$error.email" data-translate="entity.validation.email"></p><p class="help-block" ng-show="cardForm.email.$error.emailValidator" data-translate="entity.validation.email"></p></div></div><div class="col-sm-12 no-padding-left margin-top-15"><input type="text" class="form-control" placeholder="\u0110i\u1EC7n tho\u1EA1i" name="phoneNumber" ng-model="vm.cardModel.phoneNumber" gtd-phone required><div class="error" ng-show="(cardForm.$submitted || cardForm.phoneNumber.$touched) && cardForm.phoneNumber.$invalid"><p class="help-block" ng-show="cardForm.phoneNumber.$error.required" data-translate="entity.validation.required"></p><p class="help-block" ng-show="cardForm.phoneNumber.$error.maxlength" data-translate="entity.validation.maxlength" translate-value-max="20"></p><p class="help-block" ng-show="cardForm.phoneNumber.$error.phoneValidator" data-translate="entity.validation.phoneValidator"></p></div></div></div><div class="form-group col-sm-6"><img src="../../../../content/images/cardccv.png"></div></div><div class="form-actions right"><button type="submit" class="btn btn-green gtd-btn-medium" ng-click="vm.save(cardForm)">L\u01B0u</button> <button type="button" class="btn btn-grey gtd-btn-medium" ng-click="vm.cancel()">Hu\u1EF7</button></div></div></form></div><!-- END INVOICE INFO --></div><!-- END Action button ->\n                    </div>\n                </div>\n            </div>\n            <!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div></div>');
        $templateCache.put('app/account/profile/traveller/profile.traveller.delete.html', '<div class="portlet delete-card-dialog light no-border"><div class="portlet-title"><div class="caption"><span class="caption-subject bold text-gtd-3 uppercase">Xo\xE1 h\xE0nh kh\xE1ch</span></div></div><div class="portlet-body"><div class="content"><span>B\u1EA1n \u0111ang th\u1EF1c hi\u1EC7n xo\xE1 h\xE0nh kh\xE1ch <span class="text-gtd-3">{{vm.travellerNames}}</span>. Nh\u1EA5n <span class="bold">\u0110\u1ED3ng \xFD</span> \u0111\u1EC3 ho\xE0n t\u1EA5t.</span></div><div class="buttons-actions"><div class="btn btn-green" ng-click="vm.submit()"><span class="fa fa-trash"></span><span class="uppercase"> \u0110\u1ED3ng \xFD</span></div><div class="btn btn-grey" ng-click="vm.cancel()"><span class="uppercase">Hu\u1EF7</span></div></div></div></div>');
        $templateCache.put('app/account/profile/traveller/profile.traveller.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content"><div class="row"><div class="col-md-12"><!-- USER INFO --><div class="portlet new-gtd-porlet-light"><div class="portlet-title"><div class="caption"><span class="caption-subject font-dark bold uppercase">Danh s\xE1ch h\xE0nh kh\xE1ch \u0111\xE3 l\u01B0u</span></div></div><div class="portlet-body"><div class="table-responsive traveller-table" style="margin-top: 10px"><table class="table table-bordered fixed" style="margin-bottom: 0px;border-bottom: 0px"><thead><tr><th width="15%" data-translate="global.menu.account.profiles.gender">Gi\u1EDBi t\xEDnh</th><th width="15%" data-translate="global.menu.account.profiles.lastname">H\u1ECD</th><th width="20%" data-translate="global.menu.account.profiles.mid-name">T\xEAn \u0111\u1EC7m & T\xEAn</th><th width="15%" data-translate="global.menu.account.profiles.dateofbirth">Ng\xE0y sinh</th><th width="20%">Email</th><th width="15%"></th></tr></thead><tbody><tr ng-repeat="item in vm.customerTravellers"><td width="21%" style="width: 300px"><div class="button-actions btn-group flex-btn-group-container"><label class="mt-checkbox" ng-show="vm.profileModel.defaultTravellerId != item.id">{{item.gender + \'_1\' | lookupt :\'ota_customer\':\'passenger_gender\' | translate}} <input type="checkbox" name="itemchecked" required ng-model="item.checked"> <span></span></label><label style="padding-left: 30px" ng-show="vm.profileModel.defaultTravellerId == item.id">{{item.gender | lookupt :\'ota_customer\':\'passenger_gender\' | translate}}</label></div></td><td width="12%">{{item.surName}}</td><td width="20%">{{item.firstName}}</td><td width="15%">{{item.dob | momentdate }}</td><td width="17%">{{item.email}}</td><td width="15%" class="text-center"><div class="button-actions btn-group flex-btn-group-container"><div ng-click="vm.editItem(item)"><span class="fa fa-pencil-square-o"></span></div>&nbsp<div ng-click="vm.viewItem(item)"><span class="fa fa-eye"></span></div>&nbsp<div ng-click="vm.openDeleteTraveller(item, false)" ng-show="vm.profileModel.defaultTravellerId != item.id"><span class="fa fa-trash-o"></span></div></div></td></tr><tr><td colspan="6"><a class="text-color3 text-underlined" ng-click="vm.openDeleteTraveller(null, true)" data-translate="global.menu.account.profiles.deletepassenger">X\xF3a kh\xE1ch \u0111\xE3 ch\u1ECDn</a><div class="btn btn-green inline-block" style="float:right; margin-right: 15px" ng-click="vm.openAddNewTraveller()"><span class="fa fa-plus-circle" data-translate="global.menu.account.profiles.addpassenger">Th\xEAm h\xE0nh kh\xE1ch</span></div></td></tr><tr></tr></tbody></table></div><div class="pagination-section"><!--<uib-pagination total-items="vm.totalItems" ng-model="vm.page" ng-change="vm.transition()"--><!--class="pagination-sm" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"--><!--&gt;</uib-pagination>--><ul uib-pagination class="pagination-sm" max-size="5" items-per-page="10" total-items="vm.totalItems" ng-model="vm.page" ng-change="vm.pageChanged()"></ul></div></div></div><!-- END INVOICE INFO --></div><!-- END Action button ->\n                        </div>\n                    </div>\n                </div>\n                <!-- END PROFILE CONTENT --></div></div></div><!-- END PAGE CONTENT INNER --></div></div></div>');
        $templateCache.put('app/account/profile/traveller/profile.traveller.new.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner gtd-profile-form"><div class="row"><div class="col-md-12"><!-- BEGIN PROFILE SIDEBAR --><div class="profile-sidebar"><!-- PORTLET MAIN --><gtd-profile-menu profile-model="vm.profileModel"></gtd-profile-menu><!-- END PORTLET MAIN --></div><!-- END BEGIN PROFILE SIDEBAR --><!-- BEGIN PROFILE CONTENT --><div class="profile-content"><div class="row"><form role="form" name="profiletravellerform" novalidate><div class="col-md-12"><!-- USER INFO --><gtd-profile-user-info profile-model="vm.profileModel"></gtd-profile-user-info><!-- END USER INFO --><!-- DOC INFO --><gtd-profile-doc-info profile-model="vm.profileModel"></gtd-profile-doc-info><!-- END DOC INFO --><!-- Action button --><div ng-show="vm.profileModel.mode == \'edit\'"><button class="btn gtd-btn-default gtd-btn-small btn-green" type="submit" ng-click="vm.saveUserInfo(profiletravellerform)"><span class="uppercase ng-scope">L\u01B0u</span></button> <button class="btn gtd-btn-default gtd-btn-small btn-grey-em" type="button" ng-click="vm.cancel()"><span class="uppercase ng-scope">Hu\u1EF7</span></button></div><div ng-show="vm.profileModel.mode == \'view\'"><button class="btn gtd-btn-default btn-green" type="button" ng-click="vm.profileModel.mode = \'edit\'"><span class="uppercase ng-scope">Ch\u1EC9nh s\u1EEDa</span></button> <button class="btn gtd-btn-default gtd-btn-small btn-grey-em" type="button" ng-click="vm.cancel()"><span class="uppercase ng-scope">Tr\u1EDF l\u1EA1i</span></button></div><!-- END Action button ->\n                            </div>\n                        </div>\n                    </div>\n                    <!-- END PROFILE CONTENT --></div></form></div></div><!-- END PAGE CONTENT INNER --></div></div></div></div>');
        $templateCache.put('app/account/reset/finish/reset.finish.html', '<div><div class="row"><div class="col-md-4 col-md-offset-2"><h2 data-translate="reset.finish.title">Reset password</h2><div class="alert alert-danger" data-translate="reset.finish.messages.keymissing" ng-show="vm.keyMissing"><strong>The password reset key is missing.</strong></div><div class="" ng-hide="vm.success || vm.keyMissing"><p data-translate="reset.finish.messages.info">Choose a new password</p></div><div class="alert alert-danger" ng-show="vm.error"><p data-translate="reset.finish.messages.error">Your password couldn\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class="" ng-show="vm.success"><p><!--<div>--> H\u1EC7 th\u1ED1ng \u0111\xE3 c\u1EADp nh\u1EADt m\u1EADt kh\u1EA9u th\xE0nh c\xF4ng cho t\xE0i kho\u1EA3n qu\u1EA3n l\xFD d\u1ECBch v\u1EE5 c\u1EE7a Qu\xFD kh\xE1ch t\u1EA1i Gotadi.com. Qu\xFD kh\xE1ch c\xF3 th\u1EC3 th\u1EF1c hi\u1EC7n \u0111\u0103ng nh\u1EADp v\xE0o h\u1EC7 th\u1ED1ng t\u1EA1i <a class="gtd-text-color3" href="" ng-click="vm.login()">\u0111\xE2y.</a><!--</div>--></p><div>H\xE2n h\u1EA1nh \u0111\u01B0\u1EE3c ph\u1EE5c v\u1EE5 Qu\xFD kh\xE1ch.</div><div>Tr\xE2n tr\u1ECDng,</div><div>Gotadi.</div></div><div class="alert alert-danger" ng-show="vm.doNotMatch" data-translate="global.messages.error.dontmatch">The password and its confirmation do not match!</div><div ng-hide="vm.keyMissing"><form ng-show="!vm.success" name="form" role="form" novalidate ng-submit="vm.finishReset()" show-validation><div class="form-group"><label class="control-label" for="password" data-translate="global.form.newpassword">New password</label><input type="password" class="form-control" id="password" name="password" placeholder="{{\'global.form.newpassword.placeholder\' | translate}}" ng-model="vm.resetAccount.password" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required><div ng-show="form.password.$dirty && form.password.$invalid"><p class="help-block" ng-show="form.password.$error.required" data-translate="global.messages.validate.newpassword.required">Your password is required.</p><p class="help-block" ng-show="form.password.$error.minlength" data-translate="global.messages.validate.newpassword.minlength">Your password is required to be at least 8 characters.</p><p class="help-block" ng-show="form.password.$error.maxlength" data-translate="global.messages.validate.newpassword.maxlength">Your password cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.password.$error.pattern && !form.password.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div><password-strength-bar password-to-check="vm.resetAccount.password"></password-strength-bar></div><div class="form-group"><label class="control-label" for="confirmPassword" data-translate="global.form.confirmpassword">New password confirmation</label><input type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="{{\'global.form.confirmpassword.placeholder\' | translate}}" ng-model="vm.confirmPassword" ng-minlength="8" ng-maxlength="50" ng-pattern="vm.passwordpattern" required><div ng-show="form.confirmPassword.$dirty && form.confirmPassword.$invalid"><p class="help-block" ng-show="form.confirmPassword.$error.required" data-translate="global.messages.validate.confirmpassword.required">Your password confirmation is required.</p><p class="help-block" ng-show="form.confirmPassword.$error.minlength" data-translate="global.messages.validate.confirmpassword.minlength">Your password confirmation is required to be at least 8 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.maxlength" data-translate="global.messages.validate.confirmpassword.maxlength">Your password confirmation cannot be longer than 50 characters.</p><p class="help-block" ng-show="form.confirmPassword.$error.pattern && !form.confirmPassword.$error.minlength" data-translate="global.messages.validate.newpassword.pattern">Your password must contain at least 1 character & 1 number.</p></div></div><button type="submit" ng-disabled="form.$invalid" class="btn btn-green-em gtd-btn-medium margin-bottom-30" data-translate="reset.finish.form.button">Reset Password</button></form></div></div></div></div>');
        $templateCache.put('app/account/reset/request/reset.request.html', '<div class="container"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="row"><div class="col-md-8 col-md-offset-2 gtd-form"><div class="form-title" data-translate="reset.request.title" ng-show="vm.success != \'OK\'">Reset your password</div><div class="form-title" ng-show="vm.success == \'OK\'">M\u1EADt kh\u1EA9u m\u1EDBi \u0111\xE3 \u0111\u01B0\u1EE3c g\u1EEDi \u0111\u1EBFn email c\u1EE7a b\u1EA1n</div><div class="alert alert-danger" data-translate="reset.request.messages.notfound" ng-show="vm.errorEmailNotExists"><strong>E-Mail address isn\'t registered!</strong> Please check and try again.</div><div class="" ng-hide="vm.success"><p data-translate="reset.request.messages.info">Enter the e-mail address you used to register.</p></div><div class="" ng-show="vm.success == \'OK\'"><p>Ch\xFAng t\xF4i \u0111\xE3 g\u1EEDi m\u1ED9t email \u0111\u1EBFn <span class="text-color3">{{vm.resetAccount.email}}</span> v\u1EDBi m\u1ED9t li\xEAn k\u1EBFt \u0111\u1EC3 \u0111\u1EB7t l\u1EA1i m\u1EADt kh\u1EA9u c\u1EE7a b\u1EA1n.<br>N\u1EBFu b\u1EA1n c\xF3 th\u1EAFc m\xE1c n\xE0o v\u1EC1 Gotadi.com, xin vui l\xF2ng li\xEAn h\u1EC7 b\u1ED9 ph\u1EADn Ch\u0103m s\xF3c kh\xE1ch h\xE0ng c\u1EE7a Gotadi v\u1EDBi <b>Hotline 1900 9002</b></p><p>Ch\u01B0a nh\u1EADn \u0111\u01B0\u1EE3c email. <span class="hand text-color3 text-underlined" ng-click="vm.refreshPage()">Click</span></p></div><form ng-show="!vm.success" name="form" role="form" novalidate ng-submit="vm.requestReset()" show-validation><div class="form-group"><label class="control-label" for="email" data-translate="global.form.email">E-mail</label><input type="email" gtd-email class="form-control" id="email" name="email" placeholder="{{\'global.form.email.placeholder\' | translate}}" ng-model="vm.resetAccount.email" ng-minlength="5" ng-maxlength="100" required><div ng-show="form.email.$dirty && form.email.$invalid"><p class="help-block" ng-show="form.email.$error.required" data-translate="global.messages.validate.email.required">Your e-mail is required.</p><p class="help-block" ng-show="form.email.$error.email || form.email.$error.emailValidator" data-translate="global.messages.validate.email.invalid">Your e-mail is invalid.</p><p class="help-block" ng-show="form.email.$error.minlength" data-translate="global.messages.validate.email.minlength">Your e-mail is required to be at least 5 characters.</p><p class="help-block" ng-show="form.email.$error.maxlength" data-translate="global.messages.validate.email.maxlength">Your e-mail cannot be longer than 100 characters.</p></div></div><button type="submit" ng-disabled="form.$invalid" class="btn btn-green-em gtd-btn-medium" data-translate="reset.request.form.button">Reset</button></form></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/account/social/directive/social.html', '<form action="{{ providerURL }}" method="POST"><button type="submit" class="connectButton btn btn-block jh-btn-social jh-btn-{{ provider }}" style="max-width: 220px"><span class="fa fa-facebook" ng-show="label === \'Facebook\'" style="margin-right: 5px"></span> <span class="fa fa-google-plus" ng-show="label === \'Google\'" style="margin-right: 5px"></span> <span data-translate="social.btnLabel" translate-values="{ label: label }">Sign in with {{ label }}</span></button> <input name="scope" type="hidden" value="{{\xA0providerSetting }}"> <input name="_csrf" type="hidden" value="{{\xA0csrf }}"></form>');
        $templateCache.put('app/components/flight/home/flight-home-search-header.html', '<div class="mainFormSearch"><div class="flight-home-search-header portlet light"><div class="tabSelect" ng-if="!$ctrl.isSignleLayout"><ul class="nav nav-tab"><li class="item plane active"><a href="#flight" data-toggle="tab" aria-expanded="true" id="flight_tab"><span data-translate="home.flight">V\xE9 m\xE1y bay</span></a></li><li class="item hotel"><a href="#hotel" data-toggle="tab" aria-expanded="false" id="hotel_tab">{{\'home.hotel\' | translate}}</a></li></ul></div><div class="porlet-body form"><form role="form" name="airSearchForm" novalidate><input type="hidden" ng-model="$ctrl.searchOptions.page"> <input type="hidden" ng-model="$ctrl.searchOptions.size"><div class="form-body"><div class="groupItem"><div class="row"><div class="col-sm-6 col-xs-6 flight-header-line"><div class="dtype-flights"><div class="item-flights"><input type="radio" id="dtype2" name="dtype" ng-model="$ctrl.searchOptions.dtype" value="domestic" ng-click="$ctrl.switchDtype();"><label id="domestic" for="dtype2"><span data-translate="home.Domestic">N\u1ED9i \u0110\u1ECBa</span></label></div><div class="item-flights" ng-if="$ctrl.checkShowInternationalFlight()"><input type="radio" id="dtype1" name="dtype" value="international" ng-model="$ctrl.searchOptions.dtype" ng-click="$ctrl.switchDtype();"><label id="international" for="dtype1"><span data-translate="home.inter">Qu\u1ED1c t\u1EBF</span></label></div></div></div><div class="col-sm-6 col-xs-6 radio-flights"><div class="selectTypeFlight" ng-init="$ctrl.searchOptions.searchType=\'oneway\'"><div class="item-flights"><input type="radio" id="radio1" name="radios" value="oneway" ng-model="$ctrl.searchOptions.searchType"><label id="one-way" class="switch-roundtrip" for="radio1"><span data-translate="home.oneway">M\u1ED9t chi\u1EC1u</span></label></div><div class="item-flights"><input type="radio" id="radio2" name="radios" value="roundtrip" ng-model="$ctrl.searchOptions.searchType"><label id="round-trip" class="switch-roundtrip" for="radio2"><span data-translate="home.roundTrip">Kh\u1EE9 h\u1ED3i</span></label></div></div></div></div></div><div class="groupItem groupItem2 selectFlight"><div class="row"><div class="col-sm-5 col-xs-6 item-location-flight"><div class="itemSelectD"><label><span class="labelSelect from" data-translate="home.from">\u0110i\u1EC3m \u0111i</span></label><div class="input-icon"><i class="fa fa-map-marker"></i><select id="fromAirPort" name="fromAirPort" ng-model="$ctrl.searchOptions.fromAirPort" gtd-select2 gtd-search-options="$ctrl.searchOptions" gtd-direction="\'FROM\'" gtd-mode="$ctrl.searchOptions.dtype" required autocomplete="off" class="form-control fromAirPort select2" style="width: 100%" ng-if="$ctrl.searchOptions.dtype==\'domestic\'" data-placeholder="{{\'flight.plchdr.choosedepart\' | translate}}"></select><input type="text" placeholder="{{\'flight.plchdr.choosedepart\' | translate}}" ng-model="$ctrl.searchOptions.fromAirPort" class="fromAirPort form-control" uib-typeahead="o.code as (o.city + \' (\' + o.code  + \' - \' + o.name + \')\' + \', \' + o.country ) for o in $ctrl.searchAirports($viewValue, \'FROM\')" typeahead-input-formatter="$ctrl.formatLabel($model)" typeahead-loading="loadingLocations" typeahead-no-results="noResults" typeahead-editable="false" required autocomplete="off" ng-if="$ctrl.searchOptions.dtype!=\'domestic\'"></div></div></div><div class="col-sm-2 no-margin-bottom hidden-xs" ng-switch="$ctrl.searchOptions.dtype == \'domestic\'"><label class="display-none-sm">&nbsp;</label><span style="text-align: center" ng-switch-when="true"><a class="" gtd-swap-select2 gtd-from="fromAirPort" gtd-to="toAirPort" ng-if="!$ctrl.iOS"><div class="chuyenchuyen" valuechuyen="1"><img src="../../../content/images/switch.png"></div></a></span><span style="text-align: center" ng-switch-when="false" ng-click="$ctrl.switchTypeAhead();" ng-if="!$ctrl.iOS"><a class="" gtd-from="fromAirPortInt" gtd-to="toAirPortInt"><div class="chuyenchuyen" valuechuyen="1"><img src="../../../content/images/switch.png"></div></a></span><span style="text-align: center" ng-click="$ctrl.switchTypeAhead();" ng-if="$ctrl.iOS"><a class="" gtd-from="fromAirPortInt" gtd-to="toAirPortInt"><div class="chuyenchuyen" valuechuyen="1"><img src="../../../content/images/switch.png"></div></a></span></div><div class="col-sm-5 col-xs-6 item-location-flight"><div class="itemSelectD"><label><span class="labelSelect to" data-translate="home.to">\u0110i\u1EC3m \u0111\u1EBFn</span></label><div class="input-icon"><i class="fa fa-map-marker"></i><select id="toAirPort" name="toAirPort" ng-model="$ctrl.searchOptions.toAirPort" gtd-select2 gtd-search-options="$ctrl.searchOptions" gtd-direction="\'TO\'" gtd-mode="$ctrl.searchOptions.dtype" required autocomplete="off" class="form-control fromAirPort select2" style="width: 100%" ng-if="$ctrl.searchOptions.dtype==\'domestic\'" data-placeholder="{{\'flight.plchdr.choosereturn\' | translate}}"></select><input type="text" name="toAirPort" id="toAirPortInt" ng-model="$ctrl.searchOptions.toAirPort" placeholder="{{\'flight.plchdr.choosereturn\' | translate}}" uib-typeahead="o.code as (o.city + \' (\' + o.code  + \' - \' + o.name + \')\' + \', \' + o.country ) for o in $ctrl.searchAirports($viewValue, \'TO\')" typeahead-input-formatter="$ctrl.formatLabel($model)" typeahead-loading="loadingLocations" typeahead-no-results="noResults" typeahead-editable="false" ng-if="$ctrl.searchOptions.dtype!=\'domestic\'" required autocomplete="off" class="form-control toAirPort"></div></div></div></div></div><div class="groupItem groupItem2"><div class="selectDate"><div class="row"><div class="col-sm-6 col-xs-6 header-date-box-home"><div class="forName"><label><span data-translate="home.depart">Ng\xE0y \u0111i</span></label></div><div class="input-icon"><div class="calendar-float-right" onclick="$(\'#departureDate_\').datepicker(\'show\');"><i class="fa fa-calendar fa-2x"></i></div><input id="departureDate_" class="form-control" size="16" type="text" value="" ng-model="$ctrl.searchOptions.departureDate" required readonly="readonly" gtd-dual-date-picker end-id="returnDate_" is-start="true"></div></div><div class="col-sm-6 col-xs-6 header-date-box-home"><div class="forName"><label><span data-translate="home.return">Ng\xE0y v\u1EC1</span></label></div><div class="input-icon" ng-show="$ctrl.searchOptions.searchType!=\'oneway\'"><div class="calendar-float-right" onclick="$(\'#returnDate_\').datepicker(\'show\');" ng-disabled="$ctrl.searchOptions.searchType==\'oneway\'"><i class="fa fa-calendar fa-2x"></i></div><input id="returnDate_" readonly="readonly" start-id="departureDate_" ng-disabled="$ctrl.searchOptions.searchType==\'oneway\'" class="form-control" size="16" type="text" value="" ng-model="$ctrl.searchOptions.returnDate" ng-required="!($ctrl.searchOptions.searchType==\'oneway\')" gtd-dual-date-picker></div></div></div></div></div><div class="groupItem groupItem2 tk-border"><div class="row" gtd-passenger-quantity gtd-adult-qtt="$ctrl.adultQtt" gtd-child-qtt="$ctrl.childQtt" gtd-infant-qtt="$ctrl.infantQtt" gtd-cur-adult-qtt="$ctrl.searchOptions.adultNo" gtd-cur-child-qtt="$ctrl.searchOptions.childrenNo" gtd-cur-infant-qtt="$ctrl.searchOptions.newBornNo" search-options="$ctrl.searchOptions" gtd-qtt="$ctrl.gtdQtt"><div class="col-sm-4 col-xs-4 colItemSelect"><div class="selectNumber adultSelect"><label class="icon-adult"><span data-translate="home.adults">Ng\u01B0\u1EDDi l\u1EDBn:</span></label><select class="form-control hide" id="fAdtQttIdx"><option value="{{item}}" ng-selected="$ctrl.searchOptions.adultNo==item" ng-repeat="item in $ctrl.adultQtt">{{item}} kh\xE1ch</option></select><div class="groupSelect" ng-model="$ctrl.searchOptions.adultNo" id="adultNo"><div class="btn-select reduced"><i class="fa fa-minus"></i></div><span class="numberItem">{{$ctrl.searchOptions.adultNo}}</span><div class="btn-select increase"><i class="fa fa-plus"></i></div></div></div></div><div class="col-sm-4 col-xs-4 colItemSelect"><div class="selectNumber childrenSelect"><label class="icon-children"><span data-translate="home.childrens">Tr\u1EBB em</span><old-s>(2 - 12 <span data-translate="home.yrs">Tu\u1ED5i</span> )</old-s></label><select class="form-control hide" id="fChdQttIdx"><option value="{{item}}" ng-selected="$ctrl.searchOptions.childrenNo==item" ng-repeat="item in $ctrl.childQtt">{{item}} kh\xE1ch</option></select><div class="groupSelect" ng-model="$ctrl.searchOptions.childrenNo" id="childrenNo"><div class="btn-select reduced"><i class="fa fa-minus"></i></div><span class="numberItem">{{$ctrl.searchOptions.childrenNo}}</span><div class="btn-select increase"><i class="fa fa-plus"></i></div></div></div></div><div class="col-sm-4 col-xs-4 colItemSelect"><div class="selectNumber infSelect"><label class="icon-baby"><span data-translate="home.infants">Em b\xE9</span><old-s>(&#x3C;2 <span data-translate="home.yrs">Tu\u1ED5i</span> )</old-s></label><select class="form-control hide" id="fInfQttIdx"><option value="{{item}}" ng-selected="$ctrl.searchOptions.newBornNo==item" ng-repeat="item in $ctrl.infantQtt">{{item}} kh\xE1ch</option></select><div class="groupSelect" id="newBornNo"><div class="btn-select reduced"><i class="fa fa-minus"></i></div><span class="numberItem">{{$ctrl.searchOptions.newBornNo}}</span><div class="btn-select increase"><i class="fa fa-plus"></i></div></div></div></div></div></div><div class="groupItem groupItem2" ng-if="!($ctrl.searchOptions.dtype == \'international\')" style="overflow: hidden"><div class="airlines"><ul class="select-airlines"><li class="VJ" ng-click="selectAirline(\'VJ\')"><div class="checkbox-btn checked"><input type="checkbox" class="itemAirline" value="vietjet" id="vietjet" name="search_airline[]" class="img-fluid" checked="checked"><div class="itemAirline" for="vietjet"><img src="content/images/vietjet.svg" alt="Vietjet Airlines" style="height:18px" class="img-fluid"></div></div></li><li class="VN" ng-click="selectAirline(\'VN\')"><div class="checkbox-btn checked"><input type="checkbox" class="itemAirline" value="vna" id="vna" name="search_airline[]" checked="checked"><div class="itemAirline" for="vna"><img src="content/images/VN.png" alt="VietNam Airlines" style="height:18px" class="img-fluid vna"></div></div></li><li class="QH" ng-click="selectAirline(\'QH\')"><div class="checkbox-btn checked"><input type="checkbox" class="itemAirline" value="bamboo" id="bamboo" name="search_airline[]" checked="checked"><div class="itemAirline" for="vna"><img src="content/images/QH.gif" alt="Bamboo Airlines" style="height:25px" class="img-fluid"></div></div></li></ul><script type="text/javascript">$(\'.select-airlines .checkbox-btn\').on(\'click\', function(){\n\t\t\t\t\t\t\t\t\t\tif($(this).hasClass("checked")) {\n\t\t\t\t\t\t\t\t\t\t\t$(this).removeClass("checked");\n\t\t\t\t\t\t\t\t\t\t\t$(this).find(\'input\').prop(\'checked\', false);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t$(this).addClass("checked");\n\t\t\t\t\t\t\t\t\t\t\t$(this).find(\'input\').prop(\'checked\', true);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});</script></div></div><div class="button-zone button-zone-flight history-button-zone"><button class="btn gtd-btn-default gtd-btn-large" type="submit" ng-click="$ctrl.doSearchImpl()" ng-disabled="airSearchForm.$invalid"><span class="uppercase fa fa-search"></span> <span class="uppercase btnSearch" data-translate="home.find">T\xECm chuy\u1EBFn bay</span></button></div><div class="btn-account" ng-if="!$ctrl.liteEmbed"><div class="button-zone button-zone-flight history-button-zone"><a ui-sref="user-profile-booking" class="btn">Qu\u1EA3n l\xFD booking <i class="fa fa-ellipsis-v"></i></a></div></div></div></form></div></div></div>');
        $templateCache.put('app/components/hotel/home/hotel-home-search-header.html', '<script type="text/ng-template" id="customTemplate.html"><a>\n        <span class="fa fa-h-square" ng-if="match.model.type==\'HOTEL\'"></span>\n        <span class="fa fa-location-arrow" ng-if="match.model.type==\'DESTINATION\'"></span>\n        <span ng-bind-html="match.label | uibTypeaheadHighlight:query"></span>\n        <span ng-if="match.model.famous">\n            <button type="button" class="btn btn-default btn-xs btn-info">{{\'hotel.search.result.popular\' | translate}}</button>\n        </span>\n    </a></script><div class="mainFormSearch"><div class="hotel-home-search-header hotel-home-search-header-custom portlet light"><div class="tabSelect" ng-if="!$ctrl.isSignleLayout"><ul class="nav nav-tab"><li class="item plane"><a href="#flight" data-toggle="tab" aria-expanded="false"><span data-translate="home.flight">V\xE9 m\xE1y bay</span></a></li><li class="item hotel active"><a href="#hotel" data-toggle="tab" aria-expanded="true">{{\'home.hotel\' | translate }}</a></li></ul></div><div class="porlet-body form"><form role="form" name="hotelSearchForm" novalidate><div class="form-body"><div class="groupItem selectHotel"><label><span class="labelSelect" data-translate="hotel.search.header.name">\u0110i\u1EC3m \u0111\u1EBFn/ T\xEAn kh\xE1ch s\u1EA1n</span></label><div class="input-icon input-icon-buttom-hotel"><input type="text" class="form-control" ng-model="$ctrl.searchOptions.hotelSearchFilter.hotel_code" uib-typeahead="o.code as (o.name) for o in $ctrl.searchDestinations($viewValue)" typeahead-input-formatter="$ctrl.formatLabel($model)" typeahead-loading="loadingDestinations" typeahead-no-results="noResults" typeahead-editable="false" typeahead-template-url="customTemplate.html" ng-click="$ctrl.onFocusInputName()" ng-blur="$ctrl.onBlurInputName()" typeahead-on-select="$ctrl.typeAHeadOnSelect($item, $model, $label, $event)" required autocomplete="off" placeholder="{{\'hotel.plchdr.chooseplace\' | translate}}"><div ng-if="loadingDestinations" class="hotel-ghost-loading hotel-border-radius"><div class="wrapper"><div class="wrapper-cell"><div class="text"><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div><div class="text-line"></div></div></div></div></div></div></div><div class="groupItem groupItem-hotel"><div class="selectDate"><div class="row"><div class="col-sm-6 col-xs-6 header-date-box-home"><div class="forName"><label data-translate="hotel.search.header.checkindate"></label></div><div class="input-icon"><div class="iconDateTime" onclick="$(\'#checkindate\').datepicker(\'show\');"></div><input id="checkindate" class="form-control" size="16" type="text" gtd-dual-date-picker end-id="checkoutdate" is-start="true" max-date="hotel" min-date="hotel" readonly="readonly" required ng-model="$ctrl.searchOptions.hotelSearchFilter.checkin_date"></div></div><div class="col-sm-6 col-xs-6 header-date-box-home"><div class="forName"><label data-translate="hotel.search.header.checkoutdate"></label></div><div class="input-icon"><div class="iconDateTime" onclick="$(\'#checkoutdate\').datepicker(\'show\');"></div><input id="checkoutdate" class="form-control" size="16" type="text" gtd-dual-date-picker start-id="checkindate" readonly="readonly" required min-date="hotel" max-date="hotel" ng-model="$ctrl.searchOptions.hotelSearchFilter.checkout_date"></div></div></div></div></div><div class="groupItem groupItem-hotel"><div class="selectNumber label-outline grey padding-5" ng-click="$ctrl.openChooseRoomDetail();"><label class="numbRoom">{{\'hotel.search.header.room\' | translate}} &nbsp; <strong>{{$ctrl.paxDetail.roomQuantity}}</strong></label><label class="icon-adult">{{\'hotel.search.header.adult\' | translate}} &nbsp; <strong>{{$ctrl.paxDetail.adultQuantity}}</strong></label><label class="icon-children">{{\'hotel.search.header.children \'| translate}} &nbsp; <strong>{{$ctrl.paxDetail.childQuantity}}</strong></label><span class="fa fa-pencil-square-o pull-right padding-top-5"></span></div></div><div class="groupItem2 groupItem2-buttom" style="overflow: hidden"><div class="button-zone"><button class="btn gtd-btn-default gtd-btn-large" type="submit" ng-click="$ctrl.doSearchImpl()" ng-disabled="hotelSearchForm.$invalid"><span class="uppercase fa fa-search"></span> <span class="" data-translate="hotel.search.home.find">T\xECm kh\xE1ch s\u1EA1n</span></button></div></div><div class="btn-account" ng-if="!$ctrl.liteEmbed"><div class="button-zone button-zone-flight history-button-zone"><a ui-sref="user-profile-booking" class="btn">Qu\u1EA3n l\xFD booking <i class="fa fa-ellipsis-v"></i></a></div></div></div></form></div></div></div>');
        $templateCache.put('app/mobile/flights/booking/mobile.booking.result.html', '<div>Thanh to\xE1n th\xE0nh c\xF4ng</div>');
        $templateCache.put('app/mobile/flights/booking/mobile.flights.booking.payment.3d.auth.external.html', '<!--<div class="modal-header">--><!--<h3 class="modal-title">--><!--<div class="btn btn-primary">Close</div>--><!--</h3>--><!--</div>--><div class="modal-content" width="800px" height="630px"><div class="modal-body-video"><div>Please wait while we process your request. Do not click the Back button or refresh the page. Otherwise, this transaction may be interrupted.</div><form id="newibe_PAEnrollForm_form" name="PAEnrollForm" action="{{trustSrc(vm.givenUrl)}}" method="post" target="paInlineFrame" hidden="hidden"><input type="hidden" name="PaReq" value="{{vm.paReq}}"> <input type="hidden" name="TermUrl" value="{{vm.termUrl}}"> <input type="hidden" name="MD" value="{{vm.md}}"></form><iframe width="800px" height="600px" id="paInlineFrame" name="paInlineFrame"></iframe><!--"https://www.youtube.com/embed/3O1_3zBUKM8"--></div></div><!--<div class="modal-footer">--><!--<button class="btn btn-primary" ng-click="ok()">OK</button>--><!--<button class="btn btn-warning" ng-click="cancel()">Cancel</button>--><!--</div>-->');
        $templateCache.put('app/mobile/flights/booking/mobile.flights.booking.payment.html', '<div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div><img src="content/images/logo-tet.svg" alt="logo" style="display: block; margin-left: auto; margin-right: auto"></div><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-md-8 booking-wrapper"><form action="#" role="form" name="bookingForm" novalidate><gtd-booking-payment payment-model="vm.paymentModel" booking-model="vm.bjson"></gtd-booking-payment><div class="action-bar"><div class="buttons-zone"><div class="inline-block-zone"><!--<span class="clickable-color1">--><!--<span class="fa fa-angle-left"></span>--><!--<span data-translate="flight.booking.back"></span>--><!--</span>--></div><button class="btn gtd-btn-default gtd-btn-large pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.doConfirm(bookingForm)"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></form></div><div class="col-md-4 booking-summary-wrapper"><gtd-flight-booking-summary payment-model="vm.paymentModel" booking-model="vm.bookingModel" show-coupon="false"></gtd-flight-booking-summary><gtd-flight-booking-summary-details booking-model="vm.bookingModel" payment-model="vm.paymentModel" show-coupon="false"></gtd-flight-booking-summary-details><!-- <gtd-hotel-booking-summary booking-model="vm.bookingModel" bjson="vm.bjson"\n                        selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct"\n                        selected-hotel-room="vm.selectedHotelRoom" payment-model="vm.paymentModel" show-coupon="true">\n                    </gtd-hotel-booking-summary>\n\n                    <gtd-hotel-booking-summary-details booking-model="vm.bookingModel" bjson="vm.bjson"\n                        selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct"\n                        selected-hotel-room="vm.selectedHotelRoom" payment-model="vm.paymentModel" show-coupon="true">\n                    </gtd-hotel-booking-summary-details> --></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/mobile/flights/booking/mobile.hotels.booking.payment.html', '<div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div><img src="content/images/logo-tet.svg" alt="logo" style="display: block; margin-left: auto; margin-right: auto"></div><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-md-8 booking-wrapper"><form action="#" role="form" name="bookingForm" novalidate><gtd-booking-payment payment-model="vm.paymentModel" booking-model="vm.bjson"></gtd-booking-payment><div class="action-bar"><div class="buttons-zone"><div class="inline-block-zone"><!--<span class="clickable-color1">--><!--<span class="fa fa-angle-left"></span>--><!--<span data-translate="flight.booking.back"></span>--><!--</span>--></div><button class="btn gtd-btn-default gtd-btn-large pull-right" type="button" ng-disabled="bookingForm.$invalid" ng-click="vm.doConfirm(bookingForm)"><!--<span class="uppercase fa fa-search">&nbsp;--> <span class="uppercase ng-scope" data-translate="flight.booking.next">T\xECm</span></button></div></div></form></div><div class="col-md-4 booking-summary-wrapper"><gtd-hotel-booking-summary booking-model="vm.bookingModel" bjson="vm.bjson" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" payment-model="vm.paymentModel" show-coupon="false"></gtd-hotel-booking-summary><gtd-hotel-booking-summary-details booking-model="vm.bookingModel" bjson="vm.bjson" selected-hotel="vm.selectedHotel" selected-hotel-product="vm.selectedHotelProduct" selected-hotel-room="vm.selectedHotelRoom" payment-model="vm.paymentModel" show-coupon="false"></gtd-hotel-booking-summary-details></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/mobile/flights/booking/mobile.qr.booking.payment.html', '<div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-md-8 booking-wrapper"><form action="#" role="form" name="bookingForm" novalidate><div id="vnpay_modal" class="vnpay_modal"></div></form></div><div class="col-md-4 booking-summary-wrapper" ng-if="vm.orderType === \'HOTEL\'"><gtd-hotel-booking-summary payment-model="vm.paymentModel" bjson="vm.bjson" booking-model="vm.bookingModel" show-coupon="false" show-price-coupon="true"></gtd-hotel-booking-summary><gtd-hotel-booking-summary-details booking-model="vm.bookingModel" bjson="vm.bjson" payment-model="vm.paymentModel" show-coupon="false" show-price-coupon="true"></gtd-hotel-booking-summary-details></div><div class="col-md-4 booking-summary-wrapper" ng-if="vm.orderType === \'FLIGHT\'"><gtd-flight-booking-summary payment-model="vm.paymentModel" bjson="vm.bjson" booking-model="vm.bookingModel" show-coupon="false" show-price-coupon="true"></gtd-flight-booking-summary><gtd-flight-booking-summary-details bjson="vm.bjson" booking-model="vm.bookingModel" payment-model="vm.paymentModel" show-coupon="false" show-price-coupon="true"></gtd-flight-booking-summary-details></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
        $templateCache.put('app/mobile/flights/booking/vnpay.qr.payment.html', '<div class="container" ng-if="!vm.timeout"><!-- BEGIN PAGE CONTENT INNER --><div><img src="content/images/logo-tet.svg" alt="logo" style="display: block; margin-left: auto; margin-right: auto"></div><div class="page-content-inner"><div class="search-page search-content-3"><div class="row"><div class="col-md-8 booking-wrapper"><form action="#" role="form" name="bookingForm" novalidate><div id="vnpay_modal" class="vnpay_modal"></div></form></div><div class="col-md-4 booking-summary-wrapper" ng-if="vm.orderType === \'HOTEL\'"><gtd-hotel-booking-summary payment-model="vm.paymentModel" bjson="vm.bjson" booking-model="vm.bookingModel" show-coupon="false" show-price-coupon="true"></gtd-hotel-booking-summary><gtd-hotel-booking-summary-details booking-model="vm.bookingModel" bjson="vm.bjson" payment-model="vm.paymentModel" show-coupon="false" show-price-coupon="true"></gtd-hotel-booking-summary-details></div><div class="col-md-4 booking-summary-wrapper" ng-if="vm.orderType === \'FLIGHT\'"><gtd-flight-booking-summary bjson="vm.bjson" payment-model="vm.paymentModel" booking-model="vm.bookingModel" show-coupon="false" show-price-coupon="true"></gtd-flight-booking-summary><gtd-flight-booking-summary-details bjson="vm.bjson" booking-model="vm.bookingModel" payment-model="vm.paymentModel" show-coupon="false" show-price-coupon="true"></gtd-flight-booking-summary-details></div></div></div></div><!-- END PAGE CONTENT INNER --></div>');
    }]);
})();